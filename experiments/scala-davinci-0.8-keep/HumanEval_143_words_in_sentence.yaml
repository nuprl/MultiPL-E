name: HumanEval_143_words_in_sentence
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a string representing a sentence,\n    // the sentence contains\
  \ some words separated by a space,\n    // and you have to return a string that\
  \ contains the words from the original sentence,\n    // whose lengths are prime\
  \ numbers,\n    // the order of the words in the new string should be the same as\
  \ the original one.\n    // Example 1:\n    // Input: sentence = \"This is a test\"\
  \n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence = \"lets go for\
  \ swimming\"\n    // Output: \"go for\"\n    // Constraints:\n    // * 1 <= len(sentence)\
  \ <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
  This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
  \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no\
  \ place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
  Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
  go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\
  \")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n\
  }\n"
completions: ['        sentence.split(" ").filter(x => prime(x.length)).mkString("
    ")', "        val l = sentence.split(\" \").filter(w => isPrime(w.length)).mkString(\"\
    \ \")\n        if (l.isEmpty) \"\" else l", "        def f(s : String) : Boolean\
    \ = {\n            val l = s.length\n            if (l < 2) return false\n   \
    \         for (i <- 2 to l - 1) if (l % i == 0) return false\n            true\n\
    \        }\n        val words = sentence.split(\" \")\n        val ans = new StringBuilder\n\
    \        for (w <- words) if (f(w)) ans.append(w + \" \")\n        ans.result",
  '        return sentence.split(" ").filter(x => isPrime(x.length)).mkString(" ")',
  "        val candidates = sentence.split(\" \").filter {\n            word => word.length\
    \ > 1 && word.length % 2 != 0 && word.filter(_ % 2 == 0).length == 0\n       \
    \ }\n        candidates.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        words.filter(w => isPrime(w.length)).mkString(\" \")", "      \
    \  def isPrime(n : Int) : Boolean = n match {\n            case 0 | 1 => false\n\
    \            case _ => {\n                for (i <- 2 to sqrt(n).toInt) if (n\
    \ % i == 0) return false\n                true\n            }\n        }\n   \
    \     val words = sentence.split(\" \")\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until words.length) if (isPrime(words(i).length)) sb.append(words(i)\
    \ + \" \")\n        sb.toString.trim", "        val strs = sentence.split(\" \"\
    )\n        var res = \"\"\n        for (str <- strs) {\n            if (isPrime(str.length))\
    \ {\n                res += (str + \" \")\n            }\n        }\n        return\
    \ res.substring(0, res.length - 1)", "        val ps = List(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,\
    \ 101)\n        val words = sentence.split(\" \")\n        var primes = List[String]()\n\
    \        for (word <- words) {\n            if (ps.contains(word.length)) {\n\
    \                primes = word :: primes\n            }\n        }\n        primes.reverse.mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        var newSentence =\
    \ new StringBuilder\n        var isFirst = true\n        for (word <- words) {\n\
    \            if (isPrime(word.length)) {\n                if (isFirst) {\n   \
    \                 newSentence.append(word)\n                    isFirst = false\n\
    \                } else {\n                    newSentence.append(\" \" + word)\n\
    \                }\n            }\n        }\n        newSentence.toString", " \
    \       val words = sentence.split(\" \")\n        val buf = new StringBuilder\n\
    \        for (i <- 0 until words.length) {\n            if (isPrime(words(i).length))\
    \ {\n                buf ++= words(i)\n                buf += ' '\n          \
    \  }\n        }\n        if (buf.length != 0) buf.deleteCharAt(buf.length - 1)\n\
    \        buf.toString", "        var buffer = ListBuffer[String]()\n        for\
    \ (word <- sentence.split(\" \")) {\n            if (word.length > 1 && word.length\
    \ % 2 != 0 && isPrime(word.length)) {\n                buffer += word\n      \
    \      }\n        }\n        return buffer.mkString(\" \")", "        if (sentence.length\
    \ <= 2) return \"\"\n        sentence.split(\" \").filter(s => !s.isEmpty && isPrime(s.length)).mkString(\"\
    \ \")", "      val words = sentence.split(\" \")\n      words.filter(w => isPrime(w.length)).mkString(\"\
    \ \")", "        var result = \"\"\n        var words = sentence.split(\" \")\n\
    \        for (i <- words.indices) {\n            val length = words(i).length\n\
    \            if (isPrime(length)) result += words(i) + \" \"\n        }\n    \
    \    result.trim", "        val primes = new HashSet[Int]\n        def isPrime(i\
    \ : Int) : Boolean = {\n            if (primes.contains(i)) return true\n    \
    \        if (i == 1) return false\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) return false\n            }\n            primes.add(i)\n\
    \            true\n        }\n        val words = sentence.split(\" \")\n    \
    \    return words.filter(word => isPrime(word.length)).mkString(\" \")", "   \
    \     val result = for {\n            word <- sentence.split(\" \")\n        \
    \    if isPrime(word.length)\n        } yield word\n        result.mkString(\"\
    \ \")", "        def isPrime(n : Int) : Boolean = {\n            if (n <= 1) return\
    \ false\n            for (i <- 2 to sqrt(n).toInt if n % i == 0) return false\n\
    \            true\n        }\n        sentence.split(\" \").filter(x => isPrime(x.length)).mkString(\"\
    \ \")", "        var result = new StringBuilder()\n        var words = sentence.split(\"\
    \ \")\n        val primes = Set(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (word <- words)\
    \ {\n            if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString().trim()", "   \
    \     val isPrime = Array.fill(101)(true)\n        for (i <- 2 to sqrt(100).toInt)\
    \ if (isPrime(i)) (i*i to 100 by i).foreach(x => isPrime(x) = false)\n       \
    \ sentence.split(\" \").filter(x => isPrime(x.length)).mkString(\" \")"]
stop_tokens:
- "\n    }\n"
