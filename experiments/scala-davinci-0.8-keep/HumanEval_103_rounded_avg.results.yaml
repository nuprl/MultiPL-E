language: scala
name: HumanEval_103_rounded_avg
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n > m) return Left(\"\
    n must be smaller than m\")\n        val avg = (n + m) / 2\n        val bin =\
    \ avg.toBinaryString\n        val padded = bin.length % 4 match {\n          \
    \  case 0 => bin\n            case n => \"0\" * (4 - n) + bin\n        }\n   \
    \     Right(padded.toLong)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplvvfu__p.scala:24)\n\tat Problem.main(tmplvvfu__p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n > m) return Left(\"\
    out of range\")\n        var sum = 0L\n        for (x <- n to m) sum += x\n  \
    \      val avg = ceil(sum.toDouble / (m - n + 1)).toLong\n        return Right(avg)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprvjv2uwx.scala:21)\n\tat Problem.main(tmprvjv2uwx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n <= m) {\n      \
    \      val nBin : String = n.toBinaryString\n            val mBin : String = m.toBinaryString\n\
    \            val nBinLen : Int = nBin.length\n            val mBinLen : Int =\
    \ mBin.length\n            val nBinRev : String = nBin.reverse\n            val\
    \ mBinRev : String = mBin.reverse\n            val nChars : Seq[Char] = nBinRev.toList\n\
    \            val mChars : Seq[Char] = mBinRev.toList\n            var nList :\
    \ List[Int] = List[Int]()\n            var mList : List[Int] = List[Int]()\n \
    \           for (i <- 0 until nBinLen) {\n                nList = nChars(i).asDigit\
    \ :: nList\n            }\n            for (i <- 0 until mBinLen) {\n        \
    \        mList = mChars(i).asDigit :: mList\n            }\n            var lengthDif\
    \ : Int = 0\n            if (nBinLen > mBinLen) {\n                lengthDif =\
    \ nBinLen - mBinLen\n                for (i <- 0 until lengthDif) {\n        \
    \            mList = 0 :: mList\n                }\n            } else if (mBinLen\
    \ > nBinLen) {\n                lengthDif = mBinLen - nBinLen\n              \
    \  for (i <- 0 until lengthDif) {\n                    nList = 0 :: nList\n  \
    \              }\n            }\n            var sumList : List[Int] = List[Int]()\n\
    \            for (i <- 0 until mBinLen) {\n                sumList = (nList(i)\
    \ + mList(i)) :: sumList\n            }\n            sumList = (sumList.head +\
    \ 1) :: sumList.tail\n            var addOne : Boolean = false\n            for\
    \ (i <- 0 until mBinLen) {\n                if (sumList(i) > 1) {\n          \
    \          sumList = sumList.updated(i, 0)\n                    addOne = true\n\
    \                } else {\n                    addOne = false\n              \
    \  }\n                if (addOne &&\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdlj9b7y0.scala:56:29 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m                \e[33mif\e[0m (addOne &&\n\e[31m\e[31m\
    \   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m               \
    \              expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpdlj9b7y0.scala:74:0 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdlj9b7y0.scala:21:45\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e\
    [36mnChars\e[0m : \e[35mSeq\e[0m[\e[35mChar\e[0m] = nBinRev.toList\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    List[Char]\n\e[31m   |\e[0m   \
    \                               Required: collection.mutable.Seq[Char]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdlj9b7y0.scala:22:45 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mmChars\e[0m : \e[35mSeq\e\
    [0m[\e[35mChar\e[0m] = mBinRev.toList\n\e[31m\e[31m   |\e[0m                 \
    \                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \              Found:    List[Char]\n\e[31m   |\e[0m                         \
    \         Required: collection.mutable.Seq[Char]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpdlj9b7y0.scala:58:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m58 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n > m)\n         \
    \   Left(\"n must be smaller than m\")\n        else {\n            val average\
    \ = (((m + n) / 2) + 0.5).toLong\n            Right(average)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03oesl03.scala:22)\n\tat Problem.main(tmp03oesl03.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n > m) return Left(\"\
    n > m\")\n        val sum = (n + m) * (m - n + 1) / 2\n        val rounded = (round(sum\
    \ / (m - n + 1).toDouble) / 2).toLong\n        Right(rounded)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeet_aih5.scala:20)\n\tat Problem.main(tmpeet_aih5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n > m) return Left(\"\
    n must be less than or equal to m\")\n        else {\n            val range =\
    \ n to m\n            val sum = range.sum\n            val avg = sum / range.size\n\
    \            val bin_avg = avg.toBinaryString\n            Right(bin_avg.toLong)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkmmdawx6.scala:24)\n\tat Problem.main(tmpkmmdawx6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n > m) Left(\"n is\
    \ greater than m\")\n        else {\n            val sum = Range(n, m + 1).sum\n\
    \            val avg = sum / (m - n + 1)\n            Right(avg)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpunmelnze.scala:16:28\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e\
    [36msum\e[0m = Range(n, m + \e[31m1\e[0m).sum\n\e[31m\e[31m   |\e[0m         \
    \                   ^\e[0m\n\e[31m   |\e[0m                            Found:\
    \    (n : Long)\n\e[31m   |\e[0m                            Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpunmelnze.scala:16:31\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e\
    [36msum\e[0m = Range(n, m + \e[31m1\e[0m).sum\n\e[31m\e[31m   |\e[0m         \
    \                      ^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Found:    Long\n\e[31m   |\e[0m                               Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n > m) Left(\"n cannot\
    \ be greater than m\")\n        else Right((n + m) / 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp__rhmrw.scala:18)\n\tat Problem.main(tmpp__rhmrw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n > m)\n         \
    \   return Left(\"Invalid arguments\")\n        val sum = (n + m) * (m - n + 1)\
    \ / 2\n        Right(sum / (m - n + 1))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg6o116b_.scala:20)\n\tat Problem.main(tmpg6o116b_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n > m)\n         \
    \   Left(\"n is greater than m\")\n        else {\n            val sum = (n to\
    \ m).sum\n            val avg = sum / (m - n + 1)\n            Right(avg)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeinnla9c.scala:23)\n\tat Problem.main(tmpeinnla9c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n      if (n > m) {\n        Left(\"\
    n is greater than m\")\n      } else {\n        val sum = n + m\n        val roundedAvg\
    \ = if (sum % 2 == 0) sum / 2 else (sum + 1) / 2\n        Right(roundedAvg)\n\
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wl1znag.scala:23)\n\tat Problem.main(tmp0wl1znag.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n > m) Left(\"n is\
    \ greater than m\")\n        else {\n            var avg = ((n + m) / 2)\n   \
    \         var bin = avg.toBinaryString\n            Right(bin.toLong)\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi6y_6g51.scala:22)\n\tat Problem.main(tmpi6y_6g51.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n <= m) {\n      \
    \      val avg = floor((n + m) / 2.0).toLong\n            Left(Integer.toBinaryString(avg.toInt))\n\
    \        } else Right(-1)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdi4yfmtp.scala:20)\n\tat Problem.main(tmpdi4yfmtp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val decimal = (n + m)\
    \ / 2\n        val binary = decimal.toBinaryString\n        val power = floor(log(decimal)\
    \ / log(2)).toInt\n        val length = pow(2, power).toLong\n        val diff\
    \ = abs(decimal - length)\n        if (decimal > m) return Left(\"-1\")\n    \
    \    if (diff < (length / 2)) return Right(length.toLong)\n        else return\
    \ Right(length * 2)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfea7mlpm.scala:24)\n\tat Problem.main(tmpfea7mlpm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n > m) Left(\"n cannot\
    \ be greater than m.\")\n        else {\n            val avg = (n + m) / 2\n \
    \           Right(avg)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6pvdldkz.scala:21)\n\tat Problem.main(tmp6pvdldkz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n > m) Left(\"n must\
    \ be greater than m\")\n        else {\n            var sum = 0L\n           \
    \ var count = 0L\n            for (i <- n to m) {\n                sum += i\n\
    \                count += 1\n            }\n            val result = BigInt(sum\
    \ / count).toString(2)\n            Right(result.toLong)\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpezfhmarr.scala:27)\n\tat Problem.main(tmpezfhmarr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n > m) return Left(\"\
    n is greater than m\")\n        val sum = (n to m).sum\n        val avg = (sum\
    \ / (m - n + 1) + 0.5).toLong\n        return Right(avg)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt58c9li7.scala:20)\n\tat Problem.main(tmpt58c9li7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n    \tif (n > m) return Left(\"\
    -1\")\n    \telse {\n    \t\tvar sum = 0L\n    \t\tfor (i <- n to m) {\n    \t\
    \t\tsum += i\n    \t\t}\n    \t\tval avg = sum / (m - n + 1)\n    \t\treturn Right(avg)\n\
    \    \t}\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp75xg7j3v.scala:25)\n\tat Problem.main(tmp75xg7j3v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n <= m) {\n      \
    \      val roundedAvg = math.round((n + m) / 2.0)\n            Left(Long.toBinaryString(roundedAvg))\n\
    \        } else {\n            Right(-1)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplh5ksvyp.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Left(Long.toBinaryString(roundedAvg))\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 value toBinaryString is not a member of object Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1,\
    \ 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) =>\
    \ \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n > m) return Left(\"\
    n is greater than m\")\n        val avg = ((n + m) / 2.0).round\n        Right(avg)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8xc547eo.scala:19)\n\tat Problem.main(tmp8xc547eo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
