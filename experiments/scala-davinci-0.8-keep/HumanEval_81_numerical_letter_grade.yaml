name: HumanEval_81_numerical_letter_grade
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // It is the last week of the semester and the teacher has to give the grades\n\
  \    // to students. The teacher has been making her own algorithm for grading.\n\
  \    // The only problem is, she has lost the code she used for grading.\n    //\
  \ She has given you a list of GPAs for some students and you have to write \n  \
  \  // a function that can output a list of letter grades using the following table:\n\
  \    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7\
  \                A \n    // > 3.3                A- \n    // > 3.0             \
  \   B+\n    // > 2.7                B \n    // > 2.3                B-\n    // >\
  \ 2.0                C+\n    // > 1.7                C\n    // > 1.3           \
  \     C-\n    // > 1.0                D+ \n    // > 0.7                D \n    //\
  \ > 0.0                D-\n    // 0.0                E\n    // Example:\n    //\
  \ grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    def\
  \ numericalLetterGrade(grades : List[Float]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
  \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
  A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
  D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
  D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
  E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
  \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
  , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
  \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
completions: ["        // Fill in the method body below\n        // Hint: You can\
    \ use the if-else construct. See the example below\n        // val i = 10\n  \
    \      // if (i > 9) {\n        //     println(\"Greater than 9\")\n        //\
    \ } else {\n        //     println(\"Less than or equal to 9\")\n        // }\n\
    \        // val s = \"hello world\"\n        // println(s.substring(1, 5))\n \
    \       // val l = List(1, 2, 3, 4, 5)\n        // println(l(1))\n        val\
    \ finalGrades = ListBuffer[String]()\n        for (i <- 0 until grades.length)\
    \ {\n            if (grades(i) >= 4.0) {\n                finalGrades += \"A+\"\
    \n            } else if (grades(i) >= 3.7) {\n                finalGrades += \"\
    A\"\n            } else if (grades(i) >= 3.3) {\n                finalGrades +=\
    \ \"A-\"\n            } else if (grades(i) >= 3.0) {\n                finalGrades\
    \ += \"B+\"\n            } else if (grades(i) >= 2.7) {\n                finalGrades\
    \ += \"B\"\n            } else if (grades(i) >= 2.3) {\n                finalGrades\
    \ += \"B-\"\n            } else if (grades(i) >= 2.0) {\n                finalGrades\
    \ += \"C+\"\n            } else if (grades(i) >= 1.7) {\n                finalGrades\
    \ += \"C\"\n            } else if (grades(i) >= 1.3) {\n                finalGrades\
    \ += \"C-\"\n            } else if (grades(i) >= 1.0) {\n                finalGrades\
    \ += \"D+\"\n            } else if (grades(i) >= 0.7) {\n                finalGrades\
    \ += \"D\"\n            } else if (grades(i) >= 0.0) {\n                finalGrades\
    \ += \"D-\"\n            } else {\n                finalGrades += \"E\"\n    \
    \        }\n        }\n        finalGrades.toList", "        // SOLUTION GOES\
    \ HERE\n        val map = Map(\n            4.0f -> \"A+\",\n            3.7f\
    \ -> \"A\",\n            3.3f -> \"A-\",\n            3.0f -> \"B+\",\n      \
    \      2.7f -> \"B\",\n            2.3f -> \"B-\",\n            2.0f -> \"C+\"\
    ,\n            1.7f -> \"C\",\n            1.3f -> \"C-\",\n            1.0f ->\
    \ \"D+\",\n            0.7f -> \"D\",\n            0.0f -> \"D-\",\n         \
    \   -1.0f -> \"E\"\n        )\n        val sortedMap = map.toList.sortBy(_._1)\n\
    \        grades.map(g => sortedMap.takeWhile(_._1 > g).last._2)", "        var\
    \ result : List[String] = List()\n        for (grade <- grades) {\n          \
    \  if (grade >= 4.0) result = \"A+\" :: result\n            else if (grade >=\
    \ 3.7) result = \"A\" :: result\n            else if (grade >= 3.3) result = \"\
    A-\" :: result\n            else if (grade >= 3.0) result = \"B+\" :: result\n\
    \            else if (grade >= 2.7) result = \"B\" :: result\n            else\
    \ if (grade >= 2.3) result = \"B-\" :: result\n            else if (grade >= 2.0)\
    \ result = \"C+\" :: result\n            else if (grade >= 1.7) result = \"C\"\
    \ :: result\n            else if (grade >= 1.3) result = \"C-\" :: result\n  \
    \          else if (grade >= 1.0) result = \"D+\" :: result\n            else\
    \ if (grade >= 0.7) result = \"D\" :: result\n            else if (grade >= 0.0)\
    \ result = \"D-\" :: result\n            else result = \"E\" :: result\n     \
    \   }\n        result.reverse", "        var list : List[String] = List();\n \
    \       for (grade <- grades) {\n            if (grade == 4.0) list = list :+\
    \ \"A+\";\n            else if (grade > 3.7) list = list :+ \"A\";\n         \
    \   else if (grade > 3.3) list = list :+ \"A-\";\n            else if (grade >\
    \ 3.0) list = list :+ \"B+\";\n            else if (grade > 2.7) list = list :+\
    \ \"B\";\n            else if (grade > 2.3) list = list :+ \"B-\";\n         \
    \   else if (grade > 2.0) list = list :+ \"C+\";\n            else if (grade >\
    \ 1.7) list = list :+ \"C\";\n            else if (grade > 1.3) list = list :+\
    \ \"C-\";\n            else if (grade > 1.0) list = list :+ \"D+\";\n        \
    \    else if (grade > 0.7) list = list :+ \"D\";\n            else if (grade >\
    \ 0.0) list = list :+ \"D-\";\n            else list = list :+ \"E\";\n      \
    \  }\n        return list;", "        // Fill up this function body\n        //\
    \ The function accepts a list of floats and returns a list of strings\n      \
    \  var newGrades = List[String]()\n        for (grade <- grades) {\n         \
    \   if (grade >= 4.0) {\n                newGrades = newGrades :+ \"A+\"\n   \
    \         } else if (grade > 3.7) {\n                newGrades = newGrades :+\
    \ \"A\"\n            } else if (grade > 3.3) {\n                newGrades = newGrades\
    \ :+ \"A-\"\n            } else if (grade > 3.0) {\n                newGrades\
    \ = newGrades :+ \"B+\"\n            } else if (grade > 2.7) {\n             \
    \   newGrades = newGrades :+ \"B\"\n            } else if (grade > 2.3) {\n  \
    \              newGrades = newGrades :+ \"B-\"\n            } else if (grade >\
    \ 2.0) {\n                newGrades = newGrades :+ \"C+\"\n            } else\
    \ if (grade > 1.7) {\n                newGrades = newGrades :+ \"C\"\n       \
    \     } else if (grade > 1.3) {\n                newGrades = newGrades :+ \"C-\"\
    \n            } else if (grade > 1.0) {\n                newGrades = newGrades\
    \ :+ \"D+\"\n            } else if (grade > 0.7) {\n                newGrades\
    \ = newGrades :+ \"D\"\n            } else if (grade > 0.0) {\n              \
    \  newGrades = newGrades :+ \"D-\"\n            } else {\n                newGrades\
    \ = newGrades :+ \"E\"\n            }\n        }\n        newGrades", "      val\
    \ gradeMap = HashMap[Float,String](\n        (4.0,\"A+\"),\n        (3.7,\"A\"\
    ),\n        (3.3,\"A-\"),\n        (3.0,\"B+\"),\n        (2.7,\"B\"),\n     \
    \   (2.3,\"B-\"),\n        (2.0,\"C+\"),\n        (1.7,\"C\"),\n        (1.3,\"\
    C-\"),\n        (1.0,\"D+\"),\n        (0.7,\"D\"),\n        (0.0,\"D-\"),\n \
    \       (-1.0,\"E\")\n      )\n      var gradesList = new ListBuffer[String]()\n\
    \      for (grade <- grades) {\n        gradesList += gradeMap.filter(_._1 <=\
    \ grade).maxBy(_._1)._2\n      }\n      gradesList.toList", "        var res =\
    \ List[String]()\n        for (x <- grades) {\n            if (x == 4.0) res =\
    \ res :+ \"A+\"\n            else if (x > 3.7) res = res :+ \"A\"\n          \
    \  else if (x > 3.3) res = res :+ \"A-\"\n            else if (x > 3.0) res =\
    \ res :+ \"B+\"\n            else if (x > 2.7) res = res :+ \"B\"\n          \
    \  else if (x > 2.3) res = res :+ \"B-\"\n            else if (x > 2.0) res =\
    \ res :+ \"C+\"\n            else if (x > 1.7) res = res :+ \"C\"\n          \
    \  else if (x > 1.3) res = res :+ \"C-\"\n            else if (x > 1.0) res =\
    \ res :+ \"D+\"\n            else if (x > 0.7) res = res :+ \"D\"\n          \
    \  else if (x > 0.0) res = res :+ \"D-\"\n            else res = res :+ \"E\"\n\
    \        }\n        res", "        grades.map(x => x match {\n            case\
    \ 4.0 => \"A+\"\n            case x if x > 3.7 => \"A\"\n            case x if\
    \ x > 3.3 => \"A-\"\n            case x if x > 3.0 => \"B+\"\n            case\
    \ x if x > 2.7 => \"B\"\n            case x if x > 2.3 => \"B-\"\n           \
    \ case x if x > 2.0 => \"C+\"\n            case x if x > 1.7 => \"C\"\n      \
    \      case x if x > 1.3 => \"C-\"\n            case x if x > 1.0 => \"D+\"\n\
    \            case x if x > 0.7 => \"D\"\n            case x if x > 0.0 => \"D-\"\
    \n            case 0.0 => \"E\"\n        })", "    \tval result = new ArrayBuffer[String]\n\
    \    \tgrades.foreach {\n    \t\tgrade => {\n    \t\t\tval floored = floor(grade\
    \ * 10).toInt / 10\n    \t\t\tresult += (floored match {\n    \t\t\t\tcase 4 =>\
    \ \"A+\"\n    \t\t\t\tcase 3 => \"A\"\n    \t\t\t\tcase 2 => \"B\"\n    \t\t\t\
    \tcase 1 => \"C\"\n    \t\t\t\tcase 0 => \"D\"\n    \t\t\t\tcase _ => \"E\"\n\
    \    \t\t\t})\n    \t\t}\n    \t}\n    \tresult.toList", "        // This function\
    \ returns the list of letter grades\n        val letterGrades = grades.map(grade\
    \ => {\n            if (grade >= 4.0) \"A+\"\n            else if (grade >= 3.7)\
    \ \"A\"\n            else if (grade >= 3.3) \"A-\"\n            else if (grade\
    \ >= 3.0) \"B+\"\n            else if (grade >= 2.7) \"B\"\n            else if\
    \ (grade >= 2.3) \"B-\"\n            else if (grade >= 2.0) \"C+\"\n         \
    \   else if (grade >= 1.7) \"C\"\n            else if (grade >= 1.3) \"C-\"\n\
    \            else if (grade >= 1.0) \"D+\"\n            else if (grade >= 0.7)\
    \ \"D\"\n            else if (grade >= 0.0) \"D-\"\n            else \"E\"\n \
    \       })\n        letterGrades", "        var letterGrade = ArrayBuffer[String]()\n\
    \        for (grade <- grades) {\n            if (grade == 4.0) letterGrade +=\
    \ \"A+\"\n            else if (grade > 3.7) letterGrade += \"A\"\n           \
    \ else if (grade > 3.3) letterGrade += \"A-\"\n            else if (grade > 3.0)\
    \ letterGrade += \"B+\"\n            else if (grade > 2.7) letterGrade += \"B\"\
    \n            else if (grade > 2.3) letterGrade += \"B-\"\n            else if\
    \ (grade > 2.0) letterGrade += \"C+\"\n            else if (grade > 1.7) letterGrade\
    \ += \"C\"\n            else if (grade > 1.3) letterGrade += \"C-\"\n        \
    \    else if (grade > 1.0) letterGrade += \"D+\"\n            else if (grade >\
    \ 0.7) letterGrade += \"D\"\n            else if (grade > 0.0) letterGrade +=\
    \ \"D-\"\n            else letterGrade += \"E\"\n        }\n        letterGrade.toList",
  "        grades.map(x =>\n            if (x >= 4.0) \"A+\"\n            else if\
    \ (x >= 3.7) \"A\"\n            else if (x >= 3.3) \"A-\"\n            else if\
    \ (x >= 3.0) \"B+\"\n            else if (x >= 2.7) \"B\"\n            else if\
    \ (x >= 2.3) \"B-\"\n            else if (x >= 2.0) \"C+\"\n            else if\
    \ (x >= 1.7) \"C\"\n            else if (x >= 1.3) \"C-\"\n            else if\
    \ (x >= 1.0) \"D+\"\n            else if (x >= 0.7) \"D\"\n            else if\
    \ (x >= 0.0) \"D-\"\n            else \"E\"\n        )", "        grades.map(x\
    \ => {\n            if (x == 4.0) \"A+\"\n            else if (x > 3.7) \"A\"\n\
    \            else if (x > 3.3) \"A-\"\n            else if (x > 3.0) \"B+\"\n\
    \            else if (x > 2.7) \"B\"\n            else if (x > 2.3) \"B-\"\n \
    \           else if (x > 2.0) \"C+\"\n            else if (x > 1.7) \"C\"\n  \
    \          else if (x > 1.3) \"C-\"\n            else if (x > 1.0) \"D+\"\n  \
    \          else if (x > 0.7) \"D\"\n            else if (x > 0.0) \"D-\"\n   \
    \         else \"E\"\n        })", "        val map = HashMap[String, Float]()\n\
    \        map.put(\"A+\", 4.0)\n        map.put(\"A\", 3.7)\n        map.put(\"\
    A-\", 3.3)\n        map.put(\"B+\", 3.0)\n        map.put(\"B\", 2.7)\n      \
    \  map.put(\"B-\", 2.3)\n        map.put(\"C+\", 2.0)\n        map.put(\"C\",\
    \ 1.7)\n        map.put(\"C-\", 1.3)\n        map.put(\"D+\", 1.0)\n        map.put(\"\
    D\", 0.7)\n        map.put(\"D-\", 0.0)\n        map.put(\"E\", 0.0)\n       \
    \ grades.map(grade => {\n            val keys = map.keySet.toList.sorted.reverse\n\
    \            keys.find(key => grade >= map(key)).get\n        })", "        def\
    \ f(g : Float) : String = {\n            if (g >= 4.0) return \"A+\"\n       \
    \     else if (g >= 3.7) return \"A\"\n            else if (g >= 3.3) return \"\
    A-\"\n            else if (g >= 3.0) return \"B+\"\n            else if (g >=\
    \ 2.7) return \"B\"\n            else if (g >= 2.3) return \"B-\"\n          \
    \  else if (g >= 2.0) return \"C+\"\n            else if (g >= 1.7) return \"\
    C\"\n            else if (g >= 1.3) return \"C-\"\n            else if (g >= 1.0)\
    \ return \"D+\"\n            else if (g >= 0.7) return \"D\"\n            else\
    \ if (g >= 0.0) return \"D-\"\n            else return \"E\"\n        }\n    \
    \    return grades.map(f)", "        // Implement this function\n        return\
    \ null", "        def numToLetter(num : Float) : String = {\n            num match\
    \ {\n                case x if (x == 4.0) => \"A+\"\n                case x if\
    \ (x > 3.7) => \"A\"\n                case x if (x > 3.3) => \"A-\"\n        \
    \        case x if (x > 3.0) => \"B+\"\n                case x if (x > 2.7) =>\
    \ \"B\"\n                case x if (x > 2.3) => \"B-\"\n                case x\
    \ if (x > 2.0) => \"C+\"\n                case x if (x > 1.7) => \"C\"\n     \
    \           case x if (x > 1.3) => \"C-\"\n                case x if (x > 1.0)\
    \ => \"D+\"\n                case x if (x > 0.7) => \"D\"\n                case\
    \ x if (x > 0.0) => \"D-\"\n                case x if (x == 0.0) => \"E\"\n  \
    \          }\n        }\n        grades.map(x => numToLetter(x))", "        val\
    \ gradeMap = Map(4.0 -> \"A+\", 3.7 -> \"A\", 3.3 -> \"A-\", 3.0 -> \"B+\", 2.7\
    \ -> \"B\", 2.3 -> \"B-\", 2.0 -> \"C+\", 1.7 -> \"C\", 1.3 -> \"C-\", 1.0 ->\
    \ \"D+\", 0.7 -> \"D\", 0.0 -> \"D-\", -1.0 -> \"E\")\n        grades.map { grade\
    \ =>\n            var previousGrade : Float = 0\n            var previousLetterGrade\
    \ : String = \"\"\n            for ((k, v) <- gradeMap) {\n                if\
    \ (grade >= k && grade <= previousGrade) {\n                    previousLetterGrade\
    \ = v\n                    break\n                }\n                previousGrade\
    \ = k\n            }\n            previousLetterGrade\n        }", "        def\
    \ gradeToLetter(g : Float) : String = {\n            val m = Map(\n          \
    \      4.0 -> \"A+\",\n                3.7 -> \"A\",\n                3.3 -> \"\
    A-\",\n                3.0 -> \"B+\",\n                2.7 -> \"B\",\n       \
    \         2.3 -> \"B-\",\n                2.0 -> \"C+\",\n                1.7\
    \ -> \"C\",\n                1.3 -> \"C-\",\n                1.0 -> \"D+\",\n\
    \                0.7 -> \"D\",\n                0.0 -> \"D-\",\n             \
    \   -1.0 -> \"E\"\n            )\n            m.keys.toList.filter(_ <= g).maxOption\
    \ match {\n                case Some(x) => m(x)\n                case None =>\
    \ \"E\"\n            }\n        }\n        grades.map(x => gradeToLetter(x))",
  "        def letterGrade(g : Float) : String = g match {\n            case g if\
    \ g >= 4.0 => \"A+\"\n            case g if g >= 3.7 => \"A\"\n            case\
    \ g if g >= 3.3 => \"A-\"\n            case g if g >= 3.0 => \"B+\"\n        \
    \    case g if g >= 2.7 => \"B\"\n            case g if g >= 2.3 => \"B-\"\n \
    \           case g if g >= 2.0 => \"C+\"\n            case g if g >= 1.7 => \"\
    C\"\n            case g if g >= 1.3 => \"C-\"\n            case g if g >= 1.0\
    \ => \"D+\"\n            case g if g >= 0.7 => \"D\"\n            case g if g\
    \ >= 0.0 => \"D-\"\n            case _ => \"E\"\n        }\n        grades.map(letterGrade)"]
stop_tokens:
- "\n    }\n"
