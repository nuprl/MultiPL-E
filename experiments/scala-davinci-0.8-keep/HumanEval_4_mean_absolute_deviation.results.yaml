language: scala
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        require(numbers.size > 0)\n        val n = numbers.size\n\
    \        val sum = numbers.foldLeft(0.0f)(_ + _)\n        val mean = sum / n\n\
    \        val squaredDeviations = numbers.map(x => pow(x - mean, 2).toFloat)\n\
    \        val meanDeviation = squaredDeviations.foldLeft(0.0f)(_ + _) / n\n   \
    \     return sqrt(meanDeviation).toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkxvwh_n6.scala:22)\n\tat Problem.main(tmpkxvwh_n6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        numbers.map(x\
    \ => abs(x - mean)).sum / numbers.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        // find mean\n        val mean = numbers.sum / numbers.length\n\
    \        // find absolute difference between each number and mean, then find\n\
    \        // average of those differences\n        numbers.map(n => abs(n - mean)).sum\
    \ / numbers.length\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        var sum_abs_diff : Float = 0\n        val mean = numbers.sum\
    \ / numbers.length\n        for (num <- numbers) {\n            sum_abs_diff +=\
    \ abs(num - mean)\n        }\n        return sum_abs_diff / numbers.length\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length.toFloat\n     \
    \   val abs_deviations = numbers.map(x => abs(x - mean))\n        abs_deviations.sum\
    \ / abs_deviations.length.toFloat\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val n = numbers.length\n        val mean = numbers.reduceLeft(_\
    \ + _) / n\n        val absoluteDeviations = numbers.map(x => abs(x - mean))\n\
    \        absoluteDeviations.reduceLeft(_ + _) / n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        if (numbers.length == 0)\n            return 0.0F\n   \
    \     val mean = numbers.sum / numbers.length\n        val distances = numbers.map(abs(_\
    \ - mean))\n        return distances.sum / distances.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3fsp0whz.scala:15:36 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdistances\e[0m = numbers.map(abs(_\
    \ - mean))\n\e[31m\e[31m   |\e[0m                                    ^^^\e[0m\n\
    \e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mabs\e\
    [0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m   |\e[0mmatch arguments (<?> =>\
    \ <?>)\n\e[31m\e[31m-- Error: /tmp/tmp3fsp0whz.scala:16:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mreturn\e[0m distances.sum / distances.length\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mLongIsIntegral\e[0m in \e[33mobject\e\
    [0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mBigIntIsIntegral\e[0m in \e\
    [33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter num of \e\
    [33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659820949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        if (numbers.length == 0) return 0.0f\n        val mean\
    \ = numbers.reduceLeft(_ + _) / numbers.length\n        val diffs = numbers.map(x\
    \ => abs(x - mean))\n        return diffs.reduceLeft(_ + _) / diffs.length\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        val absoluteDeviations\
    \ = numbers.map(abs(_ - mean))\n        absoluteDeviations.sum / absoluteDeviations.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpxjgotlvx.scala:13:45 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mabsoluteDeviations\e[0m\
    \ = numbers.map(abs(_ - mean))\n\e[31m\e[31m   |\e[0m                        \
    \                     ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mabs\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m\
    \   |\e[0mmatch arguments (<?> => <?>)\n\e[31m\e[31m-- Error: /tmp/tmpxjgotlvx.scala:14:30\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ absoluteDeviations.sum / absoluteDeviations.length\n\e[31m\e[31m   |\e[0m  \
    \                            ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mBigDecimalIsFractional\e[0m in \e[33mobject\e[0m\
    \ \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mLongIsIntegral\e[0m in \e[33mobject\e\
    [0m \e[35mNumeric\e[0m match type Numeric[B] of parameter num of \e[33mmethod\e\
    [0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659820949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        var deviation\
    \ = 0.0\n        for (number <- numbers) {\n            deviation += abs(number\
    \ - mean)\n        }\n        deviation / numbers.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb9zziu0y.scala:17:8\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m        deviation / numbers.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    Double\n\e[31m   |\e[0m        Required: Float\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659820950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        return\
    \ numbers.map(n => abs(n - mean)).sum / numbers.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length.toFloat\n     \
    \   numbers.map(x => abs(x - mean)).sum / numbers.length.toFloat\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length.toFloat\n     \
    \   numbers.map(abs(_ - mean)).sum / numbers.length.toFloat\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpxuwnlezl.scala:13:20 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.map(abs(_ - mean)).sum / numbers.length.toFloat\n\
    \e[31m\e[31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mabs\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e\
    [31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e\
    [0m (x: Int): Int\n\e[31m   |\e[0mmatch arguments (<?> => <?>)\n\e[31m\e[31m--\
    \ Error: /tmp/tmpxuwnlezl.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.map(abs(_ - mean)).sum / numbers.length.toFloat\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0mambiguous given instances: both \e[33mobject\e[0m \e[35mShortIsIntegral\e[0m\
    \ in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mFloatIsFractional\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659820949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        if (numbers.isEmpty) {\n            0.0F\n        } else\
    \ {\n            val mean = numbers.sum / numbers.length\n            val deviations\
    \ = numbers.map(abs(_ - mean))\n            deviations.sum / deviations.length\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8prw3pr0.scala:16:41 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mdeviations\e[0m = numbers.map(abs(_\
    \ - mean))\n\e[31m\e[31m   |\e[0m                                         ^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mabs\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e\
    [0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m   |\e[0mmatch arguments\
    \ (<?> => <?>)\n\e[31m\e[31m-- Error: /tmp/tmp8prw3pr0.scala:17:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            deviations.sum / deviations.length\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0mambiguous given\
    \ instances: both \e[33mobject\e[0m \e[35mShortIsIntegral\e[0m in \e[33mobject\e\
    [0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mByteIsIntegral\e[0m in \e[33mobject\e\
    [0m \e[35mNumeric\e[0m match type Numeric[B] of parameter num of \e[33mmethod\e\
    [0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659820949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        return\
    \ (numbers.map(x => abs(x - mean))).sum / numbers.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        numbers.map(x\
    \ => abs(x - mean)).sum / numbers.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => x - mean)\n        val deviationAbs = deviations.map(abs(_))\n\
    \        deviationAbs.sum / deviationAbs.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        return\
    \ numbers.map(abs(_ - mean)).sum / numbers.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat)))\
    \ == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpekfcf8se.scala:13:27 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mreturn\e[0m numbers.map(abs(_ - mean)).sum\
    \ / numbers.length\n\e[31m\e[31m   |\e[0m                           ^^^\e[0m\n\
    \e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mabs\e\
    [0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m   |\e[0mmatch arguments (<?> =>\
    \ <?>)\n\e[31m\e[31m-- Error: /tmp/tmpekfcf8se.scala:13:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mreturn\e[0m numbers.map(abs(_ - mean)).sum\
    \ / numbers.length\n\e[31m\e[31m   |\e[0m                                    \
    \         ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mShortIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e\
    [33mobject\e[0m \e[35mFloatIsFractional\e[0m in \e[33mobject\e[0m \e[35mNumeric\e\
    [0m match type Numeric[B] of parameter num of \e[33mmethod\e[0m \e[35msum\e[0m\
    \ in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659820949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length.toFloat\n     \
    \   return numbers.map(x => abs(x - mean)).sum / numbers.length.toFloat\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    // around the mean of this dataset.\n    // Mean Absolute Deviation is the\
    \ average absolute difference between each\n    // element and a centerpoint (mean\
    \ in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = numbers.sum / numbers.length\n        numbers.map(abs(_\
    \ - mean)).sum / numbers.length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat))) ==\
    \ (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpyzk526sl.scala:13:20 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.map(abs(_ - mean)).sum / numbers.length\n\
    \e[31m\e[31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mabs\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e\
    [31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e\
    [0m (x: Int): Int\n\e[31m   |\e[0mmatch arguments (<?> => <?>)\n\e[31m\e[31m--\
    \ Error: /tmp/tmpyzk526sl.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.map(abs(_ - mean)).sum / numbers.length\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0mambiguous given instances: both \e[33mobject\e[0m \e[35mShortIsIntegral\e[0m\
    \ in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mFloatIsFractional\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659820949
