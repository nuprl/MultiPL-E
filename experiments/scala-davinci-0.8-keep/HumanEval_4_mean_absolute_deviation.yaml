name: HumanEval_4_mean_absolute_deviation
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given list of input numbers, calculate Mean Absolute Deviation\n \
  \   // around the mean of this dataset.\n    // Mean Absolute Deviation is the average\
  \ absolute difference between each\n    // element and a centerpoint (mean in this\
  \ case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
  \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
  \ : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
  \n}\n"
completions: ["        require(numbers.size > 0)\n        val n = numbers.size\n \
    \       val sum = numbers.foldLeft(0.0f)(_ + _)\n        val mean = sum / n\n\
    \        val squaredDeviations = numbers.map(x => pow(x - mean, 2).toFloat)\n\
    \        val meanDeviation = squaredDeviations.foldLeft(0.0f)(_ + _) / n\n   \
    \     return sqrt(meanDeviation).toFloat", "        val mean = numbers.sum / numbers.length\n\
    \        numbers.map(x => abs(x - mean)).sum / numbers.length", "        // find\
    \ mean\n        val mean = numbers.sum / numbers.length\n        // find absolute\
    \ difference between each number and mean, then find\n        // average of those\
    \ differences\n        numbers.map(n => abs(n - mean)).sum / numbers.length",
  "        var sum_abs_diff : Float = 0\n        val mean = numbers.sum / numbers.length\n\
    \        for (num <- numbers) {\n            sum_abs_diff += abs(num - mean)\n\
    \        }\n        return sum_abs_diff / numbers.length", "        val mean =\
    \ numbers.sum / numbers.length.toFloat\n        val abs_deviations = numbers.map(x\
    \ => abs(x - mean))\n        abs_deviations.sum / abs_deviations.length.toFloat",
  "        val n = numbers.length\n        val mean = numbers.reduceLeft(_ + _) /\
    \ n\n        val absoluteDeviations = numbers.map(x => abs(x - mean))\n      \
    \  absoluteDeviations.reduceLeft(_ + _) / n", "        if (numbers.length == 0)\n\
    \            return 0.0F\n        val mean = numbers.sum / numbers.length\n  \
    \      val distances = numbers.map(abs(_ - mean))\n        return distances.sum\
    \ / distances.length", "        if (numbers.length == 0) return 0.0f\n       \
    \ val mean = numbers.reduceLeft(_ + _) / numbers.length\n        val diffs = numbers.map(x\
    \ => abs(x - mean))\n        return diffs.reduceLeft(_ + _) / diffs.length", " \
    \       val mean = numbers.sum / numbers.length\n        val absoluteDeviations\
    \ = numbers.map(abs(_ - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        var deviation = 0.0\n\
    \        for (number <- numbers) {\n            deviation += abs(number - mean)\n\
    \        }\n        deviation / numbers.length", "        val mean = numbers.sum\
    \ / numbers.length\n        return numbers.map(n => abs(n - mean)).sum / numbers.length",
  "        val mean = numbers.sum / numbers.length.toFloat\n        numbers.map(x\
    \ => abs(x - mean)).sum / numbers.length.toFloat", "        val mean = numbers.sum\
    \ / numbers.length.toFloat\n        numbers.map(abs(_ - mean)).sum / numbers.length.toFloat",
  "        if (numbers.isEmpty) {\n            0.0F\n        } else {\n          \
    \  val mean = numbers.sum / numbers.length\n            val deviations = numbers.map(abs(_\
    \ - mean))\n            deviations.sum / deviations.length\n        }", "    \
    \    val mean = numbers.sum / numbers.length\n        return (numbers.map(x =>\
    \ abs(x - mean))).sum / numbers.length", "        val mean = numbers.sum / numbers.length\n\
    \        numbers.map(x => abs(x - mean)).sum / numbers.length", "        val mean\
    \ = numbers.sum / numbers.length\n        val deviations = numbers.map(x => x\
    \ - mean)\n        val deviationAbs = deviations.map(abs(_))\n        deviationAbs.sum\
    \ / deviationAbs.length", "        val mean = numbers.sum / numbers.length\n \
    \       return numbers.map(abs(_ - mean)).sum / numbers.length", "        val\
    \ mean = numbers.sum / numbers.length.toFloat\n        return numbers.map(x =>\
    \ abs(x - mean)).sum / numbers.length.toFloat", "        val mean = numbers.sum\
    \ / numbers.length\n        numbers.map(abs(_ - mean)).sum / numbers.length"]
stop_tokens:
- "\n    }\n"
