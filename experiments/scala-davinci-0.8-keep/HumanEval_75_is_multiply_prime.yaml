name: HumanEval_75_is_multiply_prime
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less\
  \ then 100. \n    // Example:\n    // is_multiply_prime(30) == True\n    // 30 =\
  \ 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
  \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
  \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
  \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
  \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
  \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
completions: ["        def isPrime(x : Long) : Boolean = {\n            if (x < 2)\
    \ return false\n            for (i <- 2 to sqrt(x).toInt) {\n                if\
    \ (x % i == 0) return false\n            }\n            return true\n        }\n\
    \        var s = a.toString\n        var x : Long = -1\n        var y : Long =\
    \ -1\n        var z : Long = -1\n        for (i <- 0 to s.length - 1) {\n    \
    \        for (j <- i + 1 to s.length - 1) {\n                for (k <- j + 1 to\
    \ s.length - 1) {\n                    x = s.substring(0, i + 1).toLong\n    \
    \                y = s.substring(i + 1, j + 1).toLong\n                    z =\
    \ s.substring(j + 1, k + 1).toLong\n                    if (isPrime(x) && isPrime(y)\
    \ && isPrime(z) && a == x * y * z) return true\n                }\n          \
    \  }\n        }\n        return false", "        var result = false\n        val\
    \ primes : ArrayBuffer[Long] = ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i\
    \ <- 0 to primes.length-1) {\n            if (a % primes(i) == 0) {\n        \
    \        result = result || isMultiplyPrime(a / primes(i))\n            }\n  \
    \      }\n        if (a == 1) {\n            result = true\n        }\n      \
    \  result", "        // Try for (b, c) such that b <= c, a = b * c\n        for\
    \ (b <- 2 to 100) {\n            for (c <- b to 100) {\n                if (a\
    \ == b * c && isPrime(b) && isPrime(c)) return true\n            }\n        }\n\
    \        return false", "        var p = 2\n        var t = Array(2, 3, 5)\n \
    \       while (p <= a) {\n            if (p % 6 == 1) {\n                if (a\
    \ % p == 0) {\n                    t(0) = p\n                    a /= p\n    \
    \                if (a == 1) return true\n                    var q = p + 2\n\
    \                    while (q <= a) {\n                        if (q % 6 == 1)\
    \ {\n                            if (a % q == 0) {\n                         \
    \       t(1) = q\n                                a /= q\n                   \
    \             if (a == 1) return true\n                                var r =\
    \ q + 2\n                                while (r <= a) {\n                  \
    \                  if (r % 6 == 1) {\n                                       \
    \ if (a % r == 0) {\n                                            t(2) = r\n  \
    \                                          a /= r\n                          \
    \                  if (a == 1) return true\n                                 \
    \       }\n                                    }\n                           \
    \         r += 2\n                                }\n                        \
    \    }\n                        }\n                        q += 2\n          \
    \          }\n                }\n            }\n            p += 2\n        }\n\
    \        false", "        val p = findPrimes(a)\n        if (p.size == 3) {\n\
    \            val product = p.reduce(_ * _)\n            if (product == a) return\
    \ true\n        }\n        return false", "        (1 to a.toInt).foreach(i =>\
    \ println(i))\n        false", "        def isPrime(n : Long) : Boolean = {\n\
    \            val limit = round(sqrt(n)).toLong\n            var i = 2l\n     \
    \       while (i <= limit) {\n                if (n % i == 0) return false\n \
    \               i += 1\n            }\n            true\n        }\n        def\
    \ mulOfPrime(n : Long, arr : List[Long]) : Boolean = {\n            if (arr.isEmpty)\
    \ return false\n            if (n % arr.head == 0) {\n                val res\
    \ = n / arr.head\n                if (isPrime(res)) return true\n            \
    \    else return mulOfPrime(res, arr)\n            }\n            else mulOfPrime(n,\
    \ arr.tail)\n        }\n        if (a <= 1) return false\n        val primeArr\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        mulOfPrime(a, primeArr)", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to a) {\n            if (isPrime(i))\
    \ {\n                primes += i\n            }\n        }\n        var count\
    \ = 0\n        for (j <- 0 to primes.length - 1) {\n            if (a % primes(j)\
    \ == 0) {\n                count += 1\n            }\n        }\n        if (count\
    \ >= 3) {\n            return true\n        }\n        else {\n            return\
    \ false\n        }", "        var primeNumbers = new ArrayBuffer[Long]\n     \
    \   for (i <- 1 to sqrt(a).toInt if a % i == 0) {\n            if (prime(i)) {\n\
    \                primeNumbers += i\n            }\n            if (prime(a / i))\
    \ {\n                primeNumbers += a / i\n            }\n        }\n       \
    \ primeNumbers.size == 3", "        // first prime number\n        var n = 2\n\
    \        // second prime number\n        var n1 = 3\n        // third prime number\n\
    \        var n2 = 5\n        // running total\n        var total = 1\n       \
    \ // A list containing all prime numbers under 100\n        var primes = List[Long]()\n\
    \        // While the total is not equal to the input number and the total is\
    \ less than the input number, iterate.\n        while (total != a && total < a)\
    \ {\n            if (n1 % n != 0) {\n                primes = primes :+ n\n  \
    \              total = total * n\n            }\n            if (n2 % n1 != 0)\
    \ {\n                primes = primes :+ n1\n                total = total * n1\n\
    \            }\n            if (a % n2 != 0) {\n                primes = primes\
    \ :+ n2\n                total = total * n2\n            }\n            // on\
    \ loop go to the next prime number.\n            n += 1\n            n1 += 1\n\
    \            n2 += 1\n        }\n        // Return true if the total is equal\
    \ to the input number, false otherwise.\n        if (total == a) {\n         \
    \   println(primes)\n            return true\n        }\n        else {\n    \
    \        return false\n        }", '        // Write your code here', "      //\
    \ range from 2 to 20\n      var b : Long = 2;\n      var result : Boolean = false;\n\
    \      while (b < 20) {\n        //if a is divided by b and a is still greater\
    \ than b, then continue to loop\n        // if a is less than b then return false\n\
    \        if (a % b == 0 && a > b) {\n          // check if b is prime or not.\
    \ If b is prime then divide a by b\n          if (isPrime(b)) {\n            a\
    \ = a / b;\n          } else {\n            // if b is not prime then b++\n  \
    \          b = b + 1;\n          }\n        } else {\n          // if a is less\
    \ than b then return false\n          b = 20;\n          result = false;\n   \
    \     }\n      }\n      // if a is equal to 1 then return true, else false\n \
    \     if (a == 1) {\n        result = true;\n      } else {\n        result =\
    \ false;\n      }\n      return result;", "        // Try all divisors from 3\
    \ to sqrt(a)\n        // If a is not a prime, it has a divisor\n        for (i\
    \ <- 3 to sqrt(a).toInt by 2) {\n            if (a % i == 0) {\n             \
    \   // If a is not a prime, check if i and a/i are prime\n                if (isPrime(i)\
    \ && isPrime(a / i)) return true\n            }\n        }\n        false", " \
    \       var copy = a\n        var count = 0\n        for (i <- 2 to 100) {\n \
    \           if (copy % i == 0) {\n                copy /= i\n                count\
    \ += 1\n            }\n            if (count == 3) {\n                println(a\
    \ + \" = \" + i)\n                return true\n            }\n        }\n    \
    \    false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val prime =\
    \ primes.find(p => a % p == 0 && a / p > 1)\n        prime match {\n         \
    \   case Some(p) => isMultiplyPrime(a / p)\n            case None => a == 1\n\
    \        }", "    \tvar primes = List[Long]()\n    \tvar sum = 0L\n    \tvar res\
    \ = false\n    \tfor (i <- 1L to a) {\n    \t\tif (prime(i)) {\n    \t\t\tprimes\
    \ = primes :+ i\n    \t\t\tsum += i\n    \t\t}\n    \t}\n    \tfor (i <- 0 to\
    \ primes.length - 1) {\n    \t\tfor (j <- i + 1 to primes.length - 1) {\n    \t\
    \t\tfor (k <- j + 1 to primes.length - 1) {\n    \t\t\t\tif (a == primes(i) *\
    \ primes(j) * primes(k)) res = true\n    \t\t\t}\n    \t\t}\n    \t}\n    \treturn\
    \ res", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        // val primes =\
    \ List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,\
    \ 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239,\
    \ 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337,\
    \ 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433,\
    \ 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541,\
    \ 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641,\
    \ 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\
    \ 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857,\
    \ 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971,\
    \ 977, 983, 991, 997)\n        val powers = Array.fill(primes.length)(0)\n   \
    \     // check powers of prime numbers\n        var remain = a", "        var\
    \ result = false\n        for (b <- 1 until a) {\n            for (c <- 1 until\
    \ a) {\n                for (d <- 1 until a) {\n                    if (b * c\
    \ * d == a) {\n                        if (isPrime(b) && isPrime(c) && isPrime(d))\n\
    \                            result = true\n                    }\n          \
    \      }\n            }\n        }\n        result", '        null', "       \
    \ val primeNumbers = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primeNumbers.length\
    \ - 2) {\n            for (j <- i + 1 until primeNumbers.length - 1) {\n     \
    \           for (k <- j + 1 until primeNumbers.length) {\n                   \
    \ if (primeNumbers(i) * primeNumbers(j) * primeNumbers(k) == a) {\n          \
    \              return true\n                    }\n                }\n       \
    \     }\n        }\n        return false"]
stop_tokens:
- "\n    }\n"
