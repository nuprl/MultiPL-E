language: scala
name: HumanEval_115_max_fill
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n        // calculate columns\
    \ of 1's\n        val col1s = grid.foldLeft(List[Long]())((a, b) => a ++ List(b.foldLeft(0L)((c,\
    \ d) => c + d)))\n        // calculate max length of consecutive 1's for each\
    \ row\n        val maxConsecutive1s = grid.map(row => row.foldLeft(List(0L))((a,\
    \ b) => if (b == 1) a ++ List(a.last + 1) else List(0L)).max)\n        // calculate\
    \ max length of consecutive 1's in the entire grid\n        val consecutive1s\
    \ = col1s.foldLeft(List[Long]())((a, b) => a ++ List(a.last + b))\n        //\
    \ calculate number of consecutive 1's per column\n        val numConsecutive1s\
    \ = col1s.map(c => col1s.indexOf(c) match {\n            case 0 => consecutive1s(1)\n\
    \            case a if a == col1s.length - 1 => consecutive1s(consecutive1s.length\
    \ - 2)\n            case b => consecutive1s(b + 1) - consecutive1s(b - 1)\n  \
    \      })\n        // number of times to lower the bucket\n        maxConsecutive1s.max\
    \ + (numConsecutive1s.filter(a => a % capacity == 0).map(b => b / capacity).sum\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: last of empty list\n\tat scala.collection.immutable.Nil$.last(List.scala:665)\n\
    \tat scala.collection.immutable.Nil$.last(List.scala:661)\n\tat Problem$.$anonfun$3(tmp9c84ihtm.scala:37)\n\
    \tat Problem$.$anonfun$adapted$1(tmp9c84ihtm.scala:37)\n\tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:169)\n\
    \tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:165)\n\tat scala.collection.immutable.List.foldLeft(List.scala:79)\n\
    \tat Problem$.maxFill(tmp9c84ihtm.scala:37)\n\tat Problem$.main(tmp9c84ihtm.scala:48)\n\
    \tat Problem.main(tmp9c84ihtm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n        val maxFill = grid.map(row\
    \ => row.sum).max\n        val n = grid.size\n        val m = grid(0).size\n \
    \       def f(index : Int, current : List[Long]) : Long = {\n            if (index\
    \ == n) 1\n            else {\n                val next = (0 until m).map(j =>\
    \ if (current(j) == maxFill) current(j) else current(j) + 1).toList\n        \
    \        next.sum + f(index + 1, next)\n            }\n        }\n        f(0,\
    \ grid(0))\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp047i7nb5.scala:45)\n\tat Problem.main(tmp047i7nb5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n        // i.e.\n        //\
    \ 0 0 1 1\n        // 0 0 0 0\n        // 1 1 1 1\n        // 0 1 1 1\n      \
    \  // if bucket capacity is 2, then maxFill is 5.\n        val length = grid.length\n\
    \        val gridTranspose = grid.transpose\n        // i.e.\n        // 0 0 1\
    \ 0\n        // 0 1 0 0\n        // 1 1 1 1\n        // then gridTranspose is\n\
    \        // 0 0 1\n        // 0 1 1\n        // 1 1 1\n        // 1 1 1\n    \
    \    val maxFillMap = new HashMap[(Int, Int), Long]()\n        def maxFillRec(rowIndex\
    \ : Int, colIndex : Int) : Long = {\n            val key = (rowIndex, colIndex)\n\
    \            if (maxFillMap.contains(key)) maxFillMap(key)\n            else {\n\
    \                val row = gridTranspose(colIndex)\n                val maxFill\
    \ = row.slice(rowIndex, rowIndex + capacity.toInt).sum\n                maxFillMap\
    \ += (key -> maxFill)\n                maxFill\n            }\n        }\n   \
    \     val result = (0 to (length - capacity.toInt)).map(i => {\n            (0\
    \ to (length - 1)).map(j => maxFillRec(i, j)).max\n        }).sum\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcosrbvza.scala:66)\n\tat Problem.main(tmpcosrbvza.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n        if (grid.length ==\
    \ 0) return 0\n        var bucket = capacity\n        var result = 0\n       \
    \ for (well <- grid) {\n            for (unit <- well) {\n                if (unit\
    \ == 1) {\n                    if (bucket == 0) {\n                        bucket\
    \ = capacity\n                        result += 1\n                    }\n   \
    \                 bucket -= 1\n                }\n            }\n        }\n \
    \       result + bucket\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqnp32d9q.scala:49)\n\tat Problem.main(tmpqnp32d9q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n        var result = 0L\n \
    \       var used = Array.fill(grid.size)(0L)\n        for (i <- 0 until grid.size)\
    \ {\n            for (j <- 0 until grid(i).size) {\n                if (grid(i)(j)\
    \ > 0 && used(i) < capacity) {\n                    grid(i)(j) -= 1\n        \
    \            used(i) += 1\n                    result += 1\n                }\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkyj_yji7.scala:37:31 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                    grid(i)(j) -= \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value -= is not a member of Long - did you mean Long.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659820892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n        val rows = grid.length\n\
    \        val cols = grid(0).length\n        val cache = Array.fill(rows, cols)(0L)\n\
    \        var max_fill = 0L\n        var i = 0\n        while (i < rows) {\n  \
    \          var j = 0\n            while (j < cols) {\n                if (grid(i)(j)\
    \ == 1) {\n                    val up = if (i > 0) cache(i - 1)(j) else 0\n  \
    \                  val left = if (j > 0) cache(i)(j - 1) else 0\n            \
    \        cache(i)(j) = 1 + math.min(up, left)\n                    max_fill =\
    \ math.max(max_fill, cache(i)(j))\n                }\n                j += 1\n\
    \            }\n            i += 1\n        }\n        max_fill\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn2ov73hl.scala:53)\n\tat Problem.main(tmpn2ov73hl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n        val n = grid.length\n\
    \        val m = grid(0).length\n        var max = 0L\n        for (i <- 0 until\
    \ n) {\n            for (j <- 0 until m) {\n                if (grid(i)(j) ==\
    \ 1) {\n                    if (i == 0) max = max + capacity\n               \
    \     else {\n                        val prev = grid(i - 1)(j)\n            \
    \            if (prev < capacity) max = max + (capacity - prev)\n            \
    \        }\n                }\n            }\n        }\n        max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_g1ah5p3.scala:49)\n\tat Problem.main(tmp_g1ah5p3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n        if (grid.isEmpty) 0\n\
    \        else {\n            val rowCount = grid.length\n            val colCount\
    \ = grid(0).length\n            val sums = Array.ofDim[Long](rowCount + 1, colCount\
    \ + 1)\n            for (i <- 0 until rowCount) {\n                for (j <- 0\
    \ until colCount) {\n                    sums(i + 1)(j + 1) = sums(i)(j + 1) +\
    \ sums(i + 1)(j) - sums(i)(j) + grid(i)(j)\n                }\n            }\n\
    \            // suppose we have 1 row\n            // number of things filled\
    \ = floor(sums / capacity)\n            // suppose we have 2 rows\n          \
    \  // number of things filled = floor(sums / capacity) + floor(sums / capacity)\n\
    \            //   where sums is the sum of the sum of 2 rows\n            // suppose\
    \ we have 3 rows\n            // number of things filled = floor(sums / capacity)\
    \ + floor(sums / capacity) + floor(sums / capacity)\n            //   where sums\
    \ is the sum of the sum of 3 rows\n            // ...\n            // same thing\
    \ works with columns\n            // let's think about 2D\n            // let's\
    \ suppose we have 1 row and 1 column\n            // number of things filled =\
    \ floor(sums / capacity) + floor(sums / capacity)\n            //   where sums\
    \ is the sum of the sum of 1 row and 1 column\n            // suppose we have\
    \ 2 rows and 1 column\n            // number of things filled = floor(sums / capacity)\
    \ + floor(sums / capacity) + floor(sums / capacity)\n            //   where sums\
    \ is the sum of the sum of 2 rows and 1 column\n            // suppose we have\
    \ 1 row and 2 columns\n            // number of things filled = floor(sums / capacity)\
    \ + floor(sums / capacity) + floor(sums / capacity)\n            //   where sums\
    \ is the sum of the sum of 1 row and 2 columns\n            // suppose we have\
    \ 2 rows and 2 columns\n            // number of things filled = floor(sums /\
    \ capacity) + floor(sums / capacity) + floor(sums / capacity) + floor(sums / capacity)\n\
    \            //   where sums is the sum of the sum of 2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxirkd9iv.scala:75:0 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxirkd9iv.scala:74:1\
    \ ---------------------\e[0m\e[0m\n\e[31m74 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpxirkd9iv.scala:66:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m66 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659820892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n        val m = grid.size\n\
    \        val n = grid(0).size\n        var maxFill = 0L\n        for (i <- 0 until\
    \ m) {\n            for (j <- 0 until n) {\n                if (grid(i)(j) ==\
    \ 1) {\n                    maxFill = max(maxFill, getFill(grid, capacity, i,\
    \ j))\n                }\n            }\n        }\n        return maxFill\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkltab3ol.scala:38:43 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                    maxFill = max(maxFill, getFill(grid,\
    \ capacity, i, j))\n\e[31m\e[31m   |\e[0m                                    \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \   Not found: getFill\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n        var max = 0L\n    \
    \    for (i <- 0 until grid.length) {\n            for (j <- 0 until grid(i).length)\
    \ {\n                max = max max grid(i)(j)\n            }\n        }\n    \
    \    val filled : HashMap[Long, List[List[Long]]] = new HashMap\n        filled(0)\
    \ = grid\n        var maxfilled = 0L\n        while (filled.contains(maxfilled))\
    \ {\n            val empties = filled(maxfilled)\n            filled.remove(maxfilled)\n\
    \            for (row <- empties) {\n                val emp = row.count(_ ==\
    \ 0)\n                val fill = row.count(_ == 1)\n                if (fill >\
    \ 0) {\n                    val filled2 = row.map(_ max (1L - maxfilled))\n  \
    \                  val maxfilled2 = filled2.map(_ min maxfilled).sum\n       \
    \             if (!filled.contains(maxfilled2)) filled(maxfilled2) = List()\n\
    \                    filled(maxfilled2) = filled(maxfilled2) :+ filled2\n    \
    \            }\n                var empties2 = List[List[Long]]()\n          \
    \      var k = 0\n                var rem = 0\n                while (k <= emp\
    \ && k <= capacity) {\n                    val remaining = maxfilled - k\n   \
    \                 if (remaining >= 0) {\n                        if (!filled.contains(remaining))\
    \ filled(remaining) = List()\n                        val emp2 = List.fill(rem)(0L)\
    \ ::: List.fill(k)(1L) ::: List.fill(emp - k)(0L)\n                        filled(remaining)\
    \ = filled(remaining) :+ emp2\n                    }\n                    rem\
    \ += 1\n                    k += capacity\n                }\n            }\n\
    \            maxfilled += 1\n        }\n        maxfilled - 1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz_zaic7u.scala:64:22 ------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m                    k += capacity\n\e[31m\e[31m   |\e\
    [0m                    ^^^^\e[0m\n\e[31m   |\e[0m                  value += is\
    \ not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n        var result = 0L\n \
    \       var fill = ListBuffer[Long]()\n        for (i <- 0 until grid.length)\
    \ {\n            var sum = 0L\n            for (j <- 0 until grid(i).length) {\n\
    \                if (grid(i)(j) == 1) sum += 1\n            }\n            fill\
    \ += sum\n        }\n        val max = fill.max\n        for (i <- 0 until grid.length)\
    \ {\n            var sum = 0L\n            for (j <- 0 until grid(i).length) {\n\
    \                if (grid(i)(j) == 1) sum += 1\n            }\n            result\
    \ += max - sum\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu0atuc1d.scala:53)\n\tat Problem.main(tmpu0atuc1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n        val maxs = grid.map(x\
    \ => x.max)\n        if (maxs.max == 0) 0\n        else capacity * maxs.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeo8kebx0.scala:37)\n\tat Problem.main(tmpeo8kebx0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n    \tvar max = 0L\n    \t\
    for (row <- grid)\n    \t\tmax = max max row.sum\n    \tvar buckets = if (max\
    \ % capacity == 0) max / capacity else max / capacity + 1\n    \tbuckets\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3jxj4_04.scala:39)\n\tat Problem.main(tmp3jxj4_04.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n        var max = 0L\n    \
    \    grid.foreach(row => row.foreach(e => if (e > max) max = e))\n        max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_dkqzhpo.scala:37)\n\tat Problem.main(tmp_dkqzhpo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n        // Find the lowest\
    \ index of non-zero rows in the grid\n        val lowInd = (0 until grid.length).find(grid(_).forall(_\
    \ == 0)) match {\n            case Some(i) => i\n            case None => 0\n\
    \        }\n        // Find the highest index of non-zero rows in the grid\n \
    \       val highInd = (0 until grid.length).reverse.find(grid(_).forall(_ == 0))\
    \ match {\n            case Some(i) => i\n            case None => grid.length\
    \ - 1\n        }\n        // Initially the result is 0\n        var res = 0L\n\
    \        // Then you move the bucket down to the lowest non-zero row\n       \
    \ res += lowInd\n        // Next you go down row by row\n        for (i <- lowInd\
    \ to highInd) {\n            // Now you move the bucket right to the rightmost\
    \ 1 in this row\n            res += grid(i).lastIndexOf(1)\n            // Then\
    \ you move the bucket down to the next row\n            res += 1\n        }\n\
    \        // Finally you move the bucket left to the leftmost 1 in the last row,\
    \ which is 0\n        res += 0\n        // The time complexity is O(row_length\
    \ * row_number)\n        res\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc3e118e6.scala:59)\n\tat Problem.main(tmpc3e118e6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n        grid.map(row => {\n\
    \            val rowSum = row.sum\n            rowSum - (rowSum % capacity)\n\
    \        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmfw284hq.scala:39)\n\tat Problem.main(tmpmfw284hq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n        var maxFill : Long\
    \ = 0\n        var totalFill : Long = 0\n        var maxRow : Long = 0\n     \
    \   var maxRowIndex : Long = 0\n        grid.foreach { row =>\n            var\
    \ rowFill : Long = 0\n            row.foreach { column =>\n                rowFill\
    \ += column\n            }\n            totalFill += rowFill\n            if (rowFill\
    \ > maxRow) {\n                maxRow = rowFill\n                maxRowIndex =\
    \ grid.indexOf(row)\n            }\n        }\n        if (maxRow > capacity)\
    \ {\n            var currentRow = grid(maxRowIndex.toInt)\n            var i =\
    \ 0\n            while (i < currentRow.length) {\n                var j = 0\n\
    \                while (j < capacity) {\n                    currentRow(i) -=\
    \ 1\n                    j += 1\n                }\n                i += 1\n \
    \           }\n            maxFill += maxRow / capacity\n            maxFill +=\
    \ maxFill(grid, capacity)\n        }\n        return maxFill\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8unpuvhd.scala:53:34 ------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m                    currentRow(i) -= \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value -= is not a member of Long - did you mean Long.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp8unpuvhd.scala:59:20 ------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m            maxFill += maxFill(grid, capacity)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmp8unpuvhd.scala:59:23 -----------------------------\e[0m\e[0m\n\
    \e[31m59 |\e[0m            maxFill += maxFill(grid, capacity)\n\e[31m\e[31m  \
    \ |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \      \e[33mvariable\e[0m \e[35mmaxFill\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659820892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n        val max = grid.map(_.max).max\n\
    \        if (max <= capacity) return 0\n        //val map = Array.ofDim[List[Int]](max\
    \ + 1)\n        val map = new ListBuffer[List[Int]]\n        map += List.empty[Int]\n\
    \        for (i <- 1 to max) {\n            val list = new ListBuffer[Int]\n \
    \           list += 0\n            map += list.toList\n        }\n        var\
    \ answer = 0\n        for (i <- 0 until grid.length) {\n            for (j <-\
    \ 0 until grid(i).length) {\n                if (grid(i)(j) > 0) {\n         \
    \           for (k <- 1 to grid(i)(j).toInt) {\n                        if (map(k).isEmpty)\
    \ answer += 1\n                        else {\n                            val\
    \ t = map(k).tail\n                            map(k) = t\n                  \
    \      }\n                    }\n                }\n            }\n        }\n\
    \        return answer\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowj6kbyp.scala:37:23\
    \ --------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to max) {\n\e[31m\e[31m   |\e[0m                       ^^^\e[0m\n\
    \e[31m   |\e[0m                       Found:    (max : Long)\n\e[31m   |\e[0m\
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n        // f(i, j) = the maximum\
    \ units of water that can be extracted from the (i, j)th well\n        // f(i,\
    \ j) = max(min(capacity, sum of water in the (i, j)th well and the wells above\
    \ it), sum of water in the (i, j)th well)\n        // f(i, j) = max(min(capacity,\
    \ sum of water in the (i, j)th well and the wells above it), the number of units\
    \ of water in the (i, j)th well)\n        // f(i, j) = max(min(capacity, sum of\
    \ water in the (i, j)th well and the wells above it), the number of units of water\
    \ in the (i, j)th well)\n        // f(i, j) = max(min(capacity, sum of water in\
    \ the (i, j)th well and the wells above it), sum of water in the (i, j)th well)\n\
    \        // f(i, j) = max(min(capacity, sum of water in the (i, j)th well and\
    \ the wells above it), the number of units of water in the (i, j)th well)\n  \
    \      // f(i, j) = max(min(capacity, sum of water in the (i, j)th well and the\
    \ wells above it), the number of units of water in the (i, j)th well)\n      \
    \  // f(i, j) = max(min(capacity, sum of water in the (i, j)th well and the wells\
    \ above it), sum of water in the (i, j)th well)\n        // f(i, j) = max(min(capacity,\
    \ sum of water in the (i, j)th well and the wells above it), the number of units\
    \ of water in the (i, j)th well)\n        // f(i, j) = max(min(capacity, sum of\
    \ water in the (i, j)th well and the wells above it), the number of units of water\
    \ in the (i, j)th well)\n        // f(i, j) = max(min(capacity, sum of water in\
    \ the (i, j)th well and the wells above it), sum of water in the (i, j\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8zb1oce8.scala:31:67\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m    \e[33mdef\e[0m \e[36mmaxFill\e\
    [0m(\e[36mgrid\e[0m : \e[35mList\e[0m[\e[35mList\e[0m[\e[35mLong\e[0m]], \e[36mcapacity\e\
    [0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m          \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                                          Found:    Unit\n\e\
    [31m   |\e[0m                                                          Required:\
    \ Long\n\e[31m32 |\e[0m        \e[34m// f(i, j) = the maximum units of water that\
    \ can be extracted from the (i, j)th well\e[0m\n\e[31m33 |\e[0m        \e[34m//\
    \ f(i, j) = max(min(capacity, sum of water in the (i, j)th well and the wells\
    \ above it), sum of water in the (i, j)th well)\e[0m\n\e[31m34 |\e[0m        \e\
    [34m// f(i, j) = max(min(capacity, sum of water in the (i, j)th well and the wells\
    \ above it), the number of units of water in the (i, j)th well)\e[0m\n\e[31m35\
    \ |\e[0m        \e[34m// f(i, j) = max(min(capacity, sum of water in the (i, j)th\
    \ well and the wells above it), the number of units of water in the (i, j)th well)\e\
    [0m\n\e[31m36 |\e[0m        \e[34m// f(i, j) = max(min(capacity, sum of water\
    \ in the (i, j)th well and the wells above it), sum of water in the (i, j)th well)\e\
    [0m\n\e[31m37 |\e[0m        \e[34m// f(i, j) = max(min(capacity, sum of water\
    \ in the (i, j)th well and the wells above it), the number of units of water in\
    \ the (i, j)th well)\e[0m\n\e[31m38 |\e[0m        \e[34m// f(i, j) = max(min(capacity,\
    \ sum of water in the (i, j)th well and the wells above it), the number of units\
    \ of water in the (i, j)th well)\e[0m\n\e[31m39 |\e[0m        \e[34m// f(i, j)\
    \ = max(min(capacity, sum of water in the (i, j)th well and the wells above it),\
    \ sum of water in the (i, j)th well)\e[0m\n\e[31m40 |\e[0m        \e[34m// f(i,\
    \ j) = max(min(capacity, sum of water in the (i, j)th well and the wells above\
    \ it), the number of units of water in the (i, j)th well)\e[0m\n\e[31m41 |\e[0m\
    \        \e[34m// f(i, j) = max(min(capacity, sum of water in the (i, j)th we"
  stdout: ''
  timestamp: 1659820891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    //\
    \ Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n\
    \    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n\
    \    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n\
    \    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n \
    \   // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n        var wells = grid.map(l\
    \ => l.max).max\n        var buckets = capacity\n        var count = 0L\n    \
    \    for (well <- wells to 1 by -1) {\n            for (bucket <- 1 to buckets)\
    \ {\n                count += grid.map(l => l.count(_ == well)).max\n        \
    \    }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpntrk4fxw.scala:36:32\
    \ --------------------\e[0m\e[0m\n\e[31m36 |\e[0m            \e[33mfor\e[0m (bucket\
    \ <- \e[31m1\e[0m to buckets) {\n\e[31m\e[31m   |\e[0m                       \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Found:\
    \    (buckets : Long)\n\e[31m   |\e[0m                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820891
