language: scala
name: HumanEval_132_is_nested
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        if (string.length % 2 != 0) return false\n      \
    \  for (char <- string) {\n            if (char == '[') stack.push(char)\n   \
    \         else {\n                if (stack.isEmpty) return false\n          \
    \      else stack.pop\n            }\n        }\n        if (stack.isEmpty) return\
    \ true\n        else return false\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpucoly2xh.scala:29)\n\tat Problem.main(tmpucoly2xh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        var left\
    \ = 0\n        var right = 0\n        for (char <- string) {\n            if (char\
    \ == '[') left += 1\n            else if (char == ']') right += 1\n          \
    \  if (right > left) return false\n        }\n        left > right\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvymmyyic.scala:24)\n\tat Problem.main(tmpvymmyyic.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val b\
    \ = ArrayBuffer[Char]()\n        string.foreach(x => if (x == '[') b += x else\
    \ b.remove(b.size - 1))\n        return b.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1 is out of bounds (min 0, max -1)\n\
    \tat scala.collection.mutable.ArrayBuffer.remove(ArrayBuffer.scala:98)\n\tat Problem$.isNested$$anonfun$1(tmp4fl1yq_1.scala:15)\n\
    \tat Problem$.isNested$$anonfun$adapted$1(tmp4fl1yq_1.scala:15)\n\tat scala.collection.StringOps$.foreach$extension(StringOps.scala:1044)\n\
    \tat Problem$.isNested(tmp4fl1yq_1.scala:15)\n\tat Problem$.main(tmp4fl1yq_1.scala:20)\n\
    \tat Problem.main(tmp4fl1yq_1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        var result\
    \ = false\n        var bracketArray = string.toCharArray()\n        for (i <-\
    \ bracketArray.indices) {\n            if (bracketArray(i) == '[') {\n       \
    \         var subArray = bracketArray.slice(i, bracketArray.length)\n        \
    \        for (j <- subArray.indices) {\n                    if (subArray(j) ==\
    \ ']') {\n                        result = true\n                        return\
    \ result\n                    }\n                }\n            }\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd2kbet06.scala:31)\n\tat Problem.main(tmpd2kbet06.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = Stack[Char]()\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return false\n       \
    \         else stack.pop\n            }\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuzjd8or1.scala:27)\n\tat Problem.main(tmpuzjd8or1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        if (string.size\
    \ % 2 != 0) false else {\n            val seq = string.filter(_ != '[').filter(_\
    \ != ']')\n            val s = string.filter(s => seq.contains(s))\n         \
    \   val arr = s.toCharArray\n            var c = 0\n            for (i <- 0 until\
    \ arr.size) {\n                if (arr(i) == '[') c += 1\n                else\
    \ c -= 1\n                if (c < 0) return false\n            }\n           \
    \ c == 0\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpafly5adc.scala:29)\n\tat Problem.main(tmpafly5adc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                if (stack.pop() != '[') return false\n       \
    \     }\n        }\n        stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphq1u18yu.scala:27)\n\tat Problem.main(tmphq1u18yu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        var depth\
    \ = 0\n        var maxDepth = 0\n        var isNested = false\n        string.foreach\
    \ { ch =>\n            if (ch == '[') depth += 1\n            else if (ch == ']')\
    \ depth -= 1\n            maxDepth = max(maxDepth, depth)\n            if (depth\
    \ < 0) return false\n        }\n        if (depth != 0) return false\n       \
    \ return maxDepth > 1\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ut4zmju.scala:36)\n\tat Problem.main(tmp4ut4zmju.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        string.foreach(c => {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        })\n  \
    \      if (stack.isEmpty) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ll_w7vd.scala:27)\n\tat Problem.main(tmp4ll_w7vd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = Stack[Char]()\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else if (c == ']') {\n         \
    \       if (stack.isEmpty) {\n                    return false\n             \
    \   } else {\n                    stack.pop\n                }\n            }\n\
    \        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1_4ne9wg.scala:31)\n\tat Problem.main(tmp1_4ne9wg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        if (string.length\
    \ <= 1) return false\n        var leftBracket : Boolean = false\n        var rightBracket\
    \ : Boolean = false\n        var bracketCount : Int = 0\n        var consecutiveBracketCount\
    \ : Int = 0\n        var bracketPairCount : Int = 0\n        var lastBracket :\
    \ Char = ' '\n        for (i <- 0 until string.length) {\n            if (string(i)\
    \ == '[') {\n                leftBracket = true\n                bracketCount\
    \ += 1\n                if (lastBracket == '[') consecutiveBracketCount += 1\n\
    \                lastBracket = '['\n            }\n            else if (string(i)\
    \ == ']') {\n                rightBracket = true\n                bracketCount\
    \ -= 1\n                if (lastBracket == ']') consecutiveBracketCount += 1\n\
    \                lastBracket = ']'\n            }\n            if (bracketCount\
    \ == 0) bracketPairCount += 1\n        }\n        return (leftBracket && rightBracket\
    \ && consecutiveBracketCount > 1 && bracketPairCount > 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp57j1n_bd.scala:39)\n\tat Problem.main(tmp57j1n_bd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Write\
    \ your code here\n        var count = 0\n        var flag = false\n        for\
    \ (i <- 0 until string.length) {\n            val char = string(i)\n         \
    \   if (char == '[') {\n                count += 1\n            } else {\n   \
    \             count -= 1\n            }\n            if (count < 0) {\n      \
    \          return false\n            }\n            if (count == 0) {\n      \
    \          flag = true\n            }\n        }\n        if (count == 0 && flag)\
    \ {\n            return true\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc5uabma3.scala:39)\n\tat Problem.main(tmpc5uabma3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        var leftBracket\
    \ = 0\n        var rightBracket = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string(i) == '[') leftBracket += 1\n            else if (string(i)\
    \ == ']') rightBracket += 1\n            if (rightBracket > leftBracket) return\
    \ false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvl6iwu5i.scala:26)\n\tat Problem.main(tmpvl6iwu5i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Count\
    \ no of open brackets and closed brackets\n        // if they are not equal =>\
    \ return false \n        var open_count = 0\n        var close_count = 0\n   \
    \     for (c <- string) {\n            if (c == '[') {\n                open_count\
    \ += 1\n            } else if (c == ']') {\n                close_count += 1\n\
    \            }\n        }\n        if (open_count != close_count) {\n        \
    \    return false\n        }\n        var flag = false\n        var open = 0\n\
    \        var close = 0\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                open += 1\n            } else if (c == ']') {\n         \
    \       close += 1\n            }\n            if (open > 0 && close > 0 && open\
    \ < close) {\n                flag = true\n            }\n        }\n        flag\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpabf1zjw0.scala:44)\n\tat Problem.main(tmpabf1zjw0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        var counter\
    \ = 0\n        var flag = false\n        string.foreach(x => x match {\n     \
    \       case '[' => {\n                counter += 1\n                flag = false\n\
    \            }\n            case ']' => {\n                counter -= 1\n    \
    \            flag = true\n            }\n        })\n        counter == 0 && flag\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2e30d784.scala:31)\n\tat Problem.main(tmp2e30d784.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n    \tvar st =\
    \ Stack[Char]()\n    \tvar pattern = \"\"\n    \tvar count = 0\n    \tfor (i <-\
    \ 0 until string.length) {\n    \t\tvar cur = string(i)\n    \t\tif (cur == '[')\
    \ {\n    \t\t\tst.push(cur)\n    \t\t\tpattern += \"b\"\n    \t\t} else {\n  \
    \  \t\t\tif (st.isEmpty) {\n    \t\t\t\treturn false\n    \t\t\t} else {\n   \
    \ \t\t\t\tst.pop\n    \t\t\t\tif (pattern.endsWith(\"b\")) {\n    \t\t\t\t\tcount\
    \ += 1\n    \t\t\t\t\tpattern = pattern.dropRight(1)\n    \t\t\t\t} else {\n \
    \   \t\t\t\t\tpattern += \"c\"\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t\
    }\n    \tif (count >= 1) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb8p86bk7.scala:41)\n\tat Problem.main(tmpb8p86bk7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // if\
    \ it is odd, it cannot be nested.\n        if (string.length % 2 == 1) {\n   \
    \         return false\n        }\n        // if it is empty, then it is not nested\n\
    \        if (string.length == 0) {\n            return false\n        }\n    \
    \    // if it is one, then it is not nested\n        if (string.length == 1) {\n\
    \            return false\n        }\n        // since it is even, then we can\
    \ iterate through it and perform a check.\n        // if all open brackets are\
    \ closed, then it is valid.\n        var open : Int = 0\n        var close : Int\
    \ = 0\n        var i : Int = 0\n        while (i < string.length) {\n        \
    \    if (string(i) == '[') {\n                open += 1\n            }\n     \
    \       else {\n                close += 1\n            }\n            i += 1\n\
    \        }\n        return open == close\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe5rn8qy8.scala:45)\n\tat Problem.main(tmpe5rn8qy8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = Stack[Char]()\n        for (i <- 0 until string.length) {\n            val\
    \ c = string(i)\n            if (c == '[') stack.push(c)\n            else {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl087_y9x.scala:28)\n\tat Problem.main(tmpl087_y9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Brute\
    \ Force\n        val stack = ArrayStack[Char]()\n        for (char <- string)\
    \ {\n            if (char == '[') {\n                stack.push(char)\n      \
    \      } else {\n                if (stack.isEmpty) return false\n           \
    \     stack.pop\n            }\n        }\n        false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpouv06b01.scala:27)\n\tat Problem.main(tmpouv06b01.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        var characters\
    \ = new ArrayBuffer[Char]()\n        for (i <- 0 until string.length()) {\n  \
    \          characters += string.charAt(i)\n        }\n        var res = new ArrayBuffer[Int]()\n\
    \        var count = 0\n        for (i <- 0 until characters.length) {\n     \
    \       if (characters(i) == '[') {\n                count += 1\n            }\
    \ else {\n                count -= 1\n            }\n            res += count\n\
    \        }\n        var min = Integer.MAX_VALUE\n        for (i <- 0 until res.length)\
    \ {\n            if (res(i) < min) {\n                min = res(i)\n         \
    \   }\n        }\n        if (min < 0) {\n            return false\n        }\n\
    \        if (res(res.length - 1) == 0) {\n            return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2_rz0z_j.scala:45)\n\tat Problem.main(tmp2_rz0z_j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
