name: HumanEval_124_valid_date
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You have to write a function which validates a given date string and\n \
  \   // returns True if the date is valid otherwise False.\n    // The date is valid\
  \ if all of the following rules are satisfied:\n    // 1. The date string is not\
  \ empty.\n    // 2. The number of days is not less than 1 or higher than 31 days\
  \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
  \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or\
  \ higher than 29 for the month 2.\n    // 3. The months should not be less than\
  \ 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n\
  \    // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012')\
  \ => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020')\
  \ => True\n    // valid_date('06/04/2020') => False\n    def validDate(date : String)\
  \ : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
  )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
  04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
  \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\"\
  )) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
  04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
  \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\"\
  )) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"\
  20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n  \
  \  assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        val pattern = \"^\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d\\\\d\\\\\
    d$\".r\n        if (pattern.findFirstIn(date) == None) return false\n        val\
    \ arr = date.split(\"-\")\n        val m = arr(0).toInt\n        val d = arr(1).toInt\n\
    \        if (m < 1 || m > 12) return false\n        if (m == 2) {\n          \
    \  if (d < 1 || d > 29) return false\n        } else if (m == 4 || m == 6 || m\
    \ == 9 || m == 11) {\n            if (d < 1 || d > 30) return false\n        }\
    \ else {\n            if (d < 1 || d > 31) return false\n        }\n        true",
  "        try {\n            val Array(month, day, year) = date.split(\"-\").map(_.toInt)\n\
    \            val isLeapYear = year % 4 == 0 && year % 100 != 0 || year % 400 ==\
    \ 0\n            if (month < 1 || month > 12) return false\n            if (day\
    \ < 1 || day > 31) return false\n            if (month == 2) {\n             \
    \   if (isLeapYear) {\n                    if (day > 29) return false\n      \
    \          } else {\n                    if (day > 28) return false\n        \
    \        }\n            } else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n                if (day > 30) return false\n            }\n      \
    \      true\n        } catch {\n            case e : Throwable => false\n    \
    \    }", "    \tval split = date.split(\"-\")\n    \tif (split.length != 3) return\
    \ false\n    \tif (split(0).length != 2 || split(1).length != 2 || split(2).length\
    \ != 4) return false\n    \tval month = split(0).toInt\n    \tval day = split(1).toInt\n\
    \    \tval year = split(2).toInt\n    \tif (month < 1 || month > 12) return false\n\
    \    \tif (day < 1 || day > 31) return false\n    \tif (month == 2) {\n    \t\t\
    if (day > 29) return false\n    \t\tif (day == 29) {\n    \t\t\tif (year % 4 !=\
    \ 0) return false\n    \t\t\tif (year % 100 == 0 && year % 400 != 0) return false\n\
    \    \t\t}\n    \t}\n    \tif (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n    \t\tif (day > 30) return false\n    \t\treturn true\n    \t}\n\
    \    \treturn true", "        if(date.length() != 10) return false\n        val\
    \ dateArray = date.split(\"-\")\n        if(dateArray.length != 3) return false\n\
    \        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        if(month < 1 || month > 12) return\
    \ false\n        if(month == 2) {\n            if(day < 1 || day > 29) return\
    \ false\n        } else if(month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if(day < 1 || day > 30) return false\n        } else {\n\
    \            if(day < 1 || day > 31) return false\n        }\n        return true",
  "        if (date.length() == 0) return false\n        val dateList = date.split(\"\
    -\")\n        val month = dateList(0).toInt\n        val day = dateList(1).toInt\n\
    \        val year = dateList(2).toInt\n        if (month < 1 || month > 12) return\
    \ false\n        if (day < 1 || day > 31) return false\n        if (month == 2)\
    \ {\n            if (year % 4 == 0) {\n                if (day > 29) return false\n\
    \            } else {\n                if (day > 28) return false\n          \
    \  }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        return true",
  "        try {\n        \tval (m, d, y) = date.split(\"-\").map(_.toInt)\n     \
    \   \tval date = new Date(y, m, d)\n        \tm > 0 && m < 13 && d > 0 && d <\
    \ 32 && y >= 0\n        } catch {\n        \tcase ex : Exception => false\n  \
    \      }", "        date match {\n            case \"\" => false\n           \
    \ case x if x.length != 10 => false\n            case x if x.charAt(2) != '-'\
    \ => false\n            case x if x.charAt(5) != '-' => false\n            case\
    \ x if x.charAt(0) == '0' => false\n            case x if x.charAt(3) == '0' =>\
    \ false\n            case x if x.charAt(6) == '0' => false\n            case x\
    \ if x.charAt(7) == '0' => false\n            case x if x.charAt(8) == '0' =>\
    \ false\n            case x if x.charAt(9) == '0' => false\n            case x\
    \ if x.charAt(0) > '1' => false\n            case x if x.charAt(0) == '1' && x.charAt(1)\
    \ > '2' => false\n            case x if x.charAt(3) > '3' => false\n         \
    \   case x if x.charAt(3) == '3' && x.charAt(4) > '1' => false\n            case\
    \ x if x.charAt(6) < '2' => false\n            case x if x.charAt(6) == '2' &&\
    \ x.charAt(7) < '0' => false\n            case x if x.charAt(6) == '2' && x.charAt(7)\
    \ == '0' && x.charAt(8) < '1' => false\n            case x if x.charAt(0) == '0'\
    \ && x.charAt(1) == '1' && x.charAt(3) == '0' && x.charAt(4) == '3' && x.charAt(6)\
    \ == '2' && x.charAt(7) == '0' && x.charAt(8) == '2' && x.charAt(9) == '0' =>\
    \ false\n            case x if x.charAt(0) == '0' && x.charAt(1) == '1' && x.charAt(3)\
    \ == '0' && x.charAt(4) == '3' && x.charAt(6", "        try {\n            val\
    \ dateArray = date.split(\"-\")\n            val days = dateArray(1).toInt\n \
    \           val months = dateArray(0).toInt\n            val years = dateArray(2).toInt\n\
    \            if (days < 1 || days > 31) return false\n            if (months <\
    \ 1 || months > 12) return false\n            val isLeapYear = ((years % 4 ==\
    \ 0) && (years % 100 != 0)) || (years % 400 == 0)\n            if (months == 2)\
    \ {\n                if (isLeapYear) {\n                    if (days > 29) return\
    \ false\n                } else {\n                    if (days > 28) return false\n\
    \                }\n            } else if (months == 4 || months == 6 || months\
    \ == 9 || months == 11) {\n                if (days > 30) return false\n     \
    \       }\n            return true\n        } catch {\n            case e : Exception\
    \ => return false\n        }", "        try {\n            val arr = date.split(\"\
    -\")\n            if (arr.length != 3) return false\n            val year = arr(2).toInt\n\
    \            val month = arr(0).toInt\n            val day = arr(1).toInt\n  \
    \          if (year < 0 || month < 1 || month > 12 || day < 1) return false\n\
    \            val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31)\n            if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0))\
    \ {\n                if (month == 2 && day > 29) return false\n            } else\
    \ {\n                if (month == 2 && day > 28) return false\n            }\n\
    \            if (daysInMonth(month - 1) < day) return false\n            true\n\
    \        } catch {\n            case e : Throwable => false\n        }", "   \
    \     val p = \"\"\"(\\d\\d)-(\\d\\d)-(\\d\\d\\d\\d)\"\"\".r\n        if (date.length\
    \ == 0) return false\n        date match {\n            case p(a, b, c) => {\n\
    \                if (b.toInt < 1 || b.toInt > 31) return false\n             \
    \   if (a.toInt < 1 || a.toInt > 12) return false\n                if (a.toInt\
    \ == 2 && b.toInt > 29) return false\n                if (a.toInt == 2 && b.toInt\
    \ == 29 && c.toInt % 4 != 0) return false\n                if (a.toInt == 4 ||\
    \ a.toInt == 6 || a.toInt == 9 || a.toInt == 11) {\n                    if (b.toInt\
    \ > 30) return false\n                }\n                true\n            }\n\
    \            case _ => false\n        }", "        // split by '-'\n        val\
    \ ds = date.split(\"-\")\n        if (ds.length != 3) return false\n        if\
    \ (ds(0).length != 2 || ds(1).length != 2 || ds(2).length != 4) return false\n\
    \        val m = ds(0).toInt\n        val d = ds(1).toInt\n        val y = ds(2).toInt\n\
    \        if (m < 1 || m > 12) return false\n        if (m == 2) {\n          \
    \  if (y % 4 == 0) {\n                if (d < 1 || d > 29) return false\n    \
    \        } else {\n                if (d < 1 || d > 28) return false\n       \
    \     }\n        } else if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 ||\
    \ m == 10 || m == 12) {\n            if (d < 1 || d > 31) return false\n     \
    \   } else {\n            if (d < 1 || d > 30) return false\n        }\n     \
    \   true", "        var result = false\n        var dateFormat = date.split(\"\
    -\")\n        if (dateFormat.length == 3) {\n            var month = dateFormat(0).toInt\n\
    \            var day = dateFormat(1).toInt\n            var year = dateFormat(2).toInt\n\
    \            if (month == 2) {\n                if (day <= 29 && day >= 1) {\n\
    \                    result = true\n                }\n            } else if (month\
    \ <= 12 && month >= 1) {\n                if (month % 2 == 0) {\n            \
    \        if (day <= 30 && day >= 1) {\n                        result = true\n\
    \                    }\n                } else {\n                    if (day\
    \ <= 31 && day >= 1) {\n                        result = true\n              \
    \      }\n                }\n            }\n        }\n        result", "    \
    \  val validDatePattern = \"\"\"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n      val\
    \ validDatePattern(month, day, year) = date\n      if (month.toInt < 1 || month.toInt\
    \ > 12) return false\n      if (day.toInt < 1 || day.toInt > 31) return false\n\
    \      if (month.toInt == 2 && day.toInt > 29) return false\n      if (month.toInt\
    \ == 2 && day.toInt == 29 && !(year.toInt % 4 == 0 && year.toInt % 100 != 0 ||\
    \ year.toInt % 400 == 0)) return false\n      if (List(4, 6, 9, 11).contains(month.toInt)\
    \ && day.toInt > 30) return false\n      true", "        // use regex to seperate\n\
    \        val pattern = \"\"\"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        val res\
    \ = pattern.findFirstMatchIn(date)\n        if (res.isEmpty) return false\n  \
    \      val month = res.get.group(1).toInt\n        val day = res.get.group(2).toInt\n\
    \        val year = res.get.group(3).toInt\n        if (month < 1 || month > 12)\
    \ return false\n        if (day < 1 || day > 31) return false\n        val feb\
    \ = if (year % 4 == 0) 29 else 28\n        if (month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        \
    \    if (day > 31) return false\n        } else if (month == 4 || month == 6 ||\
    \ month == 9 || month == 11) {\n            if (day > 30) return false\n     \
    \   } else if (month == 2) {\n            if (day > feb) return false\n      \
    \  }\n        return true", '        return true', "    \tval ymd = date.split(\"\
    -\")\n    \tif (ymd.length != 3) false\n    \telse {\n    \t\tvar b = true\n \
    \   \t\tval d = ymd(1).toInt\n    \t\tval m = ymd(0).toInt\n    \t\tval y = ymd(2).toInt\n\
    \    \t\tif (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m ==\
    \ 12) b = d >= 1 && d <= 31\n    \t\telse if (m == 4 || m == 6 || m == 9 || m\
    \ == 11) b = d >= 1 && d <= 30\n    \t\telse if (m == 2) {\n    \t\t\tif (y %\
    \ 400 == 0 || (y % 4 == 0 && y % 100 != 0)) b = d >= 1 && d <= 29\n    \t\t\t\
    else b = d >= 1 && d <= 28\n    \t\t}\n    \t\telse b = false\n    \t\tb && m\
    \ >= 1 && m <= 12\n    \t}", "        val DatePattern = \"\"\"(\\d\\d)-(\\d\\\
    d)-(\\d\\d\\d\\d)\"\"\".r\n        if (!date.matches(DatePattern.regex)) return\
    \ false\n        //println(DatePattern.regex)\n        val d = date.split(\"-\"\
    )\n        val m = d(0).toInt\n        val d_int = d(1).toInt\n        val y =\
    \ d(2).toInt\n        if (m < 1 || m > 12) return false\n        if (m == 2) {\n\
    \            if (d_int < 1 || d_int > 29) return false\n        } else if (m ==\
    \ 4 || m == 6 || m == 9 || m == 11) {\n            if (d_int < 1 || d_int > 30)\
    \ return false\n        } else {\n            if (d_int < 1 || d_int > 31) return\
    \ false\n        }\n        true", "        date.isEmpty() || date.length() !=\
    \ 10 || date(2) != '-' || date(5) != '-' || !date.substring(0, 2).forall(_.isDigit)\
    \ || !date.substring(3, 5).forall(_.isDigit) || !date.substring(6, 10).forall(_.isDigit)\
    \ || !((date.substring(0, 2).toInt >= 1 && date.substring(0, 2).toInt <= 12) &&\
    \ (date.substring(3, 5).toInt >= 1 && date.substring(3, 5).toInt <= 31) && (date.substring(6,\
    \ 10).toInt >= 1900 && date.substring(6, 10).toInt <= 2099))", "        val Array(m,\
    \ d, y) = date.split(\"-\").map(_.toInt)\n        if (m >= 1 && m <= 12) {\n \
    \           if (m == 2) {\n                if (y % 4 == 0) {\n               \
    \     if (d >= 1 && d <= 29) return true\n                } else {\n         \
    \           if (d >= 1 && d <= 28) return true\n                }\n          \
    \  } else if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m ==\
    \ 12) {\n                if (d >= 1 && d <= 31) return true\n            } else\
    \ {\n                if (d >= 1 && d <= 30) return true\n            }\n     \
    \   }\n        false", "        try {\n            val monthDays = Array(31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n            val List(m, d, y) = date.split(\"\
    -\").map(_.toInt).toList\n            if (m < 1 || m > 12 || d < 1 || y < 1) false\n\
    \            else if (m == 2 && d > 29) false\n            else if (m != 2 &&\
    \ d > monthDays(m - 1)) false\n            else true\n        } catch {\n    \
    \        case e : Exception => false\n        }"]
stop_tokens:
- "\n    }\n"
