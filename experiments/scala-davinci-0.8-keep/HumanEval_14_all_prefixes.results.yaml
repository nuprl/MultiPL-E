language: scala
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n        def aux(string : String, acc : List[String])\
    \ : List[String] = {\n            if (string.length > 0) aux(string.substring(0,\
    \ string.length - 1), string.substring(0, string.length) :: acc)\n           \
    \ else acc\n        }\n        aux(string, List[String]())\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n        var res = List[String]()\n        for\
    \ (i <- 0 to string.length - 1) {\n            res = string.substring(0, i + 1)\
    \ :: res\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl6jjk8pc.scala:16)\n\tat Problem.main(tmpl6jjk8pc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 to string.length - 1) result ::= string.substring(0, i + 1)\n      \
    \  result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n        (for (i <- 0 to string.length) yield string.substring(0,\
    \ i)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqd8u8uaf.scala:11)\n\tat Problem.main(tmpqd8u8uaf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n        var prefixes = List[String]()\n      \
    \  for (j <- 0 to string.length - 1) {\n            val prefix = string.substring(0,\
    \ j + 1)\n            prefixes = prefix :: prefixes\n        }\n        prefixes\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaeccuxos.scala:17)\n\tat Problem.main(tmpaeccuxos.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n        if (string.isEmpty) return List[String]()\n\
    \        val r = for (i <- 0 to string.length) yield string.substring(0, i)\n\
    \        r.toList\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ggwgjbq.scala:14)\n\tat Problem.main(tmp_ggwgjbq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n        // Base case\n        if (string.isEmpty)\
    \ {\n            return List()\n        }\n        // Recursive case\n       \
    \ val rest = allPrefixes(string.tail)\n        val result = string.head :: rest.map(s\
    \ => string.head + s)\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqnbafl95.scala:15:15\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mreturn\e[0m result\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \  Found:    (result : List[Matchable])\n\e[31m   |\e[0m               Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n        if (string.isEmpty) {\n            return\
    \ List()\n        }\n        val prefixes = new ListBuffer[String]\n        var\
    \ i = 0\n        while (i < string.length) {\n            prefixes += string.substring(0,\
    \ i + 1)\n            i += 1\n        }\n        return prefixes.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n        if (string.length == 0) Nil\n        else\
    \ {\n            val last = string.length - 1\n            List.range(0, last\
    \ + 1).foldLeft(List[String]())((a, i) => string.substring(0, i + 1) :: a)\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp77juxhrc.scala:16)\n\tat Problem.main(tmp77juxhrc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n        val result = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length) result += string.slice(0, i)\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqt2wq4jz.scala:13)\n\tat Problem.main(tmpqt2wq4jz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n        var list = ListBuffer[String]()\n    \
    \    for (i <- (0 to string.length)) {\n            list += string.substring(0,\
    \ i)\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprhcswmqn.scala:15)\n\tat Problem.main(tmprhcswmqn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n        var prefixes = List[String]()\n      \
    \  for (i <- 1 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n        if (string.length() == 0) List()\n   \
    \     else if (string.length() == 1) List(string)\n        else string.map(c =>\
    \ string.take(string.indexOf(c) + 1)).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpog_b01ss.scala:15)\n\tat Problem.main(tmpog_b01ss.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n        def helper(string : String, acc : List[String])\
    \ : List[String] = {\n            if (string.length == 0) acc\n            else\
    \ helper(string.dropRight(1), acc :+ string)\n        }\n        helper(string,\
    \ List[String]())\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk6mpmkc3.scala:16)\n\tat Problem.main(tmpk6mpmkc3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n      if (string.length == 0) List(\"\")\n   \
    \   else {\n        val suffix = allPrefixes(string.tail)\n        string.head\
    \ :: suffix.map(string.head + _)\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8etchu34.scala:11:15\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        string.head :: suffix.map(string.head\
    \ + _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Found:    Char\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659821374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n        val m = string.length\n        List.range(1,\
    \ m + 1).map(string.substring(0, _)).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821375
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n        val result = new ArrayBuffer[String]\n\
    \        for (i <- 1 to string.length) result += string.substring(0, i)\n    \
    \    result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n        string.indices.map(string.substring(0,\
    \ _ + 1)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\
    \")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
    WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpbog7veev.scala:8:47 ------------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        string.indices.map(string.substring(\e[31m0\e\
    [0m, _ + \e[31m1\e[0m)).toList\n\e[31m\e[31m  |\e[0m                         \
    \                      ^\e[0m\n\e[31m  |\e[0m     Missing parameter type\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m     I could not infer the type of the parameter _$1\
    \ of expanded function:\n\e[31m  |\e[0m     _$1 => _$1 + 1.\n1 error found\n"
  stdout: ''
  timestamp: 1659821371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n        var all_prefixes = ListBuffer[String]()\n\
    \        for (i <- 1 to string.length) {\n            all_prefixes += string.substring(0,\
    \ i)\n        }\n        return all_prefixes.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"\
    W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of all prefixes from shortest to longest of the input\
    \ string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
    \ : String) : List[String] = {\n        val L = new ListBuffer[String]\n     \
    \   for (i <- 0 to string.length - 1) {\n            L += string.substring(0,\
    \ i + 1)\n        }\n        L.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"\
    WW\", \"WWW\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821374
