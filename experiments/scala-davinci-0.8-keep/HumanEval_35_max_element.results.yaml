language: scala
name: HumanEval_35_max_element
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n        return l.reduce((x,\
    \ y) => {if (x > y) x else y})\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n        var m = Long.MinValue\n\
    \        for (x <- l) {\n            if (x > m) m = x\n        }\n        return\
    \ m\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820413
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n        if (l.isEmpty)\
    \ 0 else l.reduceLeft(max)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820413
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n        l.max\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n        l.foldLeft(Long.MinValue)((acc,\
    \ e) => {\n            if (e > acc) e else acc\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820413
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n        return l.max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820413
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n        def maxElementHelper(s\
    \ : Long, l : List[Long]) : Long = {\n            if (l.length == 0) s\n     \
    \       else maxElementHelper(max(s, l.head), l.tail)\n        }\n        maxElementHelper(Long.MinValue,\
    \ l)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n        var max =\
    \ Long.MinValue\n        for (e <- l) if (e > max) max = e\n        return max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820413
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n        return l.max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n\t    var x = 0.toLong\n\
    \t    for (i <- l) {\n\t\t    if (i > x) {\n\t\t\t    x = i\n\t\t    }\n\t   \
    \ }\n\t    return x\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpw67w5l39.scala:14:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m\t\t    }\n\e[31m\e[31m   |\e[0m\t\t    ^\e[0m\n\e[31m\
    \   |\e[0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\
    \e[31m   |\e[0m   Previous indent : 3 tabs, 4 spaces\n\e[31m   |\e[0m   Latest\
    \ indent   : 2 tabs, 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmpw67w5l39.scala:15:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m\t    }\n\
    \e[31m\e[31m   |\e[0m\t    ^\e[0m\n\e[31m   |\e[0m   Incompatible combinations\
    \ of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m   Previous indent\
    \ : 2 tabs, 4 spaces\n\e[31m   |\e[0m   Latest indent   : 1 tab, 4 spaces\n\e\
    [31m\e[31m-- Error: /tmp/tmpw67w5l39.scala:17:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 1 tab, 4 spaces\n\e[31m   |\e[0m   Latest indent\
    \   : 4 spaces\n3 errors found\n"
  stdout: ''
  timestamp: 1659820408
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n        l.foldLeft(Long.MinValue)((a,\
    \ b) => max(a, b))\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n        def maxElement(l\
    \ : List[Long], k : Long) : Long = l match {\n            case Nil => k\n    \
    \        case h :: t => maxElement(t, max(k, h))\n        }\n        maxElement(l,\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820413
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n    \tval buf = ArrayBuffer[Long]()\n\
    \    \tfor (x <- l) buf += x\n    \tbuf.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820413
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n        l.max\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n        var m = l(0)\n\
    \        for (x <- l) m = max(m, x)\n        return m\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n        def maxElementHelper(l\
    \ : List[Long], max : Long) : Long = {\n            if (l.isEmpty) max\n     \
    \       else maxElementHelper(l.tail, max(l.head, max))\n        }\n        maxElementHelper(l,\
    \ l.head)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmplizx84o5.scala:12:42 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33melse\e[0m maxElementHelper(l.tail,\
    \ max(l.head, max))\n\e[31m\e[31m   |\e[0m                                   \
    \       ^^^\e[0m\n\e[31m   |\e[0m                                  \e[33mparameter\e\
    [0m \e[35mmax\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820409
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n    \tl.max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n        return l.max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820413
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n        l.reduceLeft((x,\
    \ y) => max(x, y))\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820413
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2,\
    \ 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    // 123\n    def maxElement(l : List[Long]) : Long = {\n        if (l.length\
    \ == 1) l(0)\n        else if (l(0) > maxElement(l.tail)) l(0)\n        else maxElement(l.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820412
