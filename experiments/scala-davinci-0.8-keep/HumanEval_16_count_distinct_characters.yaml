name: HumanEval_16_count_distinct_characters
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n    // 3\n\
  \    // >>> count_distinct_characters('Jerry')\n    // 4\n    def countDistinctCharacters(string\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
  \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
  abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
  )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n\
  \    }\n\n}\n"
completions: ['        return string.toLowerCase.distinct.length', "        if (string.length\
    \ < 2) 1\n        else {\n            var count = 1\n            for (i <- 1 until\
    \ string.length) {\n                if (string(i - 1) != string(i)) count += 1\n\
    \            }\n            count\n        }", '        string.toList.map(_.toLower).toSet.size',
  '        return string.toLowerCase.toList.distinct.length', '        string.distinct.length',
  '        string.map(a => a.toLower).toSet.size', '        string.toLowerCase.distinct.length',
  "        var map = Map[Char, Int]()\n        string.foreach(c => map(c.toLower)\
    \ = 1)\n        map.size", '      string.toLowerCase.toSet.size', "        var\
    \ map = Map[Char, Int]()\n        for (c <- string) {\n            val char =\
    \ c.toLower\n            map += (char -> (map.getOrElse(char, 0) + 1))\n     \
    \   }\n        return map.size", '        string.map(_.toLower).toSet.size', '      string.toLowerCase.toSet.size',
  '        string.toLowerCase.toSet.size', "      // YOUR CODE HERE\n      0", '        string.toLowerCase.distinct.length',
  "        // Fill up this function body\n        // 'a' <= c <= 'z'\n        // String.toLowerCase()\n\
    \        string.toLowerCase.distinct.length", "        val dictionary = new HashMap[Char,\
    \ Boolean]\n        for (c <- string) {\n            dictionary(c.toLower) = true\n\
    \        }\n        dictionary.size", '        string.toLowerCase.map(x => 1).reduce(_
    + _)', '        string.toLowerCase.distinct.length', "        // Return the characters\
    \ of string stripped of all non-letters, then compute length of\n        // the\
    \ resulting string after computing the set of all characters.\n        string.filter(_.isLetter).toLowerCase.toSet.size"]
stop_tokens:
- "\n    }\n"
