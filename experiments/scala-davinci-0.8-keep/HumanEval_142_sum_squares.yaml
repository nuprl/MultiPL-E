name: HumanEval_142_sum_squares
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // \"\n    // This function will take a list of integers. For all entries in\
  \ the list, the function shall square the integer entry if its index is a \n   \
  \ // multiple of 3 and will cube the integer entry if its index is a multiple of\
  \ 4 and not a multiple of 3. The function will not \n    // change the entries in\
  \ the list whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n    // Examples:\n    // For lst = [1,2,3] the output\
  \ should be 6\n    // For lst = []  the output should be 0\n    // For lst = [-1,-5,2,-1,-5]\
  \  the output should be -126\n    def sumSquares(lst : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
  \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n\
  \    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
  \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
  \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
  \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n\
  \    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong,\
  \ -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong, -99l.toLong,\
  \ 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, -1l.toLong)))\
  \ == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong, -2l.toLong,\
  \ 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong, 20l.toLong,\
  \ -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) == (-14196l));\n\
  \    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong, -1l.toLong,\
  \ -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong, -5l.toLong,\
  \ 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong, 16l.toLong,\
  \ 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
completions: ["        var sum : Long = 0\n        for(i <- 0 until lst.length) {\n\
    \            if(i % 3 == 0) {\n                sum += lst(i) * lst(i)\n      \
    \      } else if(i % 4 == 0) {\n                sum += lst(i) * lst(i) * lst(i)\n\
    \            } else {\n                sum += lst(i)\n            }\n        }\n\
    \        return sum", "        var index : Int = 0\n        var sum : Long = 0\n\
    \        for (elem <- lst) {\n            if (index % 3 == 0) {\n            \
    \    sum += elem * elem\n            } else if (index % 4 == 0) {\n          \
    \      sum += elem * elem * elem\n            } else {\n                sum +=\
    \ elem\n            }\n            index += 1\n        }\n        return sum",
  "        lst.zipWithIndex.map(x => {\n            val (v, i) = x\n            val\
    \ j = i + 1\n            if (j % 4 == 0 && j % 3 != 0) {\n                v *\
    \ v * v\n            } else if (j % 3 == 0) {\n                v * v\n       \
    \     } else {\n                v\n            }\n        }).sum", "        var\
    \ result = 0L\n        var index = 0\n        while (index < lst.length) {\n \
    \           if (index % 3 == 0) result += lst(index) * lst(index)\n          \
    \  else if (index % 4 == 0) result += lst(index) * lst(index) * lst(index)\n \
    \           else result += lst(index)\n            index += 1\n        }\n   \
    \     result", "        lst.zipWithIndex.map(x => {\n            if (x._2 % 3\
    \ == 0) {\n                x._1 * x._1\n            } else if (x._2 % 4 == 0)\
    \ {\n                x._1 * x._1 * x._1\n            } else {\n              \
    \  x._1\n            }\n        }).sum", "        // Type your code here\n   \
    \     lst.zipWithIndex.map(x => (x._1, x._2 + 1)).map(x => {\n               \
    \ if (x._2 % 3 == 0 && x._2 % 4 == 0) x._1 * x._1 * x._1\n                else\
    \ if (x._2 % 3 == 0) x._1 * x._1\n                else if (x._2 % 4 == 0) x._1\
    \ * x._1 * x._1\n                else x._1\n            }).sum", "        //Fill\
    \ Up this function body\n                // method 1\n        // def square(n:\
    \ Int): Int = n * n\n        // def cube(n: Int): Int = n * n * n\n        //\
    \ val x = lst.zipWithIndex.map{case (v, i) => if (i % 3 == 0) square(v) else if\
    \ (i % 4 == 0) cube(v) else v}\n        // x.sum\n        // method 2\n      \
    \  val x = lst.zipWithIndex.map{case (v, i) => if (i % 3 == 0) v * v else if (i\
    \ % 4 == 0) v * v * v else v}\n        x.sum", "        var total = 0.toLong\n\
    \        for (i <- 0 until lst.length) {\n            if (i % 3 == 0) {\n    \
    \            total += lst(i) * lst(i)\n            } else if (i % 4 == 0) {\n\
    \                total += lst(i) * lst(i) * lst(i)\n            } else {\n   \
    \             total += lst(i)\n            }\n        }\n        return total",
  "      lst.zipWithIndex.map(e => (pow(e._1, (e._2 + 1) % 3 match {\n        case\
    \ 0 => 2\n        case 1 => 3\n        case 2 => 1\n      })).toLong).sum", " \
    \       var sum : Long = 0\n        for (i <- 0 until lst.length) {\n        \
    \    if (i % 3 == 0) {\n                sum += lst(i) * lst(i)\n            }\
    \ else if (i % 4 == 0) {\n                sum += lst(i) * lst(i) * lst(i)\n  \
    \          } else {\n                sum += lst(i)\n            }\n        }\n\
    \        return sum", "        var sum : Long = 0\n        for (x <- 0 until lst.length)\n\
    \            if (x % 3 == 0) sum += lst(x) * lst(x)\n            else if (x %\
    \ 4 == 0) sum += lst(x) * lst(x) * lst(x)\n            else sum += lst(x)\n  \
    \      return sum", "      var a = 0\n      for (a <- lst.indices) {\n       \
    \ if (a % 3 == 0) {\n          lst(a) = lst(a) * lst(a)\n        }\n        if\
    \ (a % 4 == 0 && a % 3 != 0) {\n          lst(a) = lst(a) * lst(a) * lst(a)\n\
    \        }\n      }\n      var sum = 0L\n      for (a <- lst) {\n        sum +=\
    \ a\n      }\n      return sum", "    \tvar sum = 0L\n    \tfor( i <- 0 until\
    \ lst.length) {\n    \t\tval num = lst(i)\n    \t\tif(i % 3 == 0) {\n    \t\t\t\
    sum += num * num\n    \t\t} else if(i % 4 == 0) {\n    \t\t\tsum += num * num\
    \ * num\n    \t\t} else {\n    \t\t\tsum += num\n    \t\t}\n    \t}\n    \tsum",
  "        var sum : Long = 0\n        for(i <- 0 until lst.length) {\n          \
    \  val f : Long = if(i % 3 == 0) {\n                lst(i) * lst(i)\n        \
    \    } else if(i % 4 == 0) {\n                lst(i) * lst(i) * lst(i)\n     \
    \       } else {\n                lst(i)\n            }\n            sum += f\n\
    \        }\n        return sum", '        // Your code here', "        var total\
    \ = 0L\n        for (i <- 0 until lst.length) {\n            if (i % 3 == 0) total\
    \ += pow(lst(i), 2).toLong\n            else if (i % 4 == 0) total += pow(lst(i),\
    \ 3).toLong\n            else total += lst(i)\n        }\n        return total",
  "      // Your Code Goes Here...\n      return 0", "      var sum = 0L\n      for\
    \ (i <- 0 until lst.length) {\n        if (i % 3 == 0) sum += lst(i) * lst(i)\n\
    \        else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n        else sum\
    \ += lst(i)\n      }\n      sum", "        var sum : Long = 0\n        for (i\
    \ <- 0 until lst.length) {\n            if (i % 3 == 0) {\n                sum\
    \ += lst(i) * lst(i)\n            } else if (i % 4 == 0) {\n                sum\
    \ += lst(i) * lst(i) * lst(i)\n            } else {\n                sum += lst(i)\n\
    \            }\n        }\n        return sum", "        var sum = 0L\n      \
    \  for(i <- 0 until lst.length) {\n            if(i % 3 == 0) sum += lst(i) *\
    \ lst(i)\n            else if(i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n  \
    \          else sum += lst(i)\n        }\n        return sum"]
stop_tokens:
- "\n    }\n"
