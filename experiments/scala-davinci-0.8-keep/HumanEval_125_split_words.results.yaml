language: scala
name: HumanEval_125_split_words
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val oddCount = txt.count(c => c >= 'a' && c <= 'z' && (c\
    \ - 'a') % 2 == 0)\n        if (txt.contains(' ')) {\n            Left(txt.split('\
    \ ').toList)\n        } else if (txt.contains(',')) {\n            Left(txt.split(',').toList)\n\
    \        } else {\n            Right(oddCount)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4bgv8_p4.scala:22)\n\tat Problem.main(tmp4bgv8_p4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n      def parseWords(txt : String) : List[String] = txt.split(' ').toList\n\
    \      def parseCommas(txt : String) : List[String] = txt.split(',').toList\n\
    \      def getLowerCaseOddCount(txt : String) : Long = txt.toLowerCase.filter(c\
    \ => c >= 'a' && c <= 'z').groupBy(c => c).mapValues(_.length).filter(_._2 % 2\
    \ == 1).size\n      if (txt.indexOf(' ') != -1) Left(parseWords(txt))\n      else\
    \ if (txt.indexOf(',') != -1) Left(parseCommas(txt))\n      else Right(getLowerCaseOddCount(txt))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmvi7a_3z.scala:20)\n\tat Problem.main(tmpmvi7a_3z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val a = txt.split(\" \")\n        if (a.length > 1) {\n \
    \           val b = txt.split(\",\")\n            if (b.length > 1) {\n      \
    \          Right(a.foldLeft(0L)((a, b) => a + b.filter(c => c >= 'a' && c <= 'z').foldLeft(0L)((a,\
    \ b) => if (a < 0) a + abs(a + 1) - abs(a + 1) else a + abs(a + 1))))\n      \
    \      } else {\n                Left(b.toList)\n            }\n        } else\
    \ {\n            Left(a.toList)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgq0dg7vo.scala:25)\n\tat Problem.main(tmpgq0dg7vo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n      if (txt.trim.length == 0) Left(List[String]())\n      else\
    \ {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length > 1)\
    \ Left(words.toList)\n        else {\n          val words = txt.split(\",\")\n\
    \          if (words.length > 1) Left(words.toList)\n          else {\n      \
    \      var oddLetters = 0\n            txt.foreach(c => if (c.isLower && c.toInt\
    \ % 2 == 1) oddLetters += 1)\n            Right(oddLetters)\n          }\n   \
    \     }\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmrz_dm9g.scala:28)\n\tat Problem.main(tmpmrz_dm9g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.length >\
    \ 1) {\n            Left(words.toList)\n        } else {\n            val nums\
    \ = txt.split(\",\")\n            if (nums.length > 1) {\n                Left(nums.toList)\n\
    \            } else {\n                val sum = txt.filter(_.isLower).map(c =>\
    \ c.toLong - 'a').filter(_ % 2 == 1).sum\n                Right(sum)\n       \
    \     }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3bn80cws.scala:26)\n\tat Problem.main(tmp3bn80cws.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        txt.split(\" \") match {\n            case Array() => txt.split(\"\
    ,\") match {\n                case Array() => Left(List(txt))\n              \
    \  case xs => Left(xs.toList)\n            }\n            case xs => Left(xs.toList)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplqkis6oj.scala:21)\n\tat Problem.main(tmplqkis6oj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n\
    \        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n       \
    \ else Right(txt.filter(c => c.isLower && (txt.indexOf(c) % 2) == 1).length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7h_cbcqw.scala:17)\n\tat Problem.main(tmp7h_cbcqw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        if (txt.indexOf(' ') >= 0) {\n            val lst = txt.split('\
    \ ').map(s => s.trim).toList\n            Left(lst)\n        } else if (txt.indexOf(',')\
    \ >= 0) {\n            val lst = txt.split(',').map(s => s.trim).toList\n    \
    \        Left(lst)\n        } else {\n            val lst = txt.toList\n     \
    \       val count = lst.count(c => ord(c) % 2 == 1)\n            Right(count)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7t3n2ez8.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = lst.count(\e\
    [36mc\e[0m => ord(c) % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                     ^^^\e[0m\n\e[31m   |\e[0m              \
    \                         Not found: ord\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821070
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n      Right(txt.count(_ < 'a'))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptqi9qiq1.scala:15)\n\tat Problem.main(tmptqi9qiq1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n      if (txt.contains(' ')) Left(txt.split(' ').toList)\n      else\
    \ if (txt.contains(',')) Left(txt.split(',').toList)\n      else Right(txt.count(x\
    \ => (x - 'a') % 2 == 0))\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl1parral.scala:17)\n\tat Problem.main(tmpl1parral.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        if (txt.contains(' ')) Left(txt.split(' ').toList)\n    \
    \    else if (txt.contains(',')) Left(txt.split(',').toList)\n        else Right(txt.count(x\
    \ => x.isLower && (x - 'a') % 2 == 0))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmihaiez2.scala:17)\n\tat Problem.main(tmpmihaiez2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n      if (txt.isEmpty) Left(List())\n      else if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n      else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n      else Right(txt.filter(c => c >= 'a' && c <= 'z').map(c =>\
    \ (c - 'a' + 1) % 2).sum)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpek49_25m.scala:18)\n\tat Problem.main(tmpek49_25m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.length >\
    \ 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val lower = txt.filter(_.isLower)\n                Right(lower.map(x\
    \ => (x - 'a') % 2).filter(_ == 1).size)\n            }\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ot5c16s.scala:24)\n\tat Problem.main(tmp1ot5c16s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        txt.split(\"\\\\s+\").map(_.toLowerCase()).filter(_.length()\
    \ > 0) match {\n            case Array(words@_*) => Left(words.toList)\n     \
    \       case Array() => txt.split(\",\").map(_.toLowerCase()).filter(_.length()\
    \ > 0) match {\n                case Array(words@_*) => Left(words.toList)\n \
    \               case Array() => Right(txt.map(_.toLong - 'a').toSet.filter(_ %\
    \ 2 == 1).size)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkn2dim4j.scala:21)\n\tat Problem.main(tmpkn2dim4j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        // write your code here\n        ???\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.splitWords(tmp1bcaglgo.scala:13)\n\tat Problem$.main(tmp1bcaglgo.scala:16)\n\
    \tat Problem.main(tmp1bcaglgo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        if (txt.indexOf(\" \") != -1) Left(txt.split(\" \").toList)\n\
    \        else if (txt.indexOf(\",\") != -1) Left(txt.split(\",\").toList)\n  \
    \      else Right(txt.filter(x => x - 'a' % 2 == 0).length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdajc3s3e.scala:17)\n\tat Problem.main(tmpdajc3s3e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        def toLong(txt : String) : Long = {\n            val oddIdx\
    \ = (0 until txt.length by 2).map(txt.charAt(_).toInt - ord('a')).toSet\n    \
    \        oddIdx.sum\n        }\n        val txtTrimmed = txt.trim\n        if\
    \ (txtTrimmed.contains(\" \")) Left(txtTrimmed.split(\" \").toList)\n        else\
    \ if (txtTrimmed.contains(\",\")) Left(txtTrimmed.split(\",\").toList)\n     \
    \   else Right(toLong(txtTrimmed))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz20mxsln.scala:13:77 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36moddIdx\e[0m = (\e[31m0\e\
    [0m until txt.length by \e[31m2\e[0m).map(txt.charAt(_).toInt - ord(\e[31m'a'\e\
    [0m)).toSet\n\e[31m\e[31m   |\e[0m                                           \
    \                                  ^^^\e[0m\n\e[31m   |\e[0m                 \
    \                                         Not found: ord\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659821070
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.length ==\
    \ 1) {\n            val commas = words(0).split(\",\")\n            if (commas.length\
    \ == 1) {\n                val odd = commas(0).filter(x => \"abcdefghijklmnopqrstuvwxyz\"\
    .indexOf(x) % 2 == 0).length\n                Right(odd)\n            } else Left(commas.toList)\n\
    \        } else Left(words.toList)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprrl8ujlh.scala:22)\n\tat Problem.main(tmprrl8ujlh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val charList = txt.toList\n        val evenOddList = charList.map\
    \ {\n            case x if x.isLetter && x.isLower => x.toInt - 'a'.toInt % 2\
    \ == 0\n            case _ => false\n        }\n        val evenOddArray = evenOddList.toArray\n\
    \        val trueCount = evenOddArray.count(x => x)\n        // println(trueCount)\n\
    \        val comma = charList.indexOf(',')\n        if (comma >= 0) {\n      \
    \      val wordList = charList.take(comma) :: charList.drop(comma + 1) :: Nil\n\
    \            Left(wordList.map(x => x.mkString))\n        } else {\n         \
    \   val whiteSpace = charList.indexOf(' ')\n            if (whiteSpace >= 0) {\n\
    \                val wordList = charList.take(whiteSpace) :: charList.drop(whiteSpace\
    \ + 1) :: Nil\n                Left(wordList.map(x => x.mkString))\n         \
    \   } else {\n                Right(trueCount)\n            }\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc79iod6u.scala:35)\n\tat Problem.main(tmpc79iod6u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.length >\
    \ 1) {\n            Left(words.toList)\n        } else {\n            val words\
    \ = txt.split(\",\")\n            if (words.length > 1) {\n                Left(words.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).count(x => 'a' <= x && x <= 'z'))\n       \
    \     }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp89syimzm.scala:25)\n\tat Problem.main(tmp89syimzm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
