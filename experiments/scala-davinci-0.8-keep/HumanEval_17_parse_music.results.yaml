language: scala
name: HumanEval_17_parse_music
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val map = new HashMap[Char, Long]()\n        map += ('o' -> 4)\n\
    \        map += ('.' -> 1)\n        map += ('|' -> 0)\n        var res = new ListBuffer[Long]()\n\
    \        var time = 0L\n        for (ch <- music_string) {\n            val val_\
    \ = map(ch)\n            if (val_ != 0) res += val_ + time\n            time =\
    \ 0\n        }\n        res.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found:  \n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.parseMusic$$anonfun$1(tmp8ogop14s.scala:21)\n\
    \tat Problem$.parseMusic$$anonfun$adapted$1(tmp8ogop14s.scala:24)\n\tat scala.collection.StringOps$.foreach$extension(StringOps.scala:1044)\n\
    \tat Problem$.parseMusic(tmp8ogop14s.scala:24)\n\tat Problem$.main(tmp8ogop14s.scala:29)\n\
    \tat Problem.main(tmp8ogop14s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        (for (i <- 0 until music_string.length) yield {\n            if (music_string(i)\
    \ == 'o') {\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') 4L else 1L\n            } else if (music_string(i) == '.') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ 1L else 0L\n            } else {\n                0L\n            }\n      \
    \  }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp62l6hd0d.scala:26)\n\tat Problem.main(tmp62l6hd0d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        var music : Array[Char] = music_string.toCharArray\n        var note\
    \ : List[Long] = Nil\n        var index : Int = 0\n        while (index < music.length)\
    \ {\n            music(index) match {\n                case 'o' => {\n       \
    \             note = note :+ 4\n                    index += 1\n             \
    \   }\n                case '.' => {\n                    note = note :+ 1\n \
    \                   index += 2\n                }\n                case _ => return\
    \ Nil\n            }\n        }\n        return note\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc86q8hpa.scala:34)\n\tat Problem.main(tmpc86q8hpa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n      val counts = music_string.split(\" \").toList.map(_ match {\n     \
    \   case \"o\" => 4\n        case \"o|\" => 2\n        case \".|\" => 1\n    \
    \  })\n      counts\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphwgnccvd.scala:19:6\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m      counts\n\e[31m\e[31m \
    \  |\e[0m      ^^^^^^\e[0m\n\e[31m   |\e[0m      Found:    (counts : List[Int])\n\
    \e[31m   |\e[0m      Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        // Your code here\n        val map = HashMap[Char, Long]()\n    \
    \    map('o') = 4\n        map('.') = 1\n        map('|') = 2\n        var sum\
    \ = 0L\n        val music = music_string.split(\"\")\n        val output = music.map(ch\
    \ => {\n            if (ch == \"|\") {\n                sum = 0\n            }\
    \ else {\n                sum += map(ch(0))\n            }\n            sum\n\
    \        }).toList\n        return output\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.$anonfun$1(tmpht_qm_j_.scala:25)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmpht_qm_j_.scala:28)\n\
    \tat Problem$.main(tmpht_qm_j_.scala:32)\n\tat Problem.main(tmpht_qm_j_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n      val map = Map('o' -> 4, '|' -> 2, '.' -> 1)\n      val l = music_string.split(\"\
    \ \").toList\n      var list = ListBuffer[Long]()\n      for (n <- l) {\n    \
    \    var index = 0\n        for (c <- n) {\n          index += map(c)\n      \
    \  }\n        list += index\n      }\n      list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1uu35v90.scala:27)\n\tat Problem.main(tmp1uu35v90.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.replaceAll(\"\\\\s+\", \"\").split(\"\"\
    )\n        var beat = 0\n        var list = List[Long]()\n        for (i <- 0\
    \ until notes.length) {\n            if (notes(i) == \"o\") {\n              \
    \  beat += 4\n                list = list :+ 4\n            }\n            else\
    \ if (notes(i) == \"o\" && notes(i + 1) == \"|\") {\n                beat += 2\n\
    \                list = list :+ 2\n            }\n            else if (notes(i)\
    \ == \".\" && notes(i + 1) == \"|\") {\n                beat += 1\n          \
    \      list = list :+ 1\n            }\n        }\n        return list\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprwiy6i78.scala:37)\n\tat Problem.main(tmprwiy6i78.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n    \t// You can safely ignore what is happening here.\n    \t// We use this\
    \ code to represent musical notes as a list of integers.\n    \t// You can safely\
    \ assume that all input will be valid, i.e. there will be no invalid characters\
    \ or missing\n    \t// notes in the input.\n    \tval index = Map[Char, Long](('o',\
    \ 0), ('|', 1), ('.', 2)).withDefaultValue(-1)\n    \tval seconds = List(List(4,\
    \ 2, 1), List(2, 1), List(1))\n    \tval music = music_string.map(index).grouped(3).map(_.tail).toList\n\
    \    \t// Do not change this function's signature!\n    \tmusic.map(n => seconds(n(0).toInt)(n(1).toInt))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmp1oif89qy.scala:22)\n\tat scala.collection.immutable.List.map(List.scala:246)\n\
    \tat Problem$.parseMusic(tmp1oif89qy.scala:22)\n\tat Problem$.main(tmp1oif89qy.scala:26)\n\
    \tat Problem.main(tmp1oif89qy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val beats = ListBuffer[Long]()\n        val notes = music_string.split(\"\
    \ \")\n        for (note <- notes) {\n            note.charAt(0) match {\n   \
    \             case 'o' => {\n                    beats += 4\n                }\n\
    \                case '.' => {\n                    beats += 1\n             \
    \   }\n            }\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmpkiicc5xd.scala:17)\n\tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\
    \tat Problem$.parseMusic(tmpkiicc5xd.scala:25)\n\tat Problem$.main(tmpkiicc5xd.scala:29)\n\
    \tat Problem.main(tmpkiicc5xd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val notes = music_string.split(\" \").toList\n        val beats =\
    \ ArrayBuffer[Long]()\n        for (note <- notes) {\n            note match {\n\
    \                case \"o\" => beats += 4\n                case \"o|\" => beats\
    \ += 2\n                case \".|\" => beats += 1\n            }\n        }\n\
    \        beats.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmplbbxuke5.scala:20)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat Problem$.parseMusic(tmplbbxuke5.scala:22)\n\
    \tat Problem$.main(tmplbbxuke5.scala:26)\n\tat Problem.main(tmplbbxuke5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n        // [4,\
    \ 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n        return null\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.parseMusic(String)\" is null\n\tat Problem$.main(tmpqgr3gklw.scala:19)\n\
    \tat Problem.main(tmpqgr3gklw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        // Your code goes here\n        def p(c : Char) : Long = c match\
    \ {\n            case 'o' => 4\n            case 'o' => 2\n            case '.'\
    \ => 1\n        }\n        (for (c <- music_string) yield p(c)).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:   (of class java.lang.Character)\n\tat Problem$.p$1(tmpmr6b3dpw.scala:18)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmpmr6b3dpw.scala:20)\n\tat Problem$.parseMusic$$anonfun$adapted$1(tmpmr6b3dpw.scala:20)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.parseMusic(tmpmr6b3dpw.scala:20)\n\
    \tat Problem$.main(tmpmr6b3dpw.scala:24)\n\tat Problem.main(tmpmr6b3dpw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        var ans = List[Long]()\n        for (c <- music_string.toCharArray\
    \ if c != ' ') {\n            if (c == 'o') {\n                ans = ans :+ 4\n\
    \            } else if (c == '|') {\n                ans = ans :+ 1\n        \
    \    } else if (c == '.') {\n                ans = ans.updated(ans.length - 1,\
    \ ans.last - 1)\n            }\n        }\n        ans\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: last of empty list\n\tat scala.collection.immutable.Nil$.last(List.scala:665)\n\
    \tat scala.collection.immutable.Nil$.last(List.scala:661)\n\tat Problem$.parseMusic$$anonfun$2(tmpp05ixl1t.scala:21)\n\
    \tat Problem$.parseMusic$$anonfun$adapted$2(tmpp05ixl1t.scala:23)\n\tat scala.collection.ArrayOps$WithFilter.foreach(ArrayOps.scala:73)\n\
    \tat Problem$.parseMusic(tmpp05ixl1t.scala:23)\n\tat Problem$.main(tmpp05ixl1t.scala:29)\n\
    \tat Problem.main(tmpp05ixl1t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        var t = List[Long]()\n        for (i <- 0 until music_string.length)\
    \ {\n            val c = music_string(i)\n            if (c == 'o') {\n      \
    \          t = 4 :: t\n            } else if (c == '.') {\n                t =\
    \ 1 :: t\n            } else if (c == '|') {\n                if (music_string(i-1)\
    \ == 'o') {\n                    t = 2 :: t\n                } else {\n      \
    \              t = t.tail\n                }\n            }\n        }\n     \
    \   t.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa27t_4zg.scala:34)\n\tat Problem.main(tmpa27t_4zg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n      val beats = 4\n      val map = Map('o' -> beats, 'o|' -> beats / 2,\
    \ '.|' -> beats / 4)\n      (music_string split \" \") map (map(_)) toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpq578s9zv.scala:15:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36mmap\e[0m = Map(\e[31m'o'\e\
    [0m -> beats, \e[31m'o\e[0m|' -> beats / \e[31m2\e[0m, '.|' -> beats / \e[31m4\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0msymbol literal 'o is no longer supported,\n\e[31m   |\e[0muse a string\
    \ literal \"o\" or an application Symbol(\"o\") instead,\n\e[31m   |\e[0mor enclose\
    \ in braces '{o} if you want a quoted expression.\n\e[31m   |\e[0mFor now, you\
    \ can also `import language.deprecated.symbolLiterals` to accept\n\e[31m   |\e\
    [0mthe idiom, but this possibility might no longer be available in the future.\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq578s9zv.scala:15:39 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36mmap\e[0m = Map(\e[31m'o'\e\
    [0m -> beats, \e[31m'o\e[0m|' -> beats / \e[31m2\e[0m, '.|' -> beats / \e[31m4\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                       ^^\e[0m\n\e\
    [31m   |\e[0m                                      '{' expected, but identifier\
    \ found\n\e[31m\e[31m-- Error: /tmp/tmpq578s9zv.scala:15:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36mmap\e[0m = Map(\e[31m'o'\e\
    [0m -> beats, \e[31m'o\e[0m|' -> beats / \e[31m2\e[0m, '.|' -> beats / \e[31m4\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \   ^\e[0m\n\e[31m   |\e[0m                                              unclosed\
    \ character literal\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpq578s9zv.scala:16:50\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m      (music_string split\
    \ \e[31m\" \"\e[0m) map (map(_)) toList\n\e[31m\e[31m   |\e[0m               \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq578s9zv.scala:16:40 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m      (music_string split \e[31m\" \"\e[0m) "
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        var res = List[Long]()\n        var chars = music_string.toCharArray\n\
    \        var i = 0\n        while (i < chars.length) {\n            if (chars(i)\
    \ == ' ') {\n                i += 1\n            } else if (chars(i) == 'o') {\n\
    \                var end = i + 1\n                while (end < chars.length &&\
    \ chars(end) == ' ') end += 1\n                if (end == chars.length || chars(end)\
    \ == 'o') {\n                    res = res :+ 4\n                    i = end\n\
    \                } else if (chars(end) == '|') {\n                    res = res\
    \ :+ 2\n                    i = end + 1\n                }\n            } else\
    \ if (chars(i) == '.') {\n                var end = i + 1\n                while\
    \ (end < chars.length && chars(end) == ' ') end += 1\n                if (end\
    \ == chars.length || chars(end) == 'o') {\n                    res = res :+ 1\n\
    \                    i = end\n                } else if (chars(end) == '|') {\n\
    \                    res = res :+ 1\n                    i = end + 1\n       \
    \         }\n            }\n        }\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        var result = List[Long]()\n        for (ch <- music_string) {\n \
    \           if (ch == 'o') result = result :+ 4\n            else if (ch == '|')\
    \ result = result :+ 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbq9rg3jn.scala:25)\n\tat Problem.main(tmpbq9rg3jn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val pairs = ('o', 4L) :: ('o', 2L) :: ('.', 1L) :: Nil\n        music_string.split(\"\
    \\\\s+\").flatMap(chunk => {\n            val (letter, duration) = pairs.find(pair\
    \ => chunk.contains(pair._1)).get\n            (1 to chunk.count(_ == letter)).map(_\
    \ => duration)\n        }).toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: None.get\n\tat scala.None$.get(Option.scala:627)\n\
    \tat scala.None$.get(Option.scala:626)\n\tat Problem$.parseMusic$$anonfun$1(tmpbdtjhfd0.scala:16)\n\
    \tat scala.collection.ArrayOps$.flatMap$extension(ArrayOps.scala:964)\n\tat Problem$.parseMusic(tmpbdtjhfd0.scala:18)\n\
    \tat Problem$.main(tmpbdtjhfd0.scala:21)\n\tat Problem.main(tmpbdtjhfd0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val beats = new ListBuffer[Long]()\n        for (token <- music_string.split(\"\
    \ \")) {\n            beats += token match {\n                case \"o\" => 4\n\
    \                case \"o|\" => 2\n                case \".|\" => 1\n        \
    \    }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnijikjdd.scala:16:21\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            beats += token \e\
    [33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                     ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Found:    (token : String)\n\e[31m   |\e[0m   \
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnijikjdd.scala:17:21 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m                \e[33mcase\e[0m \e[31m\"o\"\e[0m => \e[31m4\e[0m\n\e[31m\e\
    [31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m                  \
    \   Found:    (\e[32m\"o\"\e[0m : String)\n\e[31m   |\e[0m                   \
    \  Required: scala.collection.mutable.ListBuffer[Long]\n\e[31m   |\e[0m      \
    \               pattern type is incompatible with expected type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnijikjdd.scala:18:21 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m \e[31m\"o|\"\e[0m =>\
    \ \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m  \
    \ |\e[0m                     Found:    (\e[32m\"o|\"\e[0m : String)\n\e[31m  \
    \ |\e[0m                     Required: scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m                     pattern type is incompatible with expected\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnijikjdd.scala:19:21\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mcase\e\
    [0m \e[31m\".|\"\e[0m => \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                 \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                     Found:    (\e[32m\".|\"\e\
    [0m : String)\n\e[31m   |\e[0m                     Required: scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m                     pattern type is incompatible with expected\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4]\n    def parseMusic(music_string : String) : List[Long] =\
    \ {\n        val beats = music_string.split(\"\\\\s+\")\n        var list = new\
    \ ListBuffer[Long]()\n        for (s <- beats) {\n            if (s == \"o\")\
    \ list += 4\n            else if (s == \"o|\") list += 2\n            else if\
    \ (s == \".|\") list += 1\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821073
