name: HumanEval_74_total_match
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts two lists of strings and returns the list\
  \ that has \n    // total number of chars in the all strings of the list less than\
  \ the other list.\n    // if the two lists have the same number of chars, return\
  \ the first list.\n    // Examples\n    // total_match([], []) \u279E []\n    //\
  \ total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    // total_match(['hi',\
  \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    // total_match(['hi',\
  \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'],\
  \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    def totalMatch(lst1 : List[String],\
  \ lst2 : List[String]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
  \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\",\
  \ \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"))));\n\
  \    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\"\
  , \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\",\
  \ \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hii\"))).equals((List[String](\"\
  hi\", \"admin\"))));\n    assert(totalMatch((List[String]()), (List[String](\"this\"\
  ))).equals((List[String]())));\n    assert(totalMatch((List[String](\"this\")),\
  \ (List[String]())).equals((List[String]())));\n    }\n\n}\n"
completions: ["        var n1 = 0\n        var n2 = 0\n        for (s <- lst1) n1\
    \ += s.length\n        for (s <- lst2) n2 += s.length\n        if (n1 < n2) lst1\
    \ else if (n1 > n2) lst2 else lst1", "        var total1 = 0\n        for (s <-\
    \ lst1) {\n            total1 += s.length\n        }\n        var total2 = 0\n\
    \        for (s <- lst2) {\n            total2 += s.length\n        }\n      \
    \  if (total1 < total2) lst1 else lst2", "        if (lst1.map(_.length).sum <\
    \ lst2.map(_.length).sum) lst1\n        else lst2", "        if (lst1.length ==\
    \ 0 && lst2.length == 0) List()\n        else if (lst1.length == 0) lst2\n   \
    \     else if (lst2.length == 0) lst1\n        else {\n            var sum1 =\
    \ 0\n            var sum2 = 0\n            for (item <- lst1) sum1 += item.length\n\
    \            for (item <- lst2) sum2 += item.length\n            if (sum1 < sum2)\
    \ lst1\n            else if (sum1 > sum2) lst2\n            else lst1\n      \
    \  }", "        var lst1Sum = 0\n        var lst2Sum = 0\n        lst1.foreach(x\
    \ => lst1Sum += x.length)\n        lst2.foreach(x => lst2Sum += x.length)\n  \
    \      if (lst1Sum == lst2Sum) lst1\n        else if (lst1Sum < lst2Sum) lst1\n\
    \        else lst2", "        var total1 = 0\n        var total2 = 0\n       \
    \ for (str <- lst1) {\n            total1 += str.length\n        }\n        for\
    \ (str <- lst2) {\n            total2 += str.length\n        }\n        if (total1\
    \ < total2) lst1 else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val a = lst1.reduce(_ + _).length\n     \
    \   val b = lst2.reduce(_ + _).length\n        if (a > b) lst2 else lst1", " \
    \       val sum1 = lst1.foldLeft(0)((sum, str) => sum + str.length)\n        val\
    \ sum2 = lst2.foldLeft(0)((sum, str) => sum + str.length)\n        if (sum1 ==\
    \ sum2) lst1\n        else if (sum1 < sum2) lst1\n        else lst2", "      \
    \  val sum1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val sum2 =\
    \ lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (sum1 <= sum2) lst1\
    \ else lst2", "        var total1 = 0\n        var total2 = 0\n        for (s\
    \ <- lst1) total1 += s.length\n        for (s <- lst2) total2 += s.length\n  \
    \      if (total1 < total2) lst1\n        else if (total1 > total2) lst2\n   \
    \     else lst1", "    \tif (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n    \telse lst2", "        if (lst1.length == 0 && lst2.length == 0) List[String]()\n\
    \        else if (lst1.length == 0) lst2\n        else if (lst2.length == 0) lst1\n\
    \        else {\n            val num1 = lst1.map(x => x.toCharArray.length).sum\n\
    \            val num2 = lst2.map(x => x.toCharArray.length).sum\n            if\
    \ (num1 < num2) lst1\n            else if (num1 > num2) lst2\n            else\
    \ lst1\n        }", "        var lst1Count = 0\n        var lst2Count = 0\n  \
    \      for (lst1I <- lst1) lst1Count += lst1I.length\n        for (lst2I <- lst2)\
    \ lst2Count += lst2I.length\n        if (lst1Count < lst2Count) lst1\n       \
    \ else lst2", "        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n\
    \        else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n    \
    \    else lst2", "        var lst1Sum = 0\n        var lst2Sum = 0\n        lst1.foreach(s\
    \ => lst1Sum += s.length)\n        lst2.foreach(s => lst2Sum += s.length)\n  \
    \      if (lst1Sum == lst2Sum) lst1\n        else if (lst1Sum < lst2Sum) lst1\n\
    \        else lst2", "        if (lst1.map(_.length).sum == lst2.map(_.length).sum)\
    \ return lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ return lst1\n        else return lst2", "        var d1 = 0\n        var d2\
    \ = 0\n        lst1.foreach(x => d1 += x.length)\n        lst2.foreach(x => d2\
    \ += x.length)\n        if (d1 == d2) lst1\n        else if (d1 < d2) lst1\n \
    \       else lst2", "        val r = if (lst1.map(_.length).sum == lst2.map(_.length).sum)\
    \ lst1 else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1 else lst2\n\
    \        return r", "        // if(lst1.length == 0) return lst1\n        // if(lst2.length\
    \ == 0) return lst2\n        if(lst1.length == 0 && lst2.length == 0) return lst1\n\
    \        if(lst1.map(_.length).sum < lst2.map(_.length).sum) return lst1\n   \
    \     else if(lst1.map(_.length).sum > lst2.map(_.length).sum) return lst2\n \
    \       else return lst1"]
stop_tokens:
- "\n    }\n"
