name: HumanEval_161_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a string s.\n    // if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    //\
  \ If the string contains no letters, reverse the string.\n    // The function should\
  \ return the resulted string.\n    // Examples\n    // solve(\"1234\") = \"4321\"\
  \n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    def solve(s\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
  aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
  ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n \
  \   assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
  #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n\
  \    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
completions: ["        s.map(c => {\n            if(c.isLetter) if(c.isUpper) c.toLower\
    \ else c.toUpper\n            else c\n        }).reverse", "        if (s.isEmpty)\
    \ s\n        else {\n            var reversedString = \"\"\n            for (i\
    \ <- 0 until s.length) {\n                if (s(i).isLetter) {\n             \
    \       val c = s(i)\n                    if (c.isUpper) reversedString += c.toLower\n\
    \                    else reversedString += c.toUpper\n                }\n   \
    \             else reversedString += s(i)\n            }\n            reversedString\n\
    \        }", "      if (s.exists(i => i.isLetter)) {\n        s.map(i => if (i.isLetter)\
    \ i.toLower ^ i.toUpper else i)\n      } else {\n        s.reverse\n      }",
  "        if (s.length == 0) {\n            return s;\n        }\n        var isAllNum\
    \ = true;\n        for (ch <- s) {\n            if (!Character.isDigit(ch)) {\n\
    \                isAllNum = false;\n                break;\n            }\n  \
    \      }\n        if (isAllNum) {\n            return s.reverse;\n        }\n\
    \        var sb = new StringBuilder(s);\n        for (i <- 0 until s.length) {\n\
    \            if (Character.isLetter(s(i))) {\n                if (Character.isUpperCase(s(i)))\
    \ {\n                    sb.setCharAt(i, Character.toLowerCase(s(i)));\n     \
    \           } else {\n                    sb.setCharAt(i, Character.toUpperCase(s(i)));\n\
    \                }\n            }\n        }\n        return sb.toString;", " \
    \   \tif (s.exists(c => c.isLetter)) {\n    \t\tvar str = \"\"\n    \t\tfor (c\
    \ <- s) {\n    \t\t\tif (c.isLetter) {\n    \t\t\t\tif (c.isUpper) str += c.toLower\n\
    \    \t\t\t\telse str += c.toUpper\n    \t\t\t}\n    \t\t\telse str += c\n   \
    \ \t\t}\n    \t\tstr\n    \t}\n    \telse s.reverse", "        var result = \"\
    \"\n        if (s.exists(c => c.isLetter)) {\n            result = s.map(c =>\
    \ if (c.isLetter) c.toUpper ^ c.toLower else c)\n        } else {\n          \
    \  result = s.reverse\n        }\n        result", "        var result = \"\"\n\
    \        var allLetters = true\n        for (c <- s) {\n            if (!c.isLetter)\
    \ {\n                allLetters = false\n                result += c\n       \
    \     } else {\n                if (c.isUpper) result += c.toLower\n         \
    \       else result += c.toUpper\n            }\n        }\n        if (allLetters)\
    \ result = s.reverse\n        result", '        s.map((c : Char) => (if (c.isLetter)
    (if (c.isUpper) c.toLower else c.toUpper) else c)).reverse', '        ???', " \
    \       if (s.forall(!_.isLetter)) s.reverse\n        else {\n            val\
    \ chars = s.toCharArray\n            for (i <- 0 until chars.length) {\n     \
    \           if (chars(i).isLetter) {\n                    if (chars(i).isUpper)\
    \ chars(i) = chars(i).toLower\n                    else chars(i) = chars(i).toUpper\n\
    \                }\n            }\n            new String(chars)\n        }",
  "        if (s.matches(\"^[a-zA-Z]+$\")) s.toUpperCase()\n        else if (s.matches(\"\
    ^[^a-zA-Z]+$\")) s.reverse\n        else (for (c <- s) yield if (c.isLetter) c.toUpper.toLower\
    \ else c).toString", '        return s.reverse.map(x => if (x.isLetter) x.toUpperCase
    else x.toLowerCase)', "        if (s.exists(x => x.isLetter)) {\n            s.map(x\
    \ => if (x.isLetter) x.toUpper ^ x.toLower else x).reverse\n        } else {\n\
    \            s.reverse\n        }", "        val result = s.map((c: Char) => {\n\
    \            if (c.isLetter) {\n                if (c.isUpper) c.toLower else\
    \ c.toUpper\n            } else {\n                c\n            }\n        })\n\
    \        if (result.length == s.length) result.reverse else result", "       \
    \ if (s.forall(!_.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ (if (c.isUpper) c.toLower else c.toUpper) else c)", "    \t// Your code here\n\
    \        \"\";", "        if (!s.matches(\".*[a-zA-Z].*\")) {\n            return\
    \ s.reverse\n        }\n        s.map(c => {\n            if (c.isLetter) {\n\
    \                if (c.isUpper) c.toLower else c.toUpper\n            } else {\n\
    \                c\n            }\n        }).mkString", "        // Fill up this\
    \ function body\n        // 'a' - 'Z' = 32\n        // 'A' - 'z' = -32\n     \
    \   var chars = s.toCharArray\n        for (i <- 0 until chars.length) {\n   \
    \         if (chars(i) >= 'a' && chars(i) <= 'z') {\n                chars(i)\
    \ = (chars(i) - 'a' + 'A').toChar\n            } else if (chars(i) >= 'A' && chars(i)\
    \ <= 'Z') {\n                chars(i) = (chars(i) - 'A' + 'a').toChar\n      \
    \      }\n        }\n        new String(chars)", "        val letters = ('a' to\
    \ 'z') ++ ('A' to 'Z')\n        if (s.forall(!letters.contains(_))) return s.reverse\n\
    \        val output = new StringBuilder()\n        for (i <- 0 until s.length)\
    \ {\n            val x = s(i)\n            if (letters.contains(x)) {\n      \
    \          if (x.isUpper) output.append(x.toLower)\n                else output.append(x.toUpper)\n\
    \            } else output.append(x)\n        }\n        output.toString", " \
    \   \ts.flatMap(c => if (c.isLetter) (c.toLowerCase, c.toUpperCase) else c)"]
stop_tokens:
- "\n    }\n"
