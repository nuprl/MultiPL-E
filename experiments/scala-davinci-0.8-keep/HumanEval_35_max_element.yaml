name: HumanEval_35_max_element
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return maximum element in the list.\n    // >>> max_element([1, 2, 3])\n\
  \    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n   \
  \ // 123\n    def maxElement(l : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
  \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
  \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
completions: ['        return l.reduce((x, y) => {if (x > y) x else y})', "      \
    \  var m = Long.MinValue\n        for (x <- l) {\n            if (x > m) m = x\n\
    \        }\n        return m", '        if (l.isEmpty) 0 else l.reduceLeft(max)',
  '        l.max', "        l.foldLeft(Long.MinValue)((acc, e) => {\n            if\
    \ (e > acc) e else acc\n        })", '        return l.max', "        def maxElementHelper(s\
    \ : Long, l : List[Long]) : Long = {\n            if (l.length == 0) s\n     \
    \       else maxElementHelper(max(s, l.head), l.tail)\n        }\n        maxElementHelper(Long.MinValue,\
    \ l)", "        var max = Long.MinValue\n        for (e <- l) if (e > max) max\
    \ = e\n        return max", '        return l.max', "\t    var x = 0.toLong\n\t\
    \    for (i <- l) {\n\t\t    if (i > x) {\n\t\t\t    x = i\n\t\t    }\n\t    }\n\
    \t    return x", '        l.foldLeft(Long.MinValue)((a, b) => max(a, b))', " \
    \       def maxElement(l : List[Long], k : Long) : Long = l match {\n        \
    \    case Nil => k\n            case h :: t => maxElement(t, max(k, h))\n    \
    \    }\n        maxElement(l, 0)", "    \tval buf = ArrayBuffer[Long]()\n    \t\
    for (x <- l) buf += x\n    \tbuf.max", '        l.max', "        var m = l(0)\n\
    \        for (x <- l) m = max(m, x)\n        return m", "        def maxElementHelper(l\
    \ : List[Long], max : Long) : Long = {\n            if (l.isEmpty) max\n     \
    \       else maxElementHelper(l.tail, max(l.head, max))\n        }\n        maxElementHelper(l,\
    \ l.head)", "    \tl.max", '        return l.max', '        l.reduceLeft((x, y)
    => max(x, y))', "        if (l.length == 1) l(0)\n        else if (l(0) > maxElement(l.tail))\
    \ l(0)\n        else maxElement(l.tail)"]
stop_tokens:
- "\n    }\n"
