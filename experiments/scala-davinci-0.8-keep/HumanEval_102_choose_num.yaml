name: HumanEval_102_choose_num
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // This function takes two positive numbers x and y and returns the\n    //\
  \ biggest even integer number that is in the range [x, y] inclusive. If \n    //\
  \ there's no such number, then the function should return -1.\n    // For example:\n\
  \    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n    def chooseNum(x\
  \ : Long, y : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
  \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
  \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n \
  \   assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
  \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
  \ (546l)) == (546l));\n    }\n\n}\n"
completions: ["        if (x > y) return -1\n        if (x % 2 == 0) x else x + 1",
  "        if (x > y) -1\n        else {\n            val num = x + (y - x) / 2\n\
    \            if (num % 2 == 0) num\n            else if (num - 1 == x) -1\n  \
    \          else chooseNum(x, num - 1)\n        }", "        for (z <- y to x by\
    \ -1) if (z % 2 == 0) return z\n        return -1", "        if (x > y) {\n  \
    \          return -1\n        }\n        val sub = y - x\n        val mod = y\
    \ % 2\n        if (mod == 0) {\n            return y\n        }\n        return\
    \ chooseNum(x, y - 1)", "      val r = (x + y) / 2\n      if (x % 2 == 0 && r\
    \ <= y) x\n      else if (r <= y) r\n      else -1", "        if (x % 2 == 0)\n\
    \            x\n        else if (x + 1 == y)\n            -1\n        else\n \
    \           chooseNum(x + 1, y)", "        var result = -1\n        for (i <-\
    \ x to y) {\n            if (i % 2 == 0) {\n                result = i\n     \
    \       }\n        }\n        return result", "        val range = x to y\n  \
    \      val evenRange = range.filter(_ % 2 == 0)\n        if (evenRange.isEmpty)\
    \ -1 else evenRange.max", "      val r = if (x % 2 == 0) x else x + 1\n      if\
    \ (r > y) return -1\n      return r", "      var z = y\n      while (z >= x) {\n\
    \        if (z % 2 == 0) return z\n        z -= 1\n      }\n      return -1",
  "        var i = if (x % 2 == 0) x else x + 1\n        while (i <= y) {\n      \
    \      if (i % 2 == 0) return i\n            i += 1\n        }\n        return\
    \ -1", "    \tfor (i <- y to x by -1) {\n    \t\tif (i % 2 == 0) return i\n  \
    \  \t}\n    \treturn -1", "        if (x % 2 == 0) {\n            return max(x,\
    \ chooseNum(x + 1, y))\n        } else {\n            return chooseNum(x + 1,\
    \ y)\n        }", "        if (x > y) return -1\n        if (x % 2 == 0) return\
    \ x\n        chooseNum(x + 1, y)", "      for (i <- y to x by -1) {\n        if\
    \ (i % 2 == 0) return i\n      }\n      return -1", "      val m = if (x % 2 ==\
    \ 0) x else x + 1\n      if (m > y) -1 else if (m + 2 > y) m else chooseNum(m\
    \ + 2, y)", "      var min = min(x, y)\n      var max = max(x, y)\n      var result\
    \ = -1\n      for (i <- min to max) {\n        if (i % 2 == 0) result = i\n  \
    \    }\n      result", "        if (x > y) -1\n        else if (x % 2 == 0) x\n\
    \        else chooseNum(x + 1, y)", "      if (x % 2 == 0)\n      \tx\n      else\
    \ if (x == y)\n      \t-1\n      else\n      \tchooseNum(x + 1, y)", "       \
    \ val arr = for (i <- x to y if i % 2 == 0) yield i\n        if (arr.isEmpty)\
    \ {\n            -1\n        } else {\n            arr.max\n        }"]
stop_tokens:
- "\n    }\n"
