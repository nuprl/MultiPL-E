language: scala
name: HumanEval_89_encrypt
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        \"\"\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpit1qppxb.scala:17)\n\tat Problem.main(tmpit1qppxb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = (0 to 26).map(x => ('a' + x).toChar).toArray\n\
    \        val encryptalphabet = (0 to 26).map(x => ('a' + (x + 4) % 26).toChar).toArray\n\
    \        val encrypted = s.map(x => {\n            val t = encryptalphabet(alphabet.indexOf(x))\n\
    \            t\n        })\n        encrypted.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        def encryptChar(c : Char) : Char = {\n            val\
    \ newValue = c + 2 * 2\n            if (newValue <= 'z') newValue.toChar\n   \
    \         else encryptChar((newValue - 'z' + 'a' - 1).toChar)\n        }\n   \
    \     s.map(encryptChar)\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2bsuoi81.scala:26)\n\tat Problem.main(tmp2bsuoi81.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val shiftedAlphabet = alphabet.drop(2) + alphabet.take(2)\n        var message\
    \ = \"\"\n        for (c <- s) {\n            message += shiftedAlphabet(alphabet.indexOf(c))\n\
    \        }\n        message\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvidserzi.scala:23)\n\tat Problem.main(tmpvidserzi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        s.map(x => (x + 2 * 2).toChar)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplit_7lvw.scala:21)\n\tat Problem.main(tmplit_7lvw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        return (s.map {(c : Char) => c - 2}).mkString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgi3mv3b8.scala:17)\n\tat Problem.main(tmpgi3mv3b8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        def c(x : Char) : Char = {\n            if (x >= 'a' &&\
    \ x <= 'z')\n                (((x - 'a') + 1) % 26 + 'a').toChar\n           \
    \ else if (x >= 'A' && x <= 'Z')\n                (((x - 'A') + 1) % 26 + 'A').toChar\n\
    \            else\n                x\n        }\n        return s.map(c)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpda_u7qmq.scala:25)\n\tat Problem.main(tmpda_u7qmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        val l = (a : Char) => a match {\n            case 'a'\
    \ => 'c'\n            case 'b' => 'd'\n            case 'c' => 'e'\n         \
    \   case 'd' => 'f'\n            case 'e' => 'g'\n            case 'f' => 'h'\n\
    \            case 'g' => 'i'\n            case 'h' => 'j'\n            case 'i'\
    \ => 'k'\n            case 'j' => 'l'\n            case 'k' => 'm'\n         \
    \   case 'l' => 'n'\n            case 'm' => 'o'\n            case 'n' => 'p'\n\
    \            case 'o' => 'q'\n            case 'p' => 'r'\n            case 'q'\
    \ => 's'\n            case 'r' => 't'\n            case 's' => 'u'\n         \
    \   case 't' => 'v'\n            case 'u' => 'w'\n            case 'v' => 'x'\n\
    \            case 'w' => 'y'\n            case 'x' => 'z'\n            case 'y'\
    \ => 'a'\n            case 'z' => 'b'\n            case _ => ' '\n        }\n\
    \        s.map(l)\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuz0wbw4f.scala:46)\n\tat Problem.main(tmpuz0wbw4f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        s.toLowerCase.map(x => {\n            if(x == 'z') 'b'\n\
    \            else if(x == 'y') 'a'\n            else (((x - 'a') + 4) % 26).toChar\
    \ + 'a'\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl721q6dv.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        s.toLowerCase.map(\e\
    [36mx\e[0m => {\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m\
    \   |\e[0m                          Found:    Char => \e[1m\e[31mAnyVal\e[0m\n\
    \e[31m   |\e[0m                          Required: Char => \e[1m\e[32mChar\e[0m\n\
    \e[31m15 |\e[0m            \e[33mif\e[0m(x == \e[31m'z'\e[0m) \e[31m'b'\e[0m\n\
    \e[31m16 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(x == \e[31m'y'\e[0m)\
    \ \e[31m'a'\e[0m\n\e[31m17 |\e[0m            \e[33melse\e[0m (((x - \e[31m'a'\e\
    [0m) + \e[31m4\e[0m) % \e[31m26\e[0m).toChar + \e[31m'a'\e[0m\n\e[31m18 |\e[0m\
    \        })\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            val c = s(i)\n            val x = (2 * c - 97 + 2) % 26 + 97\n\
    \            result += x.toChar\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphpx0ywkw.scala:23)\n\tat Problem.main(tmphpx0ywkw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var enc = \"\"\n        for (c <- s) enc += (c.toInt +\
    \ 2*2).toChar\n        enc\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb0660dgy.scala:23)\n\tat Problem.main(tmpb0660dgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            val c = s(i)\n            if (c == 'z') result += 'b'\n     \
    \       else if (c == 'y') result += 'a'\n            else result += (c + 2).toChar\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp51bva5rq.scala:24)\n\tat Problem.main(tmp51bva5rq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var p = \"abcdefghijklmnopqrstuvwxyz\"\n        var s2\
    \ = s.split(\"\")\n        var s3 = \"\"\n        for (i <- 0 to s2.length - 1)\
    \ {\n            var c = s2(i)\n            var idx = p.indexOf(c)\n         \
    \   var newIdx = (idx + (2 * 2)) % 26\n            var newChar = p.substring(newIdx,\
    \ newIdx + 1)\n            s3 += newChar\n        }\n        return s3\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var encryptedString = \"\"\n        for (i <- 0 until\
    \ s.length) {\n            var c = s(i)\n            var newC = if (c + 2 * 2\
    \ > 'z') (c + 2 * 2 - 26).toChar else (c + 2 * 2).toChar\n            encryptedString\
    \ += newC\n        }\n        encryptedString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            var c = s(i)\n            if (c == 'z') c = 'b'\n           \
    \ else if (c == 'y') c = 'a'\n            else if (c >= 'a' && c <= 'x') c = (c\
    \ + 2).toChar\n            result += c\n        }\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\"\
    )));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa277ctko.scala:25)\n\tat Problem.main(tmpa277ctko.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        // Write your code here\n        \"\";\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg85jr5vy.scala:18)\n\tat Problem.main(tmpg85jr5vy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        def encryptRec(s : String, acc : String) : String = {\n\
    \            if (s.length() == 0) acc\n            else {\n                val\
    \ c = s.charAt(0)\n                val nextC = if (c == 'z') 'a'\n           \
    \         else if (c == 'y') 'a'\n                    else c + 2\n           \
    \     encryptRec(s.drop(1), acc + nextC)\n            }\n        }\n        encryptRec(s,\
    \ \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpciahczx8.scala:27)\n\tat Problem.main(tmpciahczx8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        s.map(c => (((c - 'a') * 2) % 26 + 'a').toChar)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppriuqydl.scala:17)\n\tat Problem.main(tmppriuqydl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        \"\"\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpit1qppxb.scala:17)\n\tat Problem.main(tmpit1qppxb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
    \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
    \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    def encrypt(s : String)\
    \ : String = {\n        def to_int(c : Char) : Int = {\n            c.toInt -\
    \ 97\n        }\n        def to_char(i : Int) : Char = {\n            (i + 97).toChar\n\
    \        }\n        s.map(c => to_char((to_int(c) + 2 * 2) % 26))\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\"\
    )));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
