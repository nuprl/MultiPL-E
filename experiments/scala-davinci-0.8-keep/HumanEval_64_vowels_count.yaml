name: HumanEval_64_vowels_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function vowels_count which takes a string representing\n    //\
  \ a word as input and returns the number of vowels in the string.\n    // Vowels\
  \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel, but\
  \ only when it is at the end of the given word.\n    // Example:\n    // >>> vowels_count(\"\
  abcde\")\n    // 2\n    // >>> vowels_count(\"ACEDY\")\n    // 3\n    def vowelsCount(s\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(vowelsCount((\"abcde\"\
  )) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"\
  key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"\
  keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"\
  ACEDY\")) == (3l));\n    }\n\n}\n"
completions: ["      if (s.isEmpty) {\n        0\n      } else {\n        val ch =\
    \ s.last\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch ==\
    \ 'u' || ch == 'y') {\n          vowelsCount(s.substring(0, s.length - 1)) + 1\n\
    \        } else {\n          vowelsCount(s.substring(0, s.length - 1))\n     \
    \   }\n      }", "        val vowels = Array('a', 'e', 'i', 'o', 'u', 'y')\n \
    \       val c = s.toLowerCase.toCharArray\n        val length = c.length\n   \
    \     val end = c(length - 1)\n        if (vowels.contains(end)) length - c.diff(vowels).length\
    \ + 1\n        else length - c.diff(vowels).length", "        var c = 0\n    \
    \    for (i <- 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e'\
    \ || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') {\n                c += 1\n  \
    \          }\n        }\n        if (s(s.length - 1) == 'y') {\n            c\
    \ += 1\n        }\n        return c", "        def f(s : String, acc : Long) :\
    \ Long = {\n            if (s.length == 0) acc\n            else if (s.head ==\
    \ 'a' || s.head == 'e' || s.head == 'i' || s.head == 'o' || s.head == 'u')\n \
    \               f(s.tail, acc + 1)\n            else if (s.head == 'y' && s.length\
    \ == 1) acc + 1\n            else f(s.tail, acc)\n        }\n        f(s.toLowerCase,\
    \ 0)", "        var l = new ListBuffer[Char]\n        for (i <- s) {\n       \
    \     l += i\n        }\n        l = l.filter(i => i == 'a' || i == 'e' || i ==\
    \ 'i' || i == 'o' || i == 'u' || i == 'y')\n        if (l.last == 'y') {\n   \
    \         l.remove(l.length - 1)\n        }\n        l.length", '        ???',
  "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val map = new HashMap[Char,\
    \ Int]()\n        for (c <- s) {\n            if (vowels.contains(c.toLower))\
    \ {\n                map(c.toLower) = 1\n            }\n        }\n        val\
    \ res = map.values.foldLeft(0)((a, b) => a + b)\n        if (s.toLowerCase.endsWith(\"\
    y\")) res + 1 else res", "        if (s.length == 0) return 0\n        val count\
    \ = if (s.length >= 2 && s(s.length - 2) == 'y') 1 else 0\n        if (s.last\
    \ == 'a' || s.last == 'e' || s.last == 'i' || s.last == 'o' || s.last == 'u' ||\
    \ s.last == 'y') 1 + count + vowelsCount(s.substring(0, s.length - 1)) else count\
    \ + vowelsCount(s.substring(0, s.length - 1))", "        var count = 0\n     \
    \   s.map(c => if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\
    \ c == 'y') count += 1)\n        count", "        // Write your code here\n  \
    \      return 0", "        return s.count(_.toLower == 'a') +\n            s.count(_.toLower\
    \ == 'e') +\n            s.count(_.toLower == 'i') +\n            s.count(_.toLower\
    \ == 'o') +\n            s.count(_.toLower == 'u') +\n            (if (s.last.toLower\
    \ == 'y') 1 else 0)", "        // Start with the code here\n        0", '        return
    0', "      val vowels = \"aeiouyAEIOUY\"\n      s.zipWithIndex.foldLeft(0) {\n\
    \        case (count, (c, i)) =>\n          if (vowels.contains(c)) {\n      \
    \      count + 1\n          } else if (c == 'y' && i == s.length - 1) {\n    \
    \        count + 1\n          } else {\n            count\n          }\n     \
    \ }", "        // Fill Up this function body\n        // `s` is the input string\n\
    \        s.count(x => Seq('a', 'e', 'i', 'o', 'u').contains(x.toLower))", "  \
    \      var count = 0\n        for (c <- s) {\n            c match {\n        \
    \        case 'a' | 'e' | 'i' | 'o' | 'u' => count += 1\n                case\
    \ 'y' => if (c == s.last) count += 1\n                case _ =>\n            }\n\
    \        }\n        count", "        var count = 0;\n        for (c <- s) {\n\
    \            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c\
    \ == 'y' && s.indexOf(c) == s.length - 1)) {\n                count += 1;\n  \
    \          }\n        }\n        return count;", "        return s.filter(c =>\
    \ Set('a', 'e', 'i', 'o', 'u').contains(c.toLower)).size", "        s.filter(c\
    \ => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').length",
  "        var count = 0L\n        for (ch <- s) {\n            if (\"aeiouAEIOU\"\
    .contains(ch)) {\n                count += 1\n            }\n        }\n     \
    \   if (s.length >= 2 && s.last == 'y' && \"BCDFGHJKLMNPQRSTVWXZ\".contains(s(s.length\
    \ - 2))) {\n            count += 1\n        }\n        return count"]
stop_tokens:
- "\n    }\n"
