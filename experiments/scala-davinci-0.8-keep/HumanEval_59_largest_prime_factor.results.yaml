language: scala
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n    \tvar largestFactor\
    \ = 0L\n    \tvar number = n\n    \twhile (number % 2 == 0) {\n    \t\tlargestFactor\
    \ = 2\n    \t\tnumber /= 2\n    \t}\n    \tvar i = 3\n    \twhile (i <= sqrt(number))\
    \ {\n    \t\twhile (number % i == 0) {\n    \t\t\tlargestFactor = i\n    \t\t\t\
    number /= i\n    \t\t}\n    \t\ti += 2\n    \t}\n    \tif (number > 2) largestFactor\
    \ = number\n    \tlargestFactor\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        for (i <-\
    \ 2L to n/2) if (n % i == 0) return largestPrimeFactor(n / i)\n        n\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var (x, largestFactor)\
    \ = (n, 1L)\n        for (i <- 2L to round(sqrt(n)) if x > 1) {\n            while\
    \ (x % i == 0) {\n                x /= i\n                largestFactor = i\n\
    \            }\n        }\n        if (x > 1) largestFactor = x\n        largestFactor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        (2 to sqrt(n).toInt).filter(p\
    \ => n % p == 0 && isPrime(p)).last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwsfvxahr.scala:10:55 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        (\e[31m2\e[0m to sqrt(n).toInt).filter(\e[36mp\e\
    [0m => n % p == \e[31m0\e[0m && isPrime(p)).last\n\e[31m\e[31m   |\e[0m      \
    \                                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                      Not found: isPrime\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n    \t//var ret =\
    \ 1L\n        var ret = if (n % 2 == 0) 2 else 1\n        var i = 3L\n       \
    \ while (i <= sqrt(n)) {\n        \tif (n % i == 0) {\n        \t\tret = i\n \
    \       \t\twhile (n % i == 0) n /= i\n        \t}\n        \ti += 2\n       \
    \ }\n        if (n > 1) ret = n\n        return ret\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj51a5iry.scala:15:14\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \t\tret = i\n\e[31m\e\
    [31m   |\e[0m        \t\t      ^\e[0m\n\e[31m   |\e[0m        \t\t      Found:\
    \    (i : Long)\n\e[31m   |\e[0m        \t\t      Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj51a5iry.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \t\t\e[33mwhile\e[0m (n % i == \e[31m0\e[0m)\
    \ n /= i\n\e[31m\e[31m   |\e[0m        \t\t                   ^^^^\e[0m\n\e[31m\
    \   |\e[0m                   value /= is not a member of Long - did you mean n.!=?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj51a5iry.scala:20:25 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (n > \e[31m1\e[0m) ret = n\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var primeFactors\
    \ = ArrayBuffer[Long]()\n        var d = 2\n        while (n != 1) {\n       \
    \     if (n % d == 0) {\n                primeFactors += d\n                n\
    \ /= d\n            } else {\n                d += 1\n            }\n        }\n\
    \        if (primeFactors.isEmpty) 1 else primeFactors.max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplbhbulgf.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= d\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var x = n\n\
    \        var l = 2L\n        while (x > 1) {\n            if (x % l == 0) {\n\
    \                var p = true\n                val m = sqrt(l).toLong\n      \
    \          for (i <- 2L to m) {\n                    if (l % i == 0) {\n     \
    \                   p = false\n                        x /= i\n              \
    \          break\n                    }\n                }\n                if\
    \ (p) {\n                    return l\n                }\n            }\n    \
    \        l += 1\n        }\n        l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpezw2bq60.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        val factors\
    \ = ArrayBuffer[Long]()\n        var cur = n\n        while(cur % 2 == 0) {\n\
    \            factors += 2\n            cur /= 2\n        }\n        var p = 3\n\
    \        while(p <= sqrt(cur).toLong) {\n            while(cur % p == 0) {\n \
    \               factors += p\n                cur /= p\n            }\n      \
    \      p += 2\n        }\n        if(cur > 1) factors += cur\n        factors.max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        if (n % 2\
    \ == 0) return largestPrimeFactor(n / 2)\n        val largest = (3 to sqrt(n).toInt\
    \ by 2).find(n % _ == 0).get\n        largestPrimeFactor(n / largest) max largest\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: None.get\n\tat scala.None$.get(Option.scala:627)\n\
    \tat scala.None$.get(Option.scala:626)\n\tat Problem$.largestPrimeFactor(tmpo0qirunl.scala:11)\n\
    \tat Problem$.largestPrimeFactor(tmpo0qirunl.scala:12)\n\tat Problem$.main(tmpo0qirunl.scala:15)\n\
    \tat Problem.main(tmpo0qirunl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        val max =\
    \ (sqrt(n) + 1).toLong\n        val primes = (2L to max).filter(BigInt(_).isProbablePrime(1))\n\
    \        for (i <- primes.reverse) {\n            if (n % i == 0) {\n        \
    \        return i\n            }\n        }\n        throw new RuntimeException(\"\
    shouldn't get here\")\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdja0_rak.scala:20)\n\tat Problem.main(tmpdja0_rak.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var x = n\n\
    \        var i = 2L\n        while (i <= sqrt(x)) {\n            if (x % i ==\
    \ 0) {\n                x /= i\n                i -= 1\n            }\n      \
    \      i += 1\n        }\n        return x\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n      var max = -1L\n\
    \      var number = n\n      while (number % 2 == 0) {\n        max = 2\n    \
    \    number /= 2\n      }\n      val sqrt = ceil(sqrt(number)).toLong\n      var\
    \ factor = 3L\n      while (factor <= sqrt) {\n        if (number % factor ==\
    \ 0) {\n          max = factor\n          number /= factor\n        } else {\n\
    \          factor += 2\n        }\n      }\n      if (number > 2) max = number\n\
    \      max\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsy_nnoz0.scala:16:22 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m      \e[33mval\e[0m \e[36msqrt\e[0m = ceil(sqrt(number)).toLong\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659821431
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var max =\
    \ -1L\n        var cur = n\n        var i = 2L\n        while (i <= cur) {\n \
    \           if (cur % i == 0) {\n                max = i\n                while\
    \ (cur % i == 0) cur /= i\n            }\n            i += 1\n        }\n    \
    \    max\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        val ps = Prime.primeStream().takeWhile(p\
    \ => p * p <= n)\n        for (p <- ps) {\n            if (n % p == 0) {\n   \
    \             return largestPrimeFactor(n / p)\n            }\n        }\n   \
    \     n\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx747xukg.scala:10:17 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mps\e[0m = Prime.primeStream().takeWhile(\e\
    [36mp\e[0m => p * p <= n)\n\e[31m\e[31m   |\e[0m                 ^^^^^\e[0m\n\e\
    [31m   |\e[0m                 Not found: Prime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        val sqrt =\
    \ sqrt(n).toLong\n        // Compute primes up to sqrt(n).\n        val prime\
    \ = (2L to sqrt).toArray\n        for (i <- 2L to sqrt) {\n            if (prime(i.toInt\
    \ - 2) != 0) {\n                var j = i * i\n                while (j <= sqrt)\
    \ {\n                    prime(j.toInt - 2) = 0\n                    j += i\n\
    \                }\n            }\n        }\n        // Find the largest prime\
    \ divisor of n.\n        var i = sqrt\n        while (i >= 2 && n % i != 0) {\n\
    \            i -= 1\n        }\n        if (i < 2) {\n            n\n        }\
    \ else {\n            var largestPrimeFactor = i\n            val quotient = n\
    \ / i\n            if (prime(quotient.toInt - 2) != 0) {\n                largestPrimeFactor\
    \ = quotient\n            } else {\n                var j = sqrt\n           \
    \     while (j >= 2 && quotient % j != 0) {\n                    j -= 1\n    \
    \            }\n                if (j >= 2) {\n                    largestPrimeFactor\
    \ = j\n                }\n            }\n            largestPrimeFactor\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp33tegyn2.scala:10:19 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var factor = 2L\n        while (m % factor == 0) {\n            m /=\
    \ factor\n        }\n        factor = 3L\n        while (m > 1) {\n          \
    \  while (m % factor == 0) {\n                m /= factor\n            }\n   \
    \         factor += 2\n        }\n        factor -= 2\n        factor\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l)) ==\
    \ (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821433
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var primeFactors\
    \ = List[Long]()\n        var number = n\n        var prime = 2L\n        while\
    \ (number > 1) {\n            if (number % prime == 0) {\n                primeFactors\
    \ :+= prime\n                number /= prime\n            } else {\n         \
    \       prime += 1\n            }\n        }\n        primeFactors.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l)) ==\
    \ (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        def process(n\
    \ : Long, d : Long) : Long = if (n % d == 0) process(n / d, d) else if (d * d\
    \ > n) n else process(n, d + 1)\n        process(n, 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxg5d22_h.scala:15)\n\tat Problem.main(tmpxg5d22_h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n      def largestPrimeFactorR(n\
    \ : Long, i : Long) : Long = {\n        if (i * i > n) n\n        else if (n %\
    \ i == 0) largestPrimeFactorR(n / i, i)\n        else largestPrimeFactorR(n, i\
    \ + 1)\n      }\n      largestPrimeFactorR(n, 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        val primes\
    \ = new Sieve(n.toInt / 2).primes\n        var current = n\n        var largest\
    \ = 0L\n        for (prime <- primes) {\n            while (current % prime ==\
    \ 0) {\n                current /= prime\n                largest = prime\n  \
    \          }\n        }\n        largest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyb0pfr01.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = \e[33mnew\e\
    [0m \e[35mSieve\e[0m(n.toInt / \e[31m2\e[0m).primes\n\e[31m\e[31m   |\e[0m   \
    \                      ^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: type Sieve\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821431
