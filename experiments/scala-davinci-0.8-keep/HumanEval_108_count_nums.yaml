name: HumanEval_108_count_nums
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function count_nums which takes an array of integers and returns\n\
  \    // the number of elements which has a sum of digits > 0.\n    // If a number\
  \ is negative, then its first signed digit will be negative:\n    // e.g. -123 has\
  \ signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>> count_nums([-1,\
  \ 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def countNums(arr :\
  \ List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
  \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
  \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
  \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
  \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
  \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
  \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n   \
  \ assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
  \ == (1l));\n    }\n\n}\n"
completions: ['        arr.count(_.toString.map(_.asDigit).sum > 0)', "        var\
    \ count = 0\n        for (i <- arr) {\n            var sum = 0\n            var\
    \ num = i\n            if (num < 0) num = -num\n            while (num > 0) {\n\
    \                sum += num % 10\n                num /= 10\n            }\n \
    \           if (sum > 0) count += 1\n        }\n        return count", "     \
    \   def signedDigits(x : Long) : Int = {\n            var n = x.abs\n        \
    \    var sum = 0\n            while (n > 0) {\n                sum += n % 10\n\
    \                n /= 10\n            }\n            if (x < 0) sum *= -1\n  \
    \          return sum\n        }\n        var count = 0\n        for (x <- arr)\
    \ if (signedDigits(x) > 0) count += 1\n        return count", "        def digitsSum(n\
    \ : Long) : Long = {\n            def digitsSumItr(n : Long, sum : Long) : Long\
    \ = {\n                if (n == 0) sum\n                else digitsSumItr(n /\
    \ 10, sum + n % 10)\n            }\n            digitsSumItr(abs(n), 0)\n    \
    \    }\n        def countNumsItr(arr : List[Long], count : Long) : Long = {\n\
    \            if (arr.isEmpty) count\n            else if (digitsSum(arr.head)\
    \ > 0) countNumsItr(arr.tail, count + 1)\n            else countNumsItr(arr.tail,\
    \ count)\n        }\n        countNumsItr(arr, 0)", "        def neg(num : Long)\
    \ : Boolean = {\n            if (num < 0) true else false\n        }\n       \
    \ def dsum(num : Long) : Long = {\n            num.toString.map(c => c.asDigit).sum\n\
    \        }\n        arr.filter(x => !neg(x) || dsum(x) != 0).length", "      \
    \  arr.filter(x => x > 0).map(x => x.toString.map(y => y.asDigit).sum).sum +\n\
    \        arr.filter(x => x < 0).map(x => x.toString.tail.map(y => y.asDigit).sum\
    \ + 1).sum", "      val sum = arr.map(_.abs.toString.map(_.asDigit).sum).filter(_\
    \ > 0).length\n      sum", "        var counter = 0\n        arr.foreach(x =>\
    \ if (x.toString.map(x => x.asDigit).sum > 0) counter += 1)\n        counter",
  "        var ans = 0L\n        for (n <- arr) {\n            var sum = 0L\n    \
    \        var m = abs(n)\n            while (m > 0) {\n                sum += m\
    \ % 10\n                m /= 10\n            }\n            if (sum > 0) ans +=\
    \ 1\n        }\n        ans", "        arr.map(x => if (x < 0) x.toString.substring(1).map(_.asDigit).sum\n\
    \                     else x.toString.map(_.asDigit).sum).count(_ > 0)", "   \
    \     val sum = (arr map (i => abs(i).toString.map(_.asDigit).sum)).sum\n    \
    \    sum", '        arr.filter(x => x != 0 && x != -x && x.toString.map(_.asDigit).sum
    != 0).size', '        arr.filter(x => x.toString.toList.map(x => x.toString.toInt).sum
    > 0).length', "        var c = 0\n        for (a <- arr) {\n            var sum\
    \ = 0\n            var absA = abs(a)\n            while (absA > 0) {\n       \
    \         sum += absA % 10\n                absA /= 10\n            }\n      \
    \      if (sum > 0) c += 1\n        }\n        c", "        def digitSum(n : Long)\
    \ : Long = {\n            var sum = 0L\n            var n2 = abs(n)\n        \
    \    while (n2 > 0) {\n                sum += n2 % 10\n                n2 /= 10\n\
    \            }\n            sum\n        }\n        def helper(i : Int, count\
    \ : Long) : Long = {\n            if (i == arr.length) count\n            else\
    \ {\n                if (digitSum(arr(i)) > 0) helper(i + 1, count + 1)\n    \
    \            else helper(i + 1, count)\n            }\n        }\n        helper(0,\
    \ 0)", "        def sumDigits(n : Long) : Long = {\n            var s = 0L\n \
    \           var m = abs(n)\n            while (m > 0) {\n                s +=\
    \ m % 10\n                m /= 10\n            }\n            if (n < 0) s -=\
    \ 1\n            s\n        }\n        def count(n : Long) : Long = {\n      \
    \      var count = 0L\n            var s = sumDigits(n)\n            if (s > 0)\
    \ {\n                count += 1\n                while (s > 0) {\n           \
    \         s -= 1\n                    count += 1\n                }\n        \
    \    }\n            else if (s < 0) {\n                count += 1\n          \
    \      while (s < 0) {\n                    s += 1\n                    count\
    \ += 1\n                }\n            }\n            count\n        }\n     \
    \   var result = 0L\n        for (n <- arr) result += count(n)\n        result",
  "        arr.count(a => {\n            var sum = abs(a).toString.map(_.asDigit).sum\n\
    \            if (a < 0) sum += 1\n            sum > 0\n        })", "        arr.filter(x\
    \ => {\n            val str = x.toString\n            val sig = if (str(0) ==\
    \ '-') str.substring(1) else str\n            sig.map(y => y.asDigit).sum > 0\n\
    \        }).length", "        val ss = arr.filter(x => x != 0).map(x => abs(x).toString.toList.map(y\
    \ => (y - '0').toLong).sum)\n        ss.filter(x => x > 0).length", "        def\
    \ sum(a : Long) : Long = {\n            var s = a.abs\n            var r = 0L\n\
    \            while (s > 0) {\n                r += s % 10\n                s /=\
    \ 10\n            }\n            r\n        }\n        arr.map(sum).filter(_ >\
    \ 0).length"]
stop_tokens:
- "\n    }\n"
