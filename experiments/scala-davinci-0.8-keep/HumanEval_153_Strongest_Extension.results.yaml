language: scala
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        // Write your code here\n        return\
    \ \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpue67p8aq.scala:24)\n\tat Problem.main(tmpue67p8aq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n      // 1) count uppercase\n      // 2) count\
    \ lowercase\n      // 3) return class_name + strongest_extension\n      def count_upper(s\
    \ : String) : Int = s.filter(_.isUpper).length\n      def count_lower(s : String)\
    \ : Int = s.filter(_.isLower).length\n      def cal_strength(s : String) : Double\
    \ = count_upper(s) - count_lower(s)\n      def get_strongest(extensions : List[String])\
    \ : String = {\n        if (extensions.isEmpty) \"\"\n        else {\n       \
    \   val res = extensions.map(x => (x, cal_strength(x))).sortBy(_._2).reverse\n\
    \          res.head._1\n        }\n      }\n      class_name + \".\" + get_strongest(extensions)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_jgh3ntl.scala:40)\n\tat Problem.main(tmp_jgh3ntl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        var strongest = extensions(0)\n      \
    \  var strength = -2.0\n        for (ext <- extensions) {\n            var s =\
    \ 0.0\n            for (c <- ext) if (c.isUpper) s += 1.0 else s -= 1.0\n    \
    \        if (s > strength) {\n                strength = s\n                strongest\
    \ = ext\n            }\n        }\n        class_name + \".\" + strongest\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfko2kjzd.scala:33)\n\tat Problem.main(tmpfko2kjzd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensionStrength = extensions.map(ext\
    \ => (ext, ext.count(_.isUpper) - ext.count(_.isLower))).sortBy(_._2)\n      \
    \  return class_name + \".\" + extensionStrength.last._1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk0j1iyvx.scala:28)\n\tat Problem.main(tmpk0j1iyvx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        var maxStrength = 0\n        var maxIndex\
    \ = 0\n        extensions.foreach {\n            e => {\n                var sum\
    \ = e.foldLeft(0)((acc, c) => if (c.isUpper) acc + 1 else acc - 1)\n         \
    \       if (sum > maxStrength) {\n                    maxStrength = sum\n    \
    \                maxIndex = extensions.indexOf(e)\n                }\n       \
    \     }\n        }\n        class_name + \".\" + extensions(maxIndex)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ffa8jam.scala:34)\n\tat Problem.main(tmp4ffa8jam.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        extensions.sortWith((x, y) => x.count(_.isUpper)\
    \ - x.count(_.isLower) > y.count(_.isUpper) - y.count(_.isLower)).head\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6ke2axa1.scala:23)\n\tat Problem.main(tmp6ke2axa1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        def strength(s : String) : Double = {\n\
    \            def f(acc : (Int, Int), c : Char) : (Int, Int) = {\n            \
    \    c match {\n                    case x if c.isUpper => (acc._1 + 1, acc._2)\n\
    \                    case x if c.isLower => (acc._1, acc._2 + 1)\n           \
    \         case _ => acc\n                }\n            }\n            val (u,\
    \ l) = (s.foldLeft((0, 0))(f))\n            u - l\n        }\n        def strongest(name\
    \ : String, e : List[String]) : String = {\n            e match {\n          \
    \      case Nil => name\n                case h :: t => {\n                  \
    \  val s = strength(h)\n                    if (s >= strength(name)) strongest(h,\
    \ t)\n                    else strongest(name, t)\n                }\n       \
    \     }\n        }\n        if (extensions.isEmpty) class_name\n        else class_name\
    \ + \".\" + strongest(extensions.head, extensions.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptouqqqai.scala:49)\n\tat Problem.main(tmptouqqqai.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        var max = extensions.head\n        var\
    \ cur = extensions.head\n        var max_strengths = 0.0\n        var cur_strengths\
    \ = 0.0\n        var capital = 0\n        var small = 0\n        for (i <- 0 until\
    \ extensions.length) {\n            cur = extensions(i)\n            capital =\
    \ 0\n            small = 0\n            for (j <- 0 until cur.length) {\n    \
    \            if (cur(j).isUpper) capital += 1\n                else small += 1\n\
    \            }\n            cur_strengths = capital - small\n            if (cur_strengths\
    \ > max_strengths) {\n                max = cur\n                max_strengths\
    \ = cur_strengths\n            }\n        }\n        class_name + \".\" + max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp68lyfe_8.scala:43)\n\tat Problem.main(tmp68lyfe_8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        // For each extension, calculate its strength\n\
    \        // Then, find the extension with the strongest strength.\n        var\
    \ max : Double = -1\n        var strong_extension : String = \"\"\n        for\
    \ (e <- extensions) {\n            val cap = e.count(_.isUpper)\n            val\
    \ sm = e.count(_.isLower)\n            val strength = cap - sm\n            if\
    \ (strength > max) {\n                max = strength\n                strong_extension\
    \ = e\n            }\n        }\n        class_name + \".\" + strong_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        extensions.zipWithIndex.map(v => (v._1,\
    \ v._1.filter(c => c.isUpper).length - v._1.filter(c => c.isLower).length)).maxBy(x\
    \ => x._2)._1\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw0cfc44g.scala:23)\n\tat Problem.main(tmpw0cfc44g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n      var cur_strongest_extension = \"\"\n   \
    \   var cur_strongest_strength = 0.0\n      for (extension <- extensions) {\n\
    \        var cnt_cap = 0\n        var cnt_small = 0\n        for (c <- extension)\
    \ {\n          if (c.isUpper) cnt_cap += 1\n          else cnt_small += 1\n  \
    \      }\n        var strength = cnt_cap - cnt_small\n        if (strength > cur_strongest_strength)\
    \ {\n          cur_strongest_strength = strength\n          cur_strongest_extension\
    \ = extension\n        }\n      }\n      return class_name + \".\" + cur_strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkojdwa5n.scala:38)\n\tat Problem.main(tmpkojdwa5n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val (strongest, strongest_strength) =\
    \ extensions.foldLeft((\"\", -1.0 / 0.0))((t, s) => {\n            val strength\
    \ = (s.filter(x => x.isUpper).length.toDouble - s.filter(x => x.isLower).length.toDouble)\
    \ / s.length.toDouble\n            if (strength > t._2) {\n                (s,\
    \ strength)\n            } else {\n                t\n            }\n        })\n\
    \        return class_name + \".\" + strongest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3grjyvwj.scala:31)\n\tat Problem.main(tmp3grjyvwj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        def strength(ext : String) : Double =\
    \ {\n            def total(f : Char => Boolean) : Int = {\n                ext.filter(f).length\n\
    \            }\n            total(_.isUpper) - total(_.isLower)\n        }\n \
    \       class_name + \".\" + extensions.maxBy(strength)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n      var strength = 0.0\n      var count = 0\n\
    \      var result = class_name\n      for (extension <- extensions) {\n      \
    \  var str = 0.0\n        for (letter <- extension) {\n          if (letter.isUpper)\
    \ str += 1.0\n          else if (letter.isLower) str -= 1.0\n        }\n     \
    \   if (str > strength) {\n          strength = str\n          result = class_name\
    \ + \".\" + extension\n        }\n      }\n      result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyg4imesg.scala:39)\n\tat Problem.main(tmpyg4imesg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val res = extensions.map(ext => (class_name\
    \ + \".\" + ext, ext.toCharArray.foldLeft(0.0)((s, c) => if (c.isUpper) s + 1\
    \ else s - 1))).sortBy(_._2)\n        res.last._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiayon4qs.scala:26)\n\tat Problem.main(tmpiayon4qs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val strength_map = new HashMap[String,\
    \ Double]\n        var max = 0.0\n        var strongest_extension = \"\"\n   \
    \     for (extension <- extensions) {\n            var upper = 0\n           \
    \ var lower = 0\n            for (char <- extension) {\n                if (char.isUpper)\
    \ upper += 1\n                else lower += 1\n            }\n            val\
    \ strength = upper - lower\n            strength_map(extension) = strength\n \
    \           if (strength > max) {\n                max = strength\n          \
    \      strongest_extension = extension\n            }\n        }\n        class_name\
    \ + \".\" + strongest_extension\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi0yu1yoe.scala:40)\n\tat Problem.main(tmpi0yu1yoe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        var strongest_ext : String = \"\"\n  \
    \      var strongest_ext_strength : Double = -999999\n        for (ext <- extensions)\
    \ {\n            var upper_count = 0\n            var lower_count = 0\n      \
    \      for (letter <- ext) {\n                if (letter.isUpper) upper_count\
    \ += 1\n                else lower_count += 1\n            }\n            val\
    \ strength = upper_count - lower_count\n            if (strength > strongest_ext_strength)\
    \ {\n                strongest_ext = ext\n                strongest_ext_strength\
    \ = strength\n            }\n        }\n        return class_name + \".\" + strongest_ext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpru9j3_iw.scala:38)\n\tat Problem.main(tmpru9j3_iw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val strengths = extensions.map(x => x.toLowerCase.foldLeft(0)((acc,\
    \ y) => if (y.isUpper) acc + 1 else acc - 1))\n        val strongest = strengths.zipWithIndex.maxBy(_._1)._2\n\
    \        s\"$class_name.${extensions(strongest)}\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf_fsoa6l.scala:25)\n\tat Problem.main(tmpf_fsoa6l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        var strength = 0.0\n        var strongest\
    \ = \"\"\n        for (ext <- extensions) {\n            var temp = ext.filter(_.isUpper).length.toDouble\
    \ - ext.filter(_.isLower).length.toDouble\n            if (temp > strength) {\n\
    \                strength = temp\n                strongest = ext\n          \
    \  }\n        }\n        return class_name + \".\" + strongest\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"),\
    \ (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj5wt_vyr.scala:34)\n\tat Problem.main(tmpj5wt_vyr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n    \tval uppers = \"[A-Z]\".r\n    \tval lowers\
    \ = \"[a-z]\".r\n    \tvar strengths = Map[String, Double]()\n    \tfor (ext <-\
    \ extensions) {\n    \t\tstrengths(ext) = uppers.findAllIn(ext).length - lowers.findAllIn(ext).length\n\
    \    \t}\n    \tvar strongest = (strengths.toList.sortBy(_._2).reverse.head._1)\n\
    \    \treturn class_name + \".\" + strongest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4vqtqd7y.scala:34)\n\tat Problem.main(tmp4vqtqd7y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821013
