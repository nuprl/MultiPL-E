language: scala
name: HumanEval_62_derivative
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        if (xs.size == 1) List(0)\n        else {\n      \
    \      val r = (1 until xs.size).map(xs(_) * _).toList\n            r\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp74m9gy4d.scala:14:42 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mr\e[0m = (\e[31m1\e\
    [0m until xs.size).map(xs(_) * _).toList\n\e[31m\e[31m   |\e[0m              \
    \                            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                Wrong number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1659820949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        if (xs.length <= 1) return List()\n        var i =\
    \ 1\n        val result = new ListBuffer[Long]\n        for (c <- xs.tail) {\n\
    \            result += i * c\n            i += 1\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        for ((c, i) <- xs.zipWithIndex if i != 0) yield i\
    \ * c\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var ys = List[Long]()\n        for (i <- 1 until xs.length)\
    \ {\n            ys = xs(i) * i +: ys\n        }\n        ys\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe9jzh2el.scala:19)\n\tat Problem.main(tmpe9jzh2el.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        (1 until xs.length).map(i => xs(i) * i).toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        (for (i <- 1 until xs.length) yield xs(i) * i).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n      val temp = xs.zipWithIndex\n      temp.filter(_._2 >\
    \ 0).map(t => t._1 * t._2).toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var ys = List[Long]()\n        for (i <- Range(1,\
    \ xs.length)) {\n            ys = (xs(i) * i) :: ys\n        }\n        ys.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        if (xs.length < 2) return List()\n        val ys =\
    \ new ListBuffer[Long]\n        for (i <- 1 until xs.length) ys += i * xs(i)\n\
    \        ys.toList\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        xs.view.zipWithIndex.map(x => x._1 * x._2).tail.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n      xs.zipWithIndex.map(x => x._1 * x._2).tail\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ret = new ListBuffer[Long]\n\
    \        for (i <- 1 until n) ret += xs(i) * i\n        ret.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        List.tabulate(n - 1)(i\
    \ => (i + 1) * xs(i + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val ans = new ArrayBuffer[Long]\n        for (i <-\
    \ 1 until xs.length) ans += xs(i) * i\n        ans.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        if (xs.length < 2) return List()\n        return xs.zipWithIndex.map(p\
    \ => p._1 * p._2).drop(1)\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var ys = new ListBuffer[Long]\n        for (i <- 0\
    \ until xs.length - 1) ys += (xs(i + 1) * (i + 1))\n        ys.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 until\
    \ xs.length) result = result :+ (xs(i) * i)\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val m = xs.length - 1\n        val result = ArrayBuffer[Long]()\n\
    \        for (i <- 1 to m) result += xs(i) * i\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        def f(xs : List[Long], n : Int) : List[Long] = xs\
    \ match {\n            case Nil => Nil\n            case _ => (n * xs.head) ::\
    \ f(xs.tail, n + 1)\n        }\n        f(xs.tail, 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        xs.drop(1).zipWithIndex.map(p => (p._1 * (p._2 + 1))).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
