language: scala
name: HumanEval_71_triangle_area
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val s = (a + b + c) / 2.0f\n        if (s - a > 0 && s - b > 0 && s -\
    \ c > 0) (sqrt(s * (s - a) * (s - b) * (s - c)) * 100).toInt / 100.0f\n      \
    \  else -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuoompb7f.scala:23)\n\tat Problem.main(tmpuoompb7f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val s = (a + b + c) / 2.0\n        if (s > max(a, max(b, c))) sqrt(s\
    \ * (s - a) * (s - b) * (s - c)).toFloat\n        else -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyw9k2ul0.scala:20)\n\tat Problem.main(tmpyw9k2ul0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        // now given three sides, we can just calculate the area using heron's\
    \ formula\n        val s = (a + b + c) / 2.0\n        val area = sqrt(s * (s -\
    \ a) * (s - b) * (s - c))\n        if (a + b < c || a + c < b || b + c < a) -1.0.toFloat\n\
    \        else area.toFloat\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcmisfv92.scala:22)\n\tat Problem.main(tmpcmisfv92.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val s = (a + b + c) / 2.0\n        val area = sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\n        if (area < 0) return -1\n        return area.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf0xp2eth.scala:20)\n\tat Problem.main(tmpf0xp2eth.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val s = (a + b + c) / 2.0f\n        val area = sqrt(s * (s - a) * (s\
    \ - b) * (s - c))\n        if (area < 0) -1\n        else area\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppvc421t2.scala:16:13\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m area\n\
    \e[31m\e[31m   |\e[0m             ^^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    (area : Double)\n\e[31m   |\e[0m             Required: Float\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659821313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        if (a + b <= c || a + c <= b || b + c <= a) -1.0f\n        else {\n \
    \           val s = (a + b + c) / 2.0\n            sqrt(s * (s - a) * (s - b)\
    \ * (s - c)).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkc3cvb91.scala:22)\n\tat Problem.main(tmpkc3cvb91.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        var s = (a + b + c) / 2.0\n        var area = pow(s * (s - a) * (s -\
    \ b) * (s - c), 0.5)\n        if (area == 0) -1 else area.toFloat\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7vmtfyzf.scala:19)\n\tat Problem.main(tmp7vmtfyzf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        var x = Array(a, b, c)\n        scala.util.Sorting.quickSort(x)\n   \
    \     if (x(0) + x(1) <= x(2)) return -1.0f\n        else return sqrt(pow(x(0),\
    \ 2) + pow(x(1), 2) - pow(x(2), 2)).toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0nmif3kb.scala:19)\n\tat Problem.main(tmp0nmif3kb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        if (a + b > c && a + c > b && b + c > a) {\n            val s = (a +\
    \ b + c) / 2.0\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n  \
    \      } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp60mqq9qg.scala:23)\n\tat Problem.main(tmp60mqq9qg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        var x = Array(a, b, c).sorted\n        if (x(0) + x(1) > x(2)) sqrt(pow(x(0),\
    \ 2).toFloat + pow(x(1), 2).toFloat - pow(x(2), 2).toFloat).toFloat\n        else\
    \ -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvhxjedc1.scala:18)\n\tat Problem.main(tmpvhxjedc1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        if (a + b > c && a + c > b && b + c > a)\n            return Math.sqrt(a\
    \ * b * (a + b + c) * (a + b - c) * (a + c - b) * (b + c - a)) / 4\n        return\
    \ -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu52g1v6l.scala:14:19\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mreturn\e[0m\
    \ Math.sqrt(a * b * (a + b + c) * (a + b - c) * (a + c - b) * (b + c - a)) / \e\
    [31m4\e[0m\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    Double\n\e[31m   |\e[0m     \
    \              Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        if (a + b > c && a + c > b && b + c > a) return (a + b + c).toFloat *\
    \ (a + b - c).toFloat * (a + c - b).toFloat * (b + c - a).toFloat / 4 / 4\n  \
    \      return -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbi1eev1z.scala:17)\n\tat Problem.main(tmpbi1eev1z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        if (a > 0 && b > 0 && c > 0 && (a + b > c) && (a + c > b) && (b + c >\
    \ a)) {\n            val s = (a + b + c).toFloat / 2\n            sqrt(s * (s\
    \ - a) * (s - b) * (s - c)).toFloat\n        } else -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn3668h7k.scala:21)\n\tat Problem.main(tmpn3668h7k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val length = a + b + c\n        if (length <= 2 * max(a, max(b, c)))\
    \ -1 else {\n            val s = length / 2\n            val area = sqrt(s * (s\
    \ - a) * (s - b) * (s - c))\n            area.toFloat\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpach2vhlq.scala:23)\n\tat Problem.main(tmpach2vhlq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        if (a + b <= c || a + c <= b || b + c <= a) return -1\n        val s\
    \ = (a + b + c) / 2.0\n        sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcz9dt033.scala:20)\n\tat Problem.main(tmpcz9dt033.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val maxSide = max(a, max(b, c))\n        val minSide = min(a, min(b,\
    \ c))\n        val medSide = a + b + c - maxSide - minSide\n        if (maxSide\
    \ >= medSide + minSide) {\n            -1\n        } else {\n            // Heron's\
    \ formula\n            val s = (a + b + c) / 2\n            val t = s * (s - a)\
    \ * (s - b) * (s - c)\n            sqrt(t).toFloat\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpym413ngq.scala:28)\n\tat Problem.main(tmpym413ngq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        if (a > 0 && b > 0 && c > 0 && a + b > c && a + c > b && b + c > a) {\n\
    \            val s = (a + b + c) / 2.0\n            sqrt(s * (s - a) * (s - b)\
    \ * (s - c)).toFloat\n        } else {\n            -1\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptppsm5f1.scala:23)\n\tat Problem.main(tmptppsm5f1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val s = (a + b + c).toFloat / 2\n        val area = s * (s - a) * (s\
    \ - b) * (s - c)\n        if (area <= 0) return -1\n        return sqrt(area)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy6agn243.scala:16:19\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mreturn\e[0m sqrt(area)\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \      Found:    Double\n\e[31m   |\e[0m               Required: Float\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659821313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        val s = (a + b + c) / 2.0\n        val area = sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\n        if (a + b > c && a + c > b && b + c > a) return area.toFloat\n\
    \        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphfk_ayfc.scala:21)\n\tat Problem.main(tmphfk_ayfc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1,\
    \ 2, 10) == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n\
    \        if (a + b > c && a + c > b && b + c > a) {\n            // Heron's formula\n\
    \            val s = (a + b + c) / 2\n            sqrt(s * (s - a) * (s - b) *\
    \ (s - c)).toFloat\n        } else -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwi1xpmu1.scala:22)\n\tat Problem.main(tmpwi1xpmu1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821313
