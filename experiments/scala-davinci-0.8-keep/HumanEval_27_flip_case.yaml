name: HumanEval_27_flip_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n    def flipCase(string\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(flipCase((\"\")).equals((\"\
  \")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
  These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE\
  \ VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        var newString = \"\"\n        for (c <- string) {\n       \
    \     if (c.isUpper) {\n                newString += c.toLower\n            }\
    \ else {\n                newString += c.toUpper\n            }\n        }\n \
    \       newString", "        var result = \"\"\n        for (char <- string) {\n\
    \            if (char.isUpper) result += char.toLower\n            else result\
    \ += char.toUpper\n        }\n        result", "        var result = string.map(c\
    \ => {\n            if (c.isUpper) c.toLower\n            else c.toUpper\n   \
    \     })\n        result", "        def flipCaseRec(string : String, result :\
    \ String) : String = {\n            if (string.isEmpty) {\n                result\n\
    \            } else {\n                val firstChar = string.head\n         \
    \       val rest = string.tail\n                if (firstChar.isUpper) {\n   \
    \                 flipCaseRec(rest, result + firstChar.toLower)\n            \
    \    } else {\n                    flipCaseRec(rest, result + firstChar.toUpper)\n\
    \                }\n            }\n        }\n        flipCaseRec(string, \"\"\
    )", "        def flipCaseChar(char : Char) : Char = {\n            if (char.isUpper)\
    \ {\n                char.toLower\n            } else {\n                char.toUpper\n\
    \            }\n        }\n        string.map(flipCaseChar)", "        val sb\
    \ = new StringBuilder(string)\n        for (i <- 0 until sb.length) {\n      \
    \      if (Character.isLowerCase(sb.charAt(i))) sb.setCharAt(i, Character.toUpperCase(sb.charAt(i)))\n\
    \            else sb.setCharAt(i, Character.toLowerCase(sb.charAt(i)))\n     \
    \   }\n        sb.toString", '        return string.map(x => if (x.isLower) x.toUpper
    else x.toLower)', "        string.map( (ch: Char) => {\n            if (ch.isUpper)\
    \ ch.toLower\n            else ch.toUpper\n        })", "        var flipped =\
    \ \"\"\n        for (c <- string) {\n            if (c.isLower) {\n          \
    \      flipped += c.toUpper\n            } else {\n                flipped +=\
    \ c.toLower\n            }\n        }\n        flipped", "        val result =\
    \ string.map((c : Char) => {\n            if (c.isUpper) c.toLower\n         \
    \   else c.toUpper\n        })\n        result", "        var arr = new Array[Char](string.length())\n\
    \        for (i <- 0 until string.length()) {\n            val char = string.charAt(i)\n\
    \            if (char.isLower) arr(i) = char.toUpper\n            else arr(i)\
    \ = char.toLower\n        }\n        new String(arr)", '        string.map(c =>
    if (c.isUpper) c.toLower else c.toUpper)', "        for(i <- 0 until string.length)\
    \ {\n            if(string(i).isLower) {\n                return string.substring(0,\
    \ i) + string(i).toUpper + string.substring(i + 1, string.length)\n          \
    \  }\n            else if(string(i).isUpper) {\n                return string.substring(0,\
    \ i) + string(i).toLower + string.substring(i + 1, string.length)\n          \
    \  }\n        }\n        return string", "        val lowerCase = string.toLowerCase()\n\
    \        val upperCase = string.toUpperCase()\n        var result = \"\"\n   \
    \     for (i <- 0 until string.length) {\n            result += if (string(i)\
    \ == lowerCase(i)) upperCase(i) else lowerCase(i)\n        }\n        result",
  '        string.map((ch) => if (ch.isUpper) ch.toLower else ch.toUpper)', "    \
    \    def f(char : Char) : Char = {\n            if (char.isUpper)\n          \
    \      char.toLower\n            else\n                char.toUpper\n        }\n\
    \        string.map(f)", '        string.map(x => if (x.isUpper) x.toLower else
    x.toUpper)', '        string.flatMap((c : Char) => if (c.isUpper) c.toLower.toString
    else c.toUpper.toString)', '        return string.map(c => if (c.isLower) c.toUpper
    else c.toLower)', "        val chars = string.toCharArray\n        for (i <- 0\
    \ until chars.length) {\n            chars(i) = if (chars(i).isLower) chars(i).toUpper\
    \ else chars(i).toLower\n        }\n        return chars.mkString"]
stop_tokens:
- "\n    }\n"
