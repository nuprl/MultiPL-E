name: HumanEval_105_by_length
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
  \    // reverse the resulting array, and then replace each digit by its corresponding\
  \ name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
  Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5,\
  \ 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse\
  \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\"\
  , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty,\
  \ return an empty array:\n    // arr = []\n    // return []\n    // If the array\
  \ has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort\
  \ arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n\
  \    def byLength(arr : List[Long]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
  \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
  Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
  \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
  \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
  \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"\
  One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
  Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
completions: ["        // Fill up this function body\n        // You have to return\
    \ a List[String]\n        // You have to return a List[String]\n        // You\
    \ have to return a List[String]\n        List()", "        var res = List[String]()\n\
    \        for (a <- arr.sorted.reverse) {\n            if (a > 0 && a < 10) {\n\
    \                a match {\n                    case 1 => res = \"One\" :: res\n\
    \                    case 2 => res = \"Two\" :: res\n                    case\
    \ 3 => res = \"Three\" :: res\n                    case 4 => res = \"Four\" ::\
    \ res\n                    case 5 => res = \"Five\" :: res\n                 \
    \   case 6 => res = \"Six\" :: res\n                    case 7 => res = \"Seven\"\
    \ :: res\n                    case 8 => res = \"Eight\" :: res\n             \
    \       case 9 => res = \"Nine\" :: res\n                }\n            }\n  \
    \      }\n        res", "        val list = arr.filter(x => (x <= 9) && (x >=\
    \ 1)).sorted.reverse.map(x => x.toString)\n        list", "        arr.map(n =>\
    \ n.toString()).sortBy(n => n.length()).reverse.map(n => n match {\n         \
    \   case \"1\" => \"One\"\n            case \"2\" => \"Two\"\n            case\
    \ \"3\" => \"Three\"\n            case \"4\" => \"Four\"\n            case \"\
    5\" => \"Five\"\n            case \"6\" => \"Six\"\n            case \"7\" =>\
    \ \"Seven\"\n            case \"8\" => \"Eight\"\n            case \"9\" => \"\
    Nine\"\n            case _ => \"\"\n        }).filter(n => n != \"\")", "    \t\
    val arr1 = arr.filter(x => x > 0 && x < 10).sorted.reverse\n    \tarr1.map(x =>\
    \ x match {\n    \t\tcase 1 => \"One\"\n    \t\tcase 2 => \"Two\"\n    \t\tcase\
    \ 3 => \"Three\"\n    \t\tcase 4 => \"Four\"\n    \t\tcase 5 => \"Five\"\n   \
    \ \t\tcase 6 => \"Six\"\n    \t\tcase 7 => \"Seven\"\n    \t\tcase 8 => \"Eight\"\
    \n    \t\tcase 9 => \"Nine\"\n    \t\tcase _ => \"\"\n    \t})", "        val\
    \ l = arr.sortWith(_ < _).distinct.filter(v => v >= 1 && v <= 9).reverse.map(v\
    \ => v.toString)\n        if (l.isEmpty) {\n            return List()\n      \
    \  }\n        val map = Map(\n            \"1\" -> \"One\",\n            \"2\"\
    \ -> \"Two\",\n            \"3\" -> \"Three\",\n            \"4\" -> \"Four\"\
    ,\n            \"5\" -> \"Five\",\n            \"6\" -> \"Six\",\n           \
    \ \"7\" -> \"Seven\",\n            \"8\" -> \"Eight\",\n            \"9\" -> \"\
    Nine\"\n        )\n        l.map(v => map(v))", "        def name(x : Long) :\
    \ String = {\n            x match {\n                case 1 => \"One\"\n     \
    \           case 2 => \"Two\"\n                case 3 => \"Three\"\n         \
    \       case 4 => \"Four\"\n                case 5 => \"Five\"\n             \
    \   case 6 => \"Six\"\n                case 7 => \"Seven\"\n                case\
    \ 8 => \"Eight\"\n                case 9 => \"Nine\"\n                case _ =>\
    \ \"\"\n            }\n        }\n        arr.filter(x => x > 0 && x < 10).sorted.reverse.map(x\
    \ => name(x))", "        // 1. filter\n        val filterArr = arr.filter(x =>\
    \ x > 0 && x < 10)\n        // 2. sort\n        val sortArr = filterArr.sorted\n\
    \        // 3. reverse\n        val reverseArr = sortArr.reverse\n        // 4.\
    \ replace\n        val replaceArr = reverseArr.map(x => x match {\n          \
    \  case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 => \"\
    Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\n    \
    \        case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case\
    \ 8 => \"Eight\"\n            case 9 => \"Nine\"\n            case _ => \"\"\n\
    \        })\n        replaceArr", "        var result = ArrayBuffer[String]()\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) == 0) result\
    \ += \"Zero\"\n            else {\n                var count = 0\n           \
    \     while (arr(i) > 0) {\n                    result += arr(i) % 10 match {\n\
    \                        case 1 => \"One\"\n                        case 2 =>\
    \ \"Two\"\n                        case 3 => \"Three\"\n                     \
    \   case 4 => \"Four\"\n                        case 5 => \"Five\"\n         \
    \               case 6 => \"Six\"\n                        case 7 => \"Seven\"\
    \n                        case 8 => \"Eight\"\n                        case 9\
    \ => \"Nine\"\n                    }\n                    arr(i) /= 10\n     \
    \               count += 1\n                }\n                for (j <- 1 to\
    \ count / 2) {\n                    val tmp = result(result.length - j)\n    \
    \                result(result.length - j) = result(result.length - count + j\
    \ - 1)\n                    result(result.length - count + j - 1) = tmp\n    \
    \            }\n            }\n        }\n        result.toList", '        arr.sortWith(_.toString.length
    < _.toString.length).map(_.toString)', "        // change the array to List[String]\n\
    \        var result = new ListBuffer[String]\n        for (i <- arr) {\n     \
    \       result += i.toString\n        }\n        // sort the List[String] by length\n\
    \        val result2 = result.toList.sortWith(_.length < _.length)\n        var\
    \ final_result = new ListBuffer[String]\n        for (i <- result2) {\n      \
    \      final_result += i\n        }\n        final_result.toList", "        arr.map(num\
    \ => {\n            num match {\n                case 1 => \"One\"\n         \
    \       case 2 => \"Two\"\n                case 3 => \"Three\"\n             \
    \   case 4 => \"Four\"\n                case 5 => \"Five\"\n                case\
    \ 6 => \"Six\"\n                case 7 => \"Seven\"\n                case 8 =>\
    \ \"Eight\"\n                case 9 => \"Nine\"\n                case _ => \"\"\
    \n            }\n        }).filter(_ != \"\")", "        if (arr.isEmpty)\n  \
    \          List[String]()\n        else {\n            val filtered = arr.filter(x\
    \ => x >= 1 && x <= 9)\n            val sorted = filtered.sorted\n           \
    \ val reversed = sorted.reverse\n            val result = reversed.map(x => x\
    \ match {\n                case 1 => \"One\"\n                case 2 => \"Two\"\
    \n                case 3 => \"Three\"\n                case 4 => \"Four\"\n  \
    \              case 5 => \"Five\"\n                case 6 => \"Six\"\n       \
    \         case 7 => \"Seven\"\n                case 8 => \"Eight\"\n         \
    \       case 9 => \"Nine\"\n            })\n            result\n        }", " \
    \       def translate(num : Long) : String = {\n            if (num == 1) \"One\"\
    \n            else if (num == 2) \"Two\"\n            else if (num == 3) \"Three\"\
    \n            else if (num == 4) \"Four\"\n            else if (num == 5) \"Five\"\
    \n            else if (num == 6) \"Six\"\n            else if (num == 7) \"Seven\"\
    \n            else if (num == 8) \"Eight\"\n            else if (num == 9) \"\
    Nine\"\n            else null\n        }\n        var ans = new ListBuffer[String]\n\
    \        for (n <- arr.sorted.reverse) {\n            val str = translate(n)\n\
    \            if (str != null) ans += str\n        }\n        ans.toList", "  \
    \      var res = new ArrayBuffer[String]\n        for (i <- 0 until arr.length)\
    \ {\n            var length = arr(i).toString.length\n            if (length >\
    \ 0) {\n                res += length.toString\n            }\n        }\n   \
    \     res.toList", "        val numbers = List(\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        arr.map(x\
    \ => (numbers(x.toInt - 1)))", "        val m = Map(1L -> \"One\", 2L -> \"Two\"\
    , 3L -> \"Three\", 4L -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\"\
    , 8L -> \"Eight\", 9L -> \"Nine\")\n        val r = arr.filter(x => x > 0 && x\
    \ < 10).sorted.reverse.map(x => m(x))\n        return r", "        val num = arr.sorted.reverse\n\
    \        if (num.length == 0) return List[String]()\n        val result = new\
    \ ListBuffer[String]\n        for (x <- num) {\n            x match {\n      \
    \          case 1 => result += \"One\"\n                case 2 => result += \"\
    Two\"\n                case 3 => result += \"Three\"\n                case 4 =>\
    \ result += \"Four\"\n                case 5 => result += \"Five\"\n         \
    \       case 6 => result += \"Six\"\n                case 7 => result += \"Seven\"\
    \n                case 8 => result += \"Eight\"\n                case 9 => result\
    \ += \"Nine\"\n                case _ =>\n            }\n        }\n        result.toList",
  "        val hash = new HashMap[Long, List[Long]]\n        for (i <- arr) hash.put(i,\
    \ hash.getOrElse(i, List()) :+ i)\n        hash.toList.sortBy(_._1).map(_._2).map(_.map(_.toString)).flatten",
  "        val result = ListBuffer[String]()\n        for (i <- 0 until arr.length)\
    \ {\n            val number = arr(i)\n            val length = number.toString.length\n\
    \            result += length.toString\n        }\n        result.toList"]
stop_tokens:
- "\n    }\n"
