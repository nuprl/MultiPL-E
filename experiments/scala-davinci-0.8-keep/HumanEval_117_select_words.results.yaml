language: scala
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val result = ListBuffer[String]()\n        val words = s.split(\" \")\n  \
    \      for (i <- 0 until words.length) {\n            if (n == count(words(i)))\
    \ result += words(i)\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgs4o1sve.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (n == count(words(i))) result\
    \ += words(i)\n\e[31m\e[31m   |\e[0m                     ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                     Not found: count\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659822278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   return null;\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.selectWords(String, long)\" is null\n\
    \tat Problem$.main(tmponn8mna6.scala:19)\n\tat Problem.main(tmponn8mna6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   s.split(\" \").toList.filter(w => w.count(c => c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u') == n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeulz85qd.scala:23)\n\tat Problem.main(tmpeulz85qd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   var list = List[String]()\n        var word = \"\"\n        for (i <- 0 until\
    \ s.length) {\n            if (s(i) == ' ') {\n                if (word.length\
    \ != 0) {\n                    var numConsonants = 0\n                    for\
    \ (j <- 0 until word.length) {\n                        if (!List('a', 'e', 'i',\
    \ 'o', 'u').contains(word(j))) numConsonants += 1\n                    }\n   \
    \                 if (numConsonants == n) list = list :+ word\n              \
    \      word = \"\"\n                }\n            } else {\n                word\
    \ += s(i)\n            }\n        }\n        if (word.length != 0) {\n       \
    \     var numConsonants = 0\n            for (j <- 0 until word.length) {\n  \
    \              if (!List('a', 'e', 'i', 'o', 'u').contains(word(j))) numConsonants\
    \ += 1\n            }\n            if (numConsonants == n) list = list :+ word\n\
    \        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl0_30chj.scala:46)\n\tat Problem.main(tmpl0_30chj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   if (s.length == 0) return List[String]()\n        if (s.filterNot(Set('a',\
    \ 'e', 'i', 'o', 'u', ' ')).length == n) s.split(\" \").toList.filter(x => x.length\
    \ > 0)\n        else selectWords(s.drop(1), n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplradzdez.scala:21)\n\tat Problem.main(tmplradzdez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   // Write your code here\n        var list : List[String] = List();\n     \
    \   var cnt = 0;\n        for (i <- 0 until s.length) {\n        \tif (!s(i).isLetter)\
    \ {\n        \t\tif (cnt == n) list = list :+ s.substring(0, i);\n        \t\t\
    cnt = 0;\n        \t\ts = s.substring(i + 1);\n        \t\ti = 0;\n        \t\
    } else {\n        \t\tif (s(i).isLower) {\n        \t\t\tif (s(i) != 'a' && s(i)\
    \ != 'e' && s(i) != 'i' && s(i) != 'o' && s(i) != 'u') {\n        \t\t\t\tcnt\
    \ += 1;\n        \t\t\t}\n        \t\t} else {\n        \t\t\tif (s(i) != 'A'\
    \ && s(i) != 'E' && s(i) != 'I' && s(i) != 'O' && s(i) != 'U') {\n        \t\t\
    \t\tcnt += 1;\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n      \
    \  if (cnt == n) list = list :+ s;\n        return list;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpoczwez9q.scala:23:10 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \t\ts = s.substring(i + \e[31m1\e[0m);\n\e[31m\e\
    [31m   |\e[0m        \t\t^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \t\
    \tReassignment to val s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpoczwez9q.scala:24:10\
    \ -----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \t\ti = \e[31m0\e\
    [0m;\n\e[31m\e[31m   |\e[0m        \t\t^^^^^\e[0m\n\e[31m   |\e[0m        \t\t\
    Reassignment to val i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659822278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   //s.split(\" \").filter(w => w.replaceAll(\"[aeiou]\", \"\").length == n).toList\n\
    \        s.split(\" \").filter(w => w.toCharArray.filter(c => \"aeiou\".contains(c)).length\
    \ == n).toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpji9o44x0.scala:20)\n\tat Problem.main(tmpji9o44x0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \")\n        val filteredWords = words.filter(w =>\
    \ w.count(w => w.isLetter && \"aeiouAEIOU\".indexOf(w) == -1) == n)\n        filteredWords.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   var list = List[String]()\n        for (i <- s.split(\" \")) {\n         \
    \   if (i.filterNot(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u').length == n) list = i :: list\n        }\n        list\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd0od3rwl.scala:24)\n\tat Problem.main(tmpd0od3rwl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   s.split(\" \").filter(s => s.count(c => c.isLetter && c.isLower && !\"aeiou\"\
    .contains(c)) == n).toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9mii_mbo.scala:20)\n\tat Problem.main(tmp9mii_mbo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   s.split(\" \").filter(x => (x.filter(y => y.toLower != 'a' && y.toLower !=\
    \ 'e' && y.toLower != 'i' && y.toLower != 'o' && y.toLower != 'u').length == n)).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   // TODO: implementation\n        s.split(\" \").filter(x => x.count(!\"aeiou\"\
    .contains(_)) == n).toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpun6s9636.scala:24)\n\tat Problem.main(tmpun6s9636.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   // Write your code here\n        var result = new ListBuffer[String]\n   \
    \     if (s == null || s.length == 0) return result.toList\n        var words\
    \ = s.split(\" \")\n        for (word <- words) {\n            var count = 0\n\
    \            for (c <- word) {\n                if (c != 'a' && c != 'e' && c\
    \ != 'i' && c != 'o' && c != 'u') count += 1\n            }\n            if (count\
    \ == n) result += word\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8oh_af56.scala:34)\n\tat Problem.main(tmp8oh_af56.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   // your code here\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.selectWords(String, long)\" is null\n\
    \tat Problem$.main(tmpuijmqg_s.scala:20)\n\tat Problem.main(tmpuijmqg_s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \ // Write your code here\n      // ********** Use s.toLowerCase to get rid of\
    \ any case sensitivity. \n      // ********** Use s.split(\" \") to break your\
    \ string into a list of string. \n      // ********** Use s.filter(...) to filter\
    \ the list created above. \n      // ********** Use s.map(...) to filter out any\
    \ required word. \n      // ********** Use s.toList to convert your result to\
    \ a list. \n      return s.toLowerCase.split(\" \").filter(x => x.count(p => p.toString.matches(\"\
    [aeiou]\")) == n.toInt).toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprt7r7l2f.scala:25)\n\tat Problem.main(tmprt7r7l2f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   def isConsonant(c : Char) : Boolean = {\n            val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n            val consonants = Set('b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')\n\
    \            (c.isLetter && !vowels.contains(c.toLower)) || consonants.contains(c.toLower)\n\
    \        }\n        s.split(\" \").filter(w => w.count(isConsonant) == n).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   ???\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.selectWords(tmpdo9t_cb7.scala:16)\n\tat Problem$.main(tmpdo9t_cb7.scala:19)\n\
    \tat Problem.main(tmpdo9t_cb7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   s.split(\" \").filter(p => p.count(c => c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') == n).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpns98ogtc.scala:19)\n\tat Problem.main(tmpns98ogtc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   // Write your code here\n        val arr = s.split(\" \")\n        val len\
    \ = arr.length\n        var result = List[String]()\n        var consonants =\
    \ 0\n        var i = 0\n        while (i < len) {\n        \tvar j = 0\n     \
    \   \twhile (j < arr(i).length) {\n        \t\tval letter = arr(i)(j)\n      \
    \  \t\tif (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u') {\n        \t\t\t\n        \t\t} else consonants += 1\n     \
    \   \t\tj += 1\n        \t}\n        \tif (consonants == n) result = result :+\
    \ arr(i)\n        \tconsonants = 0\n        \ti += 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk1bli3p9.scala:42)\n\tat Problem.main(tmpk1bli3p9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val vowels = \"aeiouAEIOU\"\n        s.split(\" \").filter(x => x.count(y\
    \ => vowels.contains(y)) == x.length - n).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822280
