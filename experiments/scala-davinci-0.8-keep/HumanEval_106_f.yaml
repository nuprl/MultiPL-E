name: HumanEval_106_f
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Implement the function f that takes n as a parameter,\n    // and returns\
  \ a list of size n, such that the value of the element at index i is the factorial\
  \ of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    //\
  \ i starts from 1.\n    // the factorial of i is the multiplication of the numbers\
  \ from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // f(5) == [1, 2, 6, 24,\
  \ 15]\n    def f(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n \
  \   assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
completions: ["        val res = new ListBuffer[Long]\n        for (i <- 1L to n)\
    \ {\n            if (i % 2 == 0) res += factorial(i)\n            else res +=\
    \ (1L to i).sum\n        }\n        res.toList", "        var lst : List[Long]\
    \ = Nil\n        for (i <- 1L to n) {\n            if (i % 2 == 0) {\n       \
    \         var factorial : Long = 1\n                for (j <- 1L to i) {\n   \
    \                 factorial *= j\n                }\n                lst ::= factorial\n\
    \            } else {\n                var sum : Long = 0\n                for\
    \ (j <- 1L to i) {\n                    sum += j\n                }\n        \
    \        lst ::= sum\n            }\n        }\n        lst.reverse", "      \
    \  val a = ArrayBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n          \
    \  if (i % 2 == 0) a += (1 to i).reduce(_ * _)\n            else a += (1 to i).reduce(_\
    \ + _)\n        }\n        a.toList", "        var l = new ListBuffer[Long]()\n\
    \        for (i <- 1L to n) l += (if (i % 2 == 0) factorial(i) else sum(i))\n\
    \        l.toList", "        var result = new ListBuffer[Long]\n        for (i\
    \ <- 1 to n.toInt) {\n            var j = i\n            if (i % 2 == 0) {\n \
    \               var sum = 1\n                while (j > 0) {\n               \
    \     sum *= j\n                    j -= 1\n                }\n              \
    \  result += sum\n            } else {\n                var sum = 0\n        \
    \        while (j > 0) {\n                    sum += j\n                    j\
    \ -= 1\n                }\n                result += sum\n            }\n    \
    \    }\n        result.toList", "        var list = new ListBuffer[Long]\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n             \
    \   var fact = 1\n                for (j <- 1 to i) {\n                    fact\
    \ *= j\n                }\n                list += fact\n            } else {\n\
    \                var sum = 0\n                for (j <- 1 to i) {\n          \
    \          sum += j\n                }\n                list += sum\n        \
    \    }\n        }\n        list.toList", "        var l = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList", "        var list\
    \ = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) list += factorial(i)\n            else list += sum(i)\n       \
    \ }\n        list.toList", "        val buff = new ListBuffer[Long]\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) buff += factorial(i)\n  \
    \          else buff += sumOfNumbers(i)\n        }\n        buff.toList", "  \
    \      var l : List[Long] = List()\n        for (i <- 1L to n) {\n           \
    \ if (i % 2 == 0) {\n                var s : Long = 1\n                for (j\
    \ <- 1L to i) {\n                    s *= j\n                }\n             \
    \   l = s :: l\n            } else {\n                var s : Long = 0\n     \
    \           for (j <- 1L to i) {\n                    s += j\n               \
    \ }\n                l = s :: l\n            }\n        }\n        return l.reverse",
  "        if (n < 1) {\n            List()\n        } else {\n            var res\
    \ = ListBuffer[Long]()\n            for (i <- 1 to n.toInt) {\n              \
    \  if (i % 2 == 0) {\n                    res += factorial(i)\n              \
    \  } else {\n                    res += sum(i)\n                }\n          \
    \  }\n            res.toList\n        }", "        val list = new ListBuffer[Long]()\n\
    \        val xs = List(1, 2, 6, 24, 15)\n        for (i <- 1 to n.toInt) {\n \
    \           if (i % 2 == 0) {\n                var result = 1\n              \
    \  for (j <- 2 to i) {\n                    result *= j\n                }\n \
    \               list += result\n            } else {\n                list +=\
    \ i\n            }\n        }\n        list.toList", "        require(n >= 1,\
    \ \"n must be greater than 0\")\n        require(n <= 1000, \"n must be less than\
    \ 1000\")\n        (1 to n.toInt).toList.map(x => if (x % 2 == 0) (1 to x).toList.product\
    \ else (1 to x).toList.sum)", "        var list : List[Long] = List()\n      \
    \  for (i <- 1L to n) {\n            var item : Long = 0L\n            if (i %\
    \ 2 == 0) {\n                var factorial : Long = 1L\n                for (j\
    \ <- 1L to i) {\n                    factorial *= j\n                }\n     \
    \           item = factorial\n            } else {\n                var sum :\
    \ Long = 0L\n                for (j <- 1L to i) {\n                    sum +=\
    \ j\n                }\n                item = sum\n            }\n          \
    \  list = list :+ item\n        }\n        return list", "      var result : List[Long]\
    \ = List()\n      var i = 1\n      while (i <= n) {\n        result = result :+\
    \ (if (i % 2 == 0) factorial(i) else sumOfInt(i))\n        i += 1\n      }\n \
    \     result", "        var list = new ListBuffer[Long]\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                list += factorial(i)\n\
    \            } else {\n                list += (1 to i).sum\n            }\n \
    \       }\n        list.toList", "        val arr = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) {\n            if (i % 2 == 0) arr(i) = factorial(i\
    \ / 2)\n            else arr(i) = (1 to i).sum\n        }\n        arr.toList",
  "        // See: https://stackoverflow.com/questions/834231/scala-how-do-i-initialize-a-list-of-empty-lists-in-one-line\n\
    \        var result = List.fill(n.toInt)(0L)\n        // See: https://stackoverflow.com/questions/3779259/how-to-initialize-a-scala-list-with-a-repeated-value\n\
    \        result(0) = 1\n        for (i <- 1 until n.toInt) {\n            val\
    \ (index, value) = i match {\n                case i if i % 2 == 0 => (i / 2,\
    \ 1L to i by 2 reduceLeft (_ * _))\n                case i => (i, 1L to i reduceLeft\
    \ (_ + _))\n            }\n            result = result.patch(index, Seq(value),\
    \ 1)\n        }\n        result", "        var result : List[Long] = List()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result = result :+ factorial(i)\n            } else {\n               \
    \ result = result :+ sum(i)\n            }\n        }\n        result", "    \
    \    var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n          \
    \  if (i % 2 == 0) {\n                result = result :+ (1L to i).product\n \
    \           } else {\n                result = result :+ (1L to i).sum\n     \
    \       }\n        }\n        result"]
stop_tokens:
- "\n    }\n"
