language: scala
name: HumanEval_65_circular_shift
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var digs = x.toString.split(\"\"\
    ).toList.tail\n        if (shift >= digs.length) {\n            return digs.reverse.mkString\n\
    \        }\n        var shifted = (digs.reverse.take(shift.toInt) ::: digs.reverse.drop(shift.toInt)).reverse\n\
    \        return shifted.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr3_mjlp8.scala:20)\n\tat Problem.main(tmpr3_mjlp8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        x.toString.reverse.padTo(shift.toInt,\
    \ '0').reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnsbubn8e.scala:15)\n\tat Problem.main(tmpnsbubn8e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        if (shift >= getNumDigits(x)) {\n\
    \            getDigits(x).reverse.mkString\n        } else {\n            val\
    \ digits = getDigits(x)\n            val numDigits = digits.length\n         \
    \   (digits.slice(numDigits - shift.toInt, numDigits) ++ digits.slice(0, numDigits\
    \ - shift.toInt)).mkString\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx6njbnyk.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (shift >= getNumDigits(x)) {\n\e\
    [31m\e[31m   |\e[0m                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                  Not found: getNumDigits\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpx6njbnyk.scala:13:12 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            getDigits(x).reverse.mkString\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: getDigits\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx6njbnyk.scala:15:25\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mdigits\e[0m = getDigits(x)\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: getDigits\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659821069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        if (shift == 0) return x.toString\n\
    \        if (shift >= x.toString.length) return x.toString.reverse\n        val\
    \ last = x.toString.substring(x.toString.length - shift.toInt)\n        val first\
    \ = x.toString.substring(0, x.toString.length - shift.toInt)\n        return last\
    \ + first\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz9mbpxa.scala:20)\n\tat Problem.main(tmppz9mbpxa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        if (shift == 0) return x.toString\n\
    \        val numStr = x.toString\n        val result = new StringBuilder(numStr)\n\
    \        for (i <- 0 until shift) {\n            val last = result.charAt(result.length\
    \ - 1)\n            result.deleteCharAt(result.length - 1)\n            result.insert(0,\
    \ last)\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv3idpvl5.scala:15:26\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until shift) {\n\e[31m\e[31m   |\e[0m                         \
    \ ^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.toList\n\
    \        if (shift > digits.length) digits.reverse.mkString\n        else {\n\
    \            val rotated = digits.slice(digits.length - shift.toInt, digits.length)\
    \ ++ digits.slice(0, digits.length - shift.toInt)\n            rotated.mkString\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        if (shift == 0)\n            return\
    \ x.toString\n        val digits = x.toString.length\n        val steps = shift\
    \ % digits\n        var shifted = x / 10.pow(steps.toInt)\n        shifted.toString.reverse\
    \ + x.toString.drop(steps.toInt)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph1y0jdnl.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mshifted\e[0m = x / \e[31m10\e\
    [0m.pow(steps.toInt)\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue pow is not a member of Int, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.int2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = (x.toString.toList)\n\
    \        val shift_size = min(shift, digits.size)\n        val shifted = digits.drop(shift_size)\
    \ ++ digits.take(shift_size)\n        shifted.reverse.mkString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu5wpx9ia.scala:14:34\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mshifted\e\
    [0m = digits.drop(shift_size) ++ digits.take(shift_size)\n\e[31m\e[31m   |\e[0m\
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                        Found:    (shift_size : Long)\n\e[31m   |\e[0m      \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpu5wpx9ia.scala:14:61 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mshifted\e[0m = digits.drop(shift_size)\
    \ ++ digits.take(shift_size)\n\e[31m\e[31m   |\e[0m                          \
    \                                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                                  Found:    (shift_size : Long)\n\e[31m   |\e\
    [0m                                           Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val n = x.toString.length\n    \
    \    val s = shift.toString.length\n        if (shift >= n) {\n            val\
    \ t = x.toString.reverse\n            val y = Long.parseLong(t)\n            y.toString\n\
    \        } else {\n            val t = x.toString.takeRight(n - s) + x.toString.take(s)\n\
    \            val y = Long.parseLong(t)\n            y.toString\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa1jzat77.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = Long.parseLong(t)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    value parseLong is not a member of object Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpa1jzat77.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = Long.parseLong(t)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    value parseLong is not a member of object Long\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val chars = x.toString.toList\n\
    \        val size = chars.size\n        def helper(acc : List[Char], index : Int)\
    \ : List[Char] = {\n            if (index == size) acc\n            else {\n \
    \               val shifted = chars((index + shift) % size)\n                helper(shifted\
    \ :: acc, index + 1)\n            }\n        }\n        if (shift >= size) chars.reverse.mkString\n\
    \        else helper(Nil, 0).reverse.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpesjskr3g.scala:17:36\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                \e[33mval\e[0m\
    \ \e[36mshifted\e[0m = chars((index + shift) % size)\n\e[31m\e[31m   |\e[0m  \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                    Found:    Long\n\e[31m   |\e[0m         \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val len = numberOfDigits(x)\n  \
    \      if (shift > len) \n            return x.toString.reverse\n        val shift2\
    \ = shift % len\n        val str = x.toString\n        str.substring(len - shift2)\
    \ + str.substring(0, len - shift2)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ts24yci.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlen\e[0m = numberOfDigits(x)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                Not found: numberOfDigits\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val n = x.toString.length\n    \
    \    val s = x.toString\n        if (shift > n) {\n            s.reverse\n   \
    \     } else {\n            s.substring(n - shift.toInt) + s.substring(0, n -\
    \ shift.toInt)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var a = x\n        var result =\
    \ ArrayBuffer[Long]()\n        while (a > 0) {\n            result += a % 10\n\
    \            a /= 10\n        }\n        for (i <- 1 to shift) {\n           \
    \ val b = result.remove(result.length - 1)\n            result.insert(0, b)\n\
    \        }\n        result.reverse.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4cdts1ki.scala:18:23\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to shift) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (shift : Long)\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var x2 = x\n        var s = \"\"\
    \n        var t = \"\"\n        while (x2 > 0) {\n            s += (x2 % 10).toString\n\
    \            x2 /= 10\n        }\n        if (shift > s.length) {\n          \
    \  t = s.reverse\n        } else {\n            t = s.substring(s.length - shift.toInt)\
    \ + s.substring(0, s.length - shift.toInt)\n        }\n        return t\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy10liqg5.scala:27)\n\tat Problem.main(tmpy10liqg5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val string = x.toString\n      \
    \  val n = string.length\n        val shifted = (string.substring(shift % n) +\
    \ string.substring(0, shift % n)).reverse\n        (shifted.substring(n - (shift\
    \ % n)) + shifted.substring(0, n - (shift % n))).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk7qpgegt.scala:14:40\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mshifted\e\
    [0m = (string.substring(shift % n) + string.substring(\e[31m0\e[0m, shift % n)).reverse\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                        Found:    Long\n\e[31m  \
    \ |\e[0m                                        Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk7qpgegt.scala:14:73 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mshifted\e[0m = (string.substring(shift\
    \ % n) + string.substring(\e[31m0\e[0m, shift % n)).reverse\n\e[31m\e[31m   |\e\
    [0m                                                                         ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpk7qpgegt.scala:15:27 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        (shifted.substring(n - (shift % n)) + shifted.substring(\e[31m0\e\
    [0m, n - (shift % n))).reverse\n\e[31m\e[31m   |\e[0m                        \
    \   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           Found:    Long\n\
    \e[31m   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpk7qpgegt.scala:15:67 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        (shifted.substring(n - (shift % n)) + shifted.substring(\e\
    [31m0\e[0m, n - (shift % n))).reverse\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                          Found:   \
    \ Long\n\e[31m   |\e[0m                                 "
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val size = floor(log10(x)).toInt\
    \ + 1\n        val result = x.toString.takeRight(shift.toInt) + x.toString.dropRight(shift.toInt)\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptifsm0q_.scala:19)\n\tat Problem.main(tmptifsm0q_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val str = x.toString\n        val\
    \ len = str.length\n        val s = if (shift < len) {\n            str.substring(len\
    \ - shift, len) + str.substring(0, len - shift)\n        } else {\n          \
    \  str.reverse\n        }\n        s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1q_u7lfm.scala:15:26\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            str.substring(len\
    \ - shift, len) + str.substring(\e[31m0\e[0m, len - shift)\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    Long\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1q_u7lfm.scala:15:63\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            str.substring(len\
    \ - shift, len) + str.substring(\e[31m0\e[0m, len - shift)\n\e[31m\e[31m   |\e\
    [0m                                                               ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val numDigits = log10(x).toInt +\
    \ 1\n        val shift2 = if (shift > numDigits) (shift % numDigits) else shift\n\
    \        if (shift2 == 0) x.toString else (1 to shift2).foldLeft(x) {case (acc,\
    \ _) => acc / 10} + ((x % 10) * pow(10, numDigits - shift2)).toLong\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ja0uhjl.scala:14:47\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (shift2\
    \ == \e[31m0\e[0m) x.toString \e[33melse\e[0m (\e[31m1\e[0m to shift2).foldLeft(x)\
    \ {\e[33mcase\e[0m (acc, _) => acc / \e[31m10\e[0m} + ((x % \e[31m10\e[0m) * pow(\e\
    [31m10\e[0m, numDigits - shift2)).toLong\n\e[31m\e[31m   |\e[0m              \
    \                                 ^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                                Found:    (shift2 : Long)\n\e[31m   |\e[0m  \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ja0uhjl.scala:14:138 -------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (shift2 == \e[31m0\e[0m) x.toString\
    \ \e[33melse\e[0m (\e[31m1\e[0m to shift2).foldLeft(x) {\e[33mcase\e[0m (acc,\
    \ _) => acc / \e[31m10\e[0m} + ((x % \e[31m10\e[0m) * pow(\e[31m10\e[0m, numDigits\
    \ - shift2)).toLong\n\e[31m\e[31m   |\e[0m                                   \
    \                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        if (shift == 0)\n            return\
    \ x.toString()\n        if (shift > x.toString().length)\n            return x.toString().reverse\n\
    \        val a = x.toString().substring(0, x.toString().length - shift.toInt)\n\
    \        val b = x.toString().substring(x.toString().length - shift.toInt)\n \
    \       return b + a\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        if (shift >= x.toString.length)\
    \ return x.toString.reverse\n        x.toString.substring(shift.toInt) + x.toString.substring(0,\
    \ shift.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0gqmy9_n.scala:16)\n\tat Problem.main(tmp0gqmy9_n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821072
