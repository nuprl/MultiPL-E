language: scala
name: HumanEval_36_fizz_buzz
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0\n        for (i <- 1 until\
    \ n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                var j =\
    \ i\n                while (j > 0) {\n                    if (j % 10 == 7) count\
    \ += 1\n                    j /= 10\n                }\n            }\n      \
    \  }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp10un6n9b.scala:13:26\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n      var count = 0L\n      var i = 0L\n    \
    \  while (i <= n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n          val\
    \ digits = i.toString.toList\n          count += digits.filter(x => x == '7').length\n\
    \        }\n        i += 1\n      }\n      count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp808m3h44.scala:25)\n\tat Problem.main(tmp808m3h44.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0L\n        for (i <- 0L\
    \ until n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                val\
    \ num = i.toString\n                for (j <- 0 until num.length) {\n        \
    \            if (num(j) == '7') count += 1\n                }\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var result = 0L\n        for (i <- 2\
    \ to n.toInt) {\n            if (i % 11 == 0 || i % 13 == 0) {\n             \
    \   val s = i.toString\n                for (j <- 0 until s.length) {\n      \
    \              if (s(j) == '7') result += 1\n                }\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n   \
    \ assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n  \
    \  assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ribqwn4.scala:25)\n\tat Problem.main(tmp_ribqwn4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        (1 until n.toInt).filter(x => x % 11\
    \ == 0 || x % 13 == 0).map(x => x.toString.split(\"\")).filter(x => x.contains(\"\
    7\")).map(x => x.filter(y => y == \"7\").length).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0L\n        for (i <- 7L\
    \ to n - 1 by 7) {\n            if (i % 11 == 0 || i % 13 == 0) count += 1\n \
    \       }\n        return count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp450mi7db.scala:20)\n\tat Problem.main(tmp450mi7db.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var cnt = 0\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 11 == 0) cnt += 1\n            else if (i % 13 == 0)\
    \ cnt += 1\n            else if (i % 11 == 0 && i % 13 == 0) cnt += 2\n      \
    \  }\n        return cnt\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0d5wap77.scala:21)\n\tat Problem.main(tmp0d5wap77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        def helper(n : Long, d : Long, acc :\
    \ Long) : Long = {\n            if (n == 0) acc\n            else if (n % 10 ==\
    \ d) helper(n / 10, d, acc + 1)\n            else helper(n / 10, d, acc)\n   \
    \     }\n        (1L to n).filter(x => x % 11 == 0 || x % 13 == 0).map(x => helper(x,\
    \ 7, 0)).sum\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptdw_7cex.scala:21)\n\tat Problem.main(tmptdw_7cex.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        val p = 11 * 13\n        var count =\
    \ 0L\n        for (i <- 1 to n.toInt - 1) {\n            if (i % p == 0) {\n \
    \               count += 1\n            }\n            else if (i % 11 == 0 ||\
    \ i % 13 == 0) {\n                var temp = i\n                while (temp >\
    \ 0) {\n                    if (temp % 10 == 7) {\n                        count\
    \ += 1\n                    }\n                    temp /= 10\n              \
    \  }\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnkxk8nj7.scala:35)\n\tat Problem.main(tmpnkxk8nj7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        return List.range(1, n.toInt).map(i =>\
    \ i.toString).filter(s => s.contains(\"7\") && (s.toInt % 11 == 0 || s.toInt %\
    \ 13 == 0)).size\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7qhyae9f.scala:16)\n\tat Problem.main(tmp7qhyae9f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n      var count = 0L\n      for (i <- 1L to n)\
    \ {\n        if (i % 11 == 0 || i % 13 == 0) {\n          var s = i.toString\n\
    \          count += s.count(_ == '7')\n        }\n      }\n      count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp86mzz5vh.scala:23)\n\tat Problem.main(tmp86mzz5vh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n    \t// base case\n    \tif (n < 21) {\n   \
    \ \t\tif (n % 11 == 0) {\n    \t\t\tif (n % 13 == 0) return 2\n    \t\t\telse\
    \ return 1\n    \t\t}\n    \t\telse if (n % 13 == 0) return 1\n    \t\telse return\
    \ 0\n    \t}\n    \t// recursion\n    \telse {\n    \t\tvar result = 0L\n    \t\
    \tif (n % 11 == 0) {\n    \t\t\tresult += 1\n    \t\t\tif (n % 13 == 0) result\
    \ += 1\n    \t\t}\n    \t\telse if (n % 13 == 0) result += 1\n    \t\tresult +=\
    \ fizzBuzz(n - 20)\n    \t\tresult\n    \t}\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp22u090aq.scala:35)\n\tat Problem.main(tmp22u090aq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var k = 0L\n        var seven = 0L\n\
    \        for (i <- 11L to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                k = i\n                while (k != 0) {\n                   \
    \ if (k % 10 == 7) seven += 1\n                    k /= 10\n                }\n\
    \            }\n        }\n        seven\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpquy3xdfy.scala:27)\n\tat Problem.main(tmpquy3xdfy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        if (n < 11) return 0\n        var sum\
    \ = 0L\n        for (i <- 11 to n - 1) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                sum += i.toString.filter(_ == '7').length\n       \
    \     }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3qajfruv.scala:14:24\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m11\e[0m to n - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                        Found:    Long\n\e\
    [31m   |\e[0m                        Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var cnt = 0L\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                var\
    \ x = i\n                while (x > 0) {\n                    if (x % 10 == 7)\
    \ cnt += 1\n                    x /= 10\n                }\n            }\n  \
    \      }\n        cnt\n    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l))\
    \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l))\
    \ == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l))\
    \ == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
    \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjzjvt3yr.scala:26)\n\tat Problem.main(tmpjzjvt3yr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n    \tif (n <= 1) 0\n    \telse if (n % 11 ==\
    \ 0 || n % 13 == 0) {\n    \t\tval s = n.toString\n    \t\ts.count(_ == '7') +\
    \ fizzBuzz(n - 1)\n    \t}\n    \telse fizzBuzz(n - 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi8z_y0wf.scala:21)\n\tat Problem.main(tmpi8z_y0wf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        def f(n : Long, count : Long) : Long\
    \ = {\n          if (n < 0) count\n          else if (n == 0) f(n / 10, count)\n\
    \          else if (n % 10 == 7) f(n / 10, count + 1)\n          else f(n / 10,\
    \ count)\n        }\n        val ints = List.range(1, n).filter(i => i % 11 ==\
    \ 0 || i % 13 == 0)\n        ints.map(x => f(x, 0)).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_l6luvgk.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mints\e[0m = List.range(\e\
    [31m1\e[0m, n).filter(\e[36mi\e[0m => i % \e[31m11\e[0m == \e[31m0\e[0m || i %\
    \ \e[31m13\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \             ^\e[0m\n\e[31m   |\e[0m                                No implicit\
    \ Ordering defined for AnyVal.\n1 error found\n"
  stdout: ''
  timestamp: 1659821321
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var x : Long = 13\n        var result\
    \ : Long = 0\n        while (x <= n) {\n            result += x.toString.count(_\
    \ == '7')\n            x += 13\n        }\n        x = 11\n        while (x <=\
    \ n) {\n            result += x.toString.count(_ == '7')\n            x += 11\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n\
    \    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n\
    \    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n\
    \    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) ==\
    \ (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdtz9eued.scala:27)\n\tat Problem.main(tmpdtz9eued.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821322
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L\
    \ to n - 1L) {\n            if (i % 11 == 0) {\n                count += i.toString.count(_\
    \ == '7')\n            }\n            else if (i % 13 == 0) {\n              \
    \  count += i.toString.count(_ == '7')\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n\
    \    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
    \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
    \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
    \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n   \
    \ // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    def\
    \ fizzBuzz(n : Long) : Long = {\n        def f(n : Long, acc : Long) : Long =\
    \ {\n            if (n % 11 == 0 || n % 13 == 0) n.toString.count(_ == '7') +\
    \ acc\n            else acc\n        }\n        f(n, 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l))\
    \ == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l))\
    \ == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l))\
    \ == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l))\
    \ == (8026l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoq02ujy8.scala:20)\n\tat Problem.main(tmpoq02ujy8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821322
