name: HumanEval_140_fix_spaces
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string text, replace all spaces in it with underscores, \n    //\
  \ and if a string has more than 2 consecutive spaces, \n    // then replace all\
  \ consecutive spaces with - \n    // fix_spaces(\"Example\") == \"Example\"\n  \
  \  // fix_spaces(\"Example 1\") == \"Example_1\"\n    // fix_spaces(\" Example 2\"\
  ) == \"_Example_2\"\n    // fix_spaces(\" Example   3\") == \"_Example-3\"\n   \
  \ def fixSpaces(text : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
  )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
  Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
  Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
  Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
  )));\n    }\n\n}\n"
completions: ['        text.replaceAll(" ", "_").replaceAll("_+", "-")', "       \
    \ val answer = text.toList.map(x => if (x == ' ') {\n            \" \"\n     \
    \   } else {\n            x.toString\n        }).grouped(2).map(x => {\n     \
    \       if (x(0) == \" \" && x(1) == \" \") {\n                \"-\"\n       \
    \     } else {\n                x(0)\n            }\n        }).mkString.replaceAll(\"\
    \ \", \"_\")\n        return answer", "        val regex = \"\\\\s{2,}\".r\n \
    \       regex.replaceAllIn(text, \"-\")", "        val trimmed = text.trim()\n\
    \        val replaced = trimmed.replaceAll(\" \", \"_\")\n        val arr = replaced.split(\"\
    _\")\n        return arr.filter(_.length() != 0).mkString(\"-\")", '        text.replaceAll("
    +", "-").replaceAll(" ", "_")', "        val sb = new StringBuilder\n        var\
    \ spaces = 0\n        for (c <- text) {\n            if (c == ' ') {\n       \
    \         spaces += 1\n                if (spaces > 2) spaces = 2\n          \
    \  } else {\n                for (i <- 1 to spaces) sb += '_'\n              \
    \  spaces = 0\n                sb += c\n            }\n        }\n        sb.toString",
  "        //if (text.length < 2)\n        //    return text\n        //val fixed\
    \ = text.replaceAll(\" \", \"_\")\n        //if (fixed.contains(\"_-_\"))\n  \
    \      //    return fixSpaces(fixed.replaceAll(\"_-_\", \"-\"))\n        //else\n\
    \        //    return fixed\n        // (?<!=)-(?!-)\n        // (?!_)(?<!_)-(?!-)\n\
    \        // (?!_)(?<!_)-(?!_)\n        text.replaceAll(\" (?!_)\", \"_\").replaceAll(\"\
    (?!_)(?<!_)-(?!_)\", \"-\")", "        var result = \"\"\n        for (i <- 0\
    \ until text.length - 1) {\n            if (text(i) == ' ') {\n              \
    \  if (text(i + 1) == ' ') {\n                    result += '-'\n            \
    \        while (i < text.length - 1 && text(i + 1) == ' ') i += 1\n          \
    \      } else result += '_'\n            } else result += text(i)\n        }\n\
    \        if (text.length > 0 && text(text.length - 1) != ' ') result += text(text.length\
    \ - 1)\n        result", '        text.replaceAll("\\s+", "-").replaceAll("-",
    "_")', "        val chars = text.toCharArray\n        val buffer = new StringBuilder\n\
    \        var i = 0\n        while (i < chars.length) {\n            if (chars(i)\
    \ == ' ') {\n                buffer.append('_')\n                i += 1\n    \
    \            while (i < chars.length && chars(i) == ' ') {\n                 \
    \   if (i + 1 < chars.length && chars(i + 1) == ' ') buffer.append('-')\n    \
    \                i += 1\n                }\n            } else {\n           \
    \     buffer.append(chars(i))\n                i += 1\n            }\n       \
    \ }\n        buffer.toString", "    \ttext.replaceAll(\"\\\\s+\", \" \").trim.replaceAll(\"\
    \ \", \"_\")", '        return text.replaceAll(" {2,}", "-").replaceAll(" ", "_")',
  "        var str = text.replace(\"  \", \"-\")\n        str = str.replace(\" \"\
    , \"_\")\n        return str", "        val sb = new StringBuilder\n        var\
    \ lastChar : Char = ' '\n        var i = 0\n        while (i < text.length) {\n\
    \            var char = text(i)\n            if (char == ' ') {\n            \
    \    if (sb.length == 0) {\n                    sb += '_'\n                } else\
    \ if (lastChar == ' ') {\n                    sb += '-'\n                } else\
    \ {\n                    sb += '_'\n                }\n            } else {\n\
    \                sb += char\n            }\n            lastChar = char\n    \
    \        i += 1\n        }\n        return sb.toString", "        if (text.length\
    \ == 0) \"\"\n        else if (text.charAt(0) == ' ') {\n            var count\
    \ = 0\n            for (i <- 0 until text.length) {\n                if (text.charAt(i)\
    \ == ' ') count += 1\n                else count = 0\n            }\n        \
    \    if (count > 2) \"_\" + fixSpaces(text.substring(count))\n            else\
    \ \"_\" + fixSpaces(text.substring(1))\n        }\n        else text.charAt(0)\
    \ + fixSpaces(text.substring(1))", "        val prefix = if (text.head == ' ')\
    \ \"_\" else \"\"\n        prefix + text.trim.replaceAll(\" +\", \"-\")", '      text.trim().replaceAll("
    +", "-")', '        text.trim.replaceAll("\\s", " ").replaceAll(" ", "_").replaceAll("
    {2,}", "-")', '        text.replaceAll("\\s+", " ").replace(" ", "_")', "    \
    \    var lastChar = '_'\n        var spacesCount = 0\n        text.map(c => {\n\
    \            if (c == ' ') {\n                if (lastChar == ' ') {\n       \
    \             spacesCount += 1\n                    if (spacesCount == 3) {\n\
    \                        lastChar = '-'\n                        lastChar\n  \
    \                  } else {\n                        ' '\n                   \
    \ }\n                } else {\n                    lastChar = ' '\n          \
    \          lastChar\n                }\n            } else {\n               \
    \ lastChar = c\n                spacesCount = 0\n                c\n         \
    \   }\n        }).mkString"]
stop_tokens:
- "\n    }\n"
