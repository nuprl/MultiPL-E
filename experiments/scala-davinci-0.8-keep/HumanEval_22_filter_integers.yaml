name: HumanEval_22_filter_integers
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Filter given list of any python values only for integers\n    // >>> filter_integers(['a',\
  \ 3.14, 5])\n    // [5]\n    // >>> filter_integers([1, 2, 3, 'abc', {}, []])\n\
  \    // [1, 2, 3]\n    def filterIntegers(values : List[Any]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
  \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
  \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
  \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        var list : List[Long] = Nil\n        for (value <- values)\
    \ {\n            value match {\n                case x : Long => list ::= x\n\
    \                case x : Int => list ::= x\n                case _ =>\n     \
    \       }\n        }\n        list.reverse", "        val integers = values.filter(x\
    \ => x.isInstanceOf[Long])\n        return integers.map(x => x.asInstanceOf[Long])",
  "        val cast = values.map {\n            case s : Long => s\n            case\
    \ _ => 0L\n        }\n        cast.filter(x => x != 0L)", "        values.filter(value\
    \ => {\n            if (value.isInstanceOf[Int]) {\n                true\n   \
    \         } else if (value.isInstanceOf[Long]) {\n                true\n     \
    \       } else {\n                false\n            }\n        }).map(x => x.asInstanceOf[Long])",
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  "        // TODO\n        return null", '        return values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', "        var result = List[Long]()\n        values.foreach\
    \ {\n            v => {\n                v match {\n                    case v\
    \ : Int => result = v :: result\n                    case v : Long => result =\
    \ v :: result\n                    case _ =>\n                }\n            }\n\
    \        }\n        result.reverse", "        def filterRecur(list : List[Any],\
    \ result : List[Long]) : List[Long] = {\n            if (list.length == 0) result\n\
    \            else if (list.head.isInstanceOf[Long]) filterRecur(list.tail, result\
    \ :+ list.head.asInstanceOf[Long])\n            else filterRecur(list.tail, result)\n\
    \        }\n        filterRecur(values, List[Long]())", "        if (values.isEmpty)\
    \ return Nil\n        else {\n            val item = values.head\n           \
    \ if (item.isInstanceOf[Long]) return List(item.asInstanceOf[Long]) ++ filterIntegers(values.tail)\n\
    \            else return filterIntegers(values.tail)\n        }", "        def\
    \ inner(result : List[Long], values : List[Any]) : List[Long] = {\n          \
    \  if (values.isEmpty) result.reverse\n            else values.head match {\n\
    \                case x : Long => inner(x :: result, values.tail)\n          \
    \      case _ => inner(result, values.tail)\n            }\n        }\n      \
    \  inner(Nil, values)", '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(value => value.isInstanceOf[Long]).map(value => value.asInstanceOf[Long])',
  '        values.filter(e => e.isInstanceOf[Long]).map(e => e.asInstanceOf[Long])',
  "        val l = values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \        l", "        values.filter {\n            case v : Long => true\n   \
    \         case _ => false\n        }.map {\n            case v : Long => v\n \
    \       }", "        values.filter {\n            x => x.isInstanceOf[Int] ||\
    \ x.isInstanceOf[Long]\n        }.map {\n            x => x.asInstanceOf[Long]\n\
    \        }", "        var list : List[Long] = Nil\n        for (item <- values)\
    \ {\n            if (item.isInstanceOf[Long]) {\n                list = item.asInstanceOf[Long]\
    \ :: list\n            }\n        }\n        list.reverse", '        values.filter(v
    => v.isInstanceOf[Long]).map(v => v.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])']
stop_tokens:
- "\n    }\n"
