name: HumanEval_138_is_equal_to_sum_even
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Evaluate whether the given number n can be written as the sum of exactly\
  \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
  \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
  \    def isEqualToSumEven(n : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
  \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
  \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
  \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
  \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
completions: ["        var s = Set[(Long, Long, Long, Long)]()\n        for (a <-\
    \ 0L to n / 4) {\n            for (b <- a to n / 3) {\n                for (c\
    \ <- b to n / 2) {\n                    for (d <- c to n) {\n                \
    \        if (2 * a + 2 * b + 2 * c + 2 * d == n) {\n                         \
    \   s += ((a, b, c, d))\n                        }\n                    }\n  \
    \              }\n            }\n        }\n        s.size == 1", "        val\
    \ upper = n / 2\n        val lower = n / 4\n        (lower to upper).map(k =>\
    \ {\n            val a = k\n            val b = lower - k\n            val c =\
    \ upper - k\n            val d = k - b\n            a + b + c + d == n\n     \
    \   }).filter(x => x).isEmpty == false", "        val isEqualToSumEven = (1L to\
    \ n) map {x =>\n            val limit = (n - x) / 2\n            (1L to limit)\
    \ map {y =>\n                val z = n - x - y\n                if (x + y + z\
    \ == n && (x % 2 == 0) && (y % 2 == 0) && (z % 2 == 0)) return true\n        \
    \    }\n        }\n        return false", "        if (n % 2 == 1) false\n   \
    \     else {\n            for (a <- (2 to (n / 2).toInt).filter(x => x % 2 ==\
    \ 0)) {\n                for (b <- (2 to (n / 2).toInt).filter(x => x % 2 == 0))\
    \ {\n                    for (c <- (2 to (n / 2).toInt).filter(x => x % 2 == 0))\
    \ {\n                        for (d <- (2 to (n / 2).toInt).filter(x => x % 2\
    \ == 0)) {\n                            if (a + b + c + d == n) return true\n\
    \                        }\n                    }\n                }\n       \
    \     }\n            false\n        }", "        def isValid(n : Long, nums :\
    \ List[Long]) : Boolean = {\n            if (n == 0) {\n                val evenSum\
    \ = nums.sum\n                (evenSum % 2 == 0) && (evenSum / 2 == nums.head)\n\
    \            } else {\n                (1 to 2 * n by 2).toList.forall(x => isValid(n\
    \ - x, x :: nums))\n            }\n        }\n        isValid(n, Nil)", "    \
    \  if (n % 2 == 1) return false\n      var h = mutable.HashSet.empty[Long]\n \
    \     h += n\n      for (i <- 2 to 4) {\n        var hh = mutable.HashSet.empty[Long]\n\
    \        for (s <- h) {\n          for (j <- 0 to s / 2 if j % 2 == 0) {\n   \
    \         hh += s - j\n          }\n        }\n        h = hh\n      }\n     \
    \ h.size != 0", "        for (a <- 2 to n.toInt - 6 by 2) {\n            for (b\
    \ <- a to n.toInt - (a + 2) by 2) {\n                for (c <- b to n.toInt -\
    \ (a + b + 2) by 2) {\n                    val d = n - (a + b + c)\n         \
    \           if (d > 0 && d % 2 == 0) return true\n                }\n        \
    \    }\n        }\n        return false", "        if (n % 2 == 1) return false\n\
    \        for (i <- (2 to n / 2 by 2)) {\n            for (j <- (2 to n / 2 by\
    \ 2)) {\n                for (k <- (2 to n / 2 by 2)) {\n                    for\
    \ (l <- (2 to n / 2 by 2)) {\n                        if (i + j + k + l == n)\
    \ return true\n                    }\n                }\n            }\n     \
    \   }\n        return false", "        val ns = n.toString.map(_.asDigit).toList\n\
    \        val r = ns.filter(_ % 2 == 0)\n        if (r.length < 4) return false\n\
    \        if (r.length == 4) return r.reduceLeft(_ + _) == ns.reduceLeft(_ + _)\n\
    \        val l = ns.filter(_ % 2 == 1)\n        if (l.length == 0) return r.reduceLeft(_\
    \ + _) == ns.reduceLeft(_ + _)\n        (0 to l.length - 1).exists(i => r.combinations(4\
    \ - i).exists(l.combinations(i).contains(_)))", "        if (n % 2 == 1) return\
    \ false\n        for (i <- 1 to n / 2) {\n            if (n - i * 2 == 0) return\
    \ true\n            else if (n - i * 2 > 0 && isEqualToSumEven(n - i * 2)) return\
    \ true\n        }\n        return false", "        var size = (n+1)/2\n      \
    \  var count = 0\n        var nums = Set[Long]()\n        var i = 2\n        while\
    \ (nums.size < size) {\n            nums += i\n            i += 2\n        }\n\
    \        def find(sum : Long, index : Int) : Boolean = {\n            if (sum\
    \ == n) {\n                count += 1\n                if (count == 4) return\
    \ true\n                else return false\n            }\n            if (sum\
    \ > n || index == size) return false\n            return find(sum+nums(index),\
    \ index+1) || find(sum, index+1)\n        }\n        find(0, 0)", "        val\
    \ factors = new ArrayBuffer[Long]()\n        val factorsSet = new HashSet[Long]()\n\
    \        for (i <- 1L to n) {\n            if (n % i == 0) {\n               \
    \ factors += i\n                factorsSet += i\n            }\n        }\n  \
    \      for (i <- 0 until factors.length) {\n            for (j <- i until factors.length)\
    \ {\n                for (k <- j until factors.length) {\n                   \
    \ val a = factors(i)\n                    val b = factors(j)\n               \
    \     val c = factors(k)\n                    val d = n / (a * b * c)\n      \
    \              if (a % 2 == 0 && b % 2 == 0 && c % 2 == 0 && d % 2 == 0 && a !=\
    \ b && a != c && a != d && b != c && b != d && c != d && factorsSet.contains(d))\
    \ return true\n                }\n            }\n        }\n        false", " \
    \       val dp = Array.fill(n.toInt + 1)(false)\n        for (i <- 1 to n.toInt\
    \ if i % 2 == 0) {\n            dp(i) = true\n            for (j <- i to n.toInt)\
    \ dp(j) |= dp(j - i)\n        }\n        dp(n.toInt)", "        val a = n / 2\n\
    \        val b = n / 2 - 1\n        val c = n / 2 - 2\n        val d = n / 2 -\
    \ 3\n        if (n == a + b + c + d && a > 0 && b > 0 && c > 0 && d > 0 && a %\
    \ 2 == 0 && b % 2 == 0 && c % 2 == 0 && d % 2 == 0) true else false", "      \
    \  for (i <- 1 to n.toInt / 2) {\n            for (j <- 1 to n.toInt / 2) {\n\
    \                for (k <- 1 to n.toInt / 2) {\n                    for (l <-\
    \ 1 to n.toInt / 2) {\n                        if (i + j + k + l == n && i % 2\
    \ == 0 && j % 2 == 0 && k % 2 == 0 && l % 2 == 0) return true\n              \
    \      }\n                }\n            }\n        }\n        return false",
  "        if (n % 2 == 1) return false\n        for (i <- (1 to n/2).toList) {\n\
    \            if (i % 2 == 1) {\n                if (isEqualToSumEven(n - i)) return\
    \ true\n            }\n        }\n        return false", "        if (n % 2 ==\
    \ 1) return false\n        val sum = (0L until n).filter(_ % 2 == 0).toArray\n\
    \        val flag = Array.fill(n + 1)(false)\n        flag(0) = true\n       \
    \ for (i <- sum) {\n            for (j <- n - i to 0 by -1) {\n              \
    \  if (flag(j)) flag(j + i) = true\n            }\n        }\n        for (i <-\
    \ 0 to n / 2) {\n            if (flag(i) && flag(n - i)) return true\n       \
    \ }\n        false", '        n % 2 == 0 && n % 4 != 0', "        if (n % 2 ==\
    \ 1) return false\n        var found = false\n        var a = 2L\n        while\
    \ (a <= n) {\n            var b = 2L\n            while (b <= n - a) {\n     \
    \           var c = 2L\n                while (c <= n - a - b) {\n           \
    \         var d = 2L\n                    while (d <= n - a - b - c) {\n     \
    \                   if (a + b + c + d == n) found = true\n                   \
    \     d += 2\n                    }\n                    c += 2\n            \
    \    }\n                b += 2\n            }\n            a += 2\n        }\n\
    \        found", "        val target = n.toInt\n        for (x <- 2 to target\
    \ - 6 by 2) {\n            for (y <- 2 to target - 4 by 2) {\n               \
    \ for (z <- 2 to target - 2 by 2) {\n                    if (x + y + z == target)\
    \ return true\n                }\n            }\n        }\n        return false"]
stop_tokens:
- "\n    }\n"
