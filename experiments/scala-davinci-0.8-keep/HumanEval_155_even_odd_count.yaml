name: HumanEval_155_even_odd_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n    // Example:\n    // even_odd_count(-12) ==> (1, 1)\n    //\
  \ even_odd_count(123) ==> (1, 2)\n    def evenOddCount(num : Long) : Tuple2[Long,\
  \ Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
  \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
  \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
  \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
  \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
completions: ["        var answer = Tuple2(0, 0)\n        var n = abs(num)\n     \
    \   while (n > 0) {\n            val d = n % 10\n            if (d % 2 == 0) answer\
    \ = Tuple2(answer._1 + 1, answer._2)\n            else answer = Tuple2(answer._1,\
    \ answer._2 + 1)\n            n /= 10\n        }\n        answer", "        val\
    \ absNum = abs(num)\n        val count_even = absNum.toString.count(c => (c.toString.toInt\
    \ % 2) == 0)\n        val count_odd = absNum.toString.count(c => (c.toString.toInt\
    \ % 2) == 1)\n        (count_even, count_odd)", "        val e = num.toString.map(_.asDigit).filter(_\
    \ % 2 == 0).length\n        val o = num.toString.map(_.asDigit).filter(_ % 2 ==\
    \ 1).length\n        (e, o)", "      val even = num.toString.count(_.isDigit &&\
    \ (_.asDigit % 2 == 0))\n      val odd = num.toString.count(_.isDigit && (_.asDigit\
    \ % 2 == 1))\n      (even, odd)", '        return (num.toString.filter(_ % 2 ==
    0).length, num.toString.filter(_ % 2 == 1).length)', "        val str = num.toString\n\
    \        val evenList = str.zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1).map(x\
    \ => x.toString.toLong)\n        val oddList = str.zipWithIndex.filter(x => x._2\
    \ % 2 == 1).map(x => x._1).map(x => x.toString.toLong)\n        val evenCount\
    \ = evenList.count(x => x % 2 == 0)\n        val oddCount = oddList.count(x =>\
    \ x % 2 == 1)\n        (evenCount, oddCount)", "        def evenOddCount(num :\
    \ Long, even : Long, odd : Long) : Tuple2[Long, Long] = {\n            if (num\
    \ == 0)\n                (even, odd)\n            else if (num % 2 == 0)\n   \
    \             evenOddCount(num / 10, even + 1, odd)\n            else\n      \
    \          evenOddCount(num / 10, even, odd + 1)\n        }\n        if (num <\
    \ 0)\n            evenOddCount(-num, 0, 0)\n        else\n            evenOddCount(num,\
    \ 0, 0)", "        var odd_count = 0\n        var even_count = 0\n        var\
    \ num_abs = abs(num)\n        while (num_abs > 0) {\n            val digit = num_abs\
    \ % 10\n            if (digit % 2 == 0) even_count += 1\n            else odd_count\
    \ += 1\n            num_abs /= 10\n        }\n        return (even_count, odd_count)",
  '        return ((num.toString.toList.filter(x => ((x.toString.toInt % 2) == 0)).length),
    (num.toString.toList.filter(x => ((x.toString.toInt % 2) == 1)).length))', " \
    \       var even = 0L\n        var odd = 0L\n        num.abs.toString.foreach(x\
    \ => if (x.asDigit % 2 == 0) even += 1 else odd += 1)\n        return (even, odd)",
  '        (num.toString.filter(_.asDigit % 2 == 0).length, num.toString.filter(_.asDigit
    % 2 == 1).length)', "        var evenCount = 0\n        var oddCount = 0\n   \
    \     num.toString.foreach(x => if (x.toInt % 2 == 0) evenCount += 1 else oddCount\
    \ += 1)\n        return (evenCount, oddCount)", "        var total_evens = 0L\n\
    \        var total_odds = 0L\n        var abs_num = abs(num)\n        while (abs_num\
    \ > 0) {\n            var digit = abs_num % 10\n            if (digit % 2 == 0)\
    \ total_evens += 1\n            else total_odds += 1\n            abs_num /= 10\n\
    \        }\n        (total_evens, total_odds)", "        var n = num\n       \
    \ var countEven = 0\n        var countOdd = 0\n        while (n != 0) {\n    \
    \        val digit = n % 10\n            if (digit % 2 == 0) countEven += 1\n\
    \            else countOdd += 1\n            n /= 10\n        }\n        return\
    \ (countEven, countOdd)", '        return (num.toString.filter(_.isDigit).filter(_.isLetter).size,
    num.toString.filter(_.isDigit).filter(_.isLetter).size)', "        var even =\
    \ 0L\n        var odd = 0L\n        var n = num\n        if (n < 0) n = -n\n \
    \       while (n > 0) {\n            if (n % 2 == 0) even += 1\n            else\
    \ odd += 1\n            n /= 10\n        }\n        (even, odd)", "        var\
    \ even = 0L\n        var odd = 0L\n        num.abs.toString.foreach(x => if (x.asDigit\
    \ % 2 == 0) even += 1 else odd += 1)\n        (even, odd)", "        var oddCount\
    \ = 0\n        var evenCount = 0\n        var number = num\n        if (number\
    \ < 0) number = abs(number)\n        while (number > 0) {\n            val digit\
    \ = number % 10\n            if (digit % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            number /= 10\n        }\n        (evenCount, oddCount)",
  "        val s = num.toString\n        (s.count(c => c.isDigit && c.asDigit % 2\
    \ == 0), s.count(c => c.isDigit && c.asDigit % 2 == 1))", "        val evens =\
    \ num.toString.filter(x => x.toInt % 2 == 0).length\n        val odds = num.toString.filter(x\
    \ => x.toInt % 2 == 1).length\n        (evens, odds)"]
stop_tokens:
- "\n    }\n"
