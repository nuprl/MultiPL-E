name: HumanEval_94_skjkasdkd
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of integers.\n    // You need to find the largest prime\
  \ value and return the sum of its digits.\n    // Examples:\n    // For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
  \ the output should be 10\n    // For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
  \ the output should be 25\n    // For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
  \ the output should be 13\n    // For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
  \ the output should be 11\n    // For lst = [0,81,12,3,1,21] the output should be\
  \ 3\n    // For lst = [0,8,1,2,1,7] the output should be 7\n    def skjkasdkd(lst\
  \ : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
  \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
  \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
  \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
  \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
  \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
  \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong,\
  \ 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong,\
  \ 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
  \ 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong,\
  \ 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n\
  \    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
  \ 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
  \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
  \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
  \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
  \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
completions: ["        val p = lst.filter(x => (isPrime(x) && x != 1 && x != 0))\n\
    \        if (p.length == 0) return 0\n        val pp = p.max\n        var ppp\
    \ = pp\n        var s = 0\n        while (ppp > 0) {\n            s += ppp % 10\n\
    \            ppp /= 10\n        }\n        s", "        // Return the sum of the\
    \ digits of the largest prime number found in the list.\n        val primes =\
    \ new ListBuffer[Long]\n        for (i <- 2L to lst.max if primes.forall(p =>\
    \ i % p != 0)) primes += i\n        return primes.sorted.last.toString.map(_.asDigit).sum",
  "        def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            var i = 3\n            while (i <= sqrt(n)) {\n                if\
    \ (n % i == 0) return false\n                i += 2\n            }\n         \
    \   return true\n        }\n        val map = Map[Long, Long]()\n        lst.foreach(n\
    \ => {\n            var l = map.getOrElse(n, 0)\n            map += (n -> (l +\
    \ 1))\n        })\n        var primes = lst.filter(isPrime(_))\n        var maxPrime\
    \ = primes.max\n        return maxPrime.toString.map(_.asDigit).sum", "      \
    \  // Your code here\n        val lstLong = lst.map(x => x.toString)\n       \
    \ var lstPrime = List[Long]()\n        lstLong.foreach {\n          element =>\n\
    \            if (isPrime(element.toLong)) {\n              lstPrime = element.toLong\
    \ :: lstPrime\n            }\n        }\n        lstPrime.max.toString.toList.map(x\
    \ => x.toString.toLong).sum", "    \tvar cnt = 0\n    \tvar primes = List[Long]()\n\
    \    \twhile (cnt < lst.length) {\n    \t\tvar num = lst(cnt)\n    \t\tif (isPrime(num))\
    \ primes = primes :+ num\n    \t\tcnt += 1\n    \t}\n    \tvar greatestPrime =\
    \ 0L\n    \tcnt = 0\n    \twhile (cnt < primes.length) {\n    \t\tif (primes(cnt)\
    \ > greatestPrime) greatestPrime = primes(cnt)\n    \t\tcnt += 1\n    \t}\n  \
    \  \tvar sum = 0L\n    \twhile (greatestPrime > 0) {\n    \t\tsum += greatestPrime\
    \ % 10\n    \t\tgreatestPrime /= 10\n    \t}\n    \tsum", "        return lst.filter(i\
    \ => isPrime(i)).max.toString.map(ch => (ch - '0')).sum", "        var largestPrime\
    \ = 0L\n        for (i <- lst) {\n            if (isPrime(i)) {\n            \
    \    if (i > largestPrime) largestPrime = i\n            }\n        }\n      \
    \  return sumDigits(largestPrime)", "        if (lst.length == 0) return 0\n \
    \       def isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrtN = math.sqrt(n)\n            for (i <- 3 to sqrtN.toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        val lst2 = lst.filter(isPrime(_))\n  \
    \      var lst3 = lst2.filter(_ > 10)\n        if (lst3.length == 0) {\n     \
    \       lst3 = lst2\n        }\n        val max = lst3.max\n        val sum =\
    \ max.toString.map(_.asDigit).sum\n        return sum", "        var max = 0L\n\
    \        for (x <- lst) {\n            if (x > max && isPrime(x)) max = x\n  \
    \      }\n        max", "        val sumOfDigits = (x : Long) => x.toString.map(x\
    \ => x.asDigit).sum\n        val isPrime = (x : Long) => (2 to (sqrt(x).toInt)).forall(x\
    \ % _ != 0)\n        val primes = lst.filter(isPrime)\n        primes.sortWith(_\
    \ > _).headOption match {\n            case Some(x) => sumOfDigits(x)\n      \
    \      case None => -1\n        }", "        def isPrime(n : Long) : Boolean =\
    \ {\n            if (n <= 1) return false\n            else if (n == 2) return\
    \ true\n            else {\n                for (i <- 2 to sqrt(n).toInt) if (n\
    \ % i == 0) return false\n                return true\n            }\n       \
    \ }\n        def getDigits(n : Long) : Long = {\n            var rem = n\n   \
    \         var sum = 0\n            while (rem > 0) {\n                sum += rem\
    \ % 10\n                rem /= 10\n            }\n            return sum\n   \
    \     }\n        var maxValue = 0L\n        for (num <- lst) {\n            val\
    \ value = if (isPrime(num)) getDigits(num) else 0\n            if (value > maxValue)\
    \ maxValue = value\n        }\n        return maxValue", "        // If all elements\
    \ are equal, then the prime value is 1.\n        if (lst.distinct.length == 1)\
    \ return 1\n        val factors = lst.filter(_ % 2 != 0).map(BigInt(_)).flatMap(_.primeFactors)\n\
    \        factors.groupBy(x => x).map(x => (x._1, x._2.length)).toList.sortBy(_._2).last._1.toLong",
  "        // var test = new Dictionary[Int, Int]\n        // test(10) = 90\n    \
    \    // println(test)\n        // var sum = 0\n        // var n = 1\n        //\
    \ while (lst.size * n < 10) {\n        //     n += 1\n        // }\n        //\
    \ var n = 10\n        // while (true) {\n        //     var b = true\n       \
    \ //     var s = 0\n        //     for (i <- 0 until lst.size) {\n        // \
    \        val t = (lst(i) * n).toString\n        //         s += t.toInt\n    \
    \    //         for (j <- 0 until t.size) {\n        //             if (t(j) !=\
    \ '0') {\n        //                 b = false\n        //             }\n   \
    \     //         }\n        //     }\n        //     if (b && isPrime(s)) {\n\
    \        //         sum = s\n        //         break\n        //     }\n    \
    \    //     n += 1\n        // }\n        // var sum = 0\n        // for (n <-\
    \ 1 to lst.size) {\n        //     var a = 0\n        //     var s = 0\n     \
    \   //     for (i <- 0 until lst.size) {\n        //         s += lst(i) * 10\
    \ * n\n        //         a += lst(i) * 10 * n\n        //     }\n        // \
    \    if (isPrime(s)) {\n        //         sum = s\n        //         break\n\
    \        //     }\n        // }\n        // var sum = 0\n        // var n = lst.size\n\
    \        // while (sum == 0) {\n        //     val b = isPrime(lst.reduce(_ *\
    \ pow(10, n).toInt + _))\n        //     if (b) {\n        //         sum = lst.reduce(_\
    \ * pow(10, n).toInt + _)\n        //     }\n        //     n += 1\n        //\
    \ }\n        // var n = 0\n        // var sum = 0\n        // while (sum == 0)\
    \ {\n        //     n += 1\n        //     val b = isPrime(lst.reduce(_ *", " \
    \       val map = new HashMap[Long, Boolean]\n        val isPrime = (x : Long)\
    \ => if (x == 1) false else if (x == 2) true else if (x % 2 == 0) false else (3\
    \ to sqrt(x).toInt by 2).forall(x % _ != 0)\n        lst.filter(isPrime).map(_.toString.map(_.asDigit).sum).max",
  "        val result = (1 to lst.max.toInt).filter(i => isPrime(i)).map(i => i.toString.map(j\
    \ => j.asDigit).sum).max\n        result", "        val primes = lst.filter(x\
    \ => isPrime(x)).sortWith(_ > _)\n        val largest = primes.head\n        largest.toString.map(_.asDigit).sum",
  "        def isPrime(n : Long) : Boolean = {\n            for (i <- 2 to n - 1)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        def sumOfDigits(n : Long) : Long = {\n     \
    \       if (n < 10) return n\n            return sumOfDigits(n / 10) + n % 10\n\
    \        }\n        val prime = lst.filter(isPrime(_)).max\n        return sumOfDigits(prime)",
  "        def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n\
    \            if (n <= 3) return true\n            if (n % 2 == 0 || n % 3 == 0)\
    \ return false\n            for (i <- 2 to (sqrt(n).toInt + 1)) {\n          \
    \      if (n % i == 0) return false\n            }\n            return true\n\
    \        }\n        def digitSum(n : Long) : Long = {\n            var m = n\n\
    \            var sum = 0L\n            while (m > 0) {\n                sum +=\
    \ m % 10\n                m /= 10\n            }\n            return sum\n   \
    \     }\n        var max = 0L\n        for (i <- lst) {\n            if (isPrime(i)\
    \ && i > max) max = i\n        }\n        return digitSum(max)", "        var\
    \ primes = List[Long]()\n        var answer = 0.toLong\n        for (x <- lst)\
    \ {\n            if (isPrime(x)) {\n                primes = x :: primes\n   \
    \         }\n        }\n        for (x <- primes) {\n            answer = max(x,\
    \ answer)\n        }\n        var sum = 0.toLong\n        while (answer > 0) {\n\
    \            sum += answer % 10\n            answer /= 10\n        }\n       \
    \ return sum", "        def isPrime(n : Long) : Boolean = {\n            if (n\
    \ == 1) false\n            else if (n < 4) true\n            else if (n % 2 ==\
    \ 0) false\n            else if (n < 9) true\n            else if (n % 3 == 0)\
    \ false\n            else {\n                val r = floor(sqrt(n)).toLong\n \
    \               var f = 5L\n                while (f <= r) {\n               \
    \     if (n % f == 0) return false\n                    if (n % (f + 2) == 0)\
    \ return false\n                    f += 6\n                }\n              \
    \  true\n            }\n        }\n        var primes = new ArrayBuffer[Long]\n\
    \        for (i <- lst) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        if (primes.size == 0) 0\n        else {\n            var max = primes(0)\n\
    \            for (p <- primes) {\n                if (p > max) max = p\n     \
    \       }\n            max.toString.map(_.asDigit).sum\n        }"]
stop_tokens:
- "\n    }\n"
