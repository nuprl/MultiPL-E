name: HumanEval_163_generate_integers
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given two positive integers a and b, return the even digits between a\n\
  \    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
  \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
  \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
  \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n  \
  \  assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
  \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        if (a > b) generateIntegers(b, a)\n        else if (a % 2 ==\
    \ 0) a :: generateIntegers(a + 2, b)\n        else generateIntegers(a + 1, b)",
  "        if (a > b) generateIntegers(b, a)\n        else (a to b).filter(_ % 2 ==\
    \ 0).toList", "        def solve(a : Long, b : Long, evens : List[Long]) : List[Long]\
    \ = {\n            if (a > b) evens.reverse\n            else if (a % 2 == 0)\
    \ solve(a + 1, b, a :: evens)\n            else solve(a + 1, b, evens)\n     \
    \   }\n        solve(a, b, Nil)", "        var list = new ListBuffer[Long]()\n\
    \        val min = min(a, b)\n        val max = max(a, b)\n        for (n <- min\
    \ to max) {\n            if (n % 2 == 0) list += n\n        }\n        list.toList",
  "        val start = min(a, b)\n        val end = max(a, b)\n        val solution\
    \ = ListBuffer[Long]()\n        for (num <- start to end) {\n            if (num\
    \ % 2 == 0) solution += num\n        }\n        solution.toList", "        val\
    \ min = min(a, b)\n        val max = max(a, b)\n        def helper(x : Long, acc\
    \ : List[Long]) : List[Long] = {\n            if (x <= max) {\n              \
    \  if (x % 2 == 0) helper(x + 1, x :: acc)\n                else helper(x + 1,\
    \ acc)\n            }\n            else acc\n        }\n        helper(min, Nil).reverse",
  '        (for (i <- min(a, b) to max(a, b) if i % 2 == 0) yield i).toList', "  \
    \      if (a == b) return List[Long]()\n        var result = List[Long]()\n  \
    \      val min = min(a, b)\n        val max = max(a, b)\n        (min to max).foreach(i\
    \ => if (i % 2 == 0) result = result :+ i)\n        result", "        if (a >\
    \ b) generateIntegers(b, a)\n        else if (a % 2 == 0) a :: generateIntegers(a\
    \ + 2, b)\n        else generateIntegers(a + 1, b)", "        if (a > b) generateIntegers(b,\
    \ a)\n        else if (a % 2 == 0) a :: generateIntegers(a + 2, b)\n        else\
    \ generateIntegers(a + 1, b)", "        val aa = min(a, b)\n        val bb = max(a,\
    \ b)\n        val list = ListBuffer[Long]()\n        for (i <- aa to bb) {\n \
    \           if (i % 2 == 0) {\n                list += i\n            }\n    \
    \    }\n        list.toList", "        val xs = ListBuffer[Long]()\n        val\
    \ (l, h) = if (a < b) (a, b) else (b, a)\n        for (i <- l to h) {\n      \
    \      if (i % 2 == 0) xs += i\n        }\n        xs.toList", "      val range\
    \ = if (a <= b) a to b else b to a\n      range.filter(x => x % 2 == 0).toList",
  "        val min = min(a, b)\n        val max = max(a, b)\n        (for (i <- min\
    \ to max if i % 2 == 0) yield i).toList", "        val min = min(a, b)\n     \
    \   val max = max(a, b)\n        val nums = new ListBuffer[Long]\n        for\
    \ (i <- min to max) if (i % 2 == 0) nums += i\n        nums.toList", "       \
    \ val c = (a + b) / 2\n        if (c * 2 != a + b) List()\n        else if (a\
    \ == b) List(a)\n        else generateIntegers(a, c) ::: List(c) ::: generateIntegers(c,\
    \ b)", "        val min = min(a, b)\n        val max = max(a, b)\n        val\
    \ evens = ListBuffer[Long]()\n        var i = min\n        while (i <= max) {\n\
    \            if (i % 2 == 0) evens += i\n            i += 1\n        }\n     \
    \   evens.toList", "        if (a > b) generateIntegers(b, a)\n        else if\
    \ (a % 2 == 0) List(a) ::: generateIntegers(a + 2, b)\n        else List() :::\
    \ generateIntegers(a + 1, b)", "        var ret : List[Long] = Nil\n        for\
    \ (i <- min(a, b) to max(a, b)) if (i % 2 == 0) ret ::= i\n        return ret.reverse",
  "        var l = List[Long]()\n        var i = a\n        while (i <= b) {\n   \
    \         if (i % 2 == 0) l = l :+ i\n            i += 1\n        }\n        return\
    \ l"]
stop_tokens:
- "\n    }\n"
