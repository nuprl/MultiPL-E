name: HumanEval_14_all_prefixes
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of all prefixes from shortest to longest of the input string\n\
  \    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
  \ : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\"\
  )).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
  a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
  WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
completions: ["        def aux(string : String, acc : List[String]) : List[String]\
    \ = {\n            if (string.length > 0) aux(string.substring(0, string.length\
    \ - 1), string.substring(0, string.length) :: acc)\n            else acc\n   \
    \     }\n        aux(string, List[String]())", "        var res = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            res = string.substring(0,\
    \ i + 1) :: res\n        }\n        res", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) result ::= string.substring(0, i +\
    \ 1)\n        result.reverse", '        (for (i <- 0 to string.length) yield string.substring(0,
    i)).toList', "        var prefixes = List[String]()\n        for (j <- 0 to string.length\
    \ - 1) {\n            val prefix = string.substring(0, j + 1)\n            prefixes\
    \ = prefix :: prefixes\n        }\n        prefixes", "        if (string.isEmpty)\
    \ return List[String]()\n        val r = for (i <- 0 to string.length) yield string.substring(0,\
    \ i)\n        r.toList", "        // Base case\n        if (string.isEmpty) {\n\
    \            return List()\n        }\n        // Recursive case\n        val\
    \ rest = allPrefixes(string.tail)\n        val result = string.head :: rest.map(s\
    \ => string.head + s)\n        return result", "        if (string.isEmpty) {\n\
    \            return List()\n        }\n        val prefixes = new ListBuffer[String]\n\
    \        var i = 0\n        while (i < string.length) {\n            prefixes\
    \ += string.substring(0, i + 1)\n            i += 1\n        }\n        return\
    \ prefixes.toList", "        if (string.length == 0) Nil\n        else {\n   \
    \         val last = string.length - 1\n            List.range(0, last + 1).foldLeft(List[String]())((a,\
    \ i) => string.substring(0, i + 1) :: a)\n        }", "        val result = new\
    \ ListBuffer[String]\n        for (i <- 0 to string.length) result += string.slice(0,\
    \ i)\n        result.toList", "        var list = ListBuffer[String]()\n     \
    \   for (i <- (0 to string.length)) {\n            list += string.substring(0,\
    \ i)\n        }\n        list.toList", "        var prefixes = List[String]()\n\
    \        for (i <- 1 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        if (string.length() == 0)\
    \ List()\n        else if (string.length() == 1) List(string)\n        else string.map(c\
    \ => string.take(string.indexOf(c) + 1)).toList", "        def helper(string :\
    \ String, acc : List[String]) : List[String] = {\n            if (string.length\
    \ == 0) acc\n            else helper(string.dropRight(1), acc :+ string)\n   \
    \     }\n        helper(string, List[String]())", "      if (string.length ==\
    \ 0) List(\"\")\n      else {\n        val suffix = allPrefixes(string.tail)\n\
    \        string.head :: suffix.map(string.head + _)\n      }", "        val m\
    \ = string.length\n        List.range(1, m + 1).map(string.substring(0, _)).toList",
  "        val result = new ArrayBuffer[String]\n        for (i <- 1 to string.length)\
    \ result += string.substring(0, i)\n        result.toList", '        string.indices.map(string.substring(0,
    _ + 1)).toList', "        var all_prefixes = ListBuffer[String]()\n        for\
    \ (i <- 1 to string.length) {\n            all_prefixes += string.substring(0,\
    \ i)\n        }\n        return all_prefixes.toList", "        val L = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length - 1) {\n            L += string.substring(0,\
    \ i + 1)\n        }\n        L.toList"]
stop_tokens:
- "\n    }\n"
