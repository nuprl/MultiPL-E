name: HumanEval_3_below_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You're given a list of deposit and withdrawal operations on a bank account\
  \ that starts with\n    // zero balance. Your task is to detect if at any point\
  \ the balance of account fallls below zero, and\n    // at that point function should\
  \ return True. Otherwise it should return False.\n    // >>> below_zero([1, 2, 3])\n\
  \    // False\n    // >>> below_zero([1, 2, -4, 5])\n    // True\n    def belowZero(operations\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
  \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
  \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
  \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
  \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
  \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
  \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
  \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
  \ == (true));\n    }\n\n}\n"
completions: ["        var balance = 0L\n        for (op <- operations) {\n      \
    \      balance += op\n            if (balance < 0) return true\n        }\n  \
    \      return false", "        var balance = 0L\n        for (i <- 0 until operations.length)\
    \ {\n            balance += operations(i)\n            if (balance < 0) return\
    \ true\n        }\n        return false", '        operations.foldLeft(0L)((x,
    y) => x + y) < 0', "        var balance = 0L\n        operations.foreach(x =>\
    \ {\n            balance += x\n            if (balance < 0) return true\n    \
    \    })\n        return false", "        var balance = 0L\n        for (op <-\
    \ operations) {\n            balance += op\n            if (balance < 0) return\
    \ true\n        }\n        return false", "        var index = 0\n        var\
    \ sum = 0L\n        while (index < operations.length) {\n            sum += operations(index)\n\
    \            if (sum < 0) return true\n            index += 1\n        }\n   \
    \     return false", "        var balance = 0L\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false", "        var sum = 0L\n        operations.foreach\
    \ { x => sum += x; if (sum < 0) return true }\n        return false", "      \
    \  var balance = 0\n        for (operation <- operations) {\n            balance\
    \ += operation\n            if (balance < 0) return true\n        }\n        return\
    \ false", "      val s = new Stack[Long]\n      for (i <- operations) {\n    \
    \    s.push(i)\n        if (s.sum < 0) return true\n      }\n      return false",
  '        operations.foldLeft(0L)((total, x) => total + x) < 0', '        operations.scanLeft(0L)(_
    + _).filter(_ < 0).nonEmpty', "        var acc = 0L\n        for (operation <-\
    \ operations) {\n            acc += operation\n            if (acc < 0) return\
    \ true\n        }\n        return false", '        operations.scanLeft(0L)(_ +
    _).toList.exists(_ < 0)', "        var balance = 0L\n        operations.foreach(x\
    \ => {\n            balance += x\n            if (balance < 0) return true\n \
    \       })\n        return false", "        var balance = 0;\n        for (operation\
    \ <- operations) {\n            balance += operation;\n            if (balance\
    \ < 0) {\n                return true;\n            }\n        }\n        return\
    \ false;", "        if (operations.isEmpty) false\n        else {\n          \
    \  val test = operations.tail.foldLeft(operations.head)((z, x) => z + x)\n   \
    \         if (test < 0) true\n            else false\n        }", "        var\
    \ balance = 0L\n        for (operation <- operations) {\n            balance +=\
    \ operation\n            if (balance < 0) return true\n        }\n        return\
    \ false", '        operations.foldLeft(0L)((balance, amount) => if (balance +
    amount < 0) return true else balance + amount) == 0', "        var balance = 0L\n\
    \        for (operation <- operations) {\n            balance += operation\n \
    \           if (balance < 0) return true\n        }\n        return false"]
stop_tokens:
- "\n    }\n"
