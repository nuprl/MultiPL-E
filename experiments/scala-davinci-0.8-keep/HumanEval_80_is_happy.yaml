name: HumanEval_80_is_happy
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a string s.\n    // Your task is to check if the string is\
  \ happy or not.\n    // A string is happy if its length is at least 3 and every\
  \ 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a) =>\
  \ False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    // is_happy(aabb)\
  \ => False\n    // is_happy(adb) => True\n    // is_happy(xyy) => False\n    def\
  \ isHappy(s : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\"))\
  \ == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
  abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
  adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
  iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n    }\n\
  \n}\n"
completions: ["        if (s.length < 3) return false\n        for (i <- 0 until s.length\
    \ - 2) {\n            if (s(i) == s(i + 1) && s(i) == s(i + 2)) return false\n\
    \        }\n        return true", "        if (s.length < 3) return false\n  \
    \      var result = true\n        for (i <- 0 until s.length - 2) {\n        \
    \    if (s(i) == s(i + 1) || s(i) == s(i + 2) || s(i + 1) == s(i + 2)) {\n   \
    \             result = false\n                return result\n            }\n \
    \       }\n        return result", "        var flag = true\n        if (s.length\
    \ < 3) flag = false\n        else {\n            var start = 0\n            var\
    \ end = 3\n            while (flag && end <= s.length) {\n                flag\
    \ = s.substring(start, end).distinct.length == 3\n                start += 1\n\
    \                end += 1\n            }\n        }\n        flag", "        if\
    \ (s.length < 3) return false\n        for (i <- 0 until s.length - 2) if (s(i)\
    \ == s(i + 1) && s(i + 1) == s(i + 2)) return false\n        return true", " \
    \       if (s.length < 3) return false\n        for (i <- 0 until s.length - 2)\
    \ if (s(i) == s(i + 1) && s(i + 1) == s(i + 2)) return false\n        return true",
  "        if (s.length < 3) false\n        else {\n            s.sliding(3).foldLeft(true)((result,\
    \ str) => result && str.distinct.length == 3)\n        }", "        if (s.length\
    \ < 3) return false\n        for (i <- 0 until s.length - 2) if (s(i) == s(i +\
    \ 1) && s(i) == s(i + 2)) return false\n        return true", "        if (s.length\
    \ < 3) return false\n        var dp = new Array[Boolean](s.length)\n        dp(0)\
    \ = true\n        dp(1) = true\n        for (i <- 2 until s.length) {\n      \
    \      dp(i) = dp(i - 1) && dp(i - 2) && s(i) != s(i - 1) && s(i) != s(i - 2)\
    \ && s(i - 1) != s(i - 2)\n        }\n        dp(s.length - 1)", "        if (s.length\
    \ < 3) return false\n        var i = 0\n        while (i < s.length - 2) {\n \
    \           if (s(i) == s(i + 1) || s(i) == s(i + 2) || s(i + 1) == s(i + 2))\
    \ return false\n            i += 1\n        }\n        return true", '        s.length
    >= 3 && s.grouped(3).forall(_.distinct.length == 3)', "        if (s.length <\
    \ 3) return false\n        return (1 until s.length - 1).map(i => s(i - 1) !=\
    \ s(i) && s(i) != s(i + 1) && s(i - 1) != s(i + 1)).reduce(_ && _)", "       \
    \ if (s.length < 3) return false\n        for (i <- 1 until s.length - 1) if (s(i\
    \ - 1) == s(i + 1)) return false\n        return true", "      var happy = false\n\
    \      for (i <- 0 to s.length - 3) {\n        if (s(i) != s(i + 1) && s(i) !=\
    \ s(i + 2) && s(i + 1) != s(i + 2)) happy = true\n      }\n      happy", "   \
    \     val as = s.toArray\n        val n = as.length\n        var i = 0\n     \
    \   while (i + 2 < n) {\n            if (as(i) == as(i + 1) || as(i) == as(i +\
    \ 2) || as(i + 1) == as(i + 2)) return false\n            i += 1\n        }\n\
    \        true", "        if (s.length < 3) return false\n        for (i <- 0 until\
    \ s.length - 2) {\n            if (s(i) == s(i + 1) && s(i) == s(i + 2)) return\
    \ false\n        }\n        return true", "        if (s.length < 3) {\n     \
    \       return false\n        }\n        var set = Set[String]()\n        for\
    \ (i <- 0 until s.length - 2) {\n            val c = s.substring(i, i + 3)\n \
    \           if (set.contains(c)) {\n                return false\n           \
    \ }\n            set += c\n        }\n        return true", "        if (s.length\
    \ < 3) return false\n        for (i <- 0 until s.length - 2) {\n            if\
    \ (s(i) == s(i + 1) && s(i) == s(i + 2)) return false\n        }\n        return\
    \ true", "        if (s.length < 3) return false\n        for (i <- 0 until s.length\
    \ - 2) {\n            if (s(i) == s(i + 1) && s(i) == s(i + 2)) return false\n\
    \        }\n        return true", "        var flag = true\n        if (s.length\
    \ < 3) flag = false\n        else {\n            for (i <- 0 until s.length -\
    \ 2) {\n                if (s(i) == s(i + 1) || s(i) == s(i + 2) || s(i + 1) ==\
    \ s(i + 2)) {\n                    flag = false\n                    return flag\n\
    \                }\n            }\n        }\n        return flag", "        if\
    \ (s.length < 3) false\n        else {\n            for (i <- 0 until s.length\
    \ - 2) if (s(i) == s(i + 1) && s(i) == s(i + 2)) return false\n            true\n\
    \        }"]
stop_tokens:
- "\n    }\n"
