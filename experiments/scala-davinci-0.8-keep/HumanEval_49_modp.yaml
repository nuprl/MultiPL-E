name: HumanEval_49_modp
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp(3, 5)\n   \
  \ // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0, 101)\n    // 1\n\
  \    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n    // 1\n    def\
  \ modp(n : Long, p : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
  \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
  \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
  \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
  \ == (3l));\n    }\n\n}\n"
completions: ["        return if (n == 0) 1 else {\n            var x = modp(n / 2,\
    \ p)\n            x = (x * x) % p\n            if (n % 2 == 1) (x * 2) % p else\
    \ x\n        }", "        if (n == 0) return 1\n        if (n % 2 == 0) {\n  \
    \          val x = modp(n / 2, p)\n            (x * x) % p\n        } else {\n\
    \            val x = modp(n - 1, p)\n            (2 * x) % p\n        }", "  \
    \      if (n == 0) return 1\n        var result = modp(n / 2, p)\n        result\
    \ = (result * result) % p\n        if (n % 2 == 1) result = (result * 2) % p\n\
    \        return result", "        if (n == 0) 1 else {\n            val r = modp(n\
    \ / 2, p)\n            var result = r * r % p\n            if (n % 2 == 1) result\
    \ = result * 2 % p\n            result\n        }", "        def modp(n : Long,\
    \ p : Long, acc : Long) : Long = {\n            if (n == 0) acc\n            else\
    \ {\n                if (n % 2 == 0) modp(n / 2, p, acc * acc % p)\n         \
    \       else modp(n / 2, p, acc * acc % p) * acc % p\n            }\n        }\n\
    \        modp(n, p, 1)", "        if (n == 0) 1\n        else {\n            val\
    \ y = modp(n / 2, p)\n            val y2 = (y * y) % p\n            if (n % 2\
    \ == 0) y2\n            else (y2 * 2) % p\n        }", "        var result = 1.toLong\n\
    \        var pow = n.toLong\n        var multiply = 2.toLong\n        while (pow\
    \ > 0) {\n            if (pow % 2 == 1) {\n                result = (result *\
    \ multiply) % p\n            }\n            pow = pow / 2\n            multiply\
    \ = (multiply * multiply) % p\n        }\n        return result", "        val\
    \ res = modp2(n, p)\n        if (res >= 0) return res else return res + p", " \
    \       var pow = 1L\n        var exp = n\n        while (exp > 0) {\n       \
    \     if (exp % 2 == 1) pow = (pow * 2) % p\n            exp /= 2\n        }\n\
    \        pow", "        if (n == 0) return 1\n        if (n % 2 == 0) {\n    \
    \        val r = modp(n / 2, p)\n            return (r * r) % p\n        }\n \
    \       return (modp(n - 1, p) * n) % p", '        return if (n == 0) 1 else modp(n
    / 2, p) * (if (n % 2 == 0) 1 else p) % p', "      var res = 1L\n      for (i <-\
    \ 0 until n.toInt) res = (res * 2) % p\n      res", "        var x = n\n     \
    \   var x2 = x * x\n        var x3 = x2 * x\n        var x6 = x3 * x3\n      \
    \  var x12 = x6 * x6\n        var x15 = x12 * x3\n        var x30 = x15 * x15\n\
    \        var x60 = x30 * x30\n        var x120 = x60 * x60\n        var x240 =\
    \ x120 * x120\n        var x255 = x240 * x15\n        var x510 = x255 * x255\n\
    \        var x1020 = x510 * x510\n        var x2040 = x1020 * x1020\n        var\
    \ x4080 = x2040 * x2040\n        var x8160 = x4080 * x4080\n        var x16320\
    \ = x8160 * x8160\n        var x32640 = x16320 * x16320\n        var x65280 =\
    \ x32640 * x32640\n        var x131070 = x65280 * x65510\n        var x262140\
    \ = x131070 * x131070\n        var x524280 = x262140 * x262140\n        var x1048560\
    \ = x524280 * x524280\n        var x2097120 = x1048560 * x1048560\n        var\
    \ x4194240 = x2097120 * x2097120\n        var x8388480 = x4194240 * x4194240\n\
    \        var x16776960 = x8388480 * x8388480\n        var x33553920 = x16776960\
    \ * x16776960\n        var x67107840 = x33553920 * x33553920\n        var x134215680\
    \ = x67107840 * x67107840\n        var x268431120 = x134215680 * x134215680\n\
    \        var x536862080 = x268431120 * x268431120\n        var x1073724160 = x536862080\
    \ * x536862080\n        var x2147448160 = x1073724160 * x1073724160\n        var\
    \ x4294896160 = x2147448160 * x2147448160", "        var r = 1L\n        for (i\
    \ <- 0 until n.toInt) {\n            r = (r * 2) % p\n        }\n        return\
    \ r", "        val bigN = BigInt(n)\n        val bigP = BigInt(p)\n        val\
    \ bigResult = bigN.modPow(BigInt(2), bigP)\n        return bigResult.toLong",
  "        var r = 1L\n        var b = 2L\n        var e = n\n        while (e > 0)\
    \ {\n            if (e % 2 == 1) {\n                r = (r * b) % p\n        \
    \    }\n            e = e / 2\n            b = (b * b) % p\n        }\n      \
    \  return r", "        if (n == 0) return 1\n        val m = modp(n / 2, p)\n\
    \        val m2 = (m * m) % p\n        if (n % 2 == 0) m2 else (m2 * 2) % p",
  "        var f = 1L\n        var b = 2L\n        var m = n\n        while (m > 0)\
    \ {\n            if ((m & 1) == 1) {\n                f = f * b % p\n        \
    \    }\n            b = b * b % p\n            m = m >> 1\n        }\n       \
    \ f", "        var a = 1L\n        var b = 2L\n        var i = n\n        while\
    \ (i > 0) {\n            if (i % 2 == 1) {\n                a = (a * b) % p\n\
    \            }\n            b = (b * b) % p\n            i /= 2\n        }\n \
    \       a", "        var result = 1L\n        var x = n\n        var r = p\n \
    \       while (x > 0) {\n            if ((x & 1) == 1) {\n                result\
    \ = (result * n) % p\n            }\n            x >>= 1\n            n = (n *\
    \ n) % p\n        }\n        result"]
stop_tokens:
- "\n    }\n"
