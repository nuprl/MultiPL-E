language: scala
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        sentence.split(\"\
    \ \").filter(x => prime(x.length)).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp10686um3.scala:19:40 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        sentence.split(\e[31m\" \"\e[0m).filter(\e[36mx\e\
    [0m => prime(x.length)).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                                    ^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                           Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val l = sentence.split(\"\
    \ \").filter(w => isPrime(w.length)).mkString(\" \")\n        if (l.isEmpty) \"\
    \" else l\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9z0qy_1g.scala:19:48 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(\e[36mw\e[0m => isPrime(w.length)).mkString(\e[31m\" \"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        def f(s : String)\
    \ : Boolean = {\n            val l = s.length\n            if (l < 2) return false\n\
    \            for (i <- 2 to l - 1) if (l % i == 0) return false\n            true\n\
    \        }\n        val words = sentence.split(\" \")\n        val ans = new StringBuilder\n\
    \        for (w <- words) if (f(w)) ans.append(w + \" \")\n        ans.result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd_mtl9zx.scala:31)\n\tat Problem.main(tmpd_mtl9zx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        return sentence.split(\"\
    \ \").filter(x => isPrime(x.length)).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx_vc25f2.scala:19:47 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mreturn\e[0m sentence.split(\e[31m\" \"\e\
    [0m).filter(\e[36mx\e[0m => isPrime(x.length)).mkString(\e[31m\" \"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                               ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                               Not found: isPrime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val candidates\
    \ = sentence.split(\" \").filter {\n            word => word.length > 1 && word.length\
    \ % 2 != 0 && word.filter(_ % 2 == 0).length == 0\n        }\n        candidates.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq0hvflgh.scala:25)\n\tat Problem.main(tmpq0hvflgh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        words.filter(w => isPrime(w.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpklm8332f.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        words.filter(\e[36mw\e[0m => isPrime(w.length)).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: isPrime\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        def isPrime(n\
    \ : Int) : Boolean = n match {\n            case 0 | 1 => false\n            case\
    \ _ => {\n                for (i <- 2 to sqrt(n).toInt) if (n % i == 0) return\
    \ false\n                true\n            }\n        }\n        val words = sentence.split(\"\
    \ \")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length)\
    \ if (isPrime(words(i).length)) sb.append(words(i) + \" \")\n        sb.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val strs = sentence.split(\"\
    \ \")\n        var res = \"\"\n        for (str <- strs) {\n            if (isPrime(str.length))\
    \ {\n                res += (str + \" \")\n            }\n        }\n        return\
    \ res.substring(0, res.length - 1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpitzzs5hy.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (isPrime(str.length)) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val ps = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97, 101)\n        val words = sentence.split(\" \")\n        var\
    \ primes = List[String]()\n        for (word <- words) {\n            if (ps.contains(word.length))\
    \ {\n                primes = word :: primes\n            }\n        }\n     \
    \   primes.reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        var newSentence = new StringBuilder\n       \
    \ var isFirst = true\n        for (word <- words) {\n            if (isPrime(word.length))\
    \ {\n                if (isFirst) {\n                    newSentence.append(word)\n\
    \                    isFirst = false\n                } else {\n             \
    \       newSentence.append(\" \" + word)\n                }\n            }\n \
    \       }\n        newSentence.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzqkbqstb.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (isPrime(word.length)) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val buf = new StringBuilder\n        for (i <-\
    \ 0 until words.length) {\n            if (isPrime(words(i).length)) {\n     \
    \           buf ++= words(i)\n                buf += ' '\n            }\n    \
    \    }\n        if (buf.length != 0) buf.deleteCharAt(buf.length - 1)\n      \
    \  buf.toString\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp51cb58gj.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (isPrime(words(i).length))\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        var buffer =\
    \ ListBuffer[String]()\n        for (word <- sentence.split(\" \")) {\n      \
    \      if (word.length > 1 && word.length % 2 != 0 && isPrime(word.length)) {\n\
    \                buffer += word\n            }\n        }\n        return buffer.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1331mnf4.scala:21:59 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (word.length > \e[31m1\e[0m\
    \ && word.length % \e[31m2\e[0m != \e[31m0\e[0m && isPrime(word.length)) {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                                              \
    \        Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        if (sentence.length\
    \ <= 2) return \"\"\n        sentence.split(\" \").filter(s => !s.isEmpty && isPrime(s.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2hm4glvh.scala:20:54 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        sentence.split(\e[31m\" \"\e[0m).filter(\e[36ms\e\
    [0m => !s.isEmpty && isPrime(s.length)).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                      Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n      val words = sentence.split(\"\
    \ \")\n      words.filter(w => isPrime(w.length)).mkString(\" \")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpio3t5gzu.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      words.filter(\e[36mw\e[0m => isPrime(w.length)).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659820888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        var result =\
    \ \"\"\n        var words = sentence.split(\" \")\n        for (i <- words.indices)\
    \ {\n            val length = words(i).length\n            if (isPrime(length))\
    \ result += words(i) + \" \"\n        }\n        result.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt3ssydnj.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (isPrime(length)) result +=\
    \ words(i) + \e[31m\" \"\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val primes =\
    \ new HashSet[Int]\n        def isPrime(i : Int) : Boolean = {\n            if\
    \ (primes.contains(i)) return true\n            if (i == 1) return false\n   \
    \         for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) return\
    \ false\n            }\n            primes.add(i)\n            true\n        }\n\
    \        val words = sentence.split(\" \")\n        return words.filter(word =>\
    \ isPrime(word.length)).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val result =\
    \ for {\n            word <- sentence.split(\" \")\n            if isPrime(word.length)\n\
    \        } yield word\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpro86tg_n.scala:21:15 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m isPrime(word.length)\n\e[31m\e\
    [31m   |\e[0m               ^^^^^^^\e[0m\n\e[31m   |\e[0m               Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        def isPrime(n\
    \ : Int) : Boolean = {\n            if (n <= 1) return false\n            for\
    \ (i <- 2 to sqrt(n).toInt if n % i == 0) return false\n            true\n   \
    \     }\n        sentence.split(\" \").filter(x => isPrime(x.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        var result =\
    \ new StringBuilder()\n        var words = sentence.split(\" \")\n        val\
    \ primes = Set(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString().trim()\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val isPrime\
    \ = Array.fill(101)(true)\n        for (i <- 2 to sqrt(100).toInt) if (isPrime(i))\
    \ (i*i to 100 by i).foreach(x => isPrime(x) = false)\n        sentence.split(\"\
    \ \").filter(x => isPrime(x.length)).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6m7_a5fs.scala:24)\n\tat Problem.main(tmp6m7_a5fs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
