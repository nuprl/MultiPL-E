name: HumanEval_18_how_many_times
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n    //\
  \ >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa', 'aa')\n\
  \    // 3\n    def howManyTimes(string : String, substring : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"\
  ), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
  \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
  john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
completions: ["        val matcher = substring.r\n        matcher.findAllMatchIn(string).map(_.matched).length",
  "        def count(count : Long, string : String) : Long = {\n            if (string.length\
    \ < substring.length) {\n                count\n            } else {\n       \
    \         val matches = string.take(substring.length) == substring\n         \
    \       count(count + (if (matches) 1 else 0), string.drop(1))\n            }\n\
    \        }\n        count(0, string)", "        var count = 0\n        for (i\
    \ <- 0 to string.length - substring.length) {\n            var temp = string.substring(i,\
    \ i + substring.length)\n            if (temp == substring) count += 1\n     \
    \   }\n        count", "        var count = 0\n        val n = string.length\n\
    \        val m = substring.length\n        for (i <- 0 to n - m) {\n         \
    \   if (string.substring(i, i + m) == substring) count += 1\n        }\n     \
    \   count", "        // Find the first occurance of the substring\n        var\
    \ first = string.indexOf(substring)\n        if (first == -1) return 0\n     \
    \   // Count it\n        var count = 1\n        var i = first + substring.length\n\
    \        while (i < string.length) {\n            if (string.indexOf(substring,\
    \ i) == i) {\n                count += 1\n                i += substring.length\n\
    \            }\n            else i += 1\n        }\n        return count", " \
    \       var count = 0L\n        var stringIndex = 0\n        var substringIndex\
    \ = 0\n        while (stringIndex < string.length) {\n            if (string(stringIndex)\
    \ == substring(substringIndex)) {\n                substringIndex += 1\n     \
    \           if (substringIndex == substring.length) {\n                    count\
    \ += 1\n                    substringIndex = 0\n                }\n          \
    \  } else substringIndex = 0\n            stringIndex += 1\n        }\n      \
    \  count", '        return string.split(substring).length - 1', "        val substringLen\
    \ = substring.length\n        if (substringLen == 0) return 0\n        var i =\
    \ 0\n        var count = 0\n        while (i <= string.length - substringLen)\
    \ {\n            if (string.substring(i, i + substringLen) == substring) {\n \
    \               count += 1\n                i += substringLen\n            }\n\
    \            else i += 1\n        }\n        count", "        val indices = string.indicesOf(substring)\n\
    \        return indices.map(index => string.length - index).sum", "      var c\
    \ = 0\n      var count = 0\n      while (c != -1) {\n        c = string.indexOf(substring,\
    \ c)\n        if (c != -1) {\n          count += 1\n          c += 1\n       \
    \ }\n      }\n      count", "        var s = string\n        var count = 0\n \
    \       while (s.length >= substring.length) {\n            if (s.startsWith(substring))\
    \ {\n                count += 1\n                s = s.substring(substring.length)\n\
    \            } else {\n                s = s.substring(1)\n            }\n   \
    \     }\n        count", "        val count = new MutableList[Int]\n        var\
    \ pos = 0\n        while (pos != -1) {\n            pos = string.indexOf(substring,\
    \ pos)\n            if (pos != -1) {\n                count += pos\n         \
    \       pos += 1\n            }\n        }\n        count.length", "        var\
    \ count = 0\n        for (i <- 0 to string.length - substring.length) {\n    \
    \        if (string.substring(i, i + substring.length) == substring) count +=\
    \ 1\n        }\n        count", "        var count = 0\n        var buffer = new\
    \ StringBuilder\n        for (i <- 0 until string.length) {\n            if (string(i)\
    \ == substring(0)) {\n                if (buffer.isEmpty) buffer += string(i)\n\
    \                else buffer.clear\n                buffer += string(i)\n    \
    \            var k = 1\n                while (k < substring.length && i + k <\
    \ string.length && string(i + k) == substring(k)) {\n                    buffer\
    \ += string(i + k)\n                    k += 1\n                }\n          \
    \      if (buffer.toString == substring) count += 1\n            }\n        }\n\
    \        count", "        val n = string.length\n        val m = substring.length\n\
    \        var i = 0\n        var j = 0\n        var count = 0\n        while (i\
    \ <= n - m) {\n            while (j < m && string(i + j) == substring(j)) j +=\
    \ 1\n            if (j == m) {\n                count += 1\n                i\
    \ += 1\n            } else {\n                i += max(1, j - Array.range(0, m).lastIndexWhere(k\
    \ => k + 1 < m && substring(k) == substring(k + 1)))\n            }\n        \
    \    j = 0\n        }\n        count", "        if (string.isEmpty || substring.isEmpty)\
    \ return 0\n        // if (string.length == substring.length) return if (string\
    \ == substring) 1 else 0\n        if (string.length == substring.length) return\
    \ if (string.contains(substring)) 1 else 0\n        // val n = string.length /\
    \ substring.length\n        val n = string.length - substring.length + 1\n   \
    \     (0 to n - 1).map(i => if (string.substring(i, i + substring.length) == substring)\
    \ 1 else 0).sum", "        var result = 0L\n        var index = 0\n        while(index\
    \ < string.length) {\n            index = string.indexOf(substring, index)\n \
    \           if(index < 0) return result\n            result += 1\n           \
    \ index += 1\n        }\n        return result", "        var count = 0\n    \
    \    for (i <- 0 to string.length - substring.length) if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        count", "        if\
    \ (string.length < substring.length) return 0\n        var count = 0\n       \
    \ for (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \    }\n        }\n        return count", "        val pattern = substring.toCharArray()\n\
    \        val text = string.toCharArray()\n        val n = pattern.length\n   \
    \     val m = text.length\n        var count = 0\n        for (i <- 0 to m - n)\
    \ {\n            var k = 0\n            for (j <- i to i + n - 1) {\n        \
    \        if (text(j) == pattern(k)) {\n                    k += 1\n          \
    \      } else {\n                    k = 0\n                    break\n      \
    \          }\n            }\n            if (k == n) {\n                count\
    \ += 1\n            }\n        }\n        count"]
stop_tokens:
- "\n    }\n"
