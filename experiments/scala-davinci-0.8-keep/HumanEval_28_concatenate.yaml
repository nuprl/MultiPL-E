name: HumanEval_28_concatenate
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
  \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
  \ : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
  \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\"\
  )));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
  xyzwk\")));\n    }\n\n}\n"
completions: ['        strings.foldLeft("")((accum, string) => accum + string)', '        return
    strings.fold("")((x, y) => x + y)', '        strings.mkString', '      strings.fold("")(_
    + _)', '        strings.foldLeft("")(_ + _)', "        var concat = \"\"\n   \
    \     for (string <- strings) {\n            concat += string\n        }\n   \
    \     concat", '        strings.foldLeft("")((a, b) => a + b)', "      if (strings.isEmpty)\
    \ \"\"\n      else if (strings.tail.isEmpty) strings.head\n      else strings.head\
    \ + concatenate(strings.tail)", "        var str : String = \"\"\n        for\
    \ (string <- strings) str += string\n        return str", "        var s = \"\"\
    \n        for (str <- strings) {\n            s += str\n        }\n        return\
    \ s", "        var result = \"\"\n        for (string <- strings) result += string\n\
    \        result", "        if (strings.isEmpty) \"\"\n        else {\n       \
    \     val sb = new StringBuilder\n            for (s <- strings) sb.append(s)\n\
    \            sb.toString\n        }", '        strings.mkString', "        if\
    \ (strings.isEmpty)\n            \"\"\n        else\n            strings.head\
    \ + concatenate(strings.tail)", '        strings.foldLeft("")(_ + _)', "     \
    \   var result = \"\"\n        for (s <- strings) result += s\n        result",
  "        // Fill in here!\n        var result = \"\"\n        for (s <- strings)\
    \ {\n            result += s\n        }\n        result", '        strings.foldLeft("")((a,
    b) => a + b)', "        var concatenated : String = \"\"\n        strings.foreach(s\
    \ => concatenated += s)\n        concatenated", '        strings.foldLeft("")(_
    + _)']
stop_tokens:
- "\n    }\n"
