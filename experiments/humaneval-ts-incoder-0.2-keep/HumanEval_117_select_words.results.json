{
  "language": "ts",
  "name": "HumanEval_117_select_words",
  "results": [
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && n > 0) {\n\t\tif (s[index] === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \".\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"?\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"!\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"-\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"_\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"/\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"(\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \")\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \":\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"[\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"]\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"{\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"}\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"<\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \">\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"|\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"\\\\\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"'\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"\\\"\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"%\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"&\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"$\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"@\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"~\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"`\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"=\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"*\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"+\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"-\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"^\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmomu126o.ts(141,1): error TS1005: ']' expected.\n../../../../tmp/tmpmomu126o.ts(156,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result = [];\n    let i = 0;\n    while (i < s.length) {\n        let word = s.substr(i, n);\n        if (word.length == n) {\n            result.push(word);\n            i += n;\n        }\n        else {\n            i++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpbs1nrl5r.js:30:12)\n    at Object.<anonymous> (/tmp/tmpbs1nrl5r.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char.match(/[aeiou]/)) {\n      result.push(char);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpf_5tp75y.js:25:12)\n    at Object.<anonymous> (/tmp/tmpf_5tp75y.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334283
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  let index = 0;\n  while (index < s.length && n > 0) {\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"y\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"h\" || s[index] === \"e\" || s[index] === \"l\" || s[index] === \"l\" || s[index] === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"n\" || s[index] === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"y\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"h\" || s[index] === \"e\" || s[index] === \"l\" || s[index] === \"l\" || s[index] === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"n\" || s[index] === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"y\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"h\" || s[index] === \"e\" || s[index] === \"l\" || s[index] === \"l\" || s[index] === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"n\" || s[index] === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"y\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"h\" || s[index] === \"e\" || s[index] === \"l\" || s[index] === \"l\" || s[index] === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjh556st_.ts(84,24): error TS1002: Unterminated string literal.\n../../../../tmp/tmpjh556st_.ts(85,1): error TS1005: ')' expected.\n../../../../tmp/tmpjh556st_.ts(100,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let word = s.substr(i, n);\n        if (word.length == n) {\n            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzdsdwoaj.js:25:12)\n    at Object.<anonymous> (/tmp/tmpzdsdwoaj.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit",
      "stdout": "",
      "timestamp": 1660334283
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    let word = s[i];\n    for (let j = 0; j < word.length; j++) {\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5iu56xeb.ts(145,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet i = 0;\n\twhile (i < s.length) {\n\t\tlet j = 0;\n\t\twhile (j < n) {\n\t\t\tif (s[i] !== s[j]) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (j === n) {\n\t\t\tresult.push(s.substring(i, i + n));\n\t\t\ti += n;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpwfzxsr8y.js:36:12)\n    at Object.<anonymous> (/tmp/tmpwfzxsr8y.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length && count < n) {\n        if (s[index] === \" \") {\n            count++;\n        }\n        else {\n            words.push(s[index]);\n            count++;\n        }\n        index++;\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n  'r',\n  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp1o6gpqt1.js:31:12)\n    at Object.<anonymous> (/tmp/tmp1o6gpqt1.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a', 'r', 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334283
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length === 0) {\n        return result;\n    }\n    \n    let i = 0;\n    while (i < s.length) {\n        if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp5m7hsk_.ts(140,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334283
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length && n > 0) {\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpstmxvtb2.ts(133,9): error TS1005: ')' expected.\n../../../../tmp/tmpstmxvtb2.ts(148,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length && count < n) {\n        if (s[index] === 'a' || s[index] === 'e' || s[index] === 'i' || s[index] === 'o' || s[index] === 'u') {\n            words.push(s[index]);\n            count++;\n        }\n        index++;\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'i'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpkr7ohu4w.js:28:12)\n    at Object.<anonymous> (/tmp/tmpkr7ohu4w.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'i' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result = [];\n  let i = 0;\n  while (i < s.length) {\n    let word = s.substr(i, n);\n    if (word.length == n) {\n      result.push(word);\n      i += n;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpx58a7hfh.js:30:12)\n    at Object.<anonymous> (/tmp/tmpx58a7hfh.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334283
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char = s[index];\n\t\tif (char === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"i\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"o\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"i\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"o\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"i\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"o\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzg564o2e.ts(158,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\twords.push(word);\n\t\t\tindex += n;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp211vvz1m.js:30:12)\n    at Object.<anonymous> (/tmp/tmp211vvz1m.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    let letter = s[i];\n    let count = 0;\n    for (let j = 0; j < letter.length; j++) {\n      if (letter[j] === \"a\" || letter[j] === \"e\" || letter[j] === \"i\" || letter[j] === \"o\" || letter[j] === \"u\") {\n        count++;\n      }\n    }\n    if (count === n) {\n      words.push(letter);\n    }\n  }\n  \n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpyifluve0.js:31:12)\n    at Object.<anonymous> (/tmp/tmpyifluve0.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s == \"\") {\n    return [];\n  }\n  let words: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char.match(/[aeiou]/i)) {\n      continue;\n    }\n    let count = 0;\n    for (let j = 0; j < s.length; j++) {\n      if (s[j] == char) {\n        count++;\n      }\n    }\n    if (count == n) {\n      words.push(char);\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' ',\n  ' ',\n  ' ',\n  ' '\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzcn2quc6.js:37:12)\n    at Object.<anonymous> (/tmp/tmpzcn2quc6.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ', ' ', ' ', ' ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334283
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s == \"\") {\n    return [];\n  }\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length && n > 0) {\n    if (s[index] === \" \") {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index] === \" \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvl3acgya.ts(76,24): error TS1002: Unterminated string literal.\n../../../../tmp/tmpvl3acgya.ts(77,1): error TS1005: ')' expected.\n../../../../tmp/tmpvl3acgya.ts(92,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  if (s.length === 0) {\n    return result;\n  }\n  let words: string[] = s.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length >= n) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'little',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6kb2agt8.js:29:12)\n    at Object.<anonymous> (/tmp/tmp6kb2agt8.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', 'little', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length && n > 0) {\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n            result.push(s[index]);\n            index++;\n            n--;\n        }\n        index++;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpoovjn_cz.js:31:12)\n    at Object.<anonymous> (/tmp/tmpoovjn_cz.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  \n  if (s.length === 0) {\n    return words;\n  }\n  \n  let word = \"\";\n  let count = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s[i] !== \" \") {\n      word += s[i];\n    } else {\n      if (count === n) {\n        words.push(word);\n        word = \"\";\n        count = 0;\n      }\n      \n      count++;\n    }\n  }\n  \n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6syzegih.js:37:12)\n    at Object.<anonymous> (/tmp/tmp6syzegih.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char.match(/[aeiou]/)) {\n      words.push(char);\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_wg1mlvf.js:25:12)\n    at Object.<anonymous> (/tmp/tmp_wg1mlvf.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char === ' ') {\n      continue;\n    }\n    \n    for (let j = 0; j < n; j++) {\n      if (char.match(/[aeiou]/i)) {\n        words.push(char);\n        break;\n      }\n    }\n  }\n  \n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpk5s9cigv.js:31:12)\n    at Object.<anonymous> (/tmp/tmpk5s9cigv.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length && count < n) {\n        if (s[index] === ' ') {\n            count++;\n        } else {\n            words.push(s[index]);\n            count++;\n        }\n        index++;\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n  'r',\n  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpfxo9zm8e.js:31:12)\n    at Object.<anonymous> (/tmp/tmpfxo9zm8e.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a', 'r', 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  \n  if (s.length === 0) {\n    return result;\n  }\n  \n  let words: string[] = s.split(' ');\n  \n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    \n    if (word.length === n) {\n      result.push(word);\n    }\n  }\n  \n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6_aouzqr.js:29:12)\n    at Object.<anonymous> (/tmp/tmp6_aouzqr.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334287
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  if (s.length === 0) {\n    return result;\n  }\n  let index = 0;\n  while (index < s.length) {\n    let char = s[index];\n    if (char === ' ') {\n      index++;\n      continue;\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      index++;\n      continue;\n    }\n    if (char === 'y') {\n      index++;\n      continue;\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      index++;\n      continue;\n    }\n    if (char === 'y') {\n      index++;\n      continue;\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      index++;\n      continue;\n    }\n    if (char === 'y') {\n      index++;\n      continue;\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      index++;\n      continue;\n    }\n    if (char === 'y') {\n      index++;\n      continue;\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      index++;\n      continue;\n    }\n    if (char === 'y') {\n      index++;\n      continue;\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      index++;\n      continue;\n    }\n    if (char === 'y') {\n      index++;\n      continue;\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      index++;\n      continue;\n    }\n    if (char === 'y') {\n      index++;\n      continue;\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      index++;\n      continue;\n    }\n    if (char === 'y') {\n      index++;\n      continue;\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      index++;\n      continue;\n    }\n    if (char === 'y') {\n      index++;\n      continue;\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      index++;\n      continue;\n    }\n    if (char === 'y') {\n      index++;\n      continue;\n    }\n    if (char === 'a' || char === 'e' || char\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp09ftgd3w.ts(105,1): error TS1005: ')' expected.\n../../../../tmp/tmp09ftgd3w.ts(120,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index+n);\n        if (word.length == n) {\n            result.push(word);\n            index += n;\n        }\n        else {\n            index++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpv9hk9eo4.js:30:12)\n    at Object.<anonymous> (/tmp/tmpv9hk9eo4.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result = [];\n  for (let i = 0; i < s.length; i += 1) {\n    let word = s[i];\n    for (let j = 0; j < n; j += 1) {\n      if (word.includes('a')) {\n        result.push(word);\n        break;\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp34kajtyf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp34kajtyf.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\tlet count = 0;\n\twhile (index < s.length && count < n) {\n\t\tlet char = s[index];\n\t\tif (char === \" \") {\n\t\t\tcount++;\n\t\t}\n\t\telse {\n\t\t\tcount = 1;\n\t\t}\n\t\tif (count === n) {\n\t\t\tresult.push(s[index]);\n\t\t}\n\t\tindex++;\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp2pou0mdk.js:34:12)\n    at Object.<anonymous> (/tmp/tmp2pou0mdk.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334287
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length === 0) {\n    return [];\n  }\n  const result: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    const char = s[index];\n    if (char === ' ') {\n      index++;\n      continue;\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      index++;\n      continue;\n    }\n    if (char === 'y') {\n      index++;\n      continue;\n    }\n    if (char === 'h') {\n      index++;\n      continue;\n    }\n    if (char === 'l' || char === 'm' || char === 'n' || char === 'p' || char === 's' || char === 't') {\n      index++;\n      continue;\n    }\n    if (char === 'b' || char === 'c' || char === 'd' || char === 'f' || char === 'g' || char === 'j' || char === 'k' || char === 'l' || char === 'm' || char === 'n' || char === 'p' || char === 'q' || char === 'r' || char === 'v' || char === 'w' || char === 'x' || char === 'y') {\n      index++;\n      continue;\n    }\n    if (char === 'z') {\n      index++;\n      continue;\n    }\n    if (char === 'x') {\n      index++;\n      continue;\n    }\n    if (char === 'z') {\n      index++;\n      continue;\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      index++;\n      continue;\n    }\n    if (char === 'y') {\n      index++;\n      continue;\n    }\n    if (char === 'h') {\n      index++;\n      continue;\n    }\n    if (char === 'l' || char === 'm' || char === 'n' || char === 'p' || char === 's' || char === 't') {\n      index++;\n      continue;\n    }\n    if (char === 'b' || char === 'c' || char === 'd' || char === 'f' || char === 'g' || char === 'j' || char === 'k' || char === 'l' || char === 'm' || char === 'n' || char === 'p' || char === 'q' || char === 'r' || char === 'v' || char === 'w' || char === 'x' || char === 'y') {\n      index++;\n      continue;\n    }\n    if (char === 'z') {\n      index++;\n      continue;\n    }\n    if (char === 'x') {\n      index++;\n      continue;\n    }\n    if (char === 'z') {\n      index++;\n      continue;\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      index++;\n      continue;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf45evxf0.ts(107,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334287
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char = s[index];\n    if (char === \" \") {\n      index++;\n      continue;\n    }\n    if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"n\") {\n      index++;\n      continue;\n    }\n    if (char === \"t\") {\n      index++;\n      continue;\n    }\n    if (char === \"h\") {\n      index++;\n      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n    }\n    if (char === \"o\") {\n      index++;\n      continue;\n    }\n    if (char === \"s\") {\n      index++;\n      continue;\n    }\n    if (char === \"e\") {\n      index++;\n      continue;\n    }\n    if (char === \"a\") {\n      index++;\n      continue;\n    }\n    if (char === \"m\") {\n      index++;\n      continue;\n    }\n    if (char === \"r\") {\n      index++;\n      continue;\n    }\n    if (char === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"s\") {\n      index++;\n      continue;\n    }\n    if (char === \"s\") {\n      index++;\n      continue;\n    }\n    if (char === \"a\") {\n      index++;\n      continue;\n    }\n    if (char === \"m\") {\n      index++;\n      continue;\n    }\n    if (char === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"a\") {\n      index++;\n      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n    }\n    if (char === \"e\") {\n      index++;\n      continue;\n    }\n    if (char === \"a\") {\n      index++;\n      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n    }\n    if (char === \"o\") {\n      index++;\n      continue;\n    }\n    if (char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char === \"u\") {\n      index++;\n      \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppih71ret.ts(159,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334287
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == ' ') {\n      continue;\n    }\n    let consonants = count_consonants(s.charAt(i));\n    if (consonants == n) {\n      words.push(s.substr(0, i));\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsyz2od4s.ts(18,22): error TS2304: Cannot find name 'count_consonants'.\n",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length && count < n) {\n        if (s[index] === ' ') {\n            count++;\n        }\n        else {\n            words.push(s[index]);\n            count++;\n        }\n        index++;\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n  'r',\n  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_st3z9hv.js:31:12)\n    at Object.<anonymous> (/tmp/tmp_st3z9hv.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a', 'r', 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s == \"\") {\n        return result;\n    }\n    \n    let count = 0;\n    let index = 0;\n    \n    while (index < s.length && count < n) {\n        if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n            count++;\n        }\n        index++;\n    }\n    \n    if (count === n) {\n        result.push(s.slice(index));\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'ttle lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzi3i_fcs.js:33:12)\n    at Object.<anonymous> (/tmp/tmpzi3i_fcs.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'ttle lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334287
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && n > 0) {\n\t\tif (s[index] === \" \") {\n\t\t\tindex++;\n\t\t}\n\t\telse if (s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n\t\t\tindex++;\n\t\t}\n\t\telse if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n\t\t\tindex++;\n\t\t}\n\t\telse if (s[index] === \"y\" || s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n\t\t\tindex++;\n\t\t}\n\t\telse if (s[index] === \"h\" || s[index] === \"e\" || s[index] === \"l\" || s[index] === \"o\" || s[index] === \"u\") {\n\t\t\tindex++;\n\t\t}\n\t\telse if (s[index] === \"r\" || s[index] === \"e\" || s[index] === \"l\" || s[index] === \"l\" || s[index] === \"o\" || s[index] === \"u\") {\n\t\t\tindex++;\n\t\t}\n\t\telse if (s[index] === \"n\" || s[index] === \"a\" || s[index] === \"m\" || s[index] === \"a\" || s[index] === \"y\" || s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n\t\t\tindex++;\n\t\t}\n\t\telse if (s[index] === \"s\" || s[index] === \"a\" || s[index] === \"m\" || s[index] === \"a\" || s[index] === \"y\" || s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n\t\t\tindex++;\n\t\t}\n\t\telse if (s[index] === \"t\" || s[index] === \"a\" || s[index] === \"m\" || s[index] === \"a\" || s[index] === \"y\" || s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n\t\t\tindex++;\n\t\t}\n\t\telse if (s[index] === \"c\" || s[index] === \"h\" || s[index] === \"a\" || s[index] === \"l\" || s[index] === \"l\" || s[index] === \"o\" || s[index] === \"u\") {\n\t\t\tindex++;\n\t\t}\n\t\telse if (s[index] === \"h\" || s[index] === \"e\" || s[index] === \"l\" || s[index] === \"o\" || s[index] === \"u\") {\n\t\t\tindex++;\n\t\t}\n\t\telse if (s[index] === \"r\" || s[index] === \"e\" || s[index] === \"l\" || s[index] === \"l\" || s[index] === \"o\" || s[index] === \"u\") {\n\t\t\tindex++;\n\t\t}\n\t\telse if (s[index] === \"n\" || s[index] === \"a\" || s[index] === \"m\" || \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo319z5_9.ts(53,9): error TS1005: ')' expected.\n../../../../tmp/tmpo319z5_9.ts(68,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (s.length == 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let index = 0;\n    let last = 0;\n    while (index < s.length) {\n        let char = s[index];\n        if (char === ' ') {\n            words.push(s.substring(last, index));\n            last = index + 1;\n        }\n        index++;\n    }\n    words.push(s.substring(last, s.length));\n    return words.filter((word) => word.length == n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp1gynrsq7.js:33:12)\n    at Object.<anonymous> (/tmp/tmp1gynrsq7.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (s == \"\") {\n        return [];\n    }\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let char = s[index];\n        if (char === \" \") {\n            words.push(s.slice(index));\n            index++;\n        }\n        else if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n            let word = \"\";\n            while (index < s.length && s[index] !== \"a\" && s[index] !== \"e\" && s[index] !== \"i\" && s[index] !== \"o\" && s[index] !== \"u\") {\n                word += s[index];\n                index++;\n            }\n            if (word.length == n) {\n                words.push(word);\n            }\n        }\n        index++;\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' had a little lamb',\n  ' a little lamb',\n  ' little lamb',\n  ' lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp0t7d08br.js:41:12)\n    at Object.<anonymous> (/tmp/tmp0t7d08br.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' had a little lamb', ' a little lamb', ' little lamb', ' lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let i = 0;\n  while (i < s.length) {\n    let word = s.substring(i, i + n);\n    if (word.length == n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp3zxo8zxs.js:27:12)\n    at Object.<anonymous> (/tmp/tmp3zxo8zxs.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\tlet count = 0;\n\twhile (index < s.length) {\n\t\tif (s[index] === \" \") {\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t\tif (count === n) {\n\t\t\t\tresult.push(s.substr(index, n - 1));\n\t\t\t\tindex += n - 1;\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t} else {\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6q2lr3y2.js:36:12)\n    at Object.<anonymous> (/tmp/tmp6q2lr3y2.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s == \"\") {\n    return [];\n  }\n  let words: string[] = [];\n  let lastChar = s[0];\n  let lastCount = 0;\n  for (let i = 1; i < s.length; i++) {\n    if (s[i] !== lastChar) {\n      if (lastCount === n) {\n        words.push(s.substr(0, i));\n      }\n      lastChar = s[i];\n      lastCount = 0;\n    } else {\n      lastCount++;\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp31m5fybw.js:36:12)\n    at Object.<anonymous> (/tmp/tmp31m5fybw.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  if (s.length === 0) {\n    return result;\n  }\n  let lastLetter = s[0];\n  let lastCount = 0;\n  for (let i = 1; i < s.length; i++) {\n    if (s[i] !== lastLetter) {\n      if (lastCount === n) {\n        result.push(lastLetter);\n      }\n      lastCount = 1;\n      lastLetter = s[i];\n    } else {\n      lastCount++;\n    }\n  }\n  if (lastCount === n) {\n    result.push(lastLetter);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpstko6_og.js:39:12)\n    at Object.<anonymous> (/tmp/tmpstko6_og.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char = s[index];\n    if (char === \" \" || char === \"\\n\") {\n      words.push(s.substr(index, n - 1));\n      index += n - 1;\n    } else {\n      words.push(char);\n      index++;\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n  'r',\n  'y',\n  ' ha',\n  'd',\n  ' a ',\n  'l',\n  'i',\n  't',\n  't',\n  'l',\n  'e',\n  ' la',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp69onqljz.js:31:12)\n    at Object.<anonymous> (/tmp/tmp69onqljz.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',   'a',   'r',   'y',\n    ' ha', 'd',   ' a ', 'l',\n    'i',   't',   't',   'l',\n    'e',   ' la', 'm',   'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'",
      "stdout": "",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let i = 0;\n    while (i < s.length) {\n        let word = s.substr(i, n);\n        if (word.length == n) {\n            result.push(word);\n            i += n;\n        } else {\n            i += word.length;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpw_w8ltkj.js:30:12)\n    at Object.<anonymous> (/tmp/tmpw_w8ltkj.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334287
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s == \"\") {\n    return [];\n  }\n  const words: string[] = [];\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s[i];\n    if (char === \" \") {\n      continue;\n    }\n    if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n      continue;\n    }\n    if (char === \"y\") {\n      continue;\n    }\n    if (char === \"n\") {\n      continue;\n    }\n    if (char === \"t\") {\n      continue;\n    }\n    if (char === \"h\") {\n      continue;\n    }\n    if (char === \"l\") {\n      continue;\n    }\n    if (char === \"a\") {\n      continue;\n    }\n    if (char === \"e\") {\n      continue;\n    }\n    if (char === \"i\") {\n      continue;\n    }\n    if (char === \"o\") {\n      continue;\n    }\n    if (char === \"u\") {\n      continue;\n    }\n    if (char === \"y\") {\n      continue;\n    }\n    if (char === \"n\") {\n      continue;\n    }\n    if (char === \"t\") {\n      continue;\n    }\n    if (char === \"h\") {\n      continue;\n    }\n    if (char === \"l\") {\n      continue;\n    }\n    if (char === \"a\") {\n      continue;\n    }\n    if (char === \"e\") {\n      continue;\n    }\n    if (char === \"i\") {\n      continue;\n    }\n    if (char === \"o\") {\n      continue;\n    }\n    if (char === \"u\") {\n      continue;\n    }\n    if (char === \"y\") {\n      continue;\n    }\n    if (char === \"n\") {\n      continue;\n    }\n    if (char === \"t\") {\n      continue;\n    }\n    if (char === \"h\") {\n      continue;\n    }\n    if (char === \"l\") {\n      continue;\n    }\n    if (char === \"a\") {\n      continue;\n    }\n    if (char === \"e\") {\n      continue;\n    }\n    if (char === \"i\") {\n      continue;\n    }\n    if (char === \"o\") {\n      continue;\n    }\n    if (char === \"u\") {\n      continue;\n    }\n    if (char === \"y\") {\n      continue;\n    }\n    if (char === \"n\") {\n      continue;\n    }\n    if (char === \"t\") {\n      continue;\n    }\n    if (char === \"h\") {\n      continue;\n    }\n    if (char === \"l\") {\n      continue;\n    }\n    if (char === \"a\") {\n      continue;\n    }\n    if (char === \"e\") {\n      continue;\n    }\n    if (char === \"i\") {\n      continue;\n    }\n    if (char === \"o\") {\n      continue;\n    }\n    if (char === \"u\") {\n      continue;\n    }\n    if (char === \"y\") {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkcr_cy5z.ts(161,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    let currentWord = \"\";\n    while (index < s.length) {\n        if (s[index] === \" \") {\n            result.push(currentWord);\n            currentWord = \"\";\n            index++;\n        } else if (s[index] === \" \") {\n            currentWord += s[index];\n            index++;\n        } else {\n            currentWord += s[index];\n            index++;\n        }\n        if (index === n) {\n            result.push(currentWord);\n            index++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'Maryhad',\n  'a',\n  'little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmphvvsqyca.js:40:12)\n    at Object.<anonymous> (/tmp/tmphvvsqyca.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', 'Maryhad', 'a', 'little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334287
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char = s[index];\n    if (char === \" \" || char === \"\\t\") {\n      index++;\n      continue;\n    }\n    let consonants = count_consonants(char);\n    if (consonants === n) {\n      words.push(s.substr(index, s.length));\n    }\n    index++;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp01cjkqmo.ts(21,22): error TS2304: Cannot find name 'count_consonants'.\n",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let charCount = 0;\n    let charArray = s.split(\"\");\n    \n    while(index < charArray.length) {\n        charCount = 0;\n        for(let i = 0; i < charArray[index].length; i++) {\n            if(charArray[index][i] === \" \") {\n                charCount++;\n            }\n        }\n        if(charCount === n) {\n            words.push(charArray[index]);\n        }\n        index++;\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpnq0v0pcu.js:34:12)\n    at Object.<anonymous> (/tmp/tmpnq0v0pcu.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  if (s.length == 0) {\n    return result;\n  }\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == ' ') {\n      count++;\n      if (count == n) {\n        result.push(s.substr(0, i));\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had a little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp5q52htv5.js:31:12)\n    at Object.<anonymous> (/tmp/tmp5q52htv5.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334290
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  let i = 0;\n  while (i < s.length) {\n    if (s.charAt(i) === \" \") {\n      i++;\n      continue;\n    }\n    let j = 0;\n    while (j < n) {\n      if (s.charAt(i) === s.charAt(j)) {\n        j++;\n        continue;\n      }\n      result.push(s.slice(i, j));\n      j = i + 1;\n    }\n    i = j;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp6fj62rwj.js:26\n            result.push(s.slice(i, j));\n                   ^\n\nRangeError: Invalid array length\n    at Array.push (<anonymous>)\n    at select_words (/tmp/tmp6fj62rwj.js:26:20)\n    at test (/tmp/tmp6fj62rwj.js:36:22)\n    at Object.<anonymous> (/tmp/tmp6fj62rwj.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334297
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  \n  if(s.length === 0) {\n    return result;\n  }\n  \n  let chars = Array.from(s);\n  \n  for(let i = 0; i < chars.length; i++) {\n    let char = chars[i];\n    \n    if(char.match(/[aeiou]/i)) {\n      if(result.length >= n) {\n        break;\n      }\n      \n      result.push(char);\n    }\n  }\n  \n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'i'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp7ceu5jej.js:32:12)\n    at Object.<anonymous> (/tmp/tmp7ceu5jej.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'i' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334290
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    \n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (consonants.indexOf(char) == -1) {\n            continue;\n        }\n        \n        let index = consonants.indexOf(char);\n        \n        if (index != -1) {\n            if (index == n) {\n                result.push(s);\n            }\n        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpwzren9ta.js:35:12)\n    at Object.<anonymous> (/tmp/tmpwzren9ta.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334290
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let word = s.substring(index, index+n);\n    if (word.length == n) {\n      words.push(word);\n    }\n    index += n;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpz8vr7upr.js:27:12)\n    at Object.<anonymous> (/tmp/tmpz8vr7upr.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334290
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char = s[index];\n\t\tif (char === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet consonants = count_consonants(char);\n\t\tif (consonants === n) {\n\t\t\twords.push(s.substring(index, index + 1));\n\t\t\tindex++;\n\t\t}\n\t\tindex++;\n\t}\n\treturn words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv0usui1d.ts(21,20): error TS2304: Cannot find name 'count_consonants'.\n",
      "timestamp": 1660334290
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let currentWord = \"\";\n    while (index < s.length && currentWord.length < n) {\n        if (s[index] === \" \") {\n            currentWord = \"\";\n        } else {\n            currentWord += s[index];\n        }\n        index++;\n    }\n    if (currentWord.length >= n) {\n        words.push(currentWord);\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpqblq93et.js:33:12)\n    at Object.<anonymous> (/tmp/tmpqblq93et.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334290
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char.match(/[aeiou]/)) {\n      result.push(char);\n    }\n  }\n  \n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_eshs66i.js:25:12)\n    at Object.<anonymous> (/tmp/tmp_eshs66i.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334291
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet words: string[] = s.split(\" \");\n\tfor (let i = 0; i < words.length; i++) {\n\t\tlet word: string = words[i];\n\t\tlet count: string[] = word.split(\"\");\n\t\tlet countLen: number = count.length;\n\t\tlet countNum: number = 0;\n\t\tfor (let j = 0; j < countLen; j++) {\n\t\t\tif (count[j] === \"c\") {\n\t\t\t\tcountNum++;\n\t\t\t}\n\t\t}\n\t\tif (countNum === n) {\n\t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp2n9mygnj.js:34:12)\n    at Object.<anonymous> (/tmp/tmp2n9mygnj.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334291
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && index < n) {\n\t\tlet char = s.charAt(index);\n\t\tif (char === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\" || char === \"m\" || char === \"n\" || char === \"p\" || char === \"s\" || char === \"t\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"c\" || char === \"k\" || char === \"q\" || char === \"x\" || char === \"z\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"b\" || char === \"j\" || char === \"m\" || char === \"p\" || char === \"v\" || char === \"z\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"g\" || char === \"f\" || char === \"q\" || char === \"p\" || char === \"v\" || char === \"z\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"i\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"o\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"m\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"p\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"t\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"c\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"k\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"q\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"x\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7wb5rrv3.ts(122,1): error TS1005: ')' expected.\n../../../../tmp/tmp7wb5rrv3.ts(137,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334290
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length) {\n        if (s[index] === \" \") {\n            count++;\n            if (count === n) {\n                words.push(s.substr(index, s.length));\n                index += s.length;\n                count = 0;\n            }\n        } else {\n            count = 1;\n        }\n        index++;\n    }\n    return words;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks so much for your help. I really appreciate it. I tried your solution and it works perfectly. I just have one question. Why did you use \"let index = 0;\" instead of \"let index = 0;\" in the while loop? I thought that \"let index = 0;\" was the only way to declare a variable in Javascript. Thanks again!\n<|/ c |>\n<| c |>\nThe `let index = 0;` was just to keep track of the current position in the string. Since you were using `index++` inside the loop, the `index` variable would increment by 1 each time the loop ran. Since you were using `index++` inside the loop, you would have to reset `index` to 0 each time the loop ran.\n<|/ c |>\n<| c |>\nAh I see. Thanks so much for your help. I really appreciate it. I tried your solution and it works perfectly. I just have one question. Why did you use \"let index = 0;\" instead of \"let index = 0;\" in the while loop? I thought that \"let index = 0;\" was the only way to declare a variable in Javascript. Thanks again!\n<|/ c |>\n<| c |>\nThe `let index = 0;` was just to keep track of the current position in the string. Since you were using `index++` inside the loop, the `index` variable would increment by 1 each time the loop ran. Since you were using `index++` inside the loop, you would have to reset `index` to 0 each time the loop ran.\n<|/ c |>\n<| c |>\nThanks so much for your help. I really appreciate it. I tried your solution and it works perfectly. I just have one question. Why did you use \"let index = 0;\" instead of \"let index = 0;\" in the while loop? I thought that \"let index = 0;\" was the only way to declare a variable in Javascript. Thanks again!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5lgey1w8.ts(31,2): error TS1110: Type expected.\n../../../../tmp/tmp5lgey1w8.ts(31,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp5lgey1w8.ts(32,2): error TS1109: Expression expected.\n../../../../tmp/tmp5lgey1w8.ts(32,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp5lgey1w8.ts(33,2): error TS1109: Expression expected.\n../../../../tmp/tmp5lgey1w8.ts(33,7): error TS1109: Expression expected.\n../../../../tmp/tmp5lgey1w8.ts(34,8): error TS1005: ';' expected.\n../../../../tmp/tmp5lgey1w8.ts(34,11): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5lgey1w8.ts(34,20): error TS1005: '(' expected.\n../../../../tmp/tmp5lgey1w8.ts(34,25): error TS1005: ';' expected.\n../../../../tmp/tmp5lgey1w8.ts(34,33): error TS1005: ';' expected.\n../../../../tmp/tmp5lgey1w8.ts(34,40): error TS1005: ')' expected.\n../../../../tmp/tmp5lgey1w8.ts(34,57): error TS1005: ';' expected.\n../../../../tmp/tmp5lgey1w8.ts(34,63): error TS1434: Unexpected ",
      "timestamp": 1660334290
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char = s.charAt(index);\n    if (char === ' ') {\n      index++;\n      continue;\n    }\n    let consonants = count_consonants(char);\n    if (consonants === n) {\n      words.push(s.substring(index, index + 1));\n      index++;\n    }\n    index++;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzwqg4nwh.ts(21,22): error TS2304: Cannot find name 'count_consonants'.\n",
      "timestamp": 1660334290
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word = s.substring(index, index+n);\n\t\tlet index = index + n;\n\t\tif (word.length == n) {\n\t\t\twords.push(word);\n\t\t}\n\t}\n\treturn words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2gj8us80.ts(16,26): error TS2448: Block-scoped variable 'index' used before its declaration.\n../../../../tmp/tmp2gj8us80.ts(16,33): error TS2448: Block-scoped variable 'index' used before its declaration.\n../../../../tmp/tmp2gj8us80.ts(17,15): error TS2448: Block-scoped variable 'index' used before its declaration.\n",
      "timestamp": 1660334290
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    \n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        \n        if (char === ' ') {\n            continue;\n        }\n        \n        let consonants = count_consonants(char);\n        \n        if (consonants === n) {\n            words.push(char);\n        }\n    }\n    \n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_vczqo0h.ts(22,26): error TS2304: Cannot find name 'count_consonants'.\n",
      "timestamp": 1660334291
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char.match(/[aeiou]/)) {\n      words.push(char);\n    }\n  }\n  \n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp4q6uz09d.js:25:12)\n    at Object.<anonymous> (/tmp/tmp4q6uz09d.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334291
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let consonants = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) == \" \") {\n            words.push(s.substring(index, i));\n            index = i + 1;\n        }\n        if (s.charAt(i) == \"a\") {\n            consonants += \"a\";\n        }\n        if (s.charAt(i) == \"e\") {\n            consonants += \"e\";\n        }\n        if (s.charAt(i) == \"i\") {\n            consonants += \"i\";\n        }\n        if (s.charAt(i) == \"o\") {\n            consonants += \"o\";\n        }\n        if (s.charAt(i) == \"u\") {\n            consonants += \"u\";\n        }\n        if (s.charAt(i) == \"y\") {\n            consonants += \"y\";\n        }\n        if (s.charAt(i) == \"o\") {\n            consonants += \"o\";\n        }\n        if (s.charAt(i) == \"u\") {\n            consonants += \"u\";\n        }\n        if (s.charAt(i) == \"y\") {\n            consonants += \"y\";\n        }\n        if (s.charAt(i) == \"a\") {\n            consonants += \"a\";\n        }\n        if (s.charAt(i) == \"e\") {\n            consonants += \"e\";\n        }\n        if (s.charAt(i) == \"i\") {\n            consonants += \"i\";\n        }\n        if (s.charAt(i) == \"o\") {\n            consonants += \"o\";\n        }\n        if (s.charAt(i) == \"u\") {\n            consonants += \"u\";\n        }\n        if (s.charAt(i) == \"y\") {\n            consonants += \"y\";\n        }\n        if (s.charAt(i) == \"a\") {\n            consonants += \"a\";\n        }\n        if (s.charAt(i) == \"e\") {\n            consonants += \"e\";\n        }\n        if (s.charAt(i) == \"i\") {\n            consonants += \"i\";\n        }\n        if (s.charAt(i) == \"o\") {\n            consonants += \"o\";\n        }\n        if (s.charAt(i) == \"u\") {\n            consonants += \"u\";\n        }\n        if (s.charAt(i) == \"y\") {\n            consonants += \"y\";\n        }\n        if (s.charAt(i) == \"a\") {\n            consonants += \"a\";\n        }\n        if (s.charAt(i) == \"e\") {\n            consonants += \"e\";\n        }\n        if (s.charAt(i) == \"i\") {\n            consonants += \"i\";\n        }\n        if (s.charAt(i) == \"o\") {\n            \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp92rewxz7.ts(110,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334290
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result = [];\n    let i = 0;\n    while (i < s.length) {\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\n        }\n        if (s.charAt(i) == ' ') {\n            i++;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzvcl5d_8.ts(138,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334290
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let word = s.substring(index, index + 1);\n    if (word.length == n) {\n      words.push(word);\n    }\n    index++;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpogp_ljf4.js:27:12)\n    at Object.<anonymous> (/tmp/tmpogp_ljf4.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334291
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  \n  if (s == \"\") {\n    return words;\n  }\n  \n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char.match(/[aeiou]/)) {\n      words.push(char);\n    }\n  }\n  \n  return words.filter(word => word.length == n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpw26ijinj.js:28:12)\n    at Object.<anonymous> (/tmp/tmpw26ijinj.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334291
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && n > 0) {\n\t\tlet char = s.charAt(index);\n\t\tif (char === ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'y') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'n') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 't') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'h') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'l') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'r') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'd') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 's') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'm') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'p') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'f') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'v') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'b') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'c') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'k') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'j') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'q') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'x') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'z') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'w') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'k') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'p') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'j') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'q') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'x') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'z') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'w') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'k') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === 'p') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === '\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqjs4g_fc.ts(141,17): error TS1002: Unterminated string literal.\n../../../../tmp/tmpqjs4g_fc.ts(142,1): error TS1005: ')' expected.\n../../../../tmp/tmpqjs4g_fc.ts(157,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334290
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length) {\n        if (s[index] === \" \") {\n            words.push(s.slice(index, index + 1));\n            index = index + 1;\n            count++;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\n        else if (s[index] === \" \") {\n            index = index + 1;\n        }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfud81t0r.ts(145,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334291
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\tlet count = 0;\n\twhile (index < s.length && count < n) {\n\t\tif (s[index] === \" \") {\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t} else {\n\t\t\tcount++;\n\t\t}\n\t}\n\twhile (index < s.length) {\n\t\tif (s[index] === \" \") {\n\t\t\tindex++;\n\t\t} else {\n\t\t\tresult.push(s[index]);\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n  'r',\n  'y',\n  'h',\n  'a',\n  'd',\n  'a',\n  'l',\n  'i',\n  't',\n  't',\n  'l',\n  'e',\n  'l',\n  'a',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp40cpzzqu.js:39:12)\n    at Object.<anonymous> (/tmp/tmp40cpzzqu.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M', 'a', 'r', 'y', 'h',\n    'a', 'd', 'a', 'l', 'i',\n    't', 't', 'l', 'e', 'l',\n    'a', 'm', 'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNo",
      "stdout": "",
      "timestamp": 1660334291
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == ' ') {\n      result.push(s.substr(0, i));\n    }\n  }\n  \n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'Mary had',\n  'Mary had a',\n  'Mary had a little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmphsr67189.js:24:12)\n    at Object.<anonymous> (/tmp/tmphsr67189.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', 'Mary had', 'Mary had a', 'Mary had a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334291
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == ' ') {\n      continue;\n    }\n    let count = 0;\n    for (let j = 0; j < n; j++) {\n      if (s.charAt(i) == s.charAt(j)) {\n        count++;\n      }\n    }\n    if (count == n) {\n      words.push(s.substr(0, i));\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp87821d7a.js:33:12)\n    at Object.<anonymous> (/tmp/tmp87821d7a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char = s[index];\n\t\tif (char === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet count = 0;\n\t\twhile (index < s.length && s[index] === char) {\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\tif (count === n) {\n\t\t\tresult.push(s.substr(0, index));\n\t\t}\n\t\tindex++;\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpsm85qucz.js:36:12)\n    at Object.<anonymous> (/tmp/tmpsm85qucz.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length && n > 0) {\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \",\") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \",\") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \",\") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \",\") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \",\") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \",\") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \",\") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \",\") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \",\") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \",\") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \",\") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \",\") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \",\") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \",\") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \",\") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \",\") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \",\") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \",\") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \",\") {\n            index++;\n        }\n        if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp87jij5rj.ts(131,9): error TS1005: ')' expected.\n../../../../tmp/tmp87jij5rj.ts(146,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words: string[] = [];\n\tlet word = \"\";\n\tlet count = 0;\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet c = s.charAt(i);\n\t\tif (c === \" \") {\n\t\t\twords.push(word);\n\t\t\tword = \"\";\n\t\t\tcount = 0;\n\t\t} else {\n\t\t\tword += c;\n\t\t\tcount++;\n\t\t\tif (count === n) {\n\t\t\t\twords.push(word);\n\t\t\t\tword = \"\";\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t}\n\tif (word.length > 0) {\n\t\twords.push(word);\n\t}\n\treturn words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  '',\n  'had',\n  'a',\n  'litt',\n  'le',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzzrr5wen.js:41:12)\n    at Object.<anonymous> (/tmp/tmpzzrr5wen.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', '',\n    'had',  'a',\n    'litt', 'le',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let word = \"\";\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] == \" \") {\n            if (word.length > 0) {\n                words.push(word);\n                word = \"\";\n            }\n            count++;\n        } else {\n            word += s[i];\n            count++;\n            if (count == n) {\n                words.push(word);\n                count = 0;\n                word = \"\";\n            }\n        }\n    }\n    if (word.length > 0) {\n        words.push(word);\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'had',\n  'a',\n  'l',\n  'ittl',\n  'e',\n  'la',\n  'mb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpk4cm4ken.js:42:12)\n    at Object.<anonymous> (/tmp/tmpk4cm4ken.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'had',\n    'a',    'l',\n    'ittl', 'e',\n    'la',   'mb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length === 0) {\n    return [];\n  }\n  const words: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char.match(/[aeiou]/)) {\n      continue;\n    }\n    if (words.length === 0) {\n      words.push(char);\n    } else if (words[words.length - 1].length < n) {\n      words.push(char);\n    } else {\n      words[words.length - 1] += char;\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'r',\n  'y',\n  ' ',\n  'h',\n  'd',\n  ' ',\n  ' ',\n  'l',\n  't',\n  't',\n  'l',\n  ' ',\n  'l',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp5q18xvhh.js:37:12)\n    at Object.<anonymous> (/tmp/tmp5q18xvhh.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M', 'r', 'y', ' ',\n    'h', 'd', ' ', ' ',\n    'l', 't', 't', 'l',\n    ' ', 'l', 'm', 'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let word = \"\";\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == \" \") {\n      words.push(word);\n      word = \"\";\n      count = 0;\n    } else {\n      if (count < n) {\n        word += s[i];\n        count++;\n      } else {\n        words.push(word);\n        word = \"\";\n        count = 1;\n      }\n    }\n  }\n  words.push(word);\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'had',\n  'a',\n  'litt',\n  'e',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpfgxgmse3.js:40:12)\n    at Object.<anonymous> (/tmp/tmpfgxgmse3.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', 'had', 'a', 'litt', 'e', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char = s[index];\n\t\tif (char === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet count = 0;\n\t\twhile (index < s.length && s[index] === char) {\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\tif (count === n) {\n\t\t\tresult.push(s.substr(0, index));\n\t\t}\n\t\tindex++;\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpsm85qucz.js:36:12)\n    at Object.<anonymous> (/tmp/tmpsm85qucz.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length == 0) {\n    return [];\n  }\n  const words: string[] = [];\n  const vowels = \"aeiou\";\n  const consonants = \"bcdfghjklmnpqrstvwxyz\";\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (vowels.indexOf(char) !== -1) {\n      continue;\n    }\n    if (consonants.indexOf(char) !== -1) {\n      if (words.length >= n) {\n        break;\n      }\n      words.push(char);\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'r',\n  'y',\n  'h',\n  'd'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpqa3ealzh.js:36:12)\n    at Object.<anonymous> (/tmp/tmpqa3ealzh.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'r', 'y', 'h', 'd' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  let index = 0;\n  while (index < s.length && n > 0) {\n    if (s[index] === ' ') {\n      index++;\n    }\n    if (s[index] === ' ' || s[index] === ',') {\n      index++;\n    }\n    if (s[index] === ' ' || s[index] === '.') {\n      index++;\n    }\n    if (s[index] === ' ' || s[index] === '?') {\n      index++;\n    }\n    if (s[index] === ' ' || s[index] === '!') {\n      index++;\n    }\n    if (s[index] === ' ' || s[index] === '?' || s[index] === '!') {\n      index++;\n    }\n    if (s[index] === ' ' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!') {\n      index++;\n    }\n    if (s[index] === ' ' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!') {\n      index++;\n    }\n    if (s[index] === ' ' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!') {\n      index++;\n    }\n    if (s[index] === ' ' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!') {\n      index++;\n    }\n    if (s[index] === ' ' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!') {\n      index++;\n    }\n    if (s[index] === ' ' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!') {\n      index++;\n    }\n    if (s[index] === ' ' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '!' || s[index] === '?' || s[index] === '\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp32srpui_.ts(52,223): error TS1002: Unterminated string literal.\n../../../../tmp/tmp32srpui_.ts(53,1): error TS1005: ')' expected.\n../../../../tmp/tmp32srpui_.ts(68,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    let chars = s.replace(/\\s+/g, '').split('');\n    chars.forEach((char) => {\n        if (char.match(/[aeiou]/i)) {\n            if (index == n) {\n                result.push(char);\n            }\n            index++;\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'e'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_x_fum93.js:29:12)\n    at Object.<anonymous> (/tmp/tmp_x_fum93.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'e' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\twords.push(word);\n\t\t\tindex += n;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp211vvz1m.js:30:12)\n    at Object.<anonymous> (/tmp/tmp211vvz1m.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334283
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length == 0) {\n    return [];\n  }\n  const words: string[] = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === ' ') {\n      continue;\n    }\n    const consonants = count_consonants(s.charAt(i));\n    if (consonants === n) {\n      words.push(s.substr(0, i));\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp205zq2rz.ts(21,24): error TS2304: Cannot find name 'count_consonants'.\n",
      "timestamp": 1660334294
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  \n  if(s.length == 0) {\n    return words;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) == ' ') {\n      continue;\n    }\n    \n    let consonants = count_consonants(s.charAt(i));\n    \n    if(consonants == n) {\n      words.push(s.substr(0, i));\n    }\n  }\n  \n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpg5js1e0o.ts(24,22): error TS2304: Cannot find name 'count_consonants'.\n",
      "timestamp": 1660334294
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index) == ' ') {\n      index++;\n      continue;\n    }\n    if (s.charAt(index\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnk6oyn7v.ts(133,1): error TS1005: ',' expected.\n../../../../tmp/tmpnk6oyn7v.ts(133,9): error TS1005: ',' expected.\n../../../../tmp/tmpnk6oyn7v.ts(148,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index+n);\n        if (word.length == n) {\n            result.push(word);\n            index += n;\n        }\n        else {\n            index += word.length;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6lzi5w12.js:30:12)\n    at Object.<anonymous> (/tmp/tmp6lzi5w12.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length && count < n) {\n        if (s[index] === \" \") {\n            count++;\n        }\n        else {\n            if (s[index] === \" \") {\n                count++;\n            }\n            else {\n                if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n                    result.push(s[index]);\n                }\n                else {\n                    count++;\n                }\n            }\n        }\n        index++;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmptnp5ueky.js:40:12)\n    at Object.<anonymous> (/tmp/tmptnp5ueky.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index+n);\n        if (word.length == n) {\n            words.push(word);\n            index += n;\n        }\n        else {\n            index += word.length;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmphmrip_e1.js:30:12)\n    at Object.<anonymous> (/tmp/tmphmrip_e1.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length && n > 0) {\n        if (s[index] === \" \") {\n            index++;\n        }\n        else if (s[index] === \".\" || s[index] === \",\") {\n            words.push(s.slice(index, index + 1));\n            index++;\n            n--;\n        }\n        else {\n            index++;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpt6kl_17g.js:33:12)\n    at Object.<anonymous> (/tmp/tmpt6kl_17g.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && index < n) {\n\t\tlet char = s.charAt(index);\n\t\tif (char === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\" || char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"m\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"t\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"w\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"o\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"r\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"c\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"o\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"d\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"m\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpldmn9lec.ts(156,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s == \"\") {\n    return [];\n  }\n  let words: string[] = [];\n  let i = 0;\n  while (i < s.length) {\n    if (s.charAt(i) == \" \") {\n      i++;\n      continue;\n    }\n    let j = 0;\n    while (j < n) {\n      if (s.charAt(i) == s.charAt(j)) {\n        j++;\n        continue;\n      }\n      words.push(s.slice(i, j));\n      j++;\n    }\n    i++;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'Ma',\n  'Mar',\n  '',\n  'a',\n  'ar',\n  '',\n  '',\n  'r',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp7fjm54cz.js:39:12)\n    at Object.<anonymous> (/tmp/tmp7fjm54cz.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    ",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char === \" \") {\n      continue;\n    }\n    if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n      continue;\n    }\n    if (char === \"y\") {\n      continue;\n    }\n    if (char === \"n\") {\n      continue;\n    }\n    if (char === \"t\") {\n      continue;\n    }\n    if (char === \"h\") {\n      continue;\n    }\n    if (char === \"l\") {\n      continue;\n    }\n    if (char === \"m\") {\n      continue;\n    }\n    if (char === \"s\") {\n      continue;\n    }\n    if (char === \"c\") {\n      continue;\n    }\n    if (char === \"k\") {\n      continue;\n    }\n    if (char === \"p\") {\n      continue;\n    }\n    if (char === \"f\") {\n      continue;\n    }\n    if (char === \"v\") {\n      continue;\n    }\n    if (char === \"b\") {\n      continue;\n    }\n    if (char === \"q\") {\n      continue;\n    }\n    if (char === \"k\") {\n      continue;\n    }\n    if (char === \"j\") {\n      continue;\n    }\n    if (char === \"q\") {\n      continue;\n    }\n    if (char === \"z\") {\n      continue;\n    }\n    if (char === \"x\") {\n      continue;\n    }\n    if (char === \"l\") {\n      continue;\n    }\n    if (char === \"m\") {\n      continue;\n    }\n    if (char === \"n\") {\n      continue;\n    }\n    if (char === \"k\") {\n      continue;\n    }\n    if (char === \"l\") {\n      continue;\n    }\n    if (char === \"o\") {\n      continue;\n    }\n    if (char === \"p\") {\n      continue;\n    }\n    if (char === \"q\") {\n      continue;\n    }\n    if (char === \"z\") {\n      continue;\n    }\n    if (char === \"x\") {\n      continue;\n    }\n    if (char === \"z\") {\n      continue;\n    }\n    if (char === \"k\") {\n      continue;\n    }\n    if (char === \"l\") {\n      continue;\n    }\n    if (char === \"o\") {\n      continue;\n    }\n    if (char === \"p\") {\n      continue;\n    }\n    if (char === \"q\") {\n      continue;\n    }\n    if (char === \"z\") {\n      continue;\n    }\n    if (char === \"x\") {\n      continue;\n    }\n    if (char === \"z\") {\n      continue;\n    }\n    if (char === \"k\") {\n      continue;\n    }\n    if (char === \"l\") {\n      continue;\n    }\n    if (char === \"o\") {\n      continue;\n    }\n    if (char === \"p\") {\n      \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpahrtm5xz.ts(162,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334294
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length && n > 0) {\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (s[index] === \" \") {\n            index++;\n        }\n        if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe3ew5r79.ts(149,9): error TS1005: ')' expected.\n../../../../tmp/tmpe3ew5r79.ts(164,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let currentWord = \"\";\n    while (index < s.length) {\n        if (s[index] === \" \") {\n            words.push(currentWord);\n            currentWord = \"\";\n            index++;\n        } else {\n            if (currentWord.length + 1 === n) {\n                words.push(currentWord);\n                currentWord = \"\";\n            } else {\n                currentWord += s[index];\n            }\n            index++;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mar',\n  '',\n  'had',\n  'a',\n  'lit',\n  'le',\n  'lam'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpjw_o54p0.js:38:12)\n    at Object.<anonymous> (/tmp/tmpjw_o54p0.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mar', '',\n    'had', 'a',\n    'lit', 'le',\n    'lam'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334295
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index+n);\n        if (word.length == n) {\n            result.push(word);\n            index += n;\n        }\n        else {\n            index += word.length;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6lzi5w12.js:30:12)\n    at Object.<anonymous> (/tmp/tmp6lzi5w12.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    let word = \"\";\n    while (index < s.length) {\n        if (s[index] === \" \") {\n            if (word.length < n) {\n                result.push(word);\n            }\n            word = \"\";\n        } else {\n            word += s[index];\n        }\n        index++;\n    }\n    if (word.length > 0) {\n        result.push(word);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'had',\n  'a',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp7avwee86.js:36:12)\n    at Object.<anonymous> (/tmp/tmp7avwee86.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'had', 'a', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334297
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && n > 0) {\n\t\tlet char = s[index];\n\t\tif (char === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"t\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"m\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"p\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"c\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"k\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"d\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"f\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"m\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"o\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"t\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"m\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"p\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"c\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"k\") {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8iud_dvz.ts(157,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334297
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result = [];\n    let i = 0;\n    while (i < s.length) {\n        let word = s.substring(i, i + n);\n        if (word.length == n) {\n            result.push(word);\n            i += n;\n        }\n        else {\n            i++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpp_s9g6j1.js:30:12)\n    at Object.<anonymous> (/tmp/tmpp_s9g6j1.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334297
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index+n);\n        if (word.length == n) {\n            result.push(word);\n            index += n;\n        }\n        else {\n            index += word.length;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6lzi5w12.js:30:12)\n    at Object.<anonymous> (/tmp/tmp6lzi5w12.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (s == \"\") {\n        return [];\n    }\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let char = s[index];\n        if (char === \" \") {\n            words.push(s.substr(index));\n            index++;\n        }\n        else if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"y\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"n\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"t\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"h\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"l\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"l\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"e\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"s\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"a\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"m\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"y\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"s\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"s\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"s\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"s\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"s\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"s\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"s\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"s\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"s\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"s\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"s\") {\n            words.push(s.substr(index, 1));\n            index++;\n        }\n        else if (char === \"s\") {\n            words.push(s.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpagvt_gf2.ts(117,26): error TS1003: Identifier expected.\n../../../../tmp/tmpagvt_gf2.ts(118,1): error TS1005: ',' expected.\n../../../../tmp/tmpagvt_gf2.ts(118,9): error TS1005: ',' expected.\n../../../../tmp/tmpagvt_gf2.ts(133,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334297
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result = [];\n    let i = 0;\n    while (i < s.length) {\n        let word = s.substr(i, n);\n        if (word.length == n) {\n            result.push(word);\n        }\n        i += n;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp44k46mad.js:27:12)\n    at Object.<anonymous> (/tmp/tmp44k46mad.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334297
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char.match(/[aeiou]/)) {\n            result.push(char);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp3e4cqku9.js:25:12)\n    at Object.<anonymous> (/tmp/tmp3e4cqku9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334297
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\t\t\tindex += n;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpabmmudcq.js:30:12)\n    at Object.<anonymous> (/tmp/tmpabmmudcq.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334297
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char = s[index];\n    if (char === \" \") {\n      index++;\n      continue;\n    }\n    if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"n\") {\n      index++;\n      continue;\n    }\n    if (char === \"t\") {\n      index++;\n      continue;\n    }\n    if (char === \"h\") {\n      index++;\n      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n    }\n    if (char === \"a\") {\n      index++;\n      continue;\n    }\n    if (char === \"e\") {\n      index++;\n      continue;\n    }\n    if (char === \"i\") {\n      index++;\n      continue;\n    }\n    if (char === \"o\") {\n      index++;\n      continue;\n    }\n    if (char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"n\") {\n      index++;\n      continue;\n    }\n    if (char === \"t\") {\n      index++;\n      continue;\n    }\n    if (char === \"h\") {\n      index++;\n      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n    }\n    if (char === \"a\") {\n      index++;\n      continue;\n    }\n    if (char === \"e\") {\n      index++;\n      continue;\n    }\n    if (char === \"i\") {\n      index++;\n      continue;\n    }\n    if (char === \"o\") {\n      index++;\n      continue;\n    }\n    if (char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"n\") {\n      index++;\n      continue;\n    }\n    if (char === \"t\") {\n      index++;\n      continue;\n    }\n    if (char === \"h\") {\n      index++;\n      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n    }\n    if (char === \"a\") {\n      index++;\n      continue;\n    }\n    if (char === \"e\") {\n      index++;\n      continue;\n    }\n    if (char === \"i\") {\n      index++;\n      continue;\n    }\n    if (char === \"o\") {\n      index++;\n      continue;\n    }\n    if (char === \"u\") {\n      index++;\n      \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqn4k1nak.ts(159,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334297
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && n > 0) {\n\t\tlet char = s[index];\n\t\tif (char.match(/[aeiou]/)) {\n\t\t\tresult.push(char);\n\t\t\tn--;\n\t\t}\n\t\tindex++;\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'i'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpyrghweas.js:28:12)\n    at Object.<anonymous> (/tmp/tmpyrghweas.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'i' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334298
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char === \" \") {\n      continue;\n    }\n    let count = 0;\n    for (let j = 0; j < char.length; j++) {\n      if (char[j] === \"a\" || char[j] === \"e\" || char[j] === \"i\" || char[j] === \"o\" || char[j] === \"u\") {\n        count++;\n      }\n    }\n    if (count === n) {\n      words.push(s.substr(0, i));\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpo0cehy6r.js:34:12)\n    at Object.<anonymous> (/tmp/tmpo0cehy6r.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334298
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\t\t}\n\t\tindex += n;\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpxfitsu_b.js:27:12)\n    at Object.<anonymous> (/tmp/tmpxfitsu_b.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334298
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let word = s.substring(index, index+n);\n    if (word.length == n) {\n      result.push(word);\n      index += n;\n    }\n    else {\n      index++;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpkzuvvjf_.js:30:12)\n    at Object.<anonymous> (/tmp/tmpkzuvvjf_.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334298
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let char = s[index];\n        if (char === \" \") {\n            words.push(s.substr(index, n - 1));\n            index += n - 1;\n        } else {\n            index++;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' ha',\n  ' a ',\n  ' la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp9f56dffh.js:30:12)\n    at Object.<anonymous> (/tmp/tmp9f56dffh.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ha', ' a ', ' la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334298
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let currentWord = \"\";\n    let currentLetter = \"\";\n    let currentCount = 0;\n    while (index < s.length && currentCount < n) {\n        currentLetter = s[index];\n        currentCount++;\n        if (currentLetter == \" \") {\n            words.push(currentWord);\n            currentWord = \"\";\n            currentCount = 0;\n            index++;\n        } else if (currentLetter == \"a\" || currentLetter == \"e\" || currentLetter == \"i\" || currentLetter == \"o\" || currentLetter == \"u\") {\n            currentWord += currentLetter;\n        } else if (currentLetter == \"n\") {\n            currentWord += currentLetter;\n            currentCount = 0;\n            index++;\n        } else if (currentLetter == \"y\") {\n            currentWord += currentLetter;\n            currentCount = 0;\n            index++;\n        } else if (currentLetter == \"h\") {\n            currentWord += currentLetter;\n            currentCount = 0;\n            index++;\n        } else if (currentLetter == \"l\") {\n            currentWord += currentLetter;\n            currentCount = 0;\n            index++;\n        } else if (currentLetter == \"d\") {\n            currentWord += currentLetter;\n            currentCount = 0;\n            index++;\n        } else if (currentLetter == \"s\") {\n            currentWord += currentLetter;\n            currentCount = 0;\n            index++;\n        } else if (currentLetter == \"w\") {\n            currentWord += currentLetter;\n            currentCount = 0;\n            index++;\n        } else if (currentLetter == \"z\") {\n            currentWord += currentLetter;\n            currentCount = 0;\n            index++;\n        } else if (currentLetter == \"t\") {\n            currentWord += currentLetter;\n            currentCount = 0;\n            index++;\n        } else if (currentLetter == \"p\") {\n            currentWord += currentLetter;\n            currentCount = 0;\n            index++;\n        } else if (currentLetter == \"f\") {\n            currentWord += currentLetter;\n            currentCount = 0;\n            index++;\n        } else if (currentLetter == \"v\") {\n            currentWord += currentLetter;\n            currentCount = 0;\n            index++;\n        } else if (currentLetter == \"b\") {\n            currentWord += currentLetter;\n            currentCount = 0;\n            index++;\n        } else if (currentLetter == \"n\") {\n            currentWord += currentLetter;\n            currentCount = 0;\n            index++;\n        } else if (currentLetter == \"m\") {\n            currentWord += currentLetter;\n            currentCount = 0;\n            index++;\n        } else if (currentLetter == \"r\") {\n            currentWord += currentLetter;\n            currentCount = 0;\n            index++;\n        } else if (currentLetter == \"k\") {\n            currentWord += currentLetter;\n            currentCount = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpydbtssy5.ts(110,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334297
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s == \"\") {\n    return [];\n  }\n  let words: string[] = [];\n  let word = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"a\" || s[i] === \"e\" || s[i] === \"i\" || s[i] === \"o\" || s[i] === \"u\") {\n      word += s[i];\n    } else {\n      if (word.length >= n) {\n        words.push(word);\n        word = \"\";\n      }\n    }\n  }\n  if (word.length > 0) {\n    words.push(word);\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'aaai',\n  'ea'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpb0e7o4rm.js:37:12)\n    at Object.<anonymous> (/tmp/tmpb0e7o4rm.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'aaai', 'ea' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334298
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length == 0) {\n    return [];\n  }\n  const words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    const word = s.substr(index, n);\n    if (words.indexOf(word) == -1) {\n      words.push(word);\n    }\n    index += word.length;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la',\n  'mb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpa3_lio73.js:30:12)\n    at Object.<anonymous> (/tmp/tmpa3_lio73.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la', 'mb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334298
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length === 0) {\n    return [];\n  }\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length && index < n) {\n    let char = s.charAt(index);\n    if (char === \" \") {\n      index++;\n      continue;\n    }\n    if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"n\") {\n      index++;\n      continue;\n    }\n    if (char === \"t\") {\n      index++;\n      continue;\n    }\n    if (char === \"h\") {\n      index++;\n      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n    }\n    if (char === \"s\") {\n      index++;\n      continue;\n    }\n    if (char === \"e\") {\n      index++;\n      continue;\n    }\n    if (char === \"d\") {\n      index++;\n      continue;\n    }\n    if (char === \"r\") {\n      index++;\n      continue;\n    }\n    if (char === \"m\") {\n      index++;\n      continue;\n    }\n    if (char === \"a\") {\n      index++;\n      continue;\n    }\n    if (char === \"g\") {\n      index++;\n      continue;\n    }\n    if (char === \"p\") {\n      index++;\n      continue;\n    }\n    if (char === \"e\") {\n      index++;\n      continue;\n    }\n    if (char === \"c\") {\n      index++;\n      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n    }\n    if (char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char === \"o\") {\n      index++;\n      continue;\n    }\n    if (char === \"f\") {\n      index++;\n      continue;\n    }\n    if (char === \"i\") {\n      index++;\n      continue;\n    }\n    if (char === \"n\") {\n      index++;\n      continue;\n    }\n    if (char === \"t\") {\n      index++;\n      continue;\n    }\n    if (char === \"h\") {\n      index++;\n      continue;\n    }\n    if (char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char === \"s\") {\n      index++;\n      continue;\n    }\n    if (char === \"a\") {\n      index++;\n      continue;\n    }\n    if (char === \"e\") {\n      index++;\n      continue;\n    }\n    if (char === \"i\") {\n      index++;\n      continue;\n    }\n    if (char === \"o\") {\n      index++;\n      continue;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphsilnzy3.ts(159,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334298
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result = [];\n    \n    for (let i = 0; i < s.length; i++) {\n        let word = s.substr(i, n);\n        if (word.length == n) {\n            result.push(word);\n        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpk4bumrjp.js:25:12)\n    at Object.<anonymous> (/tmp/tmpk4bumrjp.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit",
      "stdout": "",
      "timestamp": 1660334298
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char = s[index];\n    if (char === ' ') {\n      index++;\n      continue;\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      index++;\n      continue;\n    }\n    if (char === 'y') {\n      index++;\n      continue;\n    }\n    if (char === 'n') {\n      index++;\n      continue;\n    }\n    if (char === 't') {\n      index++;\n      continue;\n    }\n    if (char === 'h') {\n      index++;\n      continue;\n    }\n    if (char === 'l') {\n      index++;\n      continue;\n    }\n    if (char === 's') {\n      index++;\n      continue;\n    }\n    if (char === 'd') {\n      index++;\n      continue;\n    }\n    if (char === 'r') {\n      index++;\n      continue;\n    }\n    if (char === 'p') {\n      index++;\n      continue;\n    }\n    if (char === 'f') {\n      index++;\n      continue;\n    }\n    if (char === 'v') {\n      index++;\n      continue;\n    }\n    if (char === 'b') {\n      index++;\n      continue;\n    }\n    if (char === 'm') {\n      index++;\n      continue;\n    }\n    if (char === 'c') {\n      index++;\n      continue;\n    }\n    if (char === 'k') {\n      index++;\n      continue;\n    }\n    if (char === 'j') {\n      index++;\n      continue;\n    }\n    if (char === 'q') {\n      index++;\n      continue;\n    }\n    if (char === 'x') {\n      index++;\n      continue;\n    }\n    if (char === 'w') {\n      index++;\n      continue;\n    }\n    if (char === 'z') {\n      index++;\n      continue;\n    }\n    if (char === 'v') {\n      index++;\n      continue;\n    }\n    if (char === 'a') {\n      index++;\n      continue;\n    }\n    if (char === 'e') {\n      index++;\n      continue;\n    }\n    if (char === 'i') {\n      index++;\n      continue;\n    }\n    if (char === 'o') {\n      index++;\n      continue;\n    }\n    if (char === 'u') {\n      index++;\n      continue;\n    }\n    if (char === 'y') {\n      index++;\n      continue;\n    }\n    if (char === 'n') {\n      index++;\n      continue;\n    }\n    if (char === 't') {\n      index++;\n      continue;\n    }\n    if (char === 'h') {\n      index++;\n      \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpga36u69z.ts(159,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334298
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) == ' ') {\n            words.push(s.substr(0, i));\n        }\n    }\n    return words.filter(w => w.split(\"\").filter(c => c != ' ').length == n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpt3fc5bfz.js:24:12)\n    at Object.<anonymous> (/tmp/tmpt3fc5bfz.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334298
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let currentWord = \"\";\n    while (index < s.length && index < n) {\n        if (s[index] === \" \") {\n            currentWord = currentWord.trim();\n            if (currentWord.length > 0) {\n                words.push(currentWord);\n                currentWord = \"\";\n            }\n            index++;\n        } else if (s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n            index++;\n        } else {\n            currentWord += s[index];\n            index++;\n        }\n    }\n    if (currentWord.length > 0) {\n        words.push(currentWord);\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpj2q4nkkr.js:41:12)\n    at Object.<anonymous> (/tmp/tmpj2q4nkkr.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334298
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words: string[] = [];\n\tlet index = 0;\n\tlet currentWord = \"\";\n\tlet currentCount = 0;\n\twhile (index < s.length) {\n\t\tcurrentWord = s.substr(index, n);\n\t\tif (currentWord.length > 0) {\n\t\t\tcurrentCount = currentWord.split(\"\").length;\n\t\t\tif (currentCount === n) {\n\t\t\t\twords.push(currentWord);\n\t\t\t}\n\t\t}\n\t\tindex += n;\n\t}\n\treturn words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpjfe52yv2.js:32:12)\n    at Object.<anonymous> (/tmp/tmpjfe52yv2.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334298
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  \n  if (s.length === 0) {\n    return result;\n  }\n  \n  let i = 0;\n  while (i < s.length) {\n    if (s.charAt(i) === \" \") {\n      i++;\n      continue;\n    }\n    \n    let j = 0;\n    while (j < n) {\n      if (s.charAt(i) === s.charAt(j)) {\n        j++;\n        continue;\n      }\n      \n      result.push(s.substr(i, j));\n      i = j;\n      break;\n    }\n  }\n  \n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpw0muydyv.js:29\n            result.push(s.substr(i, j));\n                   ^\n\nRangeError: Invalid array length\n    at Array.push (<anonymous>)\n    at select_words (/tmp/tmpw0muydyv.js:29:20)\n    at test (/tmp/tmpw0muydyv.js:39:22)\n    at Object.<anonymous> (/tmp/tmpw0muydyv.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334308
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let word = s.substring(index, index+n);\n    if (word.length == n) {\n      words.push(word);\n    }\n    index += n;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpz8vr7upr.js:27:12)\n    at Object.<anonymous> (/tmp/tmpz8vr7upr.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334290
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result = [];\n    for (let i = 0; i < s.length; i++) {\n        let word = s[i];\n        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n            if (word.charAt(j) == ' ') {\n                count++;\n            }\n        }\n        if (count == n) {\n            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp5cqw6aen.js:31:12)\n    at Object.<anonymous> (/tmp/tmp5cqw6aen.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334300
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        let count = 0;\n        for (let j = 0; j < char.length; j++) {\n            if (char[j] === \"a\" || char[j] === \"e\" || char[j] === \"i\" || char[j] === \"o\" || char[j] === \"u\") {\n                count++;\n            }\n        }\n        if (count === n) {\n            result.push(s.substring(i, i + 1));\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,javascript,arrays |>\n<| a tags=string,javascript,arrays |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3gjobskd.ts(28,2): error TS1110: Type expected.\n../../../../tmp/tmp3gjobskd.ts(28,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3gjobskd.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmp3gjobskd.ts(29,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3gjobskd.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmp3gjobskd.ts(30,6): error TS1005: ';' expected.\n../../../../tmp/tmp3gjobskd.ts(30,37): error TS1109: Expression expected.\n../../../../tmp/tmp3gjobskd.ts(32,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334300
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length && count < n) {\n        if (s[index] === \" \") {\n            count++;\n        }\n        else {\n            if (s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n                count++;\n            }\n            else {\n                if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n                    count++;\n                }\n                else {\n                    result.push(s[index]);\n                    count++;\n                }\n            }\n        }\n        index++;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'r',\n  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpf91c7145.js:41:12)\n    at Object.<anonymous> (/tmp/tmpf91c7145.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'r', 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334301
    },
    {
      "exit_code": -1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length == 0) {\n    return [];\n  }\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char = s[index];\n    if (char === ' ') {\n      index++;\n      continue;\n    }\n    let count = 0;\n    let i = index;\n    while (i < s.length && s[i] !== ' ') {\n      i++;\n      count++;\n    }\n    if (count === n) {\n      words.push(s.substring(index, i));\n      index = i;\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334317
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let letter = s[i];\n        if (letter === \" \") {\n            continue;\n        }\n        let count = 0;\n        for (let j = 0; j < letter.length; j++) {\n            if (letter[j] === letter[j].toUpperCase()) {\n                count++;\n            }\n        }\n        if (count === n) {\n            result.push(letter);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdn3ccs6n.js:34:12)\n    at Object.<anonymous> (/tmp/tmpdn3ccs6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334301
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let count = 0;\n    let lastChar = s[0];\n    while (index < s.length && count < n) {\n        if (s[index] === lastChar) {\n            count++;\n        } else {\n            words.push(s.slice(index, index + 1));\n            index = index + 1;\n            count = 0;\n        }\n        lastChar = s[index];\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpx28xyvh3.js:33:12)\n    at Object.<anonymous> (/tmp/tmpx28xyvh3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334301
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char.match(/[aeiou]/)) {\n      let count = 0;\n      for (let j = 0; j < s.length; j++) {\n        if (s[j] === char) {\n          count++;\n        }\n      }\n      if (count === n) {\n        words.push(char);\n      }\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp9osy59o0.js:33:12)\n    at Object.<anonymous> (/tmp/tmp9osy59o0.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334301
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  let words: string[] = s.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    let word: string = words[i];\n    let letters: string[] = word.split(\"\");\n    for (let j = 0; j < letters.length; j++) {\n      if (letters[j].match(/[aeiou]/)) {\n        if (letters[j].match(/[aeiou]/).length == n) {\n          result.push(word);\n        }\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp7v4_gxa8.js:31:12)\n    at Object.<anonymous> (/tmp/tmp7v4_gxa8.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334301
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char = s[index];\n    if (char === ' ') {\n      index++;\n      continue;\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      index++;\n      continue;\n    }\n    if (char === 'y') {\n      index++;\n      continue;\n    }\n    if (char === 'n') {\n      index++;\n      continue;\n    }\n    if (char === 't') {\n      index++;\n      continue;\n    }\n    if (char === 'h') {\n      index++;\n      continue;\n    }\n    if (char === 'l') {\n      index++;\n      continue;\n    }\n    if (char === 's') {\n      index++;\n      continue;\n    }\n    if (char === 'r') {\n      index++;\n      continue;\n    }\n    if (char === 'd') {\n      index++;\n      continue;\n    }\n    if (char === 'c') {\n      index++;\n      continue;\n    }\n    if (char === 'm') {\n      index++;\n      continue;\n    }\n    if (char === 'e') {\n      index++;\n      continue;\n    }\n    if (char === 'g') {\n      index++;\n      continue;\n    }\n    if (char === 'b') {\n      index++;\n      continue;\n    }\n    if (char === 'p') {\n      index++;\n      continue;\n    }\n    if (char === 'f') {\n      index++;\n      continue;\n    }\n    if (char === 'v') {\n      index++;\n      continue;\n    }\n    if (char === 'w') {\n      index++;\n      continue;\n    }\n    if (char === 'k') {\n      index++;\n      continue;\n    }\n    if (char === 'x') {\n      index++;\n      continue;\n    }\n    if (char === 'q') {\n      index++;\n      continue;\n    }\n    if (char === 'z') {\n      index++;\n      continue;\n    }\n    if (char === 'x') {\n      index++;\n      continue;\n    }\n    if (char === 'z') {\n      index++;\n      continue;\n    }\n    if (char === 'q') {\n      index++;\n      continue;\n    }\n    if (char === 'z') {\n      index++;\n      continue;\n    }\n    if (char === 'q') {\n      index++;\n      continue;\n    }\n    if (char === 'z') {\n      index++;\n      continue;\n    }\n    if (char === 'q') {\n      index++;\n      continue;\n    }\n    if (char === 'z') {\n      index++;\n      continue;\n    }\n    if (char === 'q') {\n      index++;\n      continue;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu_f9ffov.ts(159,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334301
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let currentWord = \"\";\n    let currentWordCount = 0;\n    while (index < s.length) {\n        if (s[index] === \" \") {\n            currentWordCount += 1;\n            if (currentWordCount === n) {\n                words.push(currentWord);\n                currentWord = \"\";\n                currentWordCount = 0;\n            }\n        } else {\n            currentWord += s[index];\n            currentWordCount = 0;\n        }\n        index += 1;\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdat4os5a.js:37:12)\n    at Object.<anonymous> (/tmp/tmpdat4os5a.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334301
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length && n > 0) {\n        if (s[index] === \" \") {\n            words.push(s.substr(index, index + 1));\n            index += 1;\n        }\n        else if (s[index] === \".\" || s[index] === \",\" || s[index] === \"?\" || s[index] === \"!\") {\n            index += 1;\n        }\n        else if (s[index] === \".\" && n > 0) {\n            words.push(s.substr(index, index + 1));\n            index += 1;\n        }\n        else if (s[index] === \",\" && n > 0) {\n            words.push(s.substr(index, index + 1));\n            index += 1;\n        }\n        else if (s[index] === \"?\" && n > 0) {\n            words.push(s.substr(index, index + 1));\n            index += 1;\n        }\n        else if (s[index] === \"!\" && n > 0) {\n            words.push(s.substr(index, index + 1));\n            index += 1;\n        }\n        else if (s[index] === \" \") {\n            index += 1;\n        }\n        else if (s[index] === \".\" && n === 1) {\n            index += 1;\n        }\n        else if (s[index] === \",\" && n === 1) {\n            index += 1;\n        }\n        else if (s[index] === \"?\" && n === 1) {\n            index += 1;\n        }\n        else if (s[index] === \"!\" && n === 1) {\n            index += 1;\n        }\n        else if (s[index] === \" \") {\n            index += 1;\n        }\n        else if (s[index] === \".\" && n === 2) {\n            index += 1;\n        }\n        else if (s[index] === \",\" && n === 2) {\n            index += 1;\n        }\n        else if (s[index] === \"?\" && n === 2) {\n            index += 1;\n        }\n        else if (s[index] === \"!\" && n === 2) {\n            index += 1;\n        }\n        else if (s[index] === \" \") {\n            index += 1;\n        }\n        else if (s[index] === \".\" && n === 3) {\n            index += 1;\n        }\n        else if (s[index] === \",\" && n === 3) {\n            index += 1;\n        }\n        else if (s[index] === \"?\" && n === 3) {\n            index += 1;\n        }\n        else if (s[index] === \"!\" && n === 3) {\n            index += 1;\n        }\n        else if (s[index] === \" \") {\n            index += 1;\n        }\n        else if (s[index] === \".\" && n === 4) {\n            index += 1;\n        }\n        else if (s[index] === \",\" && n === 4) {\n            index += 1;\n        }\n        else if (s[index] === \"?\" && n === 4) {\n            index += 1;\n        }\n        else if (s[index] === \"!\" && n === 4) {\n            index += 1;\n        }\n        else if (s[index] === \" \") {\n            index += 1;\n        }\n        else if (s[index] === \".\" && n === 5) {\n            index += 1;\n        }\n        else if (s[index] === \",\" && n === 5) {\n            index += 1;\n        }\n        else if (s[index] === \"?\" && n === 5) {\n            index += 1;\n        }\n        else if (s[index] === \"!\" && \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu8v6_5o5.ts(112,9): error TS1005: ')' expected.\n../../../../tmp/tmpu8v6_5o5.ts(127,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334301
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length == 0) {\n    return [];\n  }\n\n  let words: string[] = [];\n  let index = 0;\n  let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\n  while (index < s.length && words.length < n) {\n    if (s.charAt(index) in consonants) {\n      words.push(s.charAt(index));\n    }\n    index++;\n  }\n\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpeb339vr6.ts(22,28): error TS2361: The right-hand side of an 'in' expression must not be a primitive.\n",
      "timestamp": 1660334301
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length && index < n) {\n    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \".\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"y\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"h\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"l\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"l\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"o\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"a\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"e\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"i\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"o\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"y\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"h\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"l\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"l\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"o\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"y\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"h\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"l\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"l\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"o\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"y\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"h\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"l\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"l\") {\n      \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4rqi_pve.ts(149,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334301
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  \n  if (s.length === 0) {\n    return words;\n  }\n  \n  let vowels = \"aeiou\";\n  let consonants = \"bcdfghjklmnpqrstvwxyz\";\n  \n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    \n    if (vowels.indexOf(char) !== -1) {\n      continue;\n    }\n    \n    if (consonants.indexOf(char) !== -1) {\n      if (words.length === 0) {\n        words.push(char);\n      }\n      else {\n        let lastWord = words[words.length - 1];\n        if (lastWord === char) {\n          words.push(char);\n        }\n      }\n    }\n  }\n  \n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'r'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpl9f8l3dc.js:41:12)\n    at Object.<anonymous> (/tmp/tmpl9f8l3dc.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'r' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334301
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result = [];\n\tlet i = 0;\n\twhile (i < s.length) {\n\t\tlet word = s.substr(i, n);\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\t\t\ti += n;\n\t\t} else {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmps0qu162c.js:30:12)\n    at Object.<anonymous> (/tmp/tmps0qu162c.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334301
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let word = s.substring(index, index+n);\n    if (word === \"\") {\n      result.push(\"\");\n      index += n;\n    } else {\n      result.push(word);\n      index += word.length;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la',\n  'mb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpbt_ygph2.js:31:12)\n    at Object.<anonymous> (/tmp/tmpbt_ygph2.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la', 'mb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334301
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s == \"\") {\n    return [];\n  }\n  const words: string[] = [];\n  const vowels = \"aeiou\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) >= 0) {\n      continue;\n    }\n    if (words.length >= n) {\n      break;\n    }\n    if (s.indexOf(s[i]) >= 0) {\n      words.push(s[i]);\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'r',\n  'y',\n  ' '\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpehva6mr2.js:34:12)\n    at Object.<anonymous> (/tmp/tmpehva6mr2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'r', 'y', ' ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length === 0) {\n    return [];\n  }\n  const words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    const char = s[index];\n    if (char === ' ') {\n      index++;\n      continue;\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      index++;\n      continue;\n    }\n    if (char === 'y') {\n      index++;\n      continue;\n    }\n    if (char === 'n') {\n      index++;\n      continue;\n    }\n    if (char === 'd') {\n      index++;\n      continue;\n    }\n    if (char === 'h') {\n      index++;\n      continue;\n    }\n    if (char === 'l') {\n      index++;\n      continue;\n    }\n    if (char === 'm') {\n      index++;\n      continue;\n    }\n    if (char === 's') {\n      index++;\n      continue;\n    }\n    if (char === 't') {\n      index++;\n      continue;\n    }\n    if (char === 'r') {\n      index++;\n      continue;\n    }\n    if (char === 'p') {\n      index++;\n      continue;\n    }\n    if (char === 'f') {\n      index++;\n      continue;\n    }\n    if (char === 'v') {\n      index++;\n      continue;\n    }\n    if (char === 'b') {\n      index++;\n      continue;\n    }\n    if (char === 'c') {\n      index++;\n      continue;\n    }\n    if (char === 'k') {\n      index++;\n      continue;\n    }\n    if (char === 'x') {\n      index++;\n      continue;\n    }\n    if (char === 'q') {\n      index++;\n      continue;\n    }\n    if (char === 'z') {\n      index++;\n      continue;\n    }\n    if (char === 'x') {\n      index++;\n      continue;\n    }\n    if (char === 'z') {\n      index++;\n      continue;\n    }\n    if (char === 'q') {\n      index++;\n      continue;\n    }\n    if (char === 'p') {\n      index++;\n      continue;\n    }\n    if (char === 'f') {\n      index++;\n      continue;\n    }\n    if (char === 'v') {\n      index++;\n      continue;\n    }\n    if (char === 'b') {\n      index++;\n      continue;\n    }\n    if (char === 'c') {\n      index++;\n      continue;\n    }\n    if (char === 'k') {\n      index++;\n      continue;\n    }\n    if (char === 'x') {\n      index++;\n      continue;\n    }\n    if (char === 'q') {\n      index++;\n      continue;\n    }\n    if (char\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcw0t5sea.ts(145,1): error TS1005: ')' expected.\n../../../../tmp/tmpcw0t5sea.ts(160,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char.match(/[aeiou]/)) {\n            result.push(char);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp3e4cqku9.js:25:12)\n    at Object.<anonymous> (/tmp/tmp3e4cqku9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334297
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length == 0) {\n    return [];\n  }\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char = s[index];\n    if (char.match(/[aeiou]/i)) {\n      words.push(s[index]);\n    }\n    index++;\n  }\n  return words.filter((word) => {\n    return word.length == n;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpwdr1nezm.js:32:12)\n    at Object.<anonymous> (/tmp/tmpwdr1nezm.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s.length == 0) {\n        return result;\n    }\n    \n    let index = 0;\n    let count = 0;\n    \n    while (index < s.length && count < n) {\n        if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n            count++;\n        }\n        index++;\n    }\n    \n    if (count == n) {\n        result.push(s.slice(index));\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'ttle lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpk18nmy1k.js:33:12)\n    at Object.<anonymous> (/tmp/tmpk18nmy1k.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'ttle lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length && n > 0) {\n\t\tif (s[index] === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet consonants = count_consonants(s, index);\n\t\tif (consonants === n) {\n\t\t\twords.push(s.slice(index, index+n));\n\t\t\tindex += n;\n\t\t\tn--;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp99rumq1s.ts(20,20): error TS2304: Cannot find name 'count_consonants'.\n",
      "timestamp": 1660334301
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s === \"\") {\n        return result;\n    }\n    \n    let count = 0;\n    let index = 0;\n    \n    while (index < s.length && count < n) {\n        if (s[index] === \" \") {\n            count++;\n        }\n        else {\n            count--;\n        }\n        index++;\n    }\n    \n    if (count === n) {\n        result.push(s.substr(0, index));\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpi5x8f_s3.js:36:12)\n    at Object.<anonymous> (/tmp/tmpi5x8f_s3.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334302
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\twords.push(word);\n\t\t}\n\t\tindex += n;\n\t}\n\treturn words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpqr86e4uk.js:27:12)\n    at Object.<anonymous> (/tmp/tmpqr86e4uk.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334304
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  let count = 0;\n  while (index < s.length && count < n) {\n    if (s[index] === ' ') {\n      index++;\n      count++;\n    } else {\n      words.push(s[index]);\n      index++;\n      count++;\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n  'r',\n  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8tfnay5d.js:32:12)\n    at Object.<anonymous> (/tmp/tmp8tfnay5d.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a', 'r', 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334304
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char = s[index];\n    if (char === ' ') {\n      index++;\n      continue;\n    }\n    let count = 0;\n    while (index < s.length && s[index] === char) {\n      index++;\n      count++;\n    }\n    if (count === n) {\n      words.push(s.substr(0, index));\n    }\n    index++;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_eu_ml_x.js:36:12)\n    at Object.<anonymous> (/tmp/tmp_eu_ml_x.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334305
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index+n);\n        if (word.length == n) {\n            result.push(word);\n            index += n;\n        }\n        else {\n            index++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpv9hk9eo4.js:30:12)\n    at Object.<anonymous> (/tmp/tmpv9hk9eo4.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length && count < n) {\n        if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n            words.push(s[index]);\n            count++;\n        }\n        index++;\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'i'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzx1shruo.js:28:12)\n    at Object.<anonymous> (/tmp/tmpzx1shruo.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'i' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334304
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let word = s.substring(index, index+n);\n    if (word.length == n) {\n      words.push(word);\n    }\n    index += n;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpz8vr7upr.js:27:12)\n    at Object.<anonymous> (/tmp/tmpz8vr7upr.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334290
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char.match(/[aeiou]/)) {\n      words.push(char);\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_wg1mlvf.js:25:12)\n    at Object.<anonymous> (/tmp/tmp_wg1mlvf.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length === 0) {\n    return [];\n  }\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let word = s.substring(index, index + 1);\n    if (word.length >= n) {\n      words.push(word);\n    }\n    index += word.length;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpsy1qhxqm.js:30:12)\n    at Object.<anonymous> (/tmp/tmpsy1qhxqm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334305
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    let letter = s[i];\n    \n    if (s.indexOf(letter) !== -1) {\n      let count = 0;\n      \n      for (let j = 0; j < letter.length; j++) {\n        if (letter.charAt(j) === 'a' || letter.charAt(j) === 'e' || letter.charAt(j) === 'i' || letter.charAt(j) === 'o' || letter.charAt(j) === 'u') {\n          count++;\n        }\n      }\n      \n      if (count === n) {\n        result.push(letter);\n      }\n    }\n  }\n  \n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpy_9lebdi.js:33:12)\n    at Object.<anonymous> (/tmp/tmpy_9lebdi.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334304
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == ' ') {\n      continue;\n    }\n    let count = 0;\n    for (let j = 0; j < n; j++) {\n      if (s.charAt(i) == s.charAt(j)) {\n        count++;\n      }\n    }\n    if (count == n) {\n      words.push(s.substr(0, i));\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp87821d7a.js:33:12)\n    at Object.<anonymous> (/tmp/tmp87821d7a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\twords.push(word);\n\t\t\tindex += n;\n\t\t} else {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpq_mh01lt.js:30:12)\n    at Object.<anonymous> (/tmp/tmpq_mh01lt.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334305
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char === ' ' || char === '\\n' || char === '\\t') {\n      continue;\n    }\n    let count = 0;\n    for (let j = 0; j < n; j++) {\n      if (char === s[j]) {\n        count++;\n      }\n    }\n    if (count === n) {\n      words.push(char);\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmptge3ffx8.js:34:12)\n    at Object.<anonymous> (/tmp/tmptge3ffx8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334305
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char === ' ') {\n            continue;\n        }\n        let count = 0;\n        for (let j = 0; j < s.length; j++) {\n            if (s[j] === char) {\n                count++;\n            }\n        }\n        if (count === n) {\n            words.push(s);\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb',\n  'Mary had a little lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpp1rfhk5q.js:34:12)\n    at Object.<anonymous> (/tmp/tmpp1rfhk5q.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary had a little lamb',\n    'Mary had a little lamb',\n    'Mary had a little lamb',\n    'Mary had a little lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNo",
      "stdout": "",
      "timestamp": 1660334305
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char = s[index];\n    if (char === ' ') {\n      index++;\n      continue;\n    }\n    if (char === '.' || char === ',' || char === '?' || char === '!' || char === '(' || char === ')' || char === '[' || char === ']' || char === '{' || char === '}' || char === '|' || char === '\\n' || char === '\\t' || char === '\\r') {\n      index++;\n      continue;\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u' || char === 'y' || char === 'A' || char === 'E' || char === 'I' || char === 'O' || char === 'U' || char === 'Y') {\n      index++;\n      continue;\n    }\n    if (char === 'k' || char === 'l' || char === 'm' || char === 'n' || char === 'p' || char === 'q' || char === 'r' || char === 's' || char === 't' || char === 'v' || char === 'w' || char === 'x' || char === 'z') {\n      index++;\n      continue;\n    }\n    if (char === 'A' || char === 'E' || char === 'I' || char === 'O' || char === 'U' || char === 'Y') {\n      index++;\n      continue;\n    }\n    if (char === 'K' || char === 'L' || char === 'M' || char === 'N' || char === 'P' || char === 'Q' || char === 'R' || char === 'S' || char === 'T' || char === 'V' || char === 'W' || char === 'X' || char === 'Z') {\n      index++;\n      continue;\n    }\n    if (char === 'b' || char === 'c' || char === 'd' || char === 'f' || char === 'g' || char === 'h' || char === 'j' || char === 'k' || char === 'l' || char === 'm' || char === 'n' || char === 'p' || char === 'q' || char === 'r' || char === 's' || char === 't' || char === 'v' || char === 'w' || char === 'x' || char === 'z') {\n      index++;\n      continue;\n    }\n    if (char === 'B' || char === 'C' || char === 'D' || char === 'F' || char === 'G' || char === 'H' || char === 'J' || char === 'K' || char === 'L' || char === 'M' || char === 'N' || char === 'P' || char === 'Q' || char === 'R' || char === 'S' || char === 'T' || char === 'V' || char === 'W' || char === 'X' || char === 'Z') {\n      index++;\n      continue;\n    }\n    if (char === 'h' || char === '\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmcq4b_k9.ts(49,35): error TS1002: Unterminated string literal.\n../../../../tmp/tmpmcq4b_k9.ts(50,1): error TS1005: ')' expected.\n../../../../tmp/tmpmcq4b_k9.ts(65,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334304
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  \n  if (s == \"\") {\n    return words;\n  }\n  \n  for (let i = 0; i < s.length; i++) {\n    let letter = s[i];\n    \n    if (letter != \" \") {\n      words.push(letter);\n    }\n    \n    if (words.length == n) {\n      break;\n    }\n  }\n  \n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n  'r',\n  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmphmsvxnvb.js:31:12)\n    at Object.<anonymous> (/tmp/tmphmsvxnvb.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a', 'r', 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334305
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    let word = s[i];\n    \n    for (let j = 0; j < word.length; j++) {\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n      \n      if (word.charAt(j) == \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppnyexkzg.ts(148,9): error TS1005: ')' expected.\n../../../../tmp/tmppnyexkzg.ts(163,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334304
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length === 0) {\n    return [];\n  }\n  let result: string[] = [];\n  let last: number = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      last = i;\n    }\n    if (last + n === i) {\n      result.push(s.substring(last, i));\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'ary '\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpfqcbi3a9.js:31:12)\n    at Object.<anonymous> (/tmp/tmpfqcbi3a9.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'ary ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334305
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index+n);\n        if (word.length == n) {\n            words.push(word);\n            index += n;\n        }\n        else {\n            index += word.length;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmphmrip_e1.js:30:12)\n    at Object.<anonymous> (/tmp/tmphmrip_e1.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    \n    if (s === \"\") {\n        return result;\n    }\n    \n    let words: string[] = s.split(\" \");\n    \n    for (let i = 0; i < words.length; i++) {\n        let word: string = words[i];\n        \n        if (word.length < n) {\n            continue;\n        }\n        \n        let consonants: string[] = word.split(\"\");\n        \n        for (let j = 0; j < consonants.length; j++) {\n            if (consonants[j] === \"c\" || consonants[j] === \"C\") {\n                consonants.splice(j, 1);\n                j--;\n            }\n        }\n        \n        if (consonants.length === 0) {\n            result.push(word);\n        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmplfuy9w4r.js:39:12)\n    at Object.<anonymous> (/tmp/tmplfuy9w4r.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334305
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < s.length && j < n) {\n        if (s.charAt(i) == s.charAt(j)) {\n            i++;\n            j++;\n        } else if (s.charAt(i) == \" \") {\n            i++;\n        } else {\n            result.push(s.substring(i, j));\n            i = j;\n            j++;\n        }\n    }\n    if (j < n) {\n        result.push(s.substring(i, j));\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpvsbjirep.js:38:12)\n    at Object.<anonymous> (/tmp/tmpvsbjirep.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334305
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length && count < n) {\n        if (s[index] === \" \") {\n            count++;\n        }\n        else {\n            if (s[index] === \" \") {\n                count++;\n            }\n            else {\n                if (s[index] === \" \") {\n                    count++;\n                }\n                else {\n                    if (s[index] === \" \") {\n                        count++;\n                    }\n                    else {\n                        if (s[index] === \" \") {\n                            count++;\n                        }\n                        else {\n                            if (s[index] === \" \") {\n                                count++;\n                            }\n                            else {\n                                if (s[index] === \" \") {\n                                    count++;\n                                }\n                                else {\n                                    if (s[index] === \" \") {\n                                        count++;\n                                    }\n                                    else {\n                                        if (s[index] === \" \") {\n                                            count++;\n                                        }\n                                        else {\n                                            if (s[index] === \" \") {\n                                                count++;\n                                            }\n                                            else {\n                                                if (s[index] === \" \") {\n                                                    count++;\n                                                }\n                                                else {\n                                                    if (s[index] === \" \") {\n                                                        count++;\n                                                    }\n                                                    else {\n                                                        if (s[index] === \" \") {\n                                                            count++;\n                                                        }\n                                                        else {\n                                                            if (s[index] === \" \") {\n                                                                count++;\n                                                            }\n                                                            else {\n                                                                if (s[index] === \" \") {\n                                                                    count++;\n                                                                }\n                                                                else {\n                                                                    if (s[index] === \" \") {\n                                                                        count++;\n                                                                    }\n                                                                    else {\n                                                                                                        if (s[index] === \" \") {\n                                                                            count++;\n                                                                        }\n                                                                        else {\n                                                                            if (s[index] === \" \") {\n                                                                                count++;\n                                                                            }\n                                                                            else {\n                                                                                if (s[index] === \" \") {\n                                                                                    count++;\n                                                                                }\n                                                                                else {\n                                                                                    if (s[index] === \" \") {\n                                                                                        count++;\n                                                                                    }\n                                                                                    else {\n                                                                                        if (s[index] === \" \") {\n                                                                                            count++;\n                                                                                        }\n                                                                                        else {\n                                                                                            if (s[index] === \" \") {\n                                                                                                count++;\n                                                                                            }\n                                                                                            else {\n                                                                                                if (s[index] === \" \") {\n                                                                                                    count++;\n                                                                                                }\n                                                                                                else {\n                                                                                                    if (s[index] === \" \") {\n                                                                                                        count++;\n                                                                                                    }\n                                                                                                    else {\n                                                                                                        if (s[index] === \" \") {\n                                                                                                            count++;\n                                                                                                        }\n                                                                                                        else {\n                                                                                                            if (s[index] === \" \") {\n                                                                                                                count++;\n                                                                                                            }\n                                                                                                            else {\n                                                                                                                if (s[index] === \" \") {\n                                                                                                                    count++;\n                                                                                                                }\n                                                                                                                else {\n                                                                                                                    if (s[index] === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm42wej4u.ts(126,9): error TS1005: ')' expected.\n../../../../tmp/tmpm42wej4u.ts(141,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334305
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  \n  if (s.length == 0) {\n    return result;\n  }\n  \n  let index = 0;\n  while (index < s.length) {\n    let char = s[index];\n    if (char == ' ') {\n      index++;\n      continue;\n    }\n    \n    let count = 0;\n    while (index < s.length && s[index] == char) {\n      index++;\n      count++;\n    }\n    \n    if (count == n) {\n      result.push(s.substr(0, index));\n    }\n  }\n  \n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdw_uzlk6.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdw_uzlk6.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334305
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let currentWord = \"\";\n    while (index < s.length && currentWord.length < n) {\n        if (s[index] === \" \") {\n            words.push(currentWord);\n            currentWord = \"\";\n            index++;\n        } else {\n            currentWord += s[index];\n            index++;\n        }\n    }\n    if (currentWord.length > 0) {\n        words.push(currentWord);\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpn6guq6ll.js:35:12)\n    at Object.<anonymous> (/tmp/tmpn6guq6ll.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334305
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index+n);\n        if (word.length == n) {\n            result.push(word);\n            index += n;\n        }\n        else {\n            index += word.length;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6lzi5w12.js:30:12)\n    at Object.<anonymous> (/tmp/tmp6lzi5w12.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    let letter = s[i];\n    if (letter === ' ') {\n      continue;\n    }\n    let count = 0;\n    for (let j = 0; j < letter.length; j++) {\n      if (letter[j] === letter[j].toUpperCase()) {\n        count++;\n      }\n    }\n    if (count === n) {\n      words.push(s);\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpxkifdopm.js:34:12)\n    at Object.<anonymous> (/tmp/tmpxkifdopm.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334305
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  \n  if (s.length === 0) {\n    return words;\n  }\n  \n  let i = 0;\n  let j = 0;\n  let k = 0;\n  \n  while (i < s.length && j < n) {\n    if (s.charAt(i) === s.charAt(j)) {\n      j++;\n    }\n    else if (s.charAt(i) !== s.charAt(j)) {\n      words.push(s.substring(i, j));\n      i = j;\n      j = 0;\n    }\n    else {\n      i++;\n      j++;\n    }\n  }\n  \n  if (j > 0) {\n    words.push(s.substring(i, j));\n  }\n  \n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp6tridqtd.js:25\n            words.push(s.substring(i, j));\n                  ^\n\nRangeError: Invalid array length\n    at Array.push (<anonymous>)\n    at select_words (/tmp/tmp6tridqtd.js:25:19)\n    at test (/tmp/tmp6tridqtd.js:42:22)\n    at Object.<anonymous> (/tmp/tmp6tridqtd.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334313
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char = s[index];\n    if (char === ' ') {\n      index++;\n      continue;\n    }\n    let count = 0;\n    while (index < s.length && s[index] === char) {\n      index++;\n      count++;\n    }\n    if (count === n) {\n      words.push(s.substr(0, index));\n    }\n    index++;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_eu_ml_x.js:36:12)\n    at Object.<anonymous> (/tmp/tmp_eu_ml_x.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334305
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  if (s.length == 0) {\n    return result;\n  }\n  let words: string[] = s.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word: string = words[i];\n    let count: string[] = select_word(word, n);\n    for (let j = 0; j < count.length; j++) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3ir331h9.ts(20,27): error TS2552: Cannot find name 'select_word'. Did you mean 'select_words'?\n",
      "timestamp": 1660334305
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let currentWord = \"\";\n    let currentLetter = \"\";\n    \n    while (index < s.length) {\n        currentLetter = s[index];\n        if (currentLetter == \" \") {\n            words.push(currentWord);\n            currentWord = \"\";\n            index++;\n        } else if (currentLetter != \" \") {\n            currentWord += currentLetter;\n            index++;\n        }\n        if (index == n) {\n            words.push(currentWord);\n            index++;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'Maryhad',\n  'a',\n  'little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp9u200b54.js:38:12)\n    at Object.<anonymous> (/tmp/tmp9u200b54.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', 'Maryhad', 'a', 'little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334308
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word = s.substr(index, n);\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\t\t\tindex += n;\n\t\t}\n\t\telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpw5katjbm.js:30:12)\n    at Object.<anonymous> (/tmp/tmpw5katjbm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334308
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  for (let i = 0; i < s.length; i += 1) {\n    let char = s[i];\n    if (char === ' ') {\n      continue;\n    }\n    let count = 0;\n    for (let j = 0; j < char.length; j += 1) {\n      if (char[j] === 'a' || char[j] === 'e' || char[j] === 'i' || char[j] === 'o' || char[j] === 'u') {\n        count += 1;\n      }\n    }\n    if (count === n) {\n      words.push(s.substr(0, i));\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpjwvd94sj.js:34:12)\n    at Object.<anonymous> (/tmp/tmpjwvd94sj.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334308
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet words: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char = s[index];\n\t\tif (char === ' ') {\n\t\t\twords.push(s.substring(index, index + 1));\n\t\t\tindex++;\n\t\t}\n\t\telse if (char === '\\'') {\n\t\t\tlet nextIndex = index + 1;\n\t\t\twhile (nextIndex < s.length && s[nextIndex] !== '\\'') {\n\t\t\t\tnextIndex++;\n\t\t\t}\n\t\t\twords.push(s.substring(index, nextIndex));\n\t\t\tindex = nextIndex;\n\t\t}\n\t\telse if (char === '\\'') {\n\t\t\tlet nextIndex = index + 1;\n\t\t\twhile (nextIndex < s.length && s[nextIndex] !== '\\'') {\n\t\t\t\tnextIndex++;\n\t\t\t}\n\t\t\twords.push(s.substring(index, nextIndex));\n\t\t\tindex = nextIndex;\n\t\t}\n\t\telse if (char === '\\'') {\n\t\t\tlet nextIndex = index + 1;\n\t\t\twhile (nextIndex < s.length && s[nextIndex] !== '\\'') {\n\t\t\t\tnextIndex++;\n\t\t\t}\n\t\t\twords.push(s.substring(index, nextIndex));\n\t\t\tindex = nextIndex;\n\t\t}\n\t\telse if (char === '\\'') {\n\t\t\tlet nextIndex = index + 1;\n\t\t\twhile (nextIndex < s.length && s[nextIndex] !== '\\'') {\n\t\t\t\tnextIndex++;\n\t\t\t}\n\t\t\twords.push(s.substring(index, nextIndex));\n\t\t\tindex = nextIndex;\n\t\t}\n\t\telse if (char === '\\'') {\n\t\t\tlet nextIndex = index + 1;\n\t\t\twhile (nextIndex < s.length && s[nextIndex] !== '\\'') {\n\t\t\t\tnextIndex++;\n\t\t\t}\n\t\t\twords.push(s.substring(index, nextIndex));\n\t\t\tindex = nextIndex;\n\t\t}\n\t\telse if (char === '\\'') {\n\t\t\tlet nextIndex = index + 1;\n\t\t\twhile (nextIndex < s.length && s[nextIndex] !== '\\'') {\n\t\t\t\tnextIndex++;\n\t\t\t}\n\t\t\twords.push(s.substring(index, nextIndex));\n\t\t\tindex = nextIndex;\n\t\t}\n\t\telse if (char === '\\'') {\n\t\t\tlet nextIndex = index + 1;\n\t\t\twhile (nextIndex < s.length && s[nextIndex] !== '\\'') {\n\t\t\t\tnextIndex++;\n\t\t\t}\n\t\t\twords.push(s.substring(index, nextIndex));\n\t\t\tindex = nextIndex;\n\t\t}\n\t\telse if (char === '\\'') {\n\t\t\tlet nextIndex = index + 1;\n\t\t\twhile (nextIndex < s.length && s[nextIndex] !== '\\'') {\n\t\t\t\tnextIndex++;\n\t\t\t}\n\t\t\twords.push(s.substring(index, nextIndex));\n\t\t\tindex = nextIndex;\n\t\t}\n\t\telse if (char === '\\'') {\n\t\t\tlet nextIndex = index + 1;\n\t\t\twhile (nextIndex < s.length && s[nextIndex] \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjllvjrc5.ts(88,1): error TS1005: ')' expected.\n../../../../tmp/tmpjllvjrc5.ts(103,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (s === \"\") {\n        return [];\n    }\n    let result: string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length) {\n        if (s[index] === \" \") {\n            count++;\n        }\n        if (count === n) {\n            result.push(s.substring(index, index + 1));\n            index = index + 1;\n            count = 0;\n        }\n        index++;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp73a0x7rw.js:35:12)\n    at Object.<anonymous> (/tmp/tmp73a0x7rw.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334308
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let word = s.substring(index, index+n);\n    if (word.length == n) {\n      words.push(word);\n    }\n    index += n;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpz8vr7upr.js:27:12)\n    at Object.<anonymous> (/tmp/tmpz8vr7upr.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334290
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (s.length == 0) {\n        return [];\n    }\n    let words: string[] = [];\n    let index = 0;\n    let currentWord = \"\";\n    let currentChar = \"\";\n    for (let i = 0; i < s.length; i++) {\n        currentChar = s[i];\n        if (currentChar == \" \") {\n            words.push(currentWord);\n            currentWord = \"\";\n            index = 0;\n        } else {\n            if (currentChar == \"n\") {\n                currentWord += currentChar;\n            } else {\n                currentWord += currentChar;\n                index++;\n            }\n        }\n        if (index == n) {\n            words.push(currentWord);\n            index = 0;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  'Mary',\n  'had',\n  'a',\n  'litt',\n  'little',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp4m9q0ksg.js:46:12)\n    at Object.<anonymous> (/tmp/tmp4m9q0ksg.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'Mary',\n    'had',  'a',\n    'litt', 'little',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334308
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index+n);\n        if (word.length == n) {\n            result.push(word);\n            index += n;\n        }\n        else {\n            index += word.length;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6lzi5w12.js:30:12)\n    at Object.<anonymous> (/tmp/tmp6lzi5w12.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index+n);\n        if (word.length == n) {\n            result.push(word);\n            index += n;\n        }\n        else {\n            index += word.length;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6lzi5w12.js:30:12)\n    at Object.<anonymous> (/tmp/tmp6lzi5w12.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  \n  if(s.length === 0) {\n    return result;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === \" \") {\n      continue;\n    }\n    \n    let count = 0;\n    for(let j = 0; j < n; j++) {\n      if(s.charAt(i) === s.charAt(j)) {\n        count++;\n      }\n    }\n    \n    if(count === n) {\n      result.push(s.substr(0, i));\n    }\n  }\n  \n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp09vf2cz0.js:36:12)\n    at Object.<anonymous> (/tmp/tmp09vf2cz0.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334308
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s == \"\") {\n    return [];\n  }\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char = s[index];\n    if (char === \" \") {\n      index++;\n      continue;\n    }\n    let count = 0;\n    while (index < s.length && s[index] === char) {\n      index++;\n      count++;\n    }\n    if (count === n) {\n      words.push(s.substring(index, index + 1));\n    }\n    index++;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpj87i5qhx.js:39:12)\n    at Object.<anonymous> (/tmp/tmpj87i5qhx.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334308
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    let char = s[index];\n    if (char === \" \") {\n      index++;\n      continue;\n    }\n    if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"n\") {\n      index++;\n      continue;\n    }\n    if (char === \"h\") {\n      index++;\n      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n    }\n    if (char === \"a\") {\n      index++;\n      continue;\n    }\n    if (char === \"e\") {\n      index++;\n      continue;\n    }\n    if (char === \"i\") {\n      index++;\n      continue;\n    }\n    if (char === \"o\") {\n      index++;\n      continue;\n    }\n    if (char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"n\") {\n      index++;\n      continue;\n    }\n    if (char === \"h\") {\n      index++;\n      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n    }\n    if (char === \"a\") {\n      index++;\n      continue;\n    }\n    if (char === \"e\") {\n      index++;\n      continue;\n    }\n    if (char === \"i\") {\n      index++;\n      continue;\n    }\n    if (char === \"o\") {\n      index++;\n      continue;\n    }\n    if (char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"n\") {\n      index++;\n      continue;\n    }\n    if (char === \"h\") {\n      index++;\n      continue;\n    }\n    if (char === \"l\") {\n      index++;\n      continue;\n    }\n    if (char === \"a\") {\n      index++;\n      continue;\n    }\n    if (char === \"e\") {\n      index++;\n      continue;\n    }\n    if (char === \"i\") {\n      index++;\n      continue;\n    }\n    if (char === \"o\") {\n      index++;\n      continue;\n    }\n    if (char === \"u\") {\n      index++;\n      continue;\n    }\n    if (char === \"y\") {\n      index++;\n      continue;\n    }\n    if (char === \"n\") {\n      index++;\n      continue;\n    }\n    if (char === \"h\") {\n      index++;\n      \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3wl09h_y.ts(159,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  let i = 0;\n  while (i < s.length) {\n    if (s.charAt(i) == ' ') {\n      i++;\n      continue;\n    }\n    let j = 0;\n    while (j < n) {\n      if (s.charAt(i) == s.charAt(j)) {\n        j++;\n        continue;\n      }\n      result.push(s.substr(i, j));\n      i = j;\n      j = 0;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp5yim6as5.js:26\n            result.push(s.substr(i, j));\n                   ^\n\nRangeError: Invalid array length\n    at Array.push (<anonymous>)\n    at select_words (/tmp/tmp5yim6as5.js:26:20)\n    at test (/tmp/tmp5yim6as5.js:36:22)\n    at Object.<anonymous> (/tmp/tmp5yim6as5.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334314
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length && index < n) {\n        if (s[index] === ' ') {\n            words.push(s.substr(index));\n            index++;\n        }\n        else {\n            index++;\n        }\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpg70fng0o.js:29:12)\n    at Object.<anonymous> (/tmp/tmpg70fng0o.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334308
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    let currentWord = \"\";\n    while (index < s.length && currentWord.length < n) {\n        if (s[index] == \" \") {\n            result.push(currentWord);\n            currentWord = \"\";\n            index++;\n        } else {\n            currentWord += s[index];\n            index++;\n        }\n    }\n    if (currentWord.length != n) {\n        result.push(currentWord);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpp_vsdmyp.js:35:12)\n    at Object.<anonymous> (/tmp/tmpp_vsdmyp.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334309
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index+n);\n        if (word.length == n) {\n            result.push(word);\n            index += n;\n        }\n        else {\n            index += word.length;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6lzi5w12.js:30:12)\n    at Object.<anonymous> (/tmp/tmp6lzi5w12.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334294
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    if (s.charAt(index) === ' ') {\n      index++;\n      continue;\n    }\n    let consonants = count_consonants(s.substr(index, n));\n    if (consonants === n) {\n      words.push(s.substr(index, n));\n    }\n    index++;\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_jcpfspm.ts(20,22): error TS2304: Cannot find name 'count_consonants'.\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let word = \"\";\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] == \" \") {\n            if (word.length > 0) {\n                words.push(word);\n                word = \"\";\n            }\n        } else {\n            if (count < n) {\n                word += s[i];\n                count++;\n            } else {\n                words.push(word);\n                word = \"\";\n                count = 0;\n            }\n        }\n    }\n    if (word.length > 0) {\n        words.push(word);\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  '',\n  'ad',\n  'a',\n  'l',\n  'ttle',\n  '',\n  'amb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpuyu9jxf5.js:43:12)\n    at Object.<anonymous> (/tmp/tmpuyu9jxf5.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', '',\n    'ad',   'a',\n    'l',    'ttle',\n    '',     'amb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334309
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length === 0) {\n    return [];\n  }\n  const words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n    const char = s[index];\n    if (char === ' ') {\n      words.push(s.slice(index, index + 1));\n      index++;\n    }\n    else if (char === '.') {\n      if (index === s.length - 1) {\n        words.push(s.slice(index, index + 1));\n      }\n      else {\n        const nextChar = s[index + 1];\n        if (nextChar === ' ') {\n          words.push(s.slice(index, index + 2));\n          index += 2;\n        }\n        else {\n          words.push(s.slice(index, index + 1));\n          index++;\n        }\n      }\n    }\n    else if (char === ',' || char === ';') {\n      words.push(s.slice(index, index + 1));\n      index++;\n    }\n    else if (char === '!' || char === '?') {\n      words.push(s.slice(index, index + 1));\n      index++;\n    }\n    else if (char === '\\'') {\n      if (index === s.length - 1) {\n        words.push(s.slice(index, index + 1));\n      }\n      else {\n        const nextChar = s[index + 1];\n        if (nextChar === '\\'') {\n          words.push(s.slice(index, index + 2));\n          index += 2;\n        }\n        else {\n          words.push(s.slice(index, index + 1));\n          index++;\n        }\n      }\n    }\n    else if (char === '(') {\n      if (index === s.length - 1) {\n        words.push(s.slice(index, index + 1));\n      }\n      else {\n        const nextChar = s[index + 1];\n        if (nextChar === '(') {\n          words.push(s.slice(index, index + 2));\n          index += 2;\n        }\n        else {\n          words.push(s.slice(index, index + 1));\n          index++;\n        }\n      }\n    }\n    else if (char === ')') {\n      if (index === s.length - 1) {\n        words.push(s.slice(index, index + 1));\n      }\n      else {\n        const nextChar = s[index + 1];\n        if (nextChar === ')') {\n          words.push(s.slice(index, index + 2));\n          index += 2;\n        }\n        else {\n          words.push(s.slice(index, index + 1));\n          index++;\n        }\n      }\n    }\n    else if (char === '-') {\n      if (index === s.length - 1) {\n        words.push(s.slice(index, index + 1));\n      }\n      else {\n        const nextChar = s[index + 1];\n        if (nextChar === '-') {\n          words.push(s.slice(index, index + 2));\n          index += 2;\n        }\n        else {\n          words.push(s.slice(index, index + 1));\n          index++;\n        }\n      }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0o99o09n.ts(126,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \" \") {\n      continue;\n    }\n    let consonants = count_consonants(s.charAt(i));\n    if (consonants == n) {\n      words.push(s.substr(0, i));\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjwzrkqtr.ts(18,22): error TS2304: Cannot find name 'count_consonants'.\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length && count < n) {\n        if (s[index] === \" \") {\n            count++;\n        } else {\n            words.push(s[index]);\n            count++;\n        }\n        index++;\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n  'r',\n  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp3g0oczs6.js:31:12)\n    at Object.<anonymous> (/tmp/tmp3g0oczs6.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a', 'r', 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334309
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result = [];\n    let i = 0;\n    while (i < s.length) {\n        let word = s.substr(i, n);\n        if (word.length == n) {\n            result.push(word);\n            i += n;\n        }\n        else {\n            i++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpbs1nrl5r.js:30:12)\n    at Object.<anonymous> (/tmp/tmpbs1nrl5r.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length === 0) {\n    return [];\n  }\n  const words: string[] = [];\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (vowels.indexOf(char) !== -1) {\n      continue;\n    }\n    for (let j = 0; j < consonants.length; j++) {\n      if (consonants[j] === char) {\n        words.push(s.substr(0, i) + s.substr(i + 1));\n        break;\n      }\n    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'May had a little lamb',\n  'Mar had a little lamb',\n  'Mary ad a little lamb',\n  'Mary ha a little lamb',\n  'Mary had a ittle lamb',\n  'Mary had a litle lamb',\n  'Mary had a litle lamb',\n  'Mary had a litte lamb',\n  'Mary had a little amb',\n  'Mary had a little lab',\n  'Mary had a little lam'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpim28gfea.js:36:12)\n    at Object.<anonymous> (/tmp/tmpim28gfea.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actu",
      "stdout": "",
      "timestamp": 1660334309
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let word = s.substring(index, index+n);\n        if (words.indexOf(word) === -1) {\n            words.push(word);\n        }\n        index += n;\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la',\n  'mb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp3tdymedl.js:27:12)\n    at Object.<anonymous> (/tmp/tmp3tdymedl.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la', 'mb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334309
    },
    {
      "exit_code": 2,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (s == \"\") {\n        return [];\n    }\n    let words: string[] = [];\n    let index = 0;\n    while (index < s.length) {\n        let char = s[index];\n        if (char == \" \") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"y\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"n\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"t\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"h\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"l\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"s\" || char == \"d\" || char == \"c\" || char == \"m\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"e\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"f\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"g\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"p\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"b\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"v\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"k\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"j\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"x\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"q\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"z\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"x\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"z\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"t\") {\n            words.push(s.substring(index + 1, s.length));\n            index += 1;\n        } else if (char == \"k\") {\n            words.push(s.substring(index + 1, s.length\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyw4l7agv.ts(88,1): error TS1005: ',' expected.\n../../../../tmp/tmpyw4l7agv.ts(88,9): error TS1005: ',' expected.\n../../../../tmp/tmpyw4l7agv.ts(103,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result: string[] = [];\n    let index = 0;\n    let count = 0;\n    while (index < s.length && count < n) {\n        if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n            result.push(s[index]);\n            index++;\n            count++;\n        }\n        index++;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n  'a',\n  'i'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpm1xt4x0v.js:29:12)\n    at Object.<anonymous> (/tmp/tmpm1xt4x0v.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a', 'a', 'i' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334310
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let index = 0;\n    let lastChar = s[0];\n    while (index < s.length && lastChar === s[index]) {\n        lastChar = s[index];\n        index++;\n    }\n    if (index === s.length && lastChar === s[index]) {\n        words.push(s.substr(0, index));\n    }\n    if (index === s.length && lastChar !== s[index]) {\n        words.push(s.substr(0, index));\n    }\n    if (index > s.length && lastChar !== s[index]) {\n        words.push(s.substr(0, index));\n    }\n    if (index > s.length && lastChar === s[index]) {\n        words.push(s.substr(0, index));\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpu8aotmot.js:37:12)\n    at Object.<anonymous> (/tmp/tmpu8aotmot.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334310
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n\tlet result = [];\n\tlet i = 0;\n\twhile (i < s.length) {\n\t\tlet word = s.substr(i, n);\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\t\t\ti += n;\n\t\t} else {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmps0qu162c.js:30:12)\n    at Object.<anonymous> (/tmp/tmps0qu162c.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334301
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length == 0) {\n    return [];\n  }\n\n  const result: any = [];\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n  const vowel_counter: any = {};\n  const consonant_counter: any = {};\n\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (vowels.indexOf(char) !== -1) {\n      vowel_counter[char] = (vowel_counter[char] || 0) + 1;\n    }\n    if (consonants.indexOf(char) !== -1) {\n      consonant_counter[char] = (consonant_counter[char] || 0) + 1;\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    const char = s[i];\n    if (vowel_counter[char] === n) {\n      result.push(char);\n    }\n    if (consonant_counter[char] === n) {\n      result.push(char);\n    }\n  }\n\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdet_4tgb.js:44:12)\n    at Object.<anonymous> (/tmp/tmpdet_4tgb.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334310
    },
    {
      "exit_code": 1,
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result: string[] = [];\n  \n  if (s.length == 0) {\n    return result;\n  }\n  \n  let vowels = \"aeiou\";\n  let consonants = \"bcdfghjklmnpqrstvwxyz\";\n  \n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (vowels.indexOf(char) == -1) {\n      if (consonants.indexOf(char) == -1) {\n        result.push(s[i]);\n      }\n    }\n  }\n  \n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  ' ',\n  ' ',\n  ' ',\n  ' '\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpk5xwjcry.js:32:12)\n    at Object.<anonymous> (/tmp/tmpk5xwjcry.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', ' ', ' ', ' ', ' ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334310
    }
  ]
}