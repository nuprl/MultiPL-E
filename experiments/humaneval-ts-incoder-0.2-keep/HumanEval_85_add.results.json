{
  "language": "ts",
  "name": "HumanEval_85_add",
  "results": [
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evens: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(lst[i]);\n    }\n  }\n  return evens.reduce((a, b) => a + b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpfw4icr3l.js:16:12)\n    at Object.<anonymous> (/tmp/tmpfw4icr3l.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndex += lst[i];\n    } else {\n      oddIndex += lst[i];\n    }\n  }\n  return evenIndex + oddIndex;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpoaay03eb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpoaay03eb.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 1) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpz5ispmsr.js:23:12)\n    at Object.<anonymous> (/tmp/tmpz5ispmsr.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndexes = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < evenIndexes.length; i++) {\n    sum += lst[evenIndexes[i]];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp6mc39s1w.js:20:12)\n    at Object.<anonymous> (/tmp/tmp6mc39s1w.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      lst[evenIndex] += lst[oddIndex];\n      lst[oddIndex] = undefined;\n    }\n    evenIndex += 2;\n    oddIndex += 2;\n  }\n  return lst[0];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpfcweqwgu.js:20:12)\n    at Object.<anonymous> (/tmp/tmpfcweqwgu.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmprubv_vv5.js:16:12)\n    at Object.<anonymous> (/tmp/tmprubv_vv5.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpuo7zowjm.js:23:12)\n    at Object.<anonymous> (/tmp/tmpuo7zowjm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  let odd: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0) + odd.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpgo2_0zu4.js:20:12)\n    at Object.<anonymous> (/tmp/tmpgo2_0zu4.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndex.push(i);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < evenIndex.length; i++) {\n    sum += lst[evenIndex[i]];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpwvikxgts.js:20:12)\n    at Object.<anonymous> (/tmp/tmpwvikxgts.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex += 2;\n      oddIndex += 2;\n    } else {\n      sum += lst[oddIndex];\n      evenIndex += 1;\n      oddIndex += 1;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n132\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpoqhv55ws.js:26:12)\n    at Object.<anonymous> (/tmp/tmpoqhv55ws.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 132,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndexes: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < evenIndexes.length; i++) {\n    sum += lst[evenIndexes[i]];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp3q8hyloi.js:20:12)\n    at Object.<anonymous> (/tmp/tmp3q8hyloi.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpnn0avfrd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnn0avfrd.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpnn0avfrd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnn0avfrd.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  let odd: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.concat(odd).reduce((a, b) => a + b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmplmhqwkqx.js:20:12)\n    at Object.<anonymous> (/tmp/tmplmhqwkqx.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndexes: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    }\n  }\n  let evenSum = 0;\n  for (let i = 0; i < evenIndexes.length; i++) {\n    evenSum += lst[evenIndexes[i]];\n  }\n  return evenSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmphvlst10z.js:20:12)\n    at Object.<anonymous> (/tmp/tmphvlst10z.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpuo7zowjm.js:23:12)\n    at Object.<anonymous> (/tmp/tmpuo7zowjm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let evenSum = 0;\n  let oddSum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      evenSum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      oddSum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return evenSum + oddSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp3paaokjz.js:24:12)\n    at Object.<anonymous> (/tmp/tmp3paaokjz.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpkix0zdi4.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkix0zdi4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpnn0avfrd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnn0avfrd.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndexes = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < evenIndexes.length; i++) {\n    sum += lst[evenIndexes[i]];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp6mc39s1w.js:20:12)\n    at Object.<anonymous> (/tmp/tmp6mc39s1w.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 1) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpz5ispmsr.js:23:12)\n    at Object.<anonymous> (/tmp/tmpz5ispmsr.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpo70p2qyp.js:23:12)\n    at Object.<anonymous> (/tmp/tmpo70p2qyp.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpo70p2qyp.js:23:12)\n    at Object.<anonymous> (/tmp/tmpo70p2qyp.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex += 2;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex += 2;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpcic1tel3.js:23:12)\n    at Object.<anonymous> (/tmp/tmpcic1tel3.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 1 && lst[oddIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n      oddIndex++;\n    } else {\n      evenIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpf7ettun3.js:23:12)\n    at Object.<anonymous> (/tmp/tmpf7ettun3.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpo70p2qyp.js:23:12)\n    at Object.<anonymous> (/tmp/tmpo70p2qyp.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpkix0zdi4.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkix0zdi4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  let odd: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0) + odd.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpgo2_0zu4.js:20:12)\n    at Object.<anonymous> (/tmp/tmpgo2_0zu4.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 1) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpz5ispmsr.js:23:12)\n    at Object.<anonymous> (/tmp/tmpz5ispmsr.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpuo7zowjm.js:23:12)\n    at Object.<anonymous> (/tmp/tmpuo7zowjm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex += 2;\n      oddIndex += 2;\n    } else {\n      sum += lst[oddIndex];\n      evenIndex += 1;\n      oddIndex += 1;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n132\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpoqhv55ws.js:26:12)\n    at Object.<anonymous> (/tmp/tmpoqhv55ws.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 132,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpuo7zowjm.js:23:12)\n    at Object.<anonymous> (/tmp/tmpuo7zowjm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  let odd: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.concat(odd).reduce((a, b) => a + b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmplmhqwkqx.js:20:12)\n    at Object.<anonymous> (/tmp/tmplmhqwkqx.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpkix0zdi4.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkix0zdi4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpkix0zdi4.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkix0zdi4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndex.push(i);\n    }\n  }\n  let evenSum = 0;\n  for (let i = 0; i < evenIndex.length; i++) {\n    evenSum += lst[evenIndex[i]];\n  }\n  return evenSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpvk53nocy.js:20:12)\n    at Object.<anonymous> (/tmp/tmpvk53nocy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex: number[] = [];\n  let oddIndex: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndex.push(i);\n    } else {\n      oddIndex.push(i);\n    }\n  }\n  let evenSum = 0;\n  let oddSum = 0;\n  for (let i = 0; i < evenIndex.length; i++) {\n    evenSum += lst[evenIndex[i]];\n  }\n  for (let i = 0; i < oddIndex.length; i++) {\n    oddSum += lst[oddIndex[i]];\n  }\n  return evenSum + oddSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmptkx9m7t4.js:28:12)\n    at Object.<anonymous> (/tmp/tmptkx9m7t4.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpnn0avfrd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnn0avfrd.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n      oddIndex++;\n    } else {\n      sum += lst[oddIndex];\n      evenIndex++;\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n140\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpckgt70e6.js:26:12)\n    at Object.<anonymous> (/tmp/tmpckgt70e6.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 140,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evens: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(lst[i]);\n    }\n  }\n  return evens.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpq4hnixyd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpq4hnixyd.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndexes: number[] = [];\n  let oddIndexes: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    } else {\n      oddIndexes.push(i);\n    }\n  }\n  let evenSum = 0;\n  let oddSum = 0;\n  for (let i = 0; i < evenIndexes.length; i++) {\n    evenSum += lst[evenIndexes[i]];\n  }\n  for (let i = 0; i < oddIndexes.length; i++) {\n    oddSum += lst[oddIndexes[i]];\n  }\n  return evenSum + oddSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmptnbzvp4q.js:28:12)\n    at Object.<anonymous> (/tmp/tmptnbzvp4q.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpkix0zdi4.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkix0zdi4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpuo7zowjm.js:23:12)\n    at Object.<anonymous> (/tmp/tmpuo7zowjm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpo70p2qyp.js:23:12)\n    at Object.<anonymous> (/tmp/tmpo70p2qyp.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmptkqrc36o.js:23:12)\n    at Object.<anonymous> (/tmp/tmptkqrc36o.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpkix0zdi4.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkix0zdi4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      lst[evenIndex] += lst[oddIndex];\n      lst[oddIndex] = 0;\n      evenIndex++;\n    } else {\n      lst[oddIndex] += lst[evenIndex];\n      lst[evenIndex] = 0;\n      oddIndex++;\n    }\n  }\n  return lst[lst.length - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely deep-equal\n\n12\n    at test (/tmp/tmpyh2rwyk6.js:27:12)\n    at Object.<anonymous> (/tmp/tmpyh2rwyk6.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected: 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpkix0zdi4.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkix0zdi4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let evenSum = 0;\n  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      oddSum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return evenSum + oddSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndexes: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < evenIndexes.length; i++) {\n    sum += lst[evenIndexes[i]];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp3q8hyloi.js:20:12)\n    at Object.<anonymous> (/tmp/tmp3q8hyloi.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex += 2;\n      oddIndex += 2;\n    } else {\n      sum += lst[oddIndex];\n      evenIndex += 1;\n      oddIndex += 1;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n132\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpoqhv55ws.js:26:12)\n    at Object.<anonymous> (/tmp/tmpoqhv55ws.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 132,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evens: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(lst[i]);\n    }\n  }\n  return evens.reduce((a, b) => a + b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpfw4icr3l.js:16:12)\n    at Object.<anonymous> (/tmp/tmpfw4icr3l.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let evenSum = 0;\n  let oddSum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      evenSum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      oddSum += lst[evenIndex];\n      oddIndex++;\n    }\n  }\n  return evenSum + oddSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpthpl_fmk.js:24:12)\n    at Object.<anonymous> (/tmp/tmpthpl_fmk.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndex += lst[i];\n    } else {\n      oddIndex += lst[i];\n    }\n  }\n  return evenIndex + oddIndex;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpoaay03eb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpoaay03eb.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 2,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  let odd: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.concat(odd);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2tedwmiq.ts(14,3): error TS2322: Type 'number[]' is not assignable to type 'number'.\n",
      "timestamp": 1660333682
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpo70p2qyp.js:23:12)\n    at Object.<anonymous> (/tmp/tmpo70p2qyp.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpnn0avfrd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnn0avfrd.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndexes: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < evenIndexes.length; i++) {\n    sum += lst[evenIndexes[i]];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp3q8hyloi.js:20:12)\n    at Object.<anonymous> (/tmp/tmp3q8hyloi.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evens: number[] = [];\n  let odds: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(lst[i]);\n    } else {\n      odds.push(lst[i]);\n    }\n  }\n  return evens.reduce((a, b) => a + b, 0) + odds.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmprvj17gyv.js:20:12)\n    at Object.<anonymous> (/tmp/tmprvj17gyv.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex += 2;\n      oddIndex += 2;\n    } else {\n      sum += lst[oddIndex];\n      evenIndex += 1;\n      oddIndex += 1;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n132\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpoqhv55ws.js:26:12)\n    at Object.<anonymous> (/tmp/tmpoqhv55ws.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 132,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpnn0avfrd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnn0avfrd.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpuo7zowjm.js:23:12)\n    at Object.<anonymous> (/tmp/tmpuo7zowjm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n      oddIndex++;\n    } else {\n      evenIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpnc4yta22.js:23:12)\n    at Object.<anonymous> (/tmp/tmpnc4yta22.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndex.push(i);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < evenIndex.length; i++) {\n    sum += lst[evenIndex[i]];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpwvikxgts.js:20:12)\n    at Object.<anonymous> (/tmp/tmpwvikxgts.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n      oddIndex++;\n    } else {\n      sum += lst[oddIndex];\n      evenIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n176\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpbq4864yk.js:24:12)\n    at Object.<anonymous> (/tmp/tmpbq4864yk.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 176,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex += 2;\n      oddIndex += 2;\n    } else {\n      sum += lst[oddIndex];\n      evenIndex += 1;\n      oddIndex += 1;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n132\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpoqhv55ws.js:26:12)\n    at Object.<anonymous> (/tmp/tmpoqhv55ws.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 132,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmprubv_vv5.js:16:12)\n    at Object.<anonymous> (/tmp/tmprubv_vv5.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  let odd: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0) + odd.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpgo2_0zu4.js:20:12)\n    at Object.<anonymous> (/tmp/tmpgo2_0zu4.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpkix0zdi4.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkix0zdi4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp70ci4h2b.js:16:12)\n    at Object.<anonymous> (/tmp/tmp70ci4h2b.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndex.push(i);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < evenIndex.length; i++) {\n    sum += lst[evenIndex[i]];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpwvikxgts.js:20:12)\n    at Object.<anonymous> (/tmp/tmpwvikxgts.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 1) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpz5ispmsr.js:23:12)\n    at Object.<anonymous> (/tmp/tmpz5ispmsr.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 1 && lst[oddIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n      oddIndex++;\n    } else {\n      evenIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpf7ettun3.js:23:12)\n    at Object.<anonymous> (/tmp/tmpf7ettun3.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      lst[evenIndex] += lst[oddIndex];\n    }\n    evenIndex++;\n    oddIndex++;\n  }\n  return lst[evenIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpj4wdzn1_.js:19:12)\n    at Object.<anonymous> (/tmp/tmpj4wdzn1_.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpnn0avfrd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnn0avfrd.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpo70p2qyp.js:23:12)\n    at Object.<anonymous> (/tmp/tmpo70p2qyp.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      lst[evenIndex] += lst[oddIndex];\n    }\n    evenIndex++;\n    oddIndex++;\n  }\n  return lst[0];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmppyblnh7h.js:19:12)\n    at Object.<anonymous> (/tmp/tmppyblnh7h.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpuo7zowjm.js:23:12)\n    at Object.<anonymous> (/tmp/tmpuo7zowjm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even += lst[i];\n    } else {\n      odd += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpkikri3tv.js:20:12)\n    at Object.<anonymous> (/tmp/tmpkikri3tv.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpkix0zdi4.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkix0zdi4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even = lst[i] + even;\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp6r1tw_3c.js:16:12)\n    at Object.<anonymous> (/tmp/tmp6r1tw_3c.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmprubv_vv5.js:16:12)\n    at Object.<anonymous> (/tmp/tmprubv_vv5.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp70ci4h2b.js:16:12)\n    at Object.<anonymous> (/tmp/tmp70ci4h2b.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 1) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpz5ispmsr.js:23:12)\n    at Object.<anonymous> (/tmp/tmpz5ispmsr.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndex.push(i);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < evenIndex.length; i++) {\n    sum += lst[evenIndex[i]];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpwvikxgts.js:20:12)\n    at Object.<anonymous> (/tmp/tmpwvikxgts.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpuo7zowjm.js:23:12)\n    at Object.<anonymous> (/tmp/tmpuo7zowjm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpnn0avfrd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnn0avfrd.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpuo7zowjm.js:23:12)\n    at Object.<anonymous> (/tmp/tmpuo7zowjm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpnn0avfrd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnn0avfrd.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 1 && lst[oddIndex] % 2 !== 0) {\n      lst[evenIndex] += lst[oddIndex];\n      lst[oddIndex] = 0;\n    }\n    evenIndex += 2;\n    oddIndex += 2;\n  }\n  return lst[evenIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpe1tvcljl.js:20:12)\n    at Object.<anonymous> (/tmp/tmpe1tvcljl.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  let odd: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0) + odd.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpgo2_0zu4.js:20:12)\n    at Object.<anonymous> (/tmp/tmpgo2_0zu4.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  let odd: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.concat(odd).reduce((a, b) => a + b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmplmhqwkqx.js:20:12)\n    at Object.<anonymous> (/tmp/tmplmhqwkqx.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    } else {\n      oddIndexes.push(i);\n    }\n  }\n  for (let i = 0; i < evenIndexes.length; i++) {\n    lst[evenIndexes[i]] = lst[evenIndexes[i]] + lst[oddIndexes[i]];\n  }\n  return lst.reduce((a, b) => a + b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n180\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpc4qxd_nx.js:23:12)\n    at Object.<anonymous> (/tmp/tmpc4qxd_nx.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 180,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmprubv_vv5.js:16:12)\n    at Object.<anonymous> (/tmp/tmprubv_vv5.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp70ci4h2b.js:16:12)\n    at Object.<anonymous> (/tmp/tmp70ci4h2b.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 2,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  let odd: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.concat(odd);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2tedwmiq.ts(14,3): error TS2322: Type 'number[]' is not assignable to type 'number'.\n",
      "timestamp": 1660333682
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evens: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(lst[i]);\n    }\n  }\n  return evens.reduce((a, b) => a + b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpfw4icr3l.js:16:12)\n    at Object.<anonymous> (/tmp/tmpfw4icr3l.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": -1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      lst[evenIndex] += lst[oddIndex];\n      lst[oddIndex] = 0;\n    } else {\n      evenIndex++;\n      oddIndex++;\n    }\n  }\n  return lst[0];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpkix0zdi4.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkix0zdi4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndexes = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < evenIndexes.length; i++) {\n    sum += lst[evenIndexes[i]];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp6mc39s1w.js:20:12)\n    at Object.<anonymous> (/tmp/tmp6mc39s1w.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evens: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(lst[i]);\n    }\n  }\n  return evens.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpq4hnixyd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpq4hnixyd.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndexes: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < evenIndexes.length; i++) {\n    sum += lst[evenIndexes[i]];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp3q8hyloi.js:20:12)\n    at Object.<anonymous> (/tmp/tmp3q8hyloi.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  let odd: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0) + odd.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpgo2_0zu4.js:20:12)\n    at Object.<anonymous> (/tmp/tmpgo2_0zu4.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndexes: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < evenIndexes.length; i++) {\n    sum += lst[evenIndexes[i]];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp3q8hyloi.js:20:12)\n    at Object.<anonymous> (/tmp/tmp3q8hyloi.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpo70p2qyp.js:23:12)\n    at Object.<anonymous> (/tmp/tmpo70p2qyp.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpkix0zdi4.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkix0zdi4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpkix0zdi4.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkix0zdi4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpo70p2qyp.js:23:12)\n    at Object.<anonymous> (/tmp/tmpo70p2qyp.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpkix0zdi4.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkix0zdi4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even = lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp9a_582ng.js:18:12)\n    at Object.<anonymous> (/tmp/tmp9a_582ng.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n      oddIndex++;\n    } else {\n      evenIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpnc4yta22.js:23:12)\n    at Object.<anonymous> (/tmp/tmpnc4yta22.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      lst[evenIndex] += lst[oddIndex];\n      lst[oddIndex] = 0;\n      evenIndex++;\n      oddIndex++;\n    } else {\n      evenIndex++;\n    }\n  }\n  return lst[lst.length - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpwcfs354j.js:25:12)\n    at Object.<anonymous> (/tmp/tmpwcfs354j.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  let odd: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0) + odd.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpgo2_0zu4.js:20:12)\n    at Object.<anonymous> (/tmp/tmpgo2_0zu4.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  let odd: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.concat(odd).reduce((a, b) => a + b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmplmhqwkqx.js:20:12)\n    at Object.<anonymous> (/tmp/tmplmhqwkqx.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpnn0avfrd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnn0avfrd.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndexes: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < evenIndexes.length; i++) {\n    sum += lst[evenIndexes[i]];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp3q8hyloi.js:20:12)\n    at Object.<anonymous> (/tmp/tmp3q8hyloi.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let evenSum = 0;\n  let oddSum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      evenSum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      oddSum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return evenSum + oddSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp3paaokjz.js:24:12)\n    at Object.<anonymous> (/tmp/tmp3paaokjz.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpkix0zdi4.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkix0zdi4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex: number[] = [];\n  let oddIndex: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndex.push(i);\n    } else {\n      oddIndex.push(i);\n    }\n  }\n  for (let i = 0; i < evenIndex.length; i++) {\n    lst[evenIndex[i]] += lst[oddIndex[i]];\n  }\n  return lst[lst.length - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpf40vwhxz.js:25:12)\n    at Object.<anonymous> (/tmp/tmpf40vwhxz.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpkix0zdi4.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkix0zdi4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpo70p2qyp.js:23:12)\n    at Object.<anonymous> (/tmp/tmpo70p2qyp.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpczen8fpf.js:23:12)\n    at Object.<anonymous> (/tmp/tmpczen8fpf.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      lst[evenIndex] += lst[oddIndex];\n      lst[oddIndex] = undefined;\n    }\n    evenIndex++;\n    oddIndex++;\n  }\n  return lst.reduce((a, b) => a + b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp77wh1vt6.js:20:12)\n    at Object.<anonymous> (/tmp/tmp77wh1vt6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333684
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  let odd: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0) + odd.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpgo2_0zu4.js:20:12)\n    at Object.<anonymous> (/tmp/tmpgo2_0zu4.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even += lst[i];\n    } else {\n      odd += lst[i];\n    }\n  }\n  return even + odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpp3ymiu95.js:20:12)\n    at Object.<anonymous> (/tmp/tmpp3ymiu95.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333685
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpkix0zdi4.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkix0zdi4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpkix0zdi4.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkix0zdi4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": -1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      lst[evenIndex] += lst[oddIndex];\n      lst[oddIndex] = 0;\n    } else {\n      evenIndex++;\n      oddIndex++;\n    }\n  }\n  return lst[0];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333699
    },
    {
      "exit_code": 2,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  let odd: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.concat(odd);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2tedwmiq.ts(14,3): error TS2322: Type 'number[]' is not assignable to type 'number'.\n",
      "timestamp": 1660333682
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpnn0avfrd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnn0avfrd.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpy6_f2io3.js:16:12)\n    at Object.<anonymous> (/tmp/tmpy6_f2io3.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333685
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 1) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpz5ispmsr.js:23:12)\n    at Object.<anonymous> (/tmp/tmpz5ispmsr.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let evenSum = 0;\n  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      oddSum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return evenSum + oddSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndexes: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < evenIndexes.length; i++) {\n    sum += lst[evenIndexes[i]];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp3q8hyloi.js:20:12)\n    at Object.<anonymous> (/tmp/tmp3q8hyloi.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpnn0avfrd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnn0avfrd.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let evenSum = 0;\n  let oddSum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      evenSum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      oddSum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return evenSum + oddSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpdiahy45v.js:24:12)\n    at Object.<anonymous> (/tmp/tmpdiahy45v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333685
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpo70p2qyp.js:23:12)\n    at Object.<anonymous> (/tmp/tmpo70p2qyp.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evens: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(lst[i]);\n    }\n  }\n  return evens.reduce((a, b) => a + b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpfw4icr3l.js:16:12)\n    at Object.<anonymous> (/tmp/tmpfw4icr3l.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpnn0avfrd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnn0avfrd.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpczen8fpf.js:23:12)\n    at Object.<anonymous> (/tmp/tmpczen8fpf.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndex++;\n    } else {\n      oddIndex++;\n    }\n  }\n  return evenIndex + lst[evenIndex] + lst[oddIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n177\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpc12vx5ay.js:20:12)\n    at Object.<anonymous> (/tmp/tmpc12vx5ay.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 177,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333685
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 1) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpz5ispmsr.js:23:12)\n    at Object.<anonymous> (/tmp/tmpz5ispmsr.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpuo7zowjm.js:23:12)\n    at Object.<anonymous> (/tmp/tmpuo7zowjm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndexes: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    }\n  }\n  let evenSum = 0;\n  for (let i = 0; i < evenIndexes.length; i++) {\n    evenSum += lst[evenIndexes[i]];\n  }\n  return evenSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmphvlst10z.js:20:12)\n    at Object.<anonymous> (/tmp/tmphvlst10z.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  let odd: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.concat(odd).reduce((a, b) => a + b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmplmhqwkqx.js:20:12)\n    at Object.<anonymous> (/tmp/tmplmhqwkqx.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evens: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(lst[i]);\n    }\n  }\n  return evens.reduce((a, b) => a + b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpfw4icr3l.js:16:12)\n    at Object.<anonymous> (/tmp/tmpfw4icr3l.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpo70p2qyp.js:23:12)\n    at Object.<anonymous> (/tmp/tmpo70p2qyp.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even = lst[i] + even;\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp6r1tw_3c.js:16:12)\n    at Object.<anonymous> (/tmp/tmp6r1tw_3c.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n146\n\nshould loosely deep-equal\n\n122\n    at test (/tmp/tmpcknp1grm.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcknp1grm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 146,\n  expected: 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpkix0zdi4.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkix0zdi4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evens: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(lst[i]);\n    }\n  }\n  return evens.reduce((a, b) => a + b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpfw4icr3l.js:16:12)\n    at Object.<anonymous> (/tmp/tmpfw4icr3l.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let evenSum = 0;\n  let oddSum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      evenSum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      oddSum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return evenSum + oddSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp3paaokjz.js:24:12)\n    at Object.<anonymous> (/tmp/tmp3paaokjz.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpnn0avfrd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpnn0avfrd.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpy6_f2io3.js:16:12)\n    at Object.<anonymous> (/tmp/tmpy6_f2io3.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333685
    },
    {
      "exit_code": 1,
      "program": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst: number[]): number {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmp2beer0mw.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2beer0mw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    }
  ]
}