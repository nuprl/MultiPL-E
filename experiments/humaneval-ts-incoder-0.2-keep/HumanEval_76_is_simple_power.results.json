{
  "language": "ts",
  "name": "HumanEval_76_is_simple_power",
  "results": [
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return false;\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5rz_ad5t.js:30:12)\n    at Object.<anonymous> (/tmp/tmp5rz_ad5t.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n == 0) {\n        return true;\n    }\n    if (n == 1) {\n        return x % n == 0;\n    }\n    if (n % 2 == 0) {\n        return is_simple_power(x, n / 2);\n    }\n    return is_simple_power(x * x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmps86nfu4g.js:27:12)\n    at Object.<anonymous> (/tmp/tmps86nfu4g.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk396m07l.ts(184,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 2 === 1) return true;\n    if (n % 3 === 0) return false;\n    if (n % 3 === 1) return true;\n    if (n % 4 === 0) return false;\n    if (n % 4 === 1) return true;\n    if (n % 5 === 0) return false;\n    if (n % 5 === 1) return true;\n    if (n % 6 === 0) return false;\n    if (n % 6 === 1) return true;\n    if (n % 7 === 0) return false;\n    if (n % 7 === 1) return true;\n    if (n % 8 === 0) return false;\n    if (n % 8 === 1) return true;\n    if (n % 9 === 0) return false;\n    if (n % 9 === 1) return true;\n    if (n % 10 === 0) return false;\n    if (n % 10 === 1) return true;\n    if (n % 11 === 0) return false;\n    if (n % 11 === 1) return true;\n    if (n % 12 === 0) return false;\n    if (n % 12 === 1) return true;\n    if (n % 13 === 0) return false;\n    if (n % 13 === 1) return true;\n    if (n % 14 === 0) return false;\n    if (n % 14 === 1) return true;\n    if (n % 15 === 0) return false;\n    if (n % 15 === 1) return true;\n    if (n % 16 === 0) return false;\n    if (n % 16 === 1) return true;\n    if (n % 17 === 0) return false;\n    if (n % 17 === 1) return true;\n    if (n % 18 === 0) return false;\n    if (n % 18 === 1) return true;\n    if (n % 19 === 0) return false;\n    if (n % 19 === 1) return true;\n    if (n % 20 === 0) return false;\n    if (n % 20 === 1) return true;\n    if (n % 21 === 0) return false;\n    if (n % 21 === 1) return true;\n    if (n % 22 === 0) return false;\n    if (n % 22 === 1) return true;\n    if (n % 23 === 0) return false;\n    if (n % 23 === 1) return true;\n    if (n % 24 === 0) return false;\n    if (n % 24 === 1) return true;\n    if (n % 25 === 0) return false;\n    if (n % 25 === 1) return true;\n    if (n % 26 === 0) return false;\n    if (n % 26 === 1) return true;\n    if (n % 27 === 0) return false;\n    if (n % 27 === 1) return true;\n    if (n % 28 === 0) return false;\n    if (n % 28 === 1) return true;\n    if (n % 29 === 0) return false;\n    if (n % 29 === 1) return true;\n    if (n % 30 === 0) return false;\n    if (n % 30 === 1) return true;\n    if (n % 31 === 0) return false;\n    if (n % 31 === 1) return true;\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpx6b81wbz.js:141:12)\n    at Object.<anonymous> (/tmp/tmpx6b81wbz.js:152:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpu_vsybny.js:51:12)\n    at Object.<anonymous> (/tmp/tmpu_vsybny.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    let power = 1;\n    while (power < n) {\n        if (x === Math.pow(power, n)) {\n            return true;\n        }\n        power *= 2;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzsb8lsfl.js:36:12)\n    at Object.<anonymous> (/tmp/tmpzsb8lsfl.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (x === 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return is_simple_power(x, n / 2);\n  }\n  return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmprbqw5296.js:27:12)\n    at Object.<anonymous> (/tmp/tmprbqw5296.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x / 2, n);\n    }\n    return is_simple_power(x * x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpn6e9sj5e.js:32:12)\n    at Object.<anonymous> (/tmp/tmpn6e9sj5e.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n < 1) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n === 0 || n !== n) {\n    return false;\n  }\n  if (n % 2 === 0 && n % n % 2 === 0) {\n    return true;\n  }\n  return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbbxzbp5c.js:32:12)\n    at Object.<anonymous> (/tmp/tmpbbxzbp5c.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvut5vj38.js:39:12)\n    at Object.<anonymous> (/tmp/tmpvut5vj38.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvut5vj38.js:39:12)\n    at Object.<anonymous> (/tmp/tmpvut5vj38.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpr1apelwv.js:32:12)\n    at Object.<anonymous> (/tmp/tmpr1apelwv.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 0 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 0 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 0 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1uw_h_nj.ts(130,9): error TS1005: ')' expected.\n../../../../tmp/tmp1uw_h_nj.ts(148,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n < 1) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n === 0) {\n    return true;\n  }\n  return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmplqqto8p8.js:29:12)\n    at Object.<anonymous> (/tmp/tmplqqto8p8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (x === 0) return false;\n    if (x === 1) return true;\n    if (x === -1) return true;\n    if (x === -2) return true;\n    if (x === -3) return true;\n    if (x === -4) return true;\n    if (x === -5) return true;\n    if (x === -6) return true;\n    if (x === -7) return true;\n    if (x === -8) return true;\n    if (x === -9) return true;\n    if (x === -10) return true;\n    if (x === -11) return true;\n    if (x === -12) return true;\n    if (x === -13) return true;\n    if (x === -14) return true;\n    if (x === -15) return true;\n    if (x === -16) return true;\n    if (x === -17) return true;\n    if (x === -18) return true;\n    if (x === -19) return true;\n    if (x === -20) return true;\n    if (x === -21) return true;\n    if (x === -22) return true;\n    if (x === -23) return true;\n    if (x === -24) return true;\n    if (x === -25) return true;\n    if (x === -26) return true;\n    if (x === -27) return true;\n    if (x === -28) return true;\n    if (x === -29) return true;\n    if (x === -30) return true;\n    if (x === -31) return true;\n    if (x === -32) return true;\n    if (x === -33) return true;\n    if (x === -34) return true;\n    if (x === -35) return true;\n    if (x === -36) return true;\n    if (x === -37) return true;\n    if (x === -38) return true;\n    if (x === -39) return true;\n    if (x === -40) return true;\n    if (x === -41) return true;\n    if (x === -42) return true;\n    if (x === -43) return true;\n    if (x === -44) return true;\n    if (x === -45) return true;\n    if (x === -46) return true;\n    if (x === -47) return true;\n    if (x === -48) return true;\n    if (x === -49) return true;\n    if (x === -50) return true;\n    if (x === -51) return true;\n    if (x === -52) return true;\n    if (x === -53) return true;\n    if (x === -54) return true;\n    if (x === -55) return true;\n    if (x === -56) return true;\n    if (x === -57) return true;\n    if (x === -58) return true;\n    if (x === -59) return true;\n    if (x === -60) return true;\n    if (x === -61) return true;\n    if (x === -62) return true;\n    if (x === -63) return true;\n    if (x === -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps55rnd5d.ts(80,9): error TS1005: ')' expected.\n../../../../tmp/tmps55rnd5d.ts(98,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9jqp1s5i.js:30:12)\n    at Object.<anonymous> (/tmp/tmp9jqp1s5i.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpml1gkum1.js:32:12)\n    at Object.<anonymous> (/tmp/tmpml1gkum1.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === 2) {\n        return true;\n    }\n    if (x === 3) {\n        return true;\n    }\n    if (x === 4) {\n        return true;\n    }\n    if (x === 5) {\n        return true;\n    }\n    if (x === 6) {\n        return true;\n    }\n    if (x === 7) {\n        return true;\n    }\n    if (x === 8) {\n        return true;\n    }\n    if (x === 9) {\n        return true;\n    }\n    if (x === 10) {\n        return true;\n    }\n    if (x === 11) {\n        return true;\n    }\n    if (x === 12) {\n        return true;\n    }\n    if (x === 13) {\n        return true;\n    }\n    if (x === 14) {\n        return true;\n    }\n    if (x === 15) {\n        return true;\n    }\n    if (x === 16) {\n        return true;\n    }\n    if (x === 17) {\n        return true;\n    }\n    if (x === 18) {\n        return true;\n    }\n    if (x === 19) {\n        return true;\n    }\n    if (x === 20) {\n        return true;\n    }\n    if (x === 21) {\n        return true;\n    }\n    if (x === 22) {\n        return true;\n    }\n    if (x === 23) {\n        return true;\n    }\n    if (x === 24) {\n        return true;\n    }\n    if (x === 25) {\n        return true;\n    }\n    if (x === 26) {\n        return true;\n    }\n    if (x === 27) {\n        return true;\n    }\n    if (x === 28) {\n        return true;\n    }\n    if (x === 29) {\n        return true;\n    }\n    if (x === 30) {\n        return true;\n    }\n    if (x === 31) {\n        return true;\n    }\n    if (x === 32) {\n        return true;\n    }\n    if (x === 33) {\n        return true;\n    }\n    if (x === 34) {\n        return true;\n    }\n    if (x === 35) {\n        return true;\n    }\n    if (x === 36) {\n        return true;\n    }\n    if (x === 37) {\n        return true;\n    }\n    if (x === 38) {\n        return true;\n    }\n    if (x === 39) {\n        return true;\n    }\n    if (x === 40) {\n        return true;\n    }\n    if (x === 41) {\n        return true;\n    }\n    if (x === 42) {\n        return true;\n    }\n    if (x === 43) {\n        return true;\n    }\n    if (x === 44) {\n        return true;\n    }\n    if (x === 45) {\n        return true;\n    }\n    if (x === 46) {\n        return true;\n    }\n    if (x === 47) {\n        return true;\n    }\n    if (x === 48) {\n        return true;\n    }\n    if (x === 49) {\n        return true;\n    }\n    if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvs8kob8w.ts(169,9): error TS1005: ')' expected.\n../../../../tmp/tmpvs8kob8w.ts(187,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 4 === 0) {\n        return true;\n    }\n    if (n % 8 === 0) {\n        return false;\n    }\n    if (n % 16 === 0) {\n        return true;\n    }\n    if (n % 32 === 0) {\n        return false;\n    }\n    if (n % 64 === 0) {\n        return true;\n    }\n    if (n % 128 === 0) {\n        return false;\n    }\n    if (n % 256 === 0) {\n        return true;\n    }\n    if (n % 512 === 0) {\n        return false;\n    }\n    if (n % 1024 === 0) {\n        return true;\n    }\n    if (n % 4096 === 0) {\n        return false;\n    }\n    if (n % 8192 === 0) {\n        return true;\n    }\n    if (n % 16384 === 0) {\n        return false;\n    }\n    if (n % 32768 === 0) {\n        return true;\n    }\n    if (n % 65536 === 0) {\n        return false;\n    }\n    if (n % 131072 === 0) {\n        return true;\n    }\n    if (n % 262144 === 0) {\n        return false;\n    }\n    if (n % 524288 === 0) {\n        return true;\n    }\n    if (n % 1048576 === 0) {\n        return false;\n    }\n    if (n % 2097152 === 0) {\n        return true;\n    }\n    if (n % 4194304 === 0) {\n        return false;\n    }\n    if (n % 8388608 === 0) {\n        return true;\n    }\n    if (n % 16777216 === 0) {\n        return false;\n    }\n    if (n % 33554432 === 0) {\n        return true;\n    }\n    if (n % 67108864 === 0) {\n        return false;\n    }\n    if (n % 134217728 === 0) {\n        return true;\n    }\n    if (n % 268435456 === 0) {\n        return false;\n    }\n    if (n % 536870912 === 0) {\n        return true;\n    }\n    if (n % 1073741824 === 0) {\n        return false;\n    }\n    if (n % 2147483648 === 0) {\n        return true;\n    }\n    if (n % 4294967296 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6ndxk9ai.js:113:12)\n    at Object.<anonymous> (/tmp/tmp6ndxk9ai.js:124:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 4 === 0) {\n        return true;\n    }\n    if (n % 8 === 0) {\n        return false;\n    }\n    if (n % 16 === 0) {\n        return true;\n    }\n    if (n % 32 === 0) {\n        return false;\n    }\n    if (n % 64 === 0) {\n        return true;\n    }\n    if (n % 128 === 0) {\n        return false;\n    }\n    if (n % 256 === 0) {\n        return true;\n    }\n    if (n % 512 === 0) {\n        return false;\n    }\n    if (n % 1024 === 0) {\n        return true;\n    }\n    if (n % 2048 === 0) {\n        return false;\n    }\n    if (n % 4096 === 0) {\n        return true;\n    }\n    if (n % 8192 === 0) {\n        return false;\n    }\n    if (n % 16384 === 0) {\n        return true;\n    }\n    if (n % 32768 === 0) {\n        return false;\n    }\n    if (n % 65536 === 0) {\n        return true;\n    }\n    if (n % 131072 === 0) {\n        return false;\n    }\n    if (n % 262144 === 0) {\n        return true;\n    }\n    if (n % 524288 === 0) {\n        return false;\n    }\n    if (n % 1048576 === 0) {\n        return true;\n    }\n    if (n % 2097152 === 0) {\n        return false;\n    }\n    if (n % 4194304 === 0) {\n        return true;\n    }\n    if (n % 8388608 === 0) {\n        return false;\n    }\n    if (n % 16777216 === 0) {\n        return true;\n    }\n    if (n % 33554432 === 0) {\n        return false;\n    }\n    if (n % 67108864 === 0) {\n        return true;\n    }\n    if (n % 134217728 === 0) {\n        return false;\n    }\n    if (n % 268435456 === 0) {\n        return true;\n    }\n    if (n % 536870912 === 0) {\n        return false;\n    }\n    if (n % 1073741824 === 0) {\n        return true;\n    }\n    if (n % -2147483648 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpkqix6191.js:113:12)\n    at Object.<anonymous> (/tmp/tmpkqix6191.js:124:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvut5vj38.js:39:12)\n    at Object.<anonymous> (/tmp/tmpvut5vj38.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 4 === 0) {\n        return true;\n    }\n    if (n % 8 === 0) {\n        return false;\n    }\n    if (n % 16 === 0) {\n        return true;\n    }\n    if (n % 32 === 0) {\n        return false;\n    }\n    if (n % 64 === 0) {\n        return true;\n    }\n    if (n % 128 === 0) {\n        return false;\n    }\n    if (n % 256 === 0) {\n        return true;\n    }\n    if (n % 512 === 0) {\n        return false;\n    }\n    if (n % 1024 === 0) {\n        return true;\n    }\n    if (n % 2048 === 0) {\n        return false;\n    }\n    if (n % 4096 === 0) {\n        return true;\n    }\n    if (n % 8192 === 0) {\n        return false;\n    }\n    if (n % 16384 === 0) {\n        return true;\n    }\n    if (n % 32768 === 0) {\n        return false;\n    }\n    if (n % 65536 === 0) {\n        return true;\n    }\n    if (n % 131072 === 0) {\n        return false;\n    }\n    if (n % 262144 === 0) {\n        return true;\n    }\n    if (n % 524288 === 0) {\n        return false;\n    }\n    if (n % 1048576 === 0) {\n        return true;\n    }\n    if (n % 2097152 === 0) {\n        return false;\n    }\n    if (n % 4194304 === 0) {\n        return true;\n    }\n    if (n % 8388608 === 0) {\n        return false;\n    }\n    if (n % 16777216 === 0) {\n        return true;\n    }\n    if (n % 33554432 === 0) {\n        return false;\n    }\n    if (n % 67108864 !== 0) {\n        return true;\n    }\n    if (n % 134217728 === 0) {\n        return false;\n    }\n    if (n % 268435456 === 0) {\n        return true;\n    }\n    if (n % 536870912 === 0) {\n        return false;\n    }\n    if (n % 1073741824 === 0) {\n        return true;\n    }\n    if (n % 2147483648 === 0) {\n        return false;\n    }\n    if (n % 4294967296 === 0) {\n        return true;\n    }\n    if (n % 8589934592 === 0) {\n        return false;\n    }\n    if (n % 17179869184 === 0) {\n        return true;\n    }\n    if (n % 34359738368 === 0) {\n        return false;\n    }\n    if (n % 68719476736 === 0) {\n        return true;\n    }\n    if (n % 13743895347216 === 0) {\n        return false;\n    }\n    if (n % 27487790694432 === 0) {\n        return true;\n    }\n    if (n % 54975581388832 === 0) {\n        return false;\n    }\n    if (n % 109951162777680 === 0) {\n        return true;\n    }\n    if (n % 2199023255552080 === 0) {\n        return false;\n    }\n    if (n % 4398046511104800 === 0) {\n        return true;\n    }\n    if (n % 879609302220832 === 0) {\n        return false;\n    }\n    if (n % 1759218604441680 === 0) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgjmdqcv6.ts(164,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335174
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsp1uj0e8.ts(139,1): error TS1005: ')' expected.\n../../../../tmp/tmpsp1uj0e8.ts(157,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 4 === 0) {\n        return true;\n    }\n    if (n % 8 === 0) {\n        return false;\n    }\n    if (n % 16 === 0) {\n        return true;\n    }\n    if (n % 32 === 0) {\n        return false;\n    }\n    if (n % 64 === 0) {\n        return true;\n    }\n    if (n % 128 === 0) {\n        return false;\n    }\n    if (n % 256 === 0) {\n        return true;\n    }\n    if (n % 512 === 0) {\n        return false;\n    }\n    if (n % 1024 === 0) {\n        return true;\n    }\n    if (n % 4096 === 0) {\n        return false;\n    }\n    if (n % 8128 === 0) {\n        return true;\n    }\n    if (n % 16384 === 0) {\n        return false;\n    }\n    if (n % 32768 === 0) {\n        return true;\n    }\n    if (n % 65536 === 0) {\n        return false;\n    }\n    if (n % 131072 === 0) {\n        return true;\n    }\n    if (n % 262144 === 0) {\n        return false;\n    }\n    if (n % 524288 === 0) {\n        return true;\n    }\n    if (n % 1048576 === 0) {\n        return false;\n    }\n    if (n % 2097152 === 0) {\n        return true;\n    }\n    if (n % 4194304 === 0) {\n        return false;\n    }\n    if (n % 8388608 === 0) {\n        return true;\n    }\n    if (n % 16777216 === 0) {\n        return false;\n    }\n    if (n % 33554432 === 0) {\n        return true;\n    }\n    if (n % 67108864 !== 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmplaf3u1uk.js:95:12)\n    at Object.<anonymous> (/tmp/tmplaf3u1uk.js:106:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (x === 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return is_simple_power(x, n / 2);\n  }\n  if (n % 2 === 1) {\n    return is_simple_power(x, n / 2);\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpcdlokvy9.js:30:12)\n    at Object.<anonymous> (/tmp/tmpcdlokvy9.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return is_simple_power(x, n / 2) && is_simple_power(x, n - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_k021423.js:32:12)\n    at Object.<anonymous> (/tmp/tmp_k021423.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335177
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n === 0) {\n    return true;\n  }\n  return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpkgakzmf4.js:26:12)\n    at Object.<anonymous> (/tmp/tmpkgakzmf4.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (x === 0) return false;\n    if (x === 1) return true;\n    if (x === -1) return true;\n    if (x === -2) return true;\n    if (x === -3) return true;\n    if (x === -4) return true;\n    if (x === -5) return true;\n    if (x === -6) return true;\n    if (x === -7) return true;\n    if (x === -8) return true;\n    if (x === -9) return true;\n    if (x === -10) return true;\n    if (x === -11) return true;\n    if (x === -12) return true;\n    if (x === -13) return true;\n    if (x === -14) return true;\n    if (x === -15) return true;\n    if (x === -16) return true;\n    if (x === -17) return true;\n    if (x === -18) return true;\n    if (x === -19) return true;\n    if (x === -20) return true;\n    if (x === -21) return true;\n    if (x === -22) return true;\n    if (x === -23) return true;\n    if (x === -24) return true;\n    if (x === -25) return true;\n    if (x === -26) return true;\n    if (x === -27) return true;\n    if (x === -28) return true;\n    if (x === -29) return true;\n    if (x === -30) return true;\n    if (x === -31) return true;\n    if (x === -32) return true;\n    if (x === -33) return true;\n    if (x === -34) return true;\n    if (x === -35) return true;\n    if (x === -36) return true;\n    if (x === -37) return true;\n    if (x === -38) return true;\n    if (x === -39) return true;\n    if (x === -40) return true;\n    if (x === -41) return true;\n    if (x === -42) return true;\n    if (x === -43) return true;\n    if (x === -44) return true;\n    if (x === -45) return true;\n    if (x === -46) return true;\n    if (x === -47) return true;\n    if (x === -48) return true;\n    if (x === -49) return true;\n    if (x === -50) return true;\n    if (x === -51) return true;\n    if (x === -52) return true;\n    if (x === -53) return true;\n    if (x === -54) return true;\n    if (x === -55) return true;\n    if (x === -56) return true;\n    if (x === -57) return true;\n    if (x === -58) return true;\n    if (x === -59) return true;\n    if (x === -60) return true;\n    if (x === -61) return true;\n    if (x === -62) return true;\n    if (x === -63) return true;\n    if (x === -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps55rnd5d.ts(80,9): error TS1005: ')' expected.\n../../../../tmp/tmps55rnd5d.ts(98,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335174
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 53 === 0) {\n        return false;\n    }\n    if (n % n % 59 === 0) {\n        return false;\n    }\n    if (n % n % 63 === 0) {\n        return false;\n    }\n    if (n % n % 69 === 0) {\n        return false;\n    }\n    if (n % n % 73 === 0) {\n        return false;\n    }\n    if (n % n % 79 === 0) {\n        return false;\n    }\n    if (n % n % 83 === 0) {\n        return false;\n    }\n    if (n % n % 89 === 0) {\n        return false;\n    }\n    if (n % n % 97 === 0) {\n        return false;\n    }\n    if (n % n % 103 === 0) {\n        return false;\n    }\n    if (n % n % 105 === 0) {\n        return false;\n    }\n    if (n % n % 109 === 0) {\n        return false;\n    }\n    if (n % n % 113 === 0) {\n        return false;\n    }\n    if (n % n % 115 === 0) {\n        return false;\n    }\n    if (n % n % 117 === 0) {\n        return false;\n    }\n    if (n % n % 123 === 0) {\n        return false;\n    }\n    if (n % n % 125 === 0) {\n        return false;\n    }\n    if (n % n % 129 === 0) {\n        return false;\n    }\n    if (n % n % 131 === 0) {\n        return false;\n    }\n    if (n % n % 133 === 0) {\n        return false;\n    }\n    if (n % n % 135 === 0) {\n        return false;\n    }\n    if (n % n % 137 === 0) {\n        return false;\n    }\n    if (n % n % 139 === 0) {\n        return false;\n    }\n    if (n % n % 141 === 0) {\n        return false;\n    }\n    if (n % n % 143 === 0) {\n        return false;\n    }\n    if (n % n % 145 === 0) {\n        return false;\n    }\n    if (n % n % 147 === 0) {\n        return false;\n    }\n    if (n % n % 149 === 0) {\n        return false;\n    }\n    if (n % n % 151 === 0) {\n        return false;\n    }\n    if (n % n % 153 === 0) {\n        return false;\n    }\n    if (n % n % 155 === 0) {\n        return false;\n    }\n    if (n % n % 157 === 0) {\n        return false;\n    }\n    if (n % n % 159 === 0) {\n        return false;\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbw_fxgr5.ts(180,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n <= 1) {\n        return false;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    let m = n / 2;\n    while (m > 1) {\n        if (x === Math.pow(x, m)) {\n            return true;\n        }\n        m--;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv_mg71qt.js:40:12)\n    at Object.<anonymous> (/tmp/tmpv_mg71qt.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsp1uj0e8.ts(139,1): error TS1005: ')' expected.\n../../../../tmp/tmpsp1uj0e8.ts(157,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335174
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n === 3) {\n        return true;\n    }\n    if (n === 4) {\n        return true;\n    }\n    if (n === 5) {\n        return true;\n    }\n    if (n === 6) {\n        return true;\n    }\n    if (n === 7) {\n        return true;\n    }\n    if (n === 8) {\n        return true;\n    }\n    if (n === 9) {\n        return true;\n    }\n    if (n === 10) {\n        return true;\n    }\n    if (n === 11) {\n        return true;\n    }\n    if (n === 12) {\n        return true;\n    }\n    if (n === 13) {\n        return true;\n    }\n    if (n === 14) {\n        return true;\n    }\n    if (n === 15) {\n        return true;\n    }\n    if (n === 16) {\n        return true;\n    }\n    if (n === 17) {\n        return true;\n    }\n    if (n === 18) {\n        return true;\n    }\n    if (n === 19) {\n        return true;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpexa0rixm.ts(159,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprhpa2m6g.ts(166,9): error TS1005: ')' expected.\n../../../../tmp/tmprhpa2m6g.ts(184,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 2 === 1) return true;\n    if (x === 0) return false;\n    if (x === 1) return true;\n    if (x === 2) return true;\n    if (x === 3) return true;\n    if (x === 4) return true;\n    if (x === 5) return true;\n    if (x === 6) return true;\n    if (x === 7) return true;\n    if (x === 8) return true;\n    if (x === 9) return true;\n    if (x === 10) return true;\n    if (x === 11) return true;\n    if (x === 12) return true;\n    if (x === 13) return true;\n    if (x === 14) return true;\n    if (x === 15) return true;\n    if (x === 16) return true;\n    if (x === 17) return true;\n    if (x === 18) return true;\n    if (x === 19) return true;\n    if (x === 20) return true;\n    if (x === 21) return true;\n    if (x === 22) return true;\n    if (x === 23) return true;\n    if (x === 24) return true;\n    if (x === 25) return true;\n    if (x === 26) return true;\n    if (x === 27) return true;\n    if (x === 28) return true;\n    if (x === 29) return true;\n    if (x === 30) return true;\n    if (x === 31) return true;\n    if (x === 32) return true;\n    if (x === 33) return true;\n    if (x === 34) return true;\n    if (x === 35) return true;\n    if (x === 36) return true;\n    if (x === 37) return true;\n    if (x === 38) return true;\n    if (x === 39) return true;\n    if (x === 40) return true;\n    if (x === 41) return true;\n    if (x === 42) return true;\n    if (x === 43) return true;\n    if (x === 44) return true;\n    if (x === 45) return true;\n    if (x === 46) return true;\n    if (x === 47) return true;\n    if (x === 48) return true;\n    if (x === 49) return true;\n    if (x === 50) return true;\n    if (x === 51) return true;\n    if (x === 52) return true;\n    if (x === 53) return true;\n    if (x === 54) return true;\n    if (x === 55) return true;\n    if (x === 56) return true;\n    if (x === 57) return true;\n    if (x === 58) return true;\n    if (x === 59) return true;\n    if (x === 60) return true;\n    if (x === 61) return true;\n    if (x === 62) return true;\n    if (x === 63) return true;\n    if (x === 64) return true;\n    if (x === 65) return true;\n    if (x === 66) return true;\n    if (x === 67) return true;\n    if (x === 68\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj4t8jav1.ts(85,1): error TS1005: ')' expected.\n../../../../tmp/tmpj4t8jav1.ts(103,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 0) return false;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  if (x === 1) return true;\n  if (x === 2) return true;\n  if (x === 3) return true;\n  if (x === 5) return true;\n  if (x === 7) return true;\n  if (x === 11) return true;\n  if (x === 13) return true;\n  if (x === 17) return true;\n  if (x === 19) return true;\n  if (x === 23) return true;\n  if (x === 29) return true;\n  if (x === 31) return true;\n  if (x === 37) return true;\n  if (x === 41) return true;\n  if (x === 43) return true;\n  if (x === 47) return true;\n  if (x === 53) return true;\n  if (x === 59) return true;\n  if (x === 63) return true;\n  if (x === 67) return true;\n  if (x === 71) return true;\n  if (x === 73) return true;\n  if (x === 79) return true;\n  if (x === 83) return true;\n  if (x === 89) return true;\n  if (x === 97) return true;\n  if (x === 101) return true;\n  if (x === 103) return true;\n  if (x === 107) return true;\n  if (x === 109) return true;\n  if (x === 113) return true;\n  if (x === 127) return true;\n  if (x === 131) return true;\n  if (x === 137) return true;\n  if (x === 139) return true;\n  if (x === 149) return true;\n  if (x === 151) return true;\n  if (x === 157) return true;\n  if (x === 163) return true;\n  if (x === 171) return true;\n  if (x === 177) return true;\n  if (x === 181) return true;\n  if (x === 191) return true;\n  if (x === 193) return true;\n  if (x === 197) return true;\n  if (x === 199) return true;\n  if (x === 211) return true;\n  if (x === 223) return true;\n  if (x === 227) return true;\n  if (x === 229) return true;\n  if (x === 233) return true;\n  if (x === 239) return true;\n  if (x === 241) return true;\n  if (x === 243) return true;\n  if (x === 247) return true;\n  if (x === 251) return true;\n  if (x === 253) return true;\n  if (x === 257) return true;\n  if (x === 263) return true;\n  if (x === 269) return true;\n  if (x === 271) return true;\n  if (x === 277) return true;\n  if (x === 281) return true;\n  if (x === 283) return true;\n  if (x === 293) return true;\n  if (x === 307) return true;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpycrxvifx.ts(101,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6bx8z3vm.js:35:12)\n    at Object.<anonymous> (/tmp/tmp6bx8z3vm.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprhpa2m6g.ts(166,9): error TS1005: ')' expected.\n../../../../tmp/tmprhpa2m6g.ts(184,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (x === n * n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return is_simple_power(x, n / 2) && is_simple_power(x, (n - 1) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdbjjgv0q.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdbjjgv0q.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 0) return false;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  if (n % 3 === 0) return false;\n  if (n % 3 === 1) return true;\n  if (n % 5 === 0) return false;\n  if (n % 5 === 1) return true;\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3i7hkput.js:33:12)\n    at Object.<anonymous> (/tmp/tmp3i7hkput.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n % 2 === 0) {\n    return true;\n  }\n  return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqlxoywp4.js:26:12)\n    at Object.<anonymous> (/tmp/tmpqlxoywp4.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n == 0) {\n        return false;\n    }\n    if (n == 1) {\n        return true;\n    }\n    if (n % 2 == 0) {\n        return is_simple_power(x, n / 2);\n    }\n    else {\n        return is_simple_power(x * x, n / 2);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_z32g99_.js:29:12)\n    at Object.<anonymous> (/tmp/tmp_z32g99_.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n === 0 || n !== n) {\n    return false;\n  }\n  return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmphnrmvdso.js:26:12)\n    at Object.<anonymous> (/tmp/tmphnrmvdso.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpod8zpe2t.ts(138,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe6n6kdzb.ts(169,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % x === 0) {\n        return true;\n    }\n    if (n % x === 0 && n !== 1) {\n        return false;\n    }\n    if (n % x === 0 && n === 1) {\n        return true;\n    }\n    if (n % x === 0 && n === 2) {\n        return true;\n    }\n    if (n % x === 0 && n === 3) {\n        return true;\n    }\n    if (n % x === 0 && n === 4) {\n        return true;\n    }\n    if (n % x === 0 && n === 5) {\n        return true;\n    }\n    if (n % x === 0 && n === 6) {\n        return true;\n    }\n    if (n % x === 0 && n === 7) {\n        return true;\n    }\n    if (n % x === 0 && n === 8) {\n        return true;\n    }\n    if (n % x === 0 && n === 9) {\n        return true;\n    }\n    if (n % x === 0 && n === 10) {\n        return true;\n    }\n    if (n % x === 0 && n === 11) {\n        return true;\n    }\n    if (n % x === 0 && n === 12) {\n        return true;\n    }\n    if (n % x === 0 && n === 13) {\n        return true;\n    }\n    if (n % x === 0 && n === 14) {\n        return true;\n    }\n    if (n % x === 0 && n === 15) {\n        return true;\n    }\n    if (n % x === 0 && n === 16) {\n        return true;\n    }\n    if (n % x === 0 && n === 17) {\n        return true;\n    }\n    if (n % x === 0 && n === 18) {\n        return true;\n    }\n    if (n % x === 0 && n === 19) {\n        return true;\n    }\n    if (n % x === 0 && n === 20) {\n        return true;\n    }\n    if (n % x === 0 && n === 21) {\n        return true;\n    }\n    if (n % x === 0 && n === 22) {\n        return true;\n    }\n    if (n % x === 0 && n === 23) {\n        return true;\n    }\n    if (n % x === 0 && n === 24) {\n        return true;\n    }\n    if (n % x === 0 && n === 25) {\n        return true;\n    }\n    if (n % x === 0 && n === 26) {\n        return true;\n    }\n    if (n % x === 0 && n === 27) {\n        return true;\n    }\n    if (n % x === 0 && n === 28) {\n        return true;\n    }\n    if (n % x === 0 && n === 29) {\n        return true;\n    }\n    if (n % x === 0 && n === 30) {\n        return true;\n    }\n    if (n % x === 0 && n === 31) {\n        return true;\n    }\n    if (n % x === 0 && n === 32) {\n        return true;\n    }\n    if (n % x === 0 && n === 33) {\n        return true;\n    }\n    if (n % x === 0 && n === 34) {\n        return true;\n    }\n    if (n % x === 0 && n === 35) {\n        return true;\n    }\n    if (n % x === 0 && n === 36) {\n        return true;\n    }\n    if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj_c7z5z0.ts(136,9): error TS1005: ')' expected.\n../../../../tmp/tmpj_c7z5z0.ts(154,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n === 3) {\n        return true;\n    }\n    if (n === 4) {\n        return true;\n    }\n    if (n === 5) {\n        return true;\n    }\n    if (n === 6) {\n        return true;\n    }\n    if (n === 7) {\n        return true;\n    }\n    if (n === 8) {\n        return true;\n    }\n    if (n === 9) {\n        return true;\n    }\n    if (n === 10) {\n        return true;\n    }\n    if (n === 11) {\n        return true;\n    }\n    if (n === 12) {\n        return true;\n    }\n    if (n === 13) {\n        return true;\n    }\n    if (n === 14) {\n        return true;\n    }\n    if (n === 15) {\n        return true;\n    }\n    if (n === 16) {\n        return true;\n    }\n    if (n === 17) {\n        return true;\n    }\n    if (n === 18) {\n        return true;\n    }\n    if (n === 19) {\n        return true;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpexa0rixm.ts(159,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    if (n % 1024 === 0) return true;\n    if (n % 4096 === 0) return false;\n    if (n % 8192 === 0) return true;\n    if (n % 16384 === 0) return false;\n    if (n % 32768 === 0) return true;\n    if (n % 65536 === 0) return false;\n    if (n % 131072 === 0) return true;\n    if (n % 262144 === 0) return false;\n    if (n % 524288 === 0) return true;\n    if (n % 1048576 === 0) return false;\n    if (n % 2097152 === 0) return true;\n    if (n % 4194304 === 0) return false;\n    if (n % 8388608 === 0) return true;\n    if (n % 16777216 === 0) return false;\n    if (n % 33554432 === 0) return true;\n    if (n % 67108864 === 0) return false;\n    if (n % 134217728 === 0) return true;\n    if (n % 268435456 === 0) return false;\n    if (n % 536870912 === 0) return true;\n    if (n % 1073741824 === 0) return false;\n    if (n % 2147483648 === 0) return true;\n    if (n % 4294967296 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpw8s9pfvd.js:83:12)\n    at Object.<anonymous> (/tmp/tmpw8s9pfvd.js:94:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfpje03ke.js:30:12)\n    at Object.<anonymous> (/tmp/tmpfpje03ke.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  return x == Math.pow(n, x);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3t3hxpyc.js:17:12)\n    at Object.<anonymous> (/tmp/tmp3t3hxpyc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpuzswz90i.js:42:12)\n    at Object.<anonymous> (/tmp/tmpuzswz90i.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprzn0ojr7.ts(166,9): error TS1005: ')' expected.\n../../../../tmp/tmprzn0ojr7.ts(184,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpue2g2o11.js:30:12)\n    at Object.<anonymous> (/tmp/tmpue2g2o11.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprzn0ojr7.ts(166,9): error TS1005: ')' expected.\n../../../../tmp/tmprzn0ojr7.ts(184,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return false;\n    }\n    return is_simple_power(x, (n - 1) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9ue2i2zw.js:33:12)\n    at Object.<anonymous> (/tmp/tmp9ue2i2zw.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335181
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (x === n * n) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpctl26gdd.js:32:12)\n    at Object.<anonymous> (/tmp/tmpctl26gdd.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335181
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return false;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return false;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    if (n % 1024 === 0) return false;\n    if (n % 4096 === 0) return false;\n    if (n % 8192 === 0) return true;\n    if (n % 16384 === 0) return false;\n    if (n % 32768 === 0) return true;\n    if (n % 65536 === 0) return false;\n    if (n % 131072 === 0) return false;\n    if (n % 262144 === 0) return true;\n    if (n % 1048576 === 0) return false;\n    if (n % 134217728 === 0) return true;\n    if (n % 268435456 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_0iztgk5.js:61:12)\n    at Object.<anonymous> (/tmp/tmp_0iztgk5.js:72:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335181
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1z9u7yfi.ts(166,1): error TS1005: ')' expected.\n../../../../tmp/tmp1z9u7yfi.ts(184,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335181
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfpje03ke.js:30:12)\n    at Object.<anonymous> (/tmp/tmpfpje03ke.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpod8zpe2t.ts(138,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x / 2, n);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpixlfml2p.js:29:12)\n    at Object.<anonymous> (/tmp/tmpixlfml2p.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335181
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpod8zpe2t.ts(138,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu0aakn81.js:29:12)\n    at Object.<anonymous> (/tmp/tmpu0aakn81.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335181
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === 2) {\n        return true;\n    }\n    if (x === 3) {\n        return true;\n    }\n    if (x === 4) {\n        return true;\n    }\n    if (x === 5) {\n        return true;\n    }\n    if (x === 6) {\n        return true;\n    }\n    if (x === 7) {\n        return true;\n    }\n    if (x === 8) {\n        return true;\n    }\n    if (x === 9) {\n        return true;\n    }\n    if (x === 10) {\n        return true;\n    }\n    if (x === 11) {\n        return true;\n    }\n    if (x === 12) {\n        return true;\n    }\n    if (x === 13) {\n        return true;\n    }\n    if (x === 14) {\n        return true;\n    }\n    if (x === 15) {\n        return true;\n    }\n    if (x === 16) {\n        return true;\n    }\n    if (x === 17) {\n        return true;\n    }\n    if (x === 18) {\n        return true;\n    }\n    if (x === 19) {\n        return true;\n    }\n    if (x === 20) {\n        return true;\n    }\n    if (x === 21) {\n        return true;\n    }\n    if (x === 22) {\n        return true;\n    }\n    if (x === 23) {\n        return true;\n    }\n    if (x === 24) {\n        return true;\n    }\n    if (x === 25) {\n        return true;\n    }\n    if (x === 26) {\n        return true;\n    }\n    if (x === 27) {\n        return true;\n    }\n    if (x === 28) {\n        return true;\n    }\n    if (x === 29) {\n        return true;\n    }\n    if (x === 30) {\n        return true;\n    }\n    if (x === 31) {\n        return true;\n    }\n    if (x === 32) {\n        return true;\n    }\n    if (x === 33) {\n        return true;\n    }\n    if (x === 34) {\n        return true;\n    }\n    if (x === 35) {\n        return true;\n    }\n    if (x === 36) {\n        return true;\n    }\n    if (x === 37) {\n        return true;\n    }\n    if (x === 38) {\n        return true;\n    }\n    if (x === 39) {\n        return true;\n    }\n    if (x === 40) {\n        return true;\n    }\n    if (x === 41) {\n        return true;\n    }\n    if (x === 42) {\n        return true;\n    }\n    if (x === 43) {\n        return true;\n    }\n    if (x === 44) {\n        return true;\n    }\n    if (x === 45) {\n        return true;\n    }\n    if (x === 46) {\n        return true;\n    }\n    if (x === 47) {\n        return true;\n    }\n    if (x === 48) {\n        return true;\n    }\n    if (x === 49) {\n        return true;\n    }\n    if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvs8kob8w.ts(169,9): error TS1005: ')' expected.\n../../../../tmp/tmpvs8kob8w.ts(187,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335174
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (x === 0) return false;\n    if (x === 1) return true;\n    if (x === -1) return true;\n    if (x === -2) return true;\n    if (x === -3) return true;\n    if (x === -4) return true;\n    if (x === -5) return true;\n    if (x === -6) return true;\n    if (x === -7) return true;\n    if (x === -8) return true;\n    if (x === -9) return true;\n    if (x === -10) return true;\n    if (x === -11) return true;\n    if (x === -12) return true;\n    if (x === -13) return true;\n    if (x === -14) return true;\n    if (x === -15) return true;\n    if (x === -16) return true;\n    if (x === -17) return true;\n    if (x === -18) return true;\n    if (x === -19) return true;\n    if (x === -20) return true;\n    if (x === -21) return true;\n    if (x === -22) return true;\n    if (x === -23) return true;\n    if (x === -24) return true;\n    if (x === -25) return true;\n    if (x === -26) return true;\n    if (x === -27) return true;\n    if (x === -28) return true;\n    if (x === -29) return true;\n    if (x === -30) return true;\n    if (x === -31) return true;\n    if (x === -32) return true;\n    if (x === -33) return true;\n    if (x === -34) return true;\n    if (x === -35) return true;\n    if (x === -36) return true;\n    if (x === -37) return true;\n    if (x === -38) return true;\n    if (x === -39) return true;\n    if (x === -40) return true;\n    if (x === -41) return true;\n    if (x === -42) return true;\n    if (x === -43) return true;\n    if (x === -44) return true;\n    if (x === -45) return true;\n    if (x === -46) return true;\n    if (x === -47) return true;\n    if (x === -48) return true;\n    if (x === -49) return true;\n    if (x === -50) return true;\n    if (x === -51) return true;\n    if (x === -52) return true;\n    if (x === -53) return true;\n    if (x === -54) return true;\n    if (x === -55) return true;\n    if (x === -56) return true;\n    if (x === -57) return true;\n    if (x === -58) return true;\n    if (x === -59) return true;\n    if (x === -60) return true;\n    if (x === -61) return true;\n    if (x === -62) return true;\n    if (x === -63) return true;\n    if (x === -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps55rnd5d.ts(80,9): error TS1005: ')' expected.\n../../../../tmp/tmps55rnd5d.ts(98,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335174
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprzn0ojr7.ts(166,9): error TS1005: ')' expected.\n../../../../tmp/tmprzn0ojr7.ts(184,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0ye2zen7.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0ye2zen7.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335182
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprhpa2m6g.ts(166,9): error TS1005: ')' expected.\n../../../../tmp/tmprhpa2m6g.ts(184,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  return x === Math.pow(x, n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqsrfhd87.js:17:12)\n    at Object.<anonymous> (/tmp/tmpqsrfhd87.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335181
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0 || n !== n) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return true;\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxmr7orb8.js:29:12)\n    at Object.<anonymous> (/tmp/tmpxmr7orb8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335182
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (x === 0 || x === 1) {\n        return false;\n    }\n    if (x === n / x) {\n        return true;\n    }\n    if (n % x === 0) {\n        return false;\n    }\n    if (n % x === 0 && n !== 1) {\n        return false;\n    }\n    if (n % x === 0 && n !== n - 1) {\n        return true;\n    }\n    if (n % x === 0 && n !== n - 2) {\n        return false;\n    }\n    if (n % x === 0 && n !== n - 3) {\n        return true;\n    }\n    if (n % x === 0 && n !== n - 4) {\n        return false;\n    }\n    if (n % x === 0 && n !== n - 5) {\n        return true;\n    }\n    if (n % x === 0 && n !== n - 6) {\n        return false;\n    }\n    if (n % x === 0 && n !== n - 7) {\n        return true;\n    }\n    if (n % x === 0 && n !== n - 8) {\n        return false;\n    }\n    if (n % x === 0 && n !== n - 9) {\n        return true;\n    }\n    if (n % x === 0 && n !== n - 10) {\n        return false;\n    }\n    if (n % x === 0 && n !== n - 11) {\n        return true;\n    }\n    if (n % x === 0 && n !== n - 12) {\n        return false;\n    }\n    if (n % x === 0 && n !== n - 13) {\n        return true;\n    }\n    if (n % x === 0 && n !== n - 14) {\n        return false;\n    }\n    if (n % x === 0 && n !== n - 15) {\n        return true;\n    }\n    if (n % x === 0 && n !== n - 16) {\n        return false;\n    }\n    if (n % x === 0 && n !== n - 17) {\n        return true;\n    }\n    if (n % x === 0 && n !== n - 18) {\n        return false;\n    }\n    if (n % x === 0 && n !== n - 19) {\n        return true;\n    }\n    if (n % x === 0 && n !== n - 20) {\n        return false;\n    }\n    if (n % x === 0 && n !== n - 21) {\n        return true;\n    }\n    if (n % x === 0 && n !== n - 22) {\n        return false;\n    }\n    if (n % x === 0 && n !== n - 23) {\n        return true;\n    }\n    if (n % x === 0 && n !== n - 24) {\n        return false;\n    }\n    if (n % x === 0 && n !== n - 25) {\n        return true;\n    }\n    if (n % x === 0 && n !== n - 26) {\n        return false;\n    }\n    if (n % x === 0 && n !== n - 27) {\n        return true;\n    }\n    if (n % x === 0 && n !== n - 28) {\n        return false;\n    }\n    if (n % x === 0 && n !== n - 29) {\n        return true;\n    }\n    if (n % x === 0 && n !== n - 30) {\n        return false;\n    }\n    if (n % x === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfsywg7fz.ts(121,9): error TS1005: ')' expected.\n../../../../tmp/tmpfsywg7fz.ts(139,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335181
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 0) return false;\n    if (n === 0) return true;\n    if (n === 1) return true;\n    if (x === 0) return false;\n    if (x === 1) return true;\n    if (x === 2) return true;\n    if (x === 3) return true;\n    if (x === 4) return true;\n    if (x === 5) return true;\n    if (x === 6) return true;\n    if (x === 7) return true;\n    if (x === 8) return true;\n    if (x === 9) return true;\n    if (x === 10) return true;\n    if (x === 11) return true;\n    if (x === 12) return true;\n    if (x === 13) return true;\n    if (x === 14) return true;\n    if (x === 15) return true;\n    if (x === 16) return true;\n    if (x === 17) return true;\n    if (x === 18) return true;\n    if (x === 19) return true;\n    if (x === 20) return true;\n    if (x === 21) return true;\n    if (x === 22) return true;\n    if (x === 23) return true;\n    if (x === 24) return true;\n    if (x === 25) return true;\n    if (x === 26) return true;\n    if (x === 27) return true;\n    if (x === 28) return true;\n    if (x === 29) return true;\n    if (x === 30) return true;\n    if (x === 31) return true;\n    if (x === 32) return true;\n    if (x === 33) return true;\n    if (x === 34) return true;\n    if (x === 35) return true;\n    if (x === 36) return true;\n    if (x === 37) return true;\n    if (x === 38) return true;\n    if (x === 39) return true;\n    if (x === 40) return true;\n    if (x === 41) return true;\n    if (x === 42) return true;\n    if (x === 43) return true;\n    if (x === 44) return true;\n    if (x === 45) return true;\n    if (x === 46) return true;\n    if (x === 47) return true;\n    if (x === 48) return true;\n    if (x === 49) return true;\n    if (x === 50) return true;\n    if (x === 51) return true;\n    if (x === 52) return true;\n    if (x === 53) return true;\n    if (x === 54) return true;\n    if (x === 55) return true;\n    if (x === 56) return true;\n    if (x === 57) return true;\n    if (x === 58) return true;\n    if (x === 59) return true;\n    if (x === 60) return true;\n    if (x === 61) return true;\n    if (x === 62) return true;\n    if (x === 63) return true;\n    if (x === 64) return true;\n    if (x === 65) return true;\n    if (x === 66) return true;\n    if (x === 67) return true;\n    if (x === 68) return true;\n    if (x === 69) return true;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp39hx5np2.ts(104,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335181
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return false;\n  }\n  if (n % 16 === 0) {\n    return true;\n  }\n  if (n % 32 === 0) {\n    return false;\n  }\n  if (n % 64 === 0) {\n    return true;\n  }\n  if (n % 128 === 0) {\n    return false;\n  }\n  if (n % 256 === 0) {\n    return true;\n  }\n  if (n % 512 === 0) {\n    return false;\n  }\n  if (n % 1024 === 0) {\n    return true;\n  }\n  if (n % 4096 === 0) {\n    return false;\n  }\n  if (n % 8192 === 0) {\n    return true;\n  }\n  if (n % 16384 === 0) {\n    return false;\n  }\n  if (n % 32768 === 0) {\n    return true;\n  }\n  if (n % 65536 === 0) {\n    return false;\n  }\n  if (n % 131072 === 0) {\n    return true;\n  }\n  if (n % 262144 === 0) {\n    return false;\n  }\n  if (n % 524288 === 0) {\n    return true;\n  }\n  if (n % 1048576 === 0) {\n    return false;\n  }\n  if (n % 2097152 === 0) {\n    return true;\n  }\n  if (n % 4194304 === 0) {\n    return false;\n  }\n  if (n % 8388608 === 0) {\n    return true;\n  }\n  if (n % 16777216 === 0) {\n    return false;\n  }\n  if (n % 33554432 === 0) {\n    return true;\n  }\n  if (n % 67108864 === 0) {\n    return false;\n  }\n  if (n % 134217728 === 0) {\n    return true;\n  }\n  if (n % 268435456 === 0) {\n    return false;\n  }\n  if (n % 536870912 === 0) {\n    return true;\n  }\n  if (n % 1073741824 === 0) {\n    return false;\n  }\n  if (n % -2147483648 === 0) {\n    return true;\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpk16o6jyt.js:110:12)\n    at Object.<anonymous> (/tmp/tmpk16o6jyt.js:121:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335182
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmptr7on7bw.js:48:12)\n    at Object.<anonymous> (/tmp/tmptr7on7bw.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335182
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n <= 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return true;\n    }\n    if (x === x % n) {\n        return true;\n    }\n    if (x % n === 1) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqkcjjj_o.js:41:12)\n    at Object.<anonymous> (/tmp/tmpqkcjjj_o.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335182
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 2 === 1) return true;\n    if (x === 1) return false;\n    if (x === -1) return true;\n    if (x === 2) return true;\n    if (x === -2) return true;\n    if (x === -3) return true;\n    if (x === -4) return true;\n    if (x === -5) return true;\n    if (x === -6) return true;\n    if (x === -7) return true;\n    if (x === -8) return true;\n    if (x === -9) return true;\n    if (x === -10) return true;\n    if (x === -11) return true;\n    if (x === -12) return true;\n    if (x === -13) return true;\n    if (x === -14) return true;\n    if (x === -15) return true;\n    if (x === -16) return true;\n    if (x === -17) return true;\n    if (x === -18) return true;\n    if (x === -19) return true;\n    if (x === -20) return true;\n    if (x === -21) return true;\n    if (x === -22) return true;\n    if (x === -23) return true;\n    if (x === -24) return true;\n    if (x === -25) return true;\n    if (x === -26) return true;\n    if (x === -27) return true;\n    if (x === -28) return true;\n    if (x === -29) return true;\n    if (x === -30) return true;\n    if (x === -31) return true;\n    if (x === -32) return true;\n    if (x === -33) return true;\n    if (x === -34) return true;\n    if (x === -35) return true;\n    if (x === -36) return true;\n    if (x === -37) return true;\n    if (x === -38) return true;\n    if (x === -39) return true;\n    if (x === -40) return true;\n    if (x === -41) return true;\n    if (x === -42) return true;\n    if (x === -43) return true;\n    if (x === -44) return true;\n    if (x === -45) return true;\n    if (x === -46) return true;\n    if (x === -47) return true;\n    if (x === -48) return true;\n    if (x === -49) return true;\n    if (x === -50) return true;\n    if (x === -51) return true;\n    if (x === -52) return true;\n    if (x === -53) return true;\n    if (x === -54) return true;\n    if (x === -55) return true;\n    if (x === -56) return true;\n    if (x === -57) return true;\n    if (x === -58) return true;\n    if (x === -59) return true;\n    if (x === -60) return true;\n    if (x === -61) return true;\n    if (x === -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0rigd8r9.ts(80,9): error TS1005: ')' expected.\n../../../../tmp/tmp0rigd8r9.ts(98,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335181
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return false;\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3a7fdo6c.js:33:12)\n    at Object.<anonymous> (/tmp/tmp3a7fdo6c.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335182
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n < 0) return false;\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return is_simple_power(x, n / 2);\n  if (n % 2 === 1) return false;\n  return is_simple_power(x * x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1py1xjep.js:27:12)\n    at Object.<anonymous> (/tmp/tmp1py1xjep.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335182
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13) {\n        return false;\n    }\n    if (n % n % 14) {\n        return false;\n    }\n    if (n % n % 15) {\n        return false;\n    }\n    if (n % n % 16) {\n        return false;\n    }\n    if (n % n % 17) {\n        return false;\n    }\n    if (n % n % 18) {\n        return false;\n    }\n    if (n % n % 19) {\n        return false;\n    }\n    if (n % n % 20) {\n        return false;\n    }\n    if (n % n % 21) {\n        return false;\n    }\n    if (n % n % 22) {\n        return false;\n    }\n    if (n % n % 23) {\n        return false;\n    }\n    if (n % n % 24) {\n        return false;\n    }\n    if (n % n % 25) {\n        return false;\n    }\n    if (n % n % 26) {\n        return false;\n    }\n    if (n % n % 27) {\n        return false;\n    }\n    if (n % n % 28) {\n        return false;\n    }\n    if (n % n % 29) {\n        return false;\n    }\n    if (n % n % 30) {\n        return false;\n    }\n    if (n % n % 31) {\n        return false;\n    }\n    if (n % n % 32) {\n        return false;\n    }\n    if (n % n % 33) {\n        return false;\n    }\n    if (n % n % 34) {\n        return false;\n    }\n    if (n % n % 35) {\n        return false;\n    }\n    if (n % n % 36) {\n        return false;\n    }\n    if (n % n % 37) {\n        return false;\n    }\n    if (n % n % 38) {\n        return false;\n    }\n    if (n % n % 39) {\n        return false;\n    }\n    if (n % n % 40) {\n        return false;\n    }\n    if (n % n % 41) {\n        return false;\n    }\n    if (n % n % 42) {\n        return false;\n    }\n    if (n % n % 43) {\n        return false;\n    }\n    if (n % n % 44) {\n        return false;\n    }\n    if (n % n % 45) {\n        return false;\n    }\n    if (n % n % 46) {\n        return false;\n    }\n    if (n % n % 47) {\n        return false;\n    }\n    if (n % n % 48) {\n        return false;\n    }\n    if (n % n % 49) {\n        return false;\n    }\n    if (n % n % 50) {\n        return false;\n    }\n    if (n % n % 51) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprzot3nvp.ts(185,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335181
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n === 0 || n % n % 2 === 0) {\n    return true;\n  }\n  return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpku76xx1v.js:26:12)\n    at Object.<anonymous> (/tmp/tmpku76xx1v.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335182
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpod8zpe2t.ts(138,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return true;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 3 === 1) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 5 === 1) {\n    return true;\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpalrc0x_1.js:41:12)\n    at Object.<anonymous> (/tmp/tmpalrc0x_1.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335182
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n === 0) {\n    return true;\n  }\n  if (n % n % 2 === 0) {\n    return false;\n  }\n  if (n % n % n % 2 === 0) {\n    return true;\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpw5s8aw0b.js:32:12)\n    at Object.<anonymous> (/tmp/tmpw5s8aw0b.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335182
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 4 === 0) {\n        return true;\n    }\n    if (n % 8 === 0) {\n        return false;\n    }\n    if (n % 16 === 0) {\n        return true;\n    }\n    if (n % 32 === 0) {\n        return false;\n    }\n    if (n % 64 === 0) {\n        return true;\n    }\n    if (n % 128 === 0) {\n        return false;\n    }\n    if (n % 256 === 0) {\n        return true;\n    }\n    if (n % 512 === 0) {\n        return false;\n    }\n    if (n % 1024 === 0) {\n        return true;\n    }\n    if (n % 4096 === 0) {\n        return false;\n    }\n    if (n % 8192 === 0) {\n        return true;\n    }\n    if (n % 16384 === 0) {\n        return false;\n    }\n    if (n % 32768 === 0) {\n        return true;\n    }\n    if (n % 65536 === 0) {\n        return false;\n    }\n    if (n % 131072 === 0) {\n        return true;\n    }\n    if (n % 262144 === 0) {\n        return false;\n    }\n    if (n % 524288 === 0) {\n        return true;\n    }\n    if (n % 1048576 === 0) {\n        return false;\n    }\n    if (n % 2097152 === 0) {\n        return true;\n    }\n    if (n % 4194304 === 0) {\n        return false;\n    }\n    if (n % 8388608 === 0) {\n        return true;\n    }\n    if (n % 16777216 === 0) {\n        return false;\n    }\n    if (n % 33554432 === 0) {\n        return true;\n    }\n    if (n % 67108864 !== 0) {\n        return false;\n    }\n    if (n % 134217728 === 0) {\n        return true;\n    }\n    if (n % 268435456 === 0) {\n        return false;\n    }\n    if (n % 536870912 === 0) {\n        return true;\n    }\n    if (n % 1073741824 === 0) {\n        return false;\n    }\n    if (n % 2147483648 === 0) {\n        return true;\n    }\n    if (n % 4294967296 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3e1039y4.js:113:12)\n    at Object.<anonymous> (/tmp/tmp3e1039y4.js:124:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335182
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0 || n % n === 1) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n === 0 || n % n % n === 1) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvxddq2yf.js:32:12)\n    at Object.<anonymous> (/tmp/tmpvxddq2yf.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335182
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsp1uj0e8.ts(139,1): error TS1005: ')' expected.\n../../../../tmp/tmpsp1uj0e8.ts(157,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335174
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpod8zpe2t.ts(138,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprzn0ojr7.ts(166,9): error TS1005: ')' expected.\n../../../../tmp/tmprzn0ojr7.ts(184,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9jqp1s5i.js:30:12)\n    at Object.<anonymous> (/tmp/tmp9jqp1s5i.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxoxy3ng0.js:35:12)\n    at Object.<anonymous> (/tmp/tmpxoxy3ng0.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335185
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n == 0) {\n        return true;\n    }\n    if (n == 1) {\n        return false;\n    }\n    if (n % 2 == 0) {\n        return is_simple_power(x, n / 2);\n    }\n    return is_simple_power(x * x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3neaxys5.js:26:12)\n    at Object.<anonymous> (/tmp/tmp3neaxys5.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335184
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return true;\n    if (n === 1) return false;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpi_341v4x.js:39:12)\n    at Object.<anonymous> (/tmp/tmpi_341v4x.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335185
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprhpa2m6g.ts(166,9): error TS1005: ')' expected.\n../../../../tmp/tmprhpa2m6g.ts(184,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 4 === 0) {\n        return true;\n    }\n    if (n % 8 === 0) {\n        return false;\n    }\n    if (n % 16 === 0) {\n        return true;\n    }\n    if (n % 32 === 0) {\n        return false;\n    }\n    if (n % 64 === 0) {\n        return true;\n    }\n    if (n % 128 === 0) {\n        return false;\n    }\n    if (n % 256 === 0) {\n        return true;\n    }\n    if (n % 512 === 0) {\n        return false;\n    }\n    if (n % 1024 === 0) {\n        return true;\n    }\n    if (n % 2048 === 0) {\n        return false;\n    }\n    if (n % 4096 === 0) {\n        return true;\n    }\n    if (n % 8192 === 0) {\n        return false;\n    }\n    if (n % 16384 === 0) {\n        return true;\n    }\n    if (n % 32768 === 0) {\n        return false;\n    }\n    if (n % 65536 === 0) {\n        return true;\n    }\n    if (n % 131072 === 0) {\n        return false;\n    }\n    if (n % 262144 === 0) {\n        return true;\n    }\n    if (n % 524288 === 0) {\n        return false;\n    }\n    if (n % 1048576 === 0) {\n        return true;\n    }\n    if (n % 2097152 === 0) {\n        return false;\n    }\n    if (n % 4194304 === 0) {\n        return true;\n    }\n    if (n % 8388608 === 0) {\n        return false;\n    }\n    if (n % 16777216 === 0) {\n        return true;\n    }\n    if (n % 33554432 === 0) {\n        return false;\n    }\n    if (n % 67108864 === 0) {\n        return true;\n    }\n    if (n % 134217728 === 0) {\n        return false;\n    }\n    if (n % 268435456 === 0) {\n        return true;\n    }\n    if (n % 536870912 === 0) {\n        return false;\n    }\n    if (n % 1073741824 === 0) {\n        return true;\n    }\n    if (n % -2147483648 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpkqix6191.js:113:12)\n    at Object.<anonymous> (/tmp/tmpkqix6191.js:124:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 0) return false;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  if (n % 3 === 0) return false;\n  if (n % 3 === 1) return true;\n  if (n % 4 === 0) return false;\n  if (n % 4 === 1) return true;\n  if (n % 5 === 0) return false;\n  if (n % 5 === 1) return true;\n  if (n % 6 === 0) return false;\n  if (n % 6 === 1) return true;\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpkg7fqud6.js:41:12)\n    at Object.<anonymous> (/tmp/tmpkg7fqud6.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335185
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwq3y38ge.ts(106,9): error TS1005: ')' expected.\n../../../../tmp/tmpwq3y38ge.ts(124,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335185
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0 || n !== n) {\n        return false;\n    }\n    let i = 1;\n    while (i < n) {\n        if (x === Math.pow(x, n)) {\n            return true;\n        }\n        i += 1;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0mut636d.js:33:12)\n    at Object.<anonymous> (/tmp/tmp0mut636d.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335185
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmptr7on7bw.js:48:12)\n    at Object.<anonymous> (/tmp/tmptr7on7bw.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335182
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return x === Math.pow(n, 1 / 2);\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5hk0dh3a.js:29:12)\n    at Object.<anonymous> (/tmp/tmp5hk0dh3a.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335185
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x / 2, n);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2y9d42_d.js:29:12)\n    at Object.<anonymous> (/tmp/tmp2y9d42_d.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335185
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpod8zpe2t.ts(138,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmptr7on7bw.js:48:12)\n    at Object.<anonymous> (/tmp/tmptr7on7bw.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335182
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    if (n % 1024 === 0) return true;\n    if (n % 4096 === 0) return false;\n    if (n % 8192 === 0) return true;\n    if (n % 16384 === 0) return false;\n    if (n % 32768 === 0) return true;\n    if (n % 65536 === 0) return false;\n    if (n % 131072 === 0) return true;\n    if (n % 262144 === 0) return false;\n    if (n % 524288 === 0) return true;\n    if (n % 1048576 === 0) return false;\n    if (n % 2097152 === 0) return true;\n    if (n % 4194304 === 0) return false;\n    if (n % 8388608 === 0) return true;\n    if (n % 16777216 === 0) return false;\n    if (n % 33554432 === 0) return true;\n    if (n % 67108864 === 0) return false;\n    if (n % 134217728 === 0) return true;\n    if (n % 268435456 === 0) return false;\n    if (n % 536870912 === 0) return true;\n    if (n % 1073741824 === 0) return false;\n    if (n % 2147483648 === 0) return true;\n    if (n % 4294967296 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpw8s9pfvd.js:83:12)\n    at Object.<anonymous> (/tmp/tmpw8s9pfvd.js:94:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 2) {\n        return true;\n    }\n    if (n % 3 === 1) {\n        return false;\n    }\n    if (n % 5 === 2) {\n        return true;\n    }\n    if (n % 5 === 1) {\n        return false;\n    }\n    if (n % 7 === 2) {\n        return true;\n    }\n    if (n % 7 === 1) {\n        return false;\n    }\n    if (n % 11 === 2) {\n        return true;\n    }\n    if (n % 11 === 1) {\n        return false;\n    }\n    if (n % 13 === 2) {\n        return true;\n    }\n    if (n % 13 === 1) {\n        return false;\n    }\n    if (n % 17 === 2) {\n        return true;\n    }\n    if (n % 17 === 1) {\n        return false;\n    }\n    if (n % 19 === 2) {\n        return true;\n    }\n    if (n % 19 === 1) {\n        return false;\n    }\n    if (n % 23 === 2) {\n        return true;\n    }\n    if (n % 23 === 1) {\n        return false;\n    }\n    if (n % 29 === 2) {\n        return true;\n    }\n    if (n % 29 === 1) {\n        return false;\n    }\n    if (n % 31 === 2) {\n        return true;\n    }\n    if (n % 31 === 1) {\n        return false;\n    }\n    if (n % 37 === 2) {\n        return true;\n    }\n    if (n % 37 === 1) {\n        return false;\n    }\n    if (n % 43 === 2) {\n        return true;\n    }\n    if (n % 43 === 1) {\n        return false;\n    }\n    if (n % 47 === 2) {\n        return true;\n    }\n    if (n % 47 === 1) {\n        return false;\n    }\n    if (n % 53 === 2) {\n        return true;\n    }\n    if (n % 53 === 1) {\n        return false;\n    }\n    if (n % 59 === 2) {\n        return true;\n    }\n    if (n % 59 === 1) {\n        return false;\n    }\n    if (n % 63 === 2) {\n        return true;\n    }\n    if (n % 63 === 1) {\n        return false;\n    }\n    if (n % 69 === 2) {\n        return true;\n    }\n    if (n % 69 === 1) {\n        return false;\n    }\n    if (n % 73 === 2) {\n        return true;\n    }\n    if (n % 73 === 1) {\n        return false;\n    }\n    if (n % 79 === 2) {\n        return true;\n    }\n    if (n % 79 === 1) {\n        return false;\n    }\n    if (n % 83 === 2) {\n        return true;\n    }\n    if (n % 83 === 1) {\n        return false;\n    }\n    if (n % 89 === 2) {\n        return true;\n    }\n    if (n % 89 === 1) {\n        return false;\n    }\n    if (n % 93 === 2) {\n        return true;\n    }\n    if (n % 93 === 1) {\n        return false;\n    }\n    if (n % 97 === 2) {\n        return true;\n    }\n    if (n % 97 === 1) {\n        return false;\n    }\n    if (n % 103 === 2) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa3ppe6wo.ts(182,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335185
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x / 2, n);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpixlfml2p.js:29:12)\n    at Object.<anonymous> (/tmp/tmpixlfml2p.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335181
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvut5vj38.js:39:12)\n    at Object.<anonymous> (/tmp/tmpvut5vj38.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n <= 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === 2) {\n        return true;\n    }\n    if (x === 3) {\n        return true;\n    }\n    if (x === 4) {\n        return true;\n    }\n    if (x === 5) {\n        return true;\n    }\n    if (x === 6) {\n        return true;\n    }\n    if (x === 7) {\n        return true;\n    }\n    if (x === 8) {\n        return true;\n    }\n    if (x === 9) {\n        return true;\n    }\n    if (x === 10) {\n        return true;\n    }\n    if (x === 11) {\n        return true;\n    }\n    if (x === 12) {\n        return true;\n    }\n    if (x === 13) {\n        return true;\n    }\n    if (x === 14) {\n        return true;\n    }\n    if (x === 15) {\n        return true;\n    }\n    if (x === 16) {\n        return true;\n    }\n    if (x === 17) {\n        return true;\n    }\n    if (x === 18) {\n        return true;\n    }\n    if (x === 19) {\n        return true;\n    }\n    if (x === 20) {\n        return true;\n    }\n    if (x === 21) {\n        return true;\n    }\n    if (x === 22) {\n        return true;\n    }\n    if (x === 23) {\n        return true;\n    }\n    if (x === 24) {\n        return true;\n    }\n    if (x === 25) {\n        return true;\n    }\n    if (x === 26) {\n        return true;\n    }\n    if (x === 27) {\n        return true;\n    }\n    if (x === 28) {\n        return true;\n    }\n    if (x === 29) {\n        return true;\n    }\n    if (x === 30) {\n        return true;\n    }\n    if (x === 31) {\n        return true;\n    }\n    if (x === 32) {\n        return true;\n    }\n    if (x === 33) {\n        return true;\n    }\n    if (x === 34) {\n        return true;\n    }\n    if (x === 35) {\n        return true;\n    }\n    if (x === 36) {\n        return true;\n    }\n    if (x === 37) {\n        return true;\n    }\n    if (x === 38) {\n        return true;\n    }\n    if (x === 39) {\n        return true;\n    }\n    if (x === 40) {\n        return true;\n    }\n    if (x === 41) {\n        return true;\n    }\n    if (x === 42) {\n        return true;\n    }\n    if (x === 43) {\n        return true;\n    }\n    if (x === 44) {\n        return true;\n    }\n    if (x === 45) {\n        return true;\n    }\n    if (x === 46) {\n        return true;\n    }\n    if (x === 47) {\n        return true;\n    }\n    if (x === 48) {\n        return true;\n    }\n    if (x === 49) {\n        return true;\n    }\n    if (x === 50) {\n        return true;\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdi337wil.ts(186,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335185
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return true;\n    if (n === 1) return false;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpi_341v4x.js:39:12)\n    at Object.<anonymous> (/tmp/tmpi_341v4x.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335185
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe6n6kdzb.ts(169,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (x === 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return is_simple_power(x / 2, n);\n  }\n  return is_simple_power(x * x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzas1hl04.js:26:12)\n    at Object.<anonymous> (/tmp/tmpzas1hl04.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335185
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n === 0 || n !== n) {\n    return false;\n  }\n  if (n % 2 === 0 && n % n % 2 === 0) {\n    return true;\n  }\n  return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf6jl4a0r.js:29:12)\n    at Object.<anonymous> (/tmp/tmpf6jl4a0r.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335185
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % n === 0) return true;\n    if (n % n % 2 === 0) return false;\n    if (n % n % n === 0) return true;\n    if (n % n % n % 2 === 0) return false;\n    if (n % n % n % n === 0) return true;\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0jg_0dmr.js:33:12)\n    at Object.<anonymous> (/tmp/tmp0jg_0dmr.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335185
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpml1gkum1.js:32:12)\n    at Object.<anonymous> (/tmp/tmpml1gkum1.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 4 === 0) {\n        return true;\n    }\n    if (n % 8 === 0) {\n        return false;\n    }\n    if (n % 16 === 0) {\n        return true;\n    }\n    if (n % 32 === 0) {\n        return false;\n    }\n    if (n % 64 === 0) {\n        return true;\n    }\n    if (n % 128 === 0) {\n        return false;\n    }\n    if (n % 256 === 0) {\n        return true;\n    }\n    if (n % 512 === 0) {\n        return false;\n    }\n    if (n % 1024 === 0) {\n        return true;\n    }\n    if (n % 4096 === 0) {\n        return false;\n    }\n    if (n % 8192 === 0) {\n        return true;\n    }\n    if (n % 16384 === 0) {\n        return false;\n    }\n    if (n % 32768 === 0) {\n        return true;\n    }\n    if (n % 65536 === 0) {\n        return false;\n    }\n    if (n % 131072 === 0) {\n        return true;\n    }\n    if (n % 262144 === 0) {\n        return false;\n    }\n    if (n % 524288 === 0) {\n        return true;\n    }\n    if (n % 1048576 === 0) {\n        return false;\n    }\n    if (n % 2097152 === 0) {\n        return true;\n    }\n    if (n % 4194304 === 0) {\n        return false;\n    }\n    if (n % 8388608 === 0) {\n        return true;\n    }\n    if (n % 16777216 === 0) {\n        return false;\n    }\n    if (n % 33554432 === 0) {\n        return true;\n    }\n    if (n % 67108864 === 0) {\n        return false;\n    }\n    if (n % 134217728 === 0) {\n        return true;\n    }\n    if (n % 268435456 === 0) {\n        return false;\n    }\n    if (n % 536870912 === 0) {\n        return true;\n    }\n    if (n % 1073741824 === 0) {\n        return false;\n    }\n    if (n % 2147483648 === 0) {\n        return true;\n    }\n    if (n % 4294967296 === 0) {\n        return false;\n    }\n    if (n % 8589934592 === 0) {\n        return true;\n    }\n    if (n % 17179869184 === 0) {\n        return false;\n    }\n    if (n % 34359738368 === 0) {\n        return true;\n    }\n    if (n % 68719476736 === 0) {\n        return false;\n    }\n    if (n % 13743895347216 === 0) {\n        return true;\n    }\n    if (n % 27487790694432 === 0) {\n        return false;\n    }\n    if (n % 54975581388832 === 0) {\n        return true;\n    }\n    if (n % 109951162777680 === 0) {\n        return false;\n    }\n    if (n % 2199023255552 === 0) {\n        return true;\n    }\n    if (n % 4398046511104 === 0) {\n        return false;\n    }\n    if (n % 671088640 === 0) {\n        return true;\n    }\n    if (n % 134217728 === 0) {\n        return false;\n    }\n    if (n % 268435456 === 0) {\n        return true;\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6a_77srd.ts(165,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335185
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return false;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return true;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return true;\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyac3_efp.js:35:12)\n    at Object.<anonymous> (/tmp/tmpyac3_efp.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335185
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpd0nbybfs.js:39:12)\n    at Object.<anonymous> (/tmp/tmpd0nbybfs.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335185
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxm7iy7ym.js:33:12)\n    at Object.<anonymous> (/tmp/tmpxm7iy7ym.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335185
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 31 == 0) {\n        return false;\n    }\n    if (n % n % 37 == 0) {\n        return false;\n    }\n    if (n % n % 41 == 0) {\n        return false;\n    }\n    if (n % n % 43 == 0) {\n        return false;\n    }\n    if (n % n % 47 == 0) {\n        return false;\n    }\n    if (n % n % 51 == 0) {\n        return false;\n    }\n    if (n % n % 53 == 0) {\n        return false;\n    }\n    if (n % n % 57 == 0) {\n        return false;\n    }\n    if (n % n % 61 == 0) {\n        return false;\n    }\n    if (n % n % 67 == 0) {\n        return false;\n    }\n    if (n % n % 71 == 0) {\n        return false;\n    }\n    if (n % n % 73 == 0) {\n        return false;\n    }\n    if (n % n % 77 == 0) {\n        return false;\n    }\n    if (n % n % 81 == 0) {\n        return false;\n    }\n    if (n % n % 83 == 0) {\n        return false;\n    }\n    if (n % n % 87 == 0) {\n        return false;\n    }\n    if (n % n % 89 == 0) {\n        return false;\n    }\n    if (n % n % 97 == 0) {\n        return false;\n    }\n    if (n % n % 105 == 0) {\n        return false;\n    }\n    if (n % n % 111 == 0) {\n        return false;\n    }\n    if (n % n % 123 == 0) {\n        return false;\n    }\n    if (n % n % 127 == 0) {\n        return false;\n    }\n    if (n % n % 131 == 0) {\n        return false;\n    }\n    if (n % n % 137 == 0) {\n        return false;\n    }\n    if (n % n % 141 == 0) {\n        return false;\n    }\n    if (n % n % 147 == 0) {\n        return false;\n    }\n    if (n % n % 151 == 0) {\n        return false;\n    }\n    if (n % n % 157 == 0) {\n        return false;\n    }\n    if (n % n % 161 == 0) {\n        return false;\n    }\n    if (n % n % 167 == 0) {\n        return false;\n    }\n    if (n % n % 171 == 0) {\n        return false;\n    }\n    if (n % n % 177 == 0) {\n        return false;\n    }\n    if (n % n % 181 == 0) {\n        return false;\n    }\n    if (n % n % 187 == 0) {\n        return false;\n    }\n    if (n % n % 191 == 0) {\n        return false;\n    }\n    if (n % n % 197 == 0) {\n        return false;\n    }\n    if (n % n % 201 == 0) {\n        return false;\n    }\n    if (n % n % 207 == 0) {\n        return false;\n    }\n    if (n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp793ojj5x.ts(163,9): error TS1005: ')' expected.\n../../../../tmp/tmp793ojj5x.ts(181,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335185
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv_j4u6bp.js:29:12)\n    at Object.<anonymous> (/tmp/tmpv_j4u6bp.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335186
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    if (n % 1024 === 0) return true;\n    if (n % 4096 === 0) return false;\n    if (n % 8192 === 0) return true;\n    if (n % 16384 === 0) return false;\n    if (n % 32768 === 0) return true;\n    if (n % 65536 === 0) return false;\n    if (n % 131072 === 0) return true;\n    if (n % 262144 === 0) return false;\n    if (n % 524288 === 0) return true;\n    if (n % 1048576 === 0) return false;\n    if (n % 2097152 === 0) return true;\n    if (n % 4194304 === 0) return false;\n    if (n % 8388608 === 0) return true;\n    if (n % 16777216 === 0) return false;\n    if (n % 33554432 === 0) return true;\n    if (n % 67108864 === 0) return false;\n    if (n % 134217728 === 0) return true;\n    if (n % 268435456 === 0) return false;\n    if (n % 536870912 === 0) return true;\n    if (n % 1073741824 === 0) return false;\n    if (n % 2147483648 === 0) return true;\n    if (n % 4294967296 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpw8s9pfvd.js:83:12)\n    at Object.<anonymous> (/tmp/tmpw8s9pfvd.js:94:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpod8zpe2t.ts(138,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n < 1) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n === 0) {\n    return true;\n  }\n  return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmplqqto8p8.js:29:12)\n    at Object.<anonymous> (/tmp/tmplqqto8p8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp02emwpay.js:41:12)\n    at Object.<anonymous> (/tmp/tmp02emwpay.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335185
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n < 1) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return is_simple_power(x, n / 2);\n  }\n  return is_simple_power(x, n / 2) && is_simple_power(x, n - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplbqp6vei.js:27:12)\n    at Object.<anonymous> (/tmp/tmplbqp6vei.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335185
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsp1uj0e8.ts(139,1): error TS1005: ')' expected.\n../../../../tmp/tmpsp1uj0e8.ts(157,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335174
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpod8zpe2t.ts(138,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 2 === 1) return true;\n    if (n % 3 === 0) return false;\n    if (n % 3 === 1) return true;\n    if (n % 4 === 0) return false;\n    if (n % 4 === 1) return true;\n    if (n % 5 === 0) return false;\n    if (n % 5 === 1) return true;\n    if (n % 6 === 0) return false;\n    if (n % 6 === 1) return true;\n    if (n % 7 === 0) return false;\n    if (n % 7 === 1) return true;\n    if (n % 8 === 0) return false;\n    if (n % 8 === 1) return true;\n    if (n % 9 === 0) return false;\n    if (n % 9 === 1) return true;\n    if (n % 10 === 0) return false;\n    if (n % 10 === 1) return true;\n    if (n % 11 === 0) return false;\n    if (n % 11 === 1) return true;\n    if (n % 12 === 0) return false;\n    if (n % 12 === 1) return true;\n    if (n % 13 === 0) return false;\n    if (n % 13 === 1) return true;\n    if (n % 14 === 0) return false;\n    if (n % 14 === 1) return true;\n    if (n % 15 === 0) return false;\n    if (n % 15 === 1) return true;\n    if (n % 16 === 0) return false;\n    if (n % 16 === 1) return true;\n    if (n % 17 === 0) return false;\n    if (n % 17 === 1) return true;\n    if (n % 18 === 0) return false;\n    if (n % 18 === 1) return true;\n    if (n % 19 === 0) return false;\n    if (n % 19 === 1) return true;\n    if (n % 20 === 0) return false;\n    if (n % 20 === 1) return true;\n    if (n % 21 === 0) return false;\n    if (n % 21 === 1) return true;\n    if (n % 22 === 0) return false;\n    if (n % 22 === 1) return true;\n    if (n % 23 === 0) return false;\n    if (n % 23 === 1) return true;\n    if (n % 24 === 0) return false;\n    if (n % 24 === 1) return true;\n    if (n % 25 === 0) return false;\n    if (n % 25 === 1) return true;\n    if (n % 26 === 0) return false;\n    if (n % 26 === 1) return true;\n    if (n % 27 === 0) return false;\n    if (n % 27 === 1) return true;\n    if (n % 28 === 0) return false;\n    if (n % 28 === 1) return true;\n    if (n % 29 === 0) return false;\n    if (n % 29 === 1) return true;\n    if (n % 30 === 0) return false;\n    if (n % 30 === 1) return true;\n    if (n % 31 === 0) return false;\n    if (n % 31 === 1) return true;\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpx6b81wbz.js:141:12)\n    at Object.<anonymous> (/tmp/tmpx6b81wbz.js:152:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpod8zpe2t.ts(138,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return x === 1;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjs60hg7i.js:29:12)\n    at Object.<anonymous> (/tmp/tmpjs60hg7i.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335186
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n === 0 || n % n % 2 === 0) {\n    return false;\n  }\n  if (n % n % 3 === 0) {\n    return true;\n  }\n  return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4xt3_ehe.js:29:12)\n    at Object.<anonymous> (/tmp/tmp4xt3_ehe.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335186
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n === 3) {\n        return true;\n    }\n    if (n === 4) {\n        return true;\n    }\n    if (n === 5) {\n        return true;\n    }\n    if (n === 6) {\n        return true;\n    }\n    if (n === 7) {\n        return true;\n    }\n    if (n === 8) {\n        return true;\n    }\n    if (n === 9) {\n        return true;\n    }\n    if (n === 10) {\n        return true;\n    }\n    if (n === 11) {\n        return true;\n    }\n    if (n === 12) {\n        return true;\n    }\n    if (n === 13) {\n        return true;\n    }\n    if (n === 14) {\n        return true;\n    }\n    if (n === 15) {\n        return true;\n    }\n    if (n === 16) {\n        return true;\n    }\n    if (n === 17) {\n        return true;\n    }\n    if (n === 18) {\n        return true;\n    }\n    if (n === 19) {\n        return true;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpexa0rixm.ts(159,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmgna3fg1.js:47:12)\n    at Object.<anonymous> (/tmp/tmpmgna3fg1.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335188
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 2 === 1) return true;\n    if (n % 3 === 0) return false;\n    if (n % 3 === 1) return true;\n    if (n % 4 === 0) return false;\n    if (n % 4 === 1) return true;\n    if (n % 5 === 0) return false;\n    if (n % 5 === 1) return true;\n    if (n % 6 === 0) return false;\n    if (n % 6 === 1) return true;\n    if (n % 7 === 0) return false;\n    if (n % 7 === 1) return true;\n    if (n % 8 === 0) return false;\n    if (n % 8 === 1) return true;\n    if (n % 9 === 0) return false;\n    if (n % 9 === 1) return true;\n    if (n % 10 === 0) return false;\n    if (n % 10 === 1) return true;\n    if (n % 11 === 0) return false;\n    if (n % 11 === 1) return true;\n    if (n % 12 === 0) return false;\n    if (n % 12 === 1) return true;\n    if (n % 13 === 0) return false;\n    if (n % 13 === 1) return true;\n    if (n % 14 === 0) return false;\n    if (n % 14 === 1) return true;\n    if (n % 15 === 0) return false;\n    if (n % 15 === 1) return true;\n    if (n % 16 === 0) return false;\n    if (n % 16 === 1) return true;\n    if (n % 17 === 0) return false;\n    if (n % 17 === 1) return true;\n    if (n % 18 === 0) return false;\n    if (n % 18 === 1) return true;\n    if (n % 19 === 0) return false;\n    if (n % 19 === 1) return true;\n    if (n % 20 === 0) return false;\n    if (n % 20 === 1) return true;\n    if (n % 21 === 0) return false;\n    if (n % 21 === 1) return true;\n    if (n % 22 === 0) return false;\n    if (n % 22 === 1) return true;\n    if (n % 23 === 0) return false;\n    if (n % 23 === 1) return true;\n    if (n % 24 === 0) return false;\n    if (n % 24 === 1) return true;\n    if (n % 25 === 0) return false;\n    if (n % 25 === 1) return true;\n    if (n % 26 === 0) return false;\n    if (n % 26 === 1) return true;\n    if (n % 27 === 0) return false;\n    if (n % 27 === 1) return true;\n    if (n % 28 === 0) return false;\n    if (n % 28 === 1) return true;\n    if (n % 29 === 0) return false;\n    if (n % 29 === 1) return true;\n    if (n % 30 === 0) return false;\n    if (n % 30 === 1) return true;\n    if (n % 31 === 0) return false;\n    if (n % 31 === 1) return true;\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpx6b81wbz.js:141:12)\n    at Object.<anonymous> (/tmp/tmpx6b81wbz.js:152:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return x === 1;\n  }\n  return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp76p80ye_.js:35:12)\n    at Object.<anonymous> (/tmp/tmp76p80ye_.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335188
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return x === 1;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp305sh81x.js:29:12)\n    at Object.<anonymous> (/tmp/tmp305sh81x.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335188
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0ye2zen7.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0ye2zen7.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335182
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    if (n % 1024 === 0) return true;\n    if (n % 4096 === 0) return false;\n    if (n % 8192 === 0) return true;\n    if (n % 16384 === 0) return false;\n    if (n % 32768 === 0) return true;\n    if (n % 65536 === 0) return false;\n    if (n % 131072 === 0) return true;\n    if (n % 262144 === 0) return false;\n    if (n % 524288 === 0) return true;\n    if (n % 1048576 === 0) return false;\n    if (n % 2097152 === 0) return true;\n    if (n % 4194304 === 0) return false;\n    if (n % 8388608 === 0) return true;\n    if (n % 16777216 === 0) return false;\n    if (n % 33554432 === 0) return true;\n    if (n % 67108864 === 0) return false;\n    if (n % 134217728 === 0) return true;\n    if (n % 268435456 === 0) return false;\n    if (n % 536870912 === 0) return true;\n    if (n % 1073741824 === 0) return false;\n    if (n % 2147483648 === 0) return true;\n    if (n % 4294967296 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpw8s9pfvd.js:83:12)\n    at Object.<anonymous> (/tmp/tmpw8s9pfvd.js:94:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4odno3wv.js:26:12)\n    at Object.<anonymous> (/tmp/tmp4odno3wv.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335188
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 2) {\n        return true;\n    }\n    if (n % 3 === 1) {\n        return false;\n    }\n    if (n % 5 === 2) {\n        return true;\n    }\n    if (n % 5 === 1) {\n        return false;\n    }\n    if (n % 7 === 2) {\n        return true;\n    }\n    if (n % 7 === 1) {\n        return false;\n    }\n    if (n % 11 === 2) {\n        return true;\n    }\n    if (n % 11 === 1) {\n        return false;\n    }\n    if (n % 13 === 2) {\n        return true;\n    }\n    if (n % 13 === 1) {\n        return false;\n    }\n    if (n % 17 === 2) {\n        return true;\n    }\n    if (n % 17 === 1) {\n        return false;\n    }\n    if (n % 19 === 2) {\n        return true;\n    }\n    if (n % 19 === 1) {\n        return false;\n    }\n    if (n % 23 === 2) {\n        return true;\n    }\n    if (n % 23 === 1) {\n        return false;\n    }\n    if (n % 29 === 2) {\n        return true;\n    }\n    if (n % 29 === 1) {\n        return false;\n    }\n    if (n % 31 === 2) {\n        return true;\n    }\n    if (n % 31 === 1) {\n        return false;\n    }\n    if (n % 37 === 2) {\n        return true;\n    }\n    if (n % 37 === 1) {\n        return false;\n    }\n    if (n % 43 === 2) {\n        return true;\n    }\n    if (n % 43 === 1) {\n        return false;\n    }\n    if (n % 49 === 2) {\n        return true;\n    }\n    if (n % 49 === 1) {\n        return false;\n    }\n    if (n % 55 === 2) {\n        return true;\n    }\n    if (n % 55 === 1) {\n        return false;\n    }\n    if (n % 59 === 2) {\n        return true;\n    }\n    if (n % 59 === 1) {\n        return false;\n    }\n    if (n % 63 === 2) {\n        return true;\n    }\n    if (n % 63 === 1) {\n        return false;\n    }\n    if (n % 69 === 2) {\n        return true;\n    }\n    if (n % 69 === 1) {\n        return false;\n    }\n    if (n % 73 === 2) {\n        return true;\n    }\n    if (n % 73 === 1) {\n        return false;\n    }\n    if (n % 79 === 2) {\n        return true;\n    }\n    if (n % 79 === 1) {\n        return false;\n    }\n    if (n % 83 === 2) {\n        return true;\n    }\n    if (n % 83 === 1) {\n        return false;\n    }\n    if (n % 89 === 2) {\n        return true;\n    }\n    if (n % 89 === 1) {\n        return false;\n    }\n    if (n % 95 === 2) {\n        return true;\n    }\n    if (n % 95 === 1) {\n        return false;\n    }\n    if (n % 101 === 2) {\n        return true;\n    }\n    if (n % 101 === 1) {\n        return false;\n    }\n    if (n % 107 === 2) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp475f7gfc.ts(181,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335188
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x / 2, n);\n    }\n    return is_simple_power(x * x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5z8o9z29.js:26:12)\n    at Object.<anonymous> (/tmp/tmp5z8o9z29.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335188
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return false;\n  }\n  if (n % 16 === 0) {\n    return true;\n  }\n  if (n % 32 === 0) {\n    return false;\n  }\n  if (n % 64 === 0) {\n    return true;\n  }\n  if (n % 128 === 0) {\n    return false;\n  }\n  if (n % 256 === 0) {\n    return true;\n  }\n  if (n % 512 === 0) {\n    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnz70do0y.js:47:12)\n    at Object.<anonymous> (/tmp/tmpnz70do0y.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335189
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmptr7on7bw.js:48:12)\n    at Object.<anonymous> (/tmp/tmptr7on7bw.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335182
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x / 2, n);\n    }\n    return is_simple_power(x * x, n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_t_60rm0.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_t_60rm0.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335188
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 4 === 0) {\n        return true;\n    }\n    if (n % 8 === 0) {\n        return false;\n    }\n    if (n % 16 === 0) {\n        return true;\n    }\n    if (n % 32 === 0) {\n        return false;\n    }\n    if (n % 64 === 0) {\n        return true;\n    }\n    if (n % 128 === 0) {\n        return false;\n    }\n    if (n % 256 === 0) {\n        return true;\n    }\n    if (n % 512 === 0) {\n        return false;\n    }\n    if (n % 1024 === 0) {\n        return true;\n    }\n    if (n % 4096 === 0) {\n        return false;\n    }\n    if (n % 8192 === 0) {\n        return true;\n    }\n    if (n % 16384 === 0) {\n        return false;\n    }\n    if (n % 32768 === 0) {\n        return true;\n    }\n    if (n % 65536 === 0) {\n        return false;\n    }\n    if (n % 131072 === 0) {\n        return true;\n    }\n    if (n % 262144 === 0) {\n        return false;\n    }\n    if (n % 524288 === 0) {\n        return true;\n    }\n    if (n % 1048576 === 0) {\n        return false;\n    }\n    if (n % 2097152 === 0) {\n        return true;\n    }\n    if (n % 4194304 === 0) {\n        return false;\n    }\n    if (n % 8388608 === 0) {\n        return true;\n    }\n    if (n % 16777216 === 0) {\n        return false;\n    }\n    if (n % 33554432 === 0) {\n        return true;\n    }\n    if (n % 67108864 === 0) {\n        return false;\n    }\n    if (n % 134217728 === 0) {\n        return true;\n    }\n    if (n % 268435456 === 0) {\n        return false;\n    }\n    if (n % 536870912 === 0) {\n        return true;\n    }\n    if (n % 1073741824 === 0) {\n        return false;\n    }\n    if (n % 2147483648 === 0) {\n        return true;\n    }\n    if (n % 4294967296 === 0) {\n        return false;\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmps7uoe0bq.js:113:12)\n    at Object.<anonymous> (/tmp/tmps7uoe0bq.js:124:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335189
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x / 2, n);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpixlfml2p.js:29:12)\n    at Object.<anonymous> (/tmp/tmpixlfml2p.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335181
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_sotfoln.js:38:12)\n    at Object.<anonymous> (/tmp/tmp_sotfoln.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335189
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbxvekk1o.js:32:12)\n    at Object.<anonymous> (/tmp/tmpbxvekk1o.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335189
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0 || n === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return true;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprvq5hyqc.ts(166,9): error TS1005: ')' expected.\n../../../../tmp/tmprvq5hyqc.ts(184,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335188
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, (n - 1) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpabv7710l.js:30:12)\n    at Object.<anonymous> (/tmp/tmpabv7710l.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335189
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmptr7on7bw.js:48:12)\n    at Object.<anonymous> (/tmp/tmptr7on7bw.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335182
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 2) {\n        return true;\n    }\n    if (n % 3 === 1) {\n        return false;\n    }\n    if (n % 5 === 2) {\n        return true;\n    }\n    if (n % 5 === 1) {\n        return false;\n    }\n    if (n % 7 === 2) {\n        return true;\n    }\n    if (n % 7 === 1) {\n        return false;\n    }\n    if (n % 11 === 2) {\n        return true;\n    }\n    if (n % 11 === 1) {\n        return false;\n    }\n    if (n % 13 === 2) {\n        return true;\n    }\n    if (n % 13 === 1) {\n        return false;\n    }\n    if (n % 17 === 2) {\n        return true;\n    }\n    if (n % 17 === 1) {\n        return false;\n    }\n    if (n % 19 === 2) {\n        return true;\n    }\n    if (n % 19 === 1) {\n        return false;\n    }\n    if (n % 23 === 2) {\n        return true;\n    }\n    if (n % 23 === 1) {\n        return false;\n    }\n    if (n % 29 === 2) {\n        return true;\n    }\n    if (n % 29 === 1) {\n        return false;\n    }\n    if (n % 31 === 2) {\n        return true;\n    }\n    if (n % 31 === 1) {\n        return false;\n    }\n    if (n % 37 === 2) {\n        return true;\n    }\n    if (n % 37 === 1) {\n        return false;\n    }\n    if (n % 43 === 2) {\n        return true;\n    }\n    if (n % 43 === 1) {\n        return false;\n    }\n    if (n % 49 === 2) {\n        return true;\n    }\n    if (n % 49 === 1) {\n        return false;\n    }\n    if (n % 55 === 2) {\n        return true;\n    }\n    if (n % 55 === 1) {\n        return false;\n    }\n    if (n % 59 === 2) {\n        return true;\n    }\n    if (n % 59 === 1) {\n        return false;\n    }\n    if (n % 63 === 2) {\n        return true;\n    }\n    if (n % 63 === 1) {\n        return false;\n    }\n    if (n % 69 === 2) {\n        return true;\n    }\n    if (n % 69 === 1) {\n        return false;\n    }\n    if (n % 73 === 2) {\n        return true;\n    }\n    if (n % 73 === 1) {\n        return false;\n    }\n    if (n % 79 === 2) {\n        return true;\n    }\n    if (n % 79 === 1) {\n        return false;\n    }\n    if (n % 83 === 2) {\n        return true;\n    }\n    if (n % 83 === 1) {\n        return false;\n    }\n    if (n % 89 === 2) {\n        return true;\n    }\n    if (n % 89 === 1) {\n        return false;\n    }\n    if (n % 95 === 2) {\n        return true;\n    }\n    if (n % 95 === 1) {\n        return false;\n    }\n    if (n % 101 === 2) {\n        return true;\n    }\n    if (n % 101 === 1) {\n        return false;\n    }\n    if (n % 103 === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbxuy1bel.ts(163,9): error TS1005: ')' expected.\n../../../../tmp/tmpbxuy1bel.ts(181,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335189
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfpje03ke.js:30:12)\n    at Object.<anonymous> (/tmp/tmpfpje03ke.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmptr7on7bw.js:48:12)\n    at Object.<anonymous> (/tmp/tmptr7on7bw.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335182
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    if (n % 1024 === 0) return true;\n    if (n % 4096 === 0) return false;\n    if (n % 8192 === 0) return true;\n    if (n % 16384 === 0) return false;\n    if (n % 32768 === 0) return true;\n    if (n % 65536 === 0) return false;\n    if (n % 131072 === 0) return true;\n    if (n % 262144 === 0) return false;\n    if (n % 524288 === 0) return true;\n    if (n % 1048576 === 0) return false;\n    if (n % 2097152 === 0) return true;\n    if (n % 4194304 === 0) return false;\n    if (n % 8388608 === 0) return true;\n    if (n % 16777216 === 0) return false;\n    if (n % 33554432 === 0) return true;\n    if (n % 67108864 === 0) return false;\n    if (n % 134217728 === 0) return true;\n    if (n % 268435456 === 0) return false;\n    if (n % 536870912 === 0) return true;\n    if (n % 1073741824 === 0) return false;\n    if (n % 2147483648 === 0) return true;\n    if (n % 4294967296 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpw8s9pfvd.js:83:12)\n    at Object.<anonymous> (/tmp/tmpw8s9pfvd.js:94:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwq3y38ge.ts(106,9): error TS1005: ')' expected.\n../../../../tmp/tmpwq3y38ge.ts(124,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335185
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 2 === 1) return true;\n    if (n % 3 === 0) return false;\n    if (n % 3 === 1) return true;\n    if (n % 4 === 0) return false;\n    if (n % 4 === 1) return true;\n    if (n % 5 === 0) return false;\n    if (n % 5 === 1) return true;\n    if (n % 6 === 0) return false;\n    if (n % 6 === 1) return true;\n    if (n % 7 === 0) return false;\n    if (n % 7 === 1) return true;\n    if (n % 8 === 0) return false;\n    if (n % 8 === 1) return true;\n    if (n % 9 === 0) return false;\n    if (n % 9 === 1) return true;\n    if (n % 10 === 0) return false;\n    if (n % 10 === 1) return true;\n    if (n % 11 === 0) return false;\n    if (n % 11 === 1) return true;\n    if (n % 12 === 0) return false;\n    if (n % 12 === 1) return true;\n    if (n % 13 === 0) return false;\n    if (n % 13 === 1) return true;\n    if (n % 14 === 0) return false;\n    if (n % 14 === 1) return true;\n    if (n % 15 === 0) return false;\n    if (n % 15 === 1) return true;\n    if (n % 16 === 0) return false;\n    if (n % 16 === 1) return true;\n    if (n % 17 === 0) return false;\n    if (n % 17 === 1) return true;\n    if (n % 18 === 0) return false;\n    if (n % 18 === 1) return true;\n    if (n % 19 === 0) return false;\n    if (n % 19 === 1) return true;\n    if (n % 20 === 0) return false;\n    if (n % 20 === 1) return true;\n    if (n % 21 === 0) return false;\n    if (n % 21 === 1) return true;\n    if (n % 22 === 0) return false;\n    if (n % 22 === 1) return true;\n    if (n % 23 === 0) return false;\n    if (n % 23 === 1) return true;\n    if (n % 24 === 0) return false;\n    if (n % 24 === 1) return true;\n    if (n % 25 === 0) return false;\n    if (n % 25 === 1) return true;\n    if (n % 26 === 0) return false;\n    if (n % 26 === 1) return true;\n    if (n % 27 === 0) return false;\n    if (n % 27 === 1) return true;\n    if (n % 28 === 0) return false;\n    if (n % 28 === 1) return true;\n    if (n % 29 === 0) return false;\n    if (n % 29 === 1) return true;\n    if (n % 30 === 0) return false;\n    if (n % 30 === 1) return true;\n    if (n % 31 === 0) return false;\n    if (n % 31 === 1) return true;\n    if (n % 32 === 0) return false;\n    if (n % 32 === 1) return true;\n    if (n % 33 === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_26iwja4.ts(77,9): error TS1005: ')' expected.\n../../../../tmp/tmp_26iwja4.ts(95,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335189
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return x === 1;\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmk1v4_e9.js:35:12)\n    at Object.<anonymous> (/tmp/tmpmk1v4_e9.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335189
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n <= 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0) {\n        return true;\n    }\n    let m = n / 2;\n    while (m > 1) {\n        if (x === m ** n) {\n            return true;\n        }\n        m--;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv5zhviae.js:36:12)\n    at Object.<anonymous> (/tmp/tmpv5zhviae.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335189
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmptr7on7bw.js:48:12)\n    at Object.<anonymous> (/tmp/tmptr7on7bw.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335182
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  return Math.pow(x, n) === x;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1i5v4tns.js:17:12)\n    at Object.<anonymous> (/tmp/tmp1i5v4tns.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335189
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfpje03ke.js:30:12)\n    at Object.<anonymous> (/tmp/tmpfpje03ke.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbxvekk1o.js:32:12)\n    at Object.<anonymous> (/tmp/tmpbxvekk1o.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335189
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === 2) {\n        return true;\n    }\n    if (x === 3) {\n        return true;\n    }\n    if (x === 4) {\n        return true;\n    }\n    if (x === 5) {\n        return true;\n    }\n    if (x === 6) {\n        return true;\n    }\n    if (x === 7) {\n        return true;\n    }\n    if (x === 8) {\n        return true;\n    }\n    if (x === 9) {\n        return true;\n    }\n    if (x === 10) {\n        return true;\n    }\n    if (x === 11) {\n        return true;\n    }\n    if (x === 12) {\n        return true;\n    }\n    if (x === 13) {\n        return true;\n    }\n    if (x === 14) {\n        return true;\n    }\n    if (x === 15) {\n        return true;\n    }\n    if (x === 16) {\n        return true;\n    }\n    if (x === 17) {\n        return true;\n    }\n    if (x === 18) {\n        return true;\n    }\n    if (x === 19) {\n        return true;\n    }\n    if (x === 20) {\n        return true;\n    }\n    if (x === 21) {\n        return true;\n    }\n    if (x === 22) {\n        return true;\n    }\n    if (x === 23) {\n        return true;\n    }\n    if (x === 24) {\n        return true;\n    }\n    if (x === 25) {\n        return true;\n    }\n    if (x === 26) {\n        return true;\n    }\n    if (x === 27) {\n        return true;\n    }\n    if (x === 28) {\n        return true;\n    }\n    if (x === 29) {\n        return true;\n    }\n    if (x === 30) {\n        return true;\n    }\n    if (x === 31) {\n        return true;\n    }\n    if (x === 32) {\n        return true;\n    }\n    if (x === 33) {\n        return true;\n    }\n    if (x === 34) {\n        return true;\n    }\n    if (x === 35) {\n        return true;\n    }\n    if (x === 36) {\n        return true;\n    }\n    if (x === 37) {\n        return true;\n    }\n    if (x === 38) {\n        return true;\n    }\n    if (x === 39) {\n        return true;\n    }\n    if (x === 40) {\n        return true;\n    }\n    if (x === 41) {\n        return true;\n    }\n    if (x === 42) {\n        return true;\n    }\n    if (x === 43) {\n        return true;\n    }\n    if (x === 44) {\n        return true;\n    }\n    if (x === 45) {\n        return true;\n    }\n    if (x === 46) {\n        return true;\n    }\n    if (x === 47) {\n        return true;\n    }\n    if (x === 48\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk98k6v4z.ts(166,1): error TS1005: ')' expected.\n../../../../tmp/tmpk98k6v4z.ts(184,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335189
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return false;\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpaf89qpui.js:30:12)\n    at Object.<anonymous> (/tmp/tmpaf89qpui.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335189
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (x === 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return is_simple_power(x / 2, n);\n  }\n  if (n % 2 === 1) {\n    return is_simple_power(x, n / 2);\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpewlqyrps.js:29:12)\n    at Object.<anonymous> (/tmp/tmpewlqyrps.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335189
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x / 2, n);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpixlfml2p.js:29:12)\n    at Object.<anonymous> (/tmp/tmpixlfml2p.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335181
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 === 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n    if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n    if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 === 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n    if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 === 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 === 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n    if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n    if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 === 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 === 0) {\n        return false;\n    }\n    if (n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprzn0ojr7.ts(166,9): error TS1005: ')' expected.\n../../../../tmp/tmprzn0ojr7.ts(184,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 0) return false;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  if (n % 3 === 0) return false;\n  if (n % 3 === 1) return true;\n  if (n % 4 === 0) return false;\n  if (n % 4 === 1) return true;\n  if (n % 5 === 0) return false;\n  if (n % 5 === 1) return true;\n  if (n % 6 === 0) return false;\n  if (n % 6 === 1) return true;\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpkg7fqud6.js:41:12)\n    at Object.<anonymous> (/tmp/tmpkg7fqud6.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335185
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === 2) {\n        return true;\n    }\n    if (x === 3) {\n        return true;\n    }\n    if (x === 4) {\n        return true;\n    }\n    if (x === 5) {\n        return true;\n    }\n    if (x === 6) {\n        return true;\n    }\n    if (x === 7) {\n        return true;\n    }\n    if (x === 8) {\n        return true;\n    }\n    if (x === 9) {\n        return true;\n    }\n    if (x === 10) {\n        return true;\n    }\n    if (x === 11) {\n        return true;\n    }\n    if (x === 12) {\n        return true;\n    }\n    if (x === 13) {\n        return true;\n    }\n    if (x === 14) {\n        return true;\n    }\n    if (x === 15) {\n        return true;\n    }\n    if (x === 16) {\n        return true;\n    }\n    if (x === 17) {\n        return true;\n    }\n    if (x === 18) {\n        return true;\n    }\n    if (x === 19) {\n        return true;\n    }\n    if (x === 20) {\n        return true;\n    }\n    if (x === 21) {\n        return true;\n    }\n    if (x === 22) {\n        return true;\n    }\n    if (x === 23) {\n        return true;\n    }\n    if (x === 24) {\n        return true;\n    }\n    if (x === 25) {\n        return true;\n    }\n    if (x === 26) {\n        return true;\n    }\n    if (x === 27) {\n        return true;\n    }\n    if (x === 28) {\n        return true;\n    }\n    if (x === 29) {\n        return true;\n    }\n    if (x === 30) {\n        return true;\n    }\n    if (x === 31) {\n        return true;\n    }\n    if (x === 32) {\n        return true;\n    }\n    if (x === 33) {\n        return true;\n    }\n    if (x === 34) {\n        return true;\n    }\n    if (x === 35) {\n        return true;\n    }\n    if (x === 36) {\n        return true;\n    }\n    if (x === 37) {\n        return true;\n    }\n    if (x === 38) {\n        return true;\n    }\n    if (x === 39) {\n        return true;\n    }\n    if (x === 40) {\n        return true;\n    }\n    if (x === 41) {\n        return true;\n    }\n    if (x === 42) {\n        return true;\n    }\n    if (x === 43) {\n        return true;\n    }\n    if (x === 44) {\n        return true;\n    }\n    if (x === 45) {\n        return true;\n    }\n    if (x === 46) {\n        return true;\n    }\n    if (x === 47) {\n        return true;\n    }\n    if (x === 48) {\n        return true;\n    }\n    if (x === 49) {\n        return true;\n    }\n    if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvs8kob8w.ts(169,9): error TS1005: ')' expected.\n../../../../tmp/tmpvs8kob8w.ts(187,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335174
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    if (n % 1024 === 0) return true;\n    if (n % 4096 === 0) return false;\n    if (n % 8192 === 0) return true;\n    if (n % 16384 === 0) return false;\n    if (n % 32768 === 0) return true;\n    if (n % 65536 === 0) return false;\n    if (n % 131072 === 0) return true;\n    if (n % 262144 === 0) return false;\n    if (n % 524288 === 0) return true;\n    if (n % 1048576 === 0) return false;\n    if (n % 2097152 === 0) return true;\n    if (n % 4194304 === 0) return false;\n    if (n % 8388608 === 0) return true;\n    if (n % 16777216 === 0) return false;\n    if (n % 33554432 === 0) return true;\n    if (n % 67108864 === 0) return false;\n    if (n % 134217728 === 0) return true;\n    if (n % 268435456 === 0) return false;\n    if (n % 536870912 === 0) return true;\n    if (n % 1073741824 === 0) return false;\n    if (n % 2147483648 === 0) return true;\n    if (n % 4294967296 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpw8s9pfvd.js:83:12)\n    at Object.<anonymous> (/tmp/tmpw8s9pfvd.js:94:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 4 === 0) {\n        return true;\n    }\n    if (n % 8 === 0) {\n        return false;\n    }\n    if (n % 16 === 0) {\n        return true;\n    }\n    if (n % 32 === 0) {\n        return false;\n    }\n    if (n % 64 === 0) {\n        return true;\n    }\n    if (n % 128 === 0) {\n        return false;\n    }\n    if (n % 256 === 0) {\n        return true;\n    }\n    if (n % 512 === 0) {\n        return false;\n    }\n    if (n % 1024 === 0) {\n        return true;\n    }\n    if (n % 4096 === 0) {\n        return false;\n    }\n    if (n % 8192 === 0) {\n        return true;\n    }\n    if (n % 16384 === 0) {\n        return false;\n    }\n    if (n % 32768 === 0) {\n        return true;\n    }\n    if (n % 65536 === 0) {\n        return false;\n    }\n    if (n % 131072 === 0) {\n        return true;\n    }\n    if (n % 262144 === 0) {\n        return false;\n    }\n    if (n % 524288 === 0) {\n        return true;\n    }\n    if (n % 1048576 === 0) {\n        return false;\n    }\n    if (n % 2097152 === 0) {\n        return true;\n    }\n    if (n % 4194304 === 0) {\n        return false;\n    }\n    if (n % 8388608 === 0) {\n        return true;\n    }\n    if (n % 16777216 === 0) {\n        return false;\n    }\n    if (n % 33554432 === 0) {\n        return true;\n    }\n    if (n % 67108864 === 0) {\n        return false;\n    }\n    if (n % 134217728 === 0) {\n        return true;\n    }\n    if (n % 268435456 === 0) {\n        return false;\n    }\n    if (n % 536870912 === 0) {\n        return true;\n    }\n    if (n % 1073741824 === 0) {\n        return false;\n    }\n    if (n % -2147483648 === 0) {\n        return true;\n    }\n    if (n % -2147483648 === 0) {\n        return false;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4fg_4xjd.js:112:12)\n    at Object.<anonymous> (/tmp/tmp4fg_4xjd.js:123:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335189
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n / 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmgna3fg1.js:47:12)\n    at Object.<anonymous> (/tmp/tmpmgna3fg1.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335188
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (x === 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return is_simple_power(x, n / 2);\n  }\n  return is_simple_power(x, n / 2) && is_simple_power(x, (n - 1) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0jp32_r3.js:27:12)\n    at Object.<anonymous> (/tmp/tmp0jp32_r3.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335189
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return true;\n  }\n  if (x === 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return is_simple_power(x, n / 2);\n  }\n  if (n % 2 === 1) {\n    return is_simple_power(x, n / 2);\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpcdlokvy9.js:30:12)\n    at Object.<anonymous> (/tmp/tmpcdlokvy9.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335174
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 4 === 0) {\n        return true;\n    }\n    if (n % 8 === 0) {\n        return false;\n    }\n    if (n % 16 === 0) {\n        return true;\n    }\n    if (n % 32 === 0) {\n        return false;\n    }\n    if (n % 64 === 0) {\n        return true;\n    }\n    if (n % 128 === 0) {\n        return false;\n    }\n    if (n % 256 === 0) {\n        return true;\n    }\n    if (n % 512 === 0) {\n        return false;\n    }\n    if (n % 1024 === 0) {\n        return true;\n    }\n    if (n % 2048 === 0) {\n        return false;\n    }\n    if (n % 4096 === 0) {\n        return true;\n    }\n    if (n % 8192 === 0) {\n        return false;\n    }\n    if (n % 16384 === 0) {\n        return true;\n    }\n    if (n % 32768 === 0) {\n        return false;\n    }\n    if (n % 65536 === 0) {\n        return true;\n    }\n    if (n % 131072 === 0) {\n        return false;\n    }\n    if (n % 262144 === 0) {\n        return true;\n    }\n    if (n % 524288 === 0) {\n        return false;\n    }\n    if (n % 1048576 === 0) {\n        return true;\n    }\n    if (n % 2097152 === 0) {\n        return false;\n    }\n    if (n % 4194304 === 0) {\n        return true;\n    }\n    if (n % 8388608 === 0) {\n        return false;\n    }\n    if (n % 16777216 === 0) {\n        return true;\n    }\n    if (n % 33554432 === 0) {\n        return false;\n    }\n    if (n % 67108864 === 0) {\n        return true;\n    }\n    if (n % 134217728 === 0) {\n        return false;\n    }\n    if (n % 268435456 === 0) {\n        return true;\n    }\n    if (n % 536870912 === 0) {\n        return false;\n    }\n    if (n % 1073741824 === 0) {\n        return true;\n    }\n    if (n % 2147483648 === 0) {\n        return false;\n    }\n    if (n % 4294967296 === 0) {\n        return true;\n    }\n    if (n % 8589934592 === 0) {\n        return false;\n    }\n    if (n % 17179869184 === 0) {\n        return true;\n    }\n    if (n % 34359738368 === 0) {\n        return false;\n    }\n    if (n % 68719476736 === 0) {\n        return true;\n    }\n    if (n % 13743869632 === 0) {\n        return false;\n    }\n    if (n % 26843545608 === 0) {\n        return true;\n    }\n    if (n % 53687088096 === 0) {\n        return false;\n    }\n    if (n % 107374182400 === 0) {\n        return true;\n    }\n    if (n % 214748364800 === 0) {\n        return false;\n    }\n    if (n % 429496729600 === 0) {\n        return true;\n    }\n    if (n % 858993459200 === 0) {\n        return false;\n    }\n    if (n % 1717986918400 === 0) {\n        return true;\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyo1x66vc.ts(168,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335191
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 2 === 1) return true;\n    if (x === 1) return false;\n    if (x === -1) return true;\n    if (x === -2) return true;\n    if (x === -3) return true;\n    if (x === -4) return true;\n    if (x === -5) return true;\n    if (x === -6) return true;\n    if (x === -7) return true;\n    if (x === -8) return true;\n    if (x === -9) return true;\n    if (x === -10) return true;\n    if (x === -11) return true;\n    if (x === -12) return true;\n    if (x === -13) return true;\n    if (x === -14) return true;\n    if (x === -15) return true;\n    if (x === -16) return true;\n    if (x === -17) return true;\n    if (x === -18) return true;\n    if (x === -19) return true;\n    if (x === -20) return true;\n    if (x === -21) return true;\n    if (x === -22) return true;\n    if (x === -23) return true;\n    if (x === -24) return true;\n    if (x === -25) return true;\n    if (x === -26) return true;\n    if (x === -27) return true;\n    if (x === -28) return true;\n    if (x === -29) return true;\n    if (x === -30) return true;\n    if (x === -31) return true;\n    if (x === -32) return true;\n    if (x === -33) return true;\n    if (x === -34) return true;\n    if (x === -35) return true;\n    if (x === -36) return true;\n    if (x === -37) return true;\n    if (x === -38) return true;\n    if (x === -39) return true;\n    if (x === -40) return true;\n    if (x === -41) return true;\n    if (x === -42) return true;\n    if (x === -43) return true;\n    if (x === -44) return true;\n    if (x === -45) return true;\n    if (x === -46) return true;\n    if (x === -47) return true;\n    if (x === -48) return true;\n    if (x === -49) return true;\n    if (x === -50) return true;\n    if (x === -51) return true;\n    if (x === -52) return true;\n    if (x === -53) return true;\n    if (x === -54) return true;\n    if (x === -55) return true;\n    if (x === -56) return true;\n    if (x === -57) return true;\n    if (x === -58) return true;\n    if (x === -59) return true;\n    if (x === -60) return true;\n    if (x === -61) return true;\n    if (x === -62) return true;\n    if (x === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpddke2uv5.ts(80,9): error TS1005: ')' expected.\n../../../../tmp/tmpddke2uv5.ts(98,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335191
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 4 === 0) {\n        return true;\n    }\n    if (n % 8 === 0) {\n        return false;\n    }\n    if (n % 16 === 0) {\n        return true;\n    }\n    if (n % 32 === 0) {\n        return false;\n    }\n    if (n % 64 === 0) {\n        return true;\n    }\n    if (n % 128 === 0) {\n        return false;\n    }\n    if (n % 256 === 0) {\n        return true;\n    }\n    if (n % 512 === 0) {\n        return false;\n    }\n    if (n % 1024 === 0) {\n        return true;\n    }\n    if (n % 4096 === 0) {\n        return false;\n    }\n    if (n % 8192 === 0) {\n        return true;\n    }\n    if (n % 16384 === 0) {\n        return false;\n    }\n    if (n % 32768 === 0) {\n        return true;\n    }\n    if (n % 65536 === 0) {\n        return false;\n    }\n    if (n % 131072 === 0) {\n        return true;\n    }\n    if (n % 262144 === 0) {\n        return false;\n    }\n    if (n % 524288 === 0) {\n        return true;\n    }\n    if (n % 1048576 === 0) {\n        return false;\n    }\n    if (n % 2097152 === 0) {\n        return true;\n    }\n    if (n % 4194304 === 0) {\n        return false;\n    }\n    if (n % 8388608 === 0) {\n        return true;\n    }\n    if (n % 16777216 === 0) {\n        return false;\n    }\n    if (n % 33554432 === 0) {\n        return true;\n    }\n    if (n % 67108864 === 0) {\n        return false;\n    }\n    if (n % 134217728 === 0) {\n        return true;\n    }\n    if (n % 268435456 === 0) {\n        return false;\n    }\n    if (n % 536870912 === 0) {\n        return true;\n    }\n    if (n % 1073741824 === 0) {\n        return false;\n    }\n    if (n % 2147483648 === 0) {\n        return true;\n    }\n    if (n % 4294967296 === 0) {\n        return false;\n    }\n    if (n % 8589934592 === 0) {\n        return true;\n    }\n    if (n % 17179869184 === 0) {\n        return false;\n    }\n    if (n % 34359738368 === 0) {\n        return true;\n    }\n    if (n % 68719476736 === 0) {\n        return false;\n    }\n    if (n % 13743895347216 === 0) {\n        return true;\n    }\n    if (n % 27487790694432 === 0) {\n        return false;\n    }\n    if (n % 54975581388832 === 0) {\n        return true;\n    }\n    if (n % 109951162777680 === 0) {\n        return false;\n    }\n    if (n % 2199023255552080 === 0) {\n        return true;\n    }\n    if (n % 4398046511104800 === 0) {\n        return false;\n    }\n    if (n % 879609302220832 === 0) {\n        return true;\n    }\n    if (n % 1759218604441680 === 0) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzgxsckus.ts(164,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335191
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 4 === 0) {\n        return true;\n    }\n    if (n % 8 === 0) {\n        return false;\n    }\n    if (n % 16 === 0) {\n        return true;\n    }\n    if (n % 32 === 0) {\n        return false;\n    }\n    if (n % 64 === 0) {\n        return true;\n    }\n    if (n % 128 === 0) {\n        return false;\n    }\n    if (n % 256 === 0) {\n        return true;\n    }\n    if (n % 512 === 0) {\n        return false;\n    }\n    if (n % 1024 === 0) {\n        return true;\n    }\n    if (n % 4096 === 0) {\n        return false;\n    }\n    if (n % 8192 === 0) {\n        return true;\n    }\n    if (n % 16384 === 0) {\n        return false;\n    }\n    if (n % 32768 === 0) {\n        return true;\n    }\n    if (n % 65536 === 0) {\n        return false;\n    }\n    if (n % 131072 === 0) {\n        return true;\n    }\n    if (n % 262144 === 0) {\n        return false;\n    }\n    if (n % 524288 === 0) {\n        return true;\n    }\n    if (n % 1048576 === 0) {\n        return false;\n    }\n    if (n % 2097152 === 0) {\n        return true;\n    }\n    if (n % 4194304 === 0) {\n        return false;\n    }\n    if (n % 8388608 === 0) {\n        return true;\n    }\n    if (n % 16777216 === 0) {\n        return false;\n    }\n    if (n % 33554432 === 0) {\n        return true;\n    }\n    if (n % 67108864 === 0) {\n        return false;\n    }\n    if (n % 134217728 === 0) {\n        return true;\n    }\n    if (n % 268435456 === 0) {\n        return false;\n    }\n    if (n % 536870912 === 0) {\n        return true;\n    }\n    if (n % 1073741824 === 0) {\n        return false;\n    }\n    if (n % 2147483648 === 0) {\n        return true;\n    }\n    if (n % 4294967296 === 0) {\n        return false;\n    }\n    if (n % 8589934592 === 0) {\n        return true;\n    }\n    if (n % 17179869184 === 0) {\n        return false;\n    }\n    if (n % 34359738368 === 0) {\n        return true;\n    }\n    if (n % 68719476736 === 0) {\n        return false;\n    }\n    if (n % 13743895347216 === 0) {\n        return true;\n    }\n    if (n % 27487790694432 === 0) {\n        return false;\n    }\n    if (n % 54975581388832 === 0) {\n        return true;\n    }\n    if (n % 109951162777680 === 0) {\n        return false;\n    }\n    if (n % 2199023255552080 === 0) {\n        return true;\n    }\n    if (n % 4398046511104800 === 0) {\n        return false;\n    }\n    if (n % 879609302220832 === 0) {\n        return true;\n    }\n    if (n % 1759218604441680 === 0) {\n        return false;\n    }\n    if (n % 35184\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9rnthloh.ts(145,1): error TS1005: ')' expected.\n../../../../tmp/tmp9rnthloh.ts(163,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335191
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    if (n % 1024 === 0) return true;\n    if (n % 4096 === 0) return false;\n    if (n % 8192 === 0) return true;\n    if (n % 16384 === 0) return false;\n    if (n % 32768 === 0) return true;\n    if (n % 65536 === 0) return false;\n    if (n % 131072 === 0) return true;\n    if (n % 262144 === 0) return false;\n    if (n % 524288 === 0) return true;\n    if (n % 1048576 === 0) return false;\n    if (n % 2097152 === 0) return true;\n    if (n % 4194304 === 0) return false;\n    if (n % 8388608 === 0) return true;\n    if (n % 16777216 === 0) return false;\n    if (n % 33554432 === 0) return true;\n    if (n % 67108864 === 0) return false;\n    if (n % 134217728 === 0) return true;\n    if (n % 268435456 === 0) return false;\n    if (n % 536870912 === 0) return true;\n    if (n % 1073741824 === 0) return false;\n    if (n % -2147483648 === 0) return true;\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgipowj0e.js:81:12)\n    at Object.<anonymous> (/tmp/tmpgipowj0e.js:92:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335191
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 0 || n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return true;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 3 === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvlhlo_ot.js:35:12)\n    at Object.<anonymous> (/tmp/tmpvlhlo_ot.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335192
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n    if (n % n % 13) {\n        return false;\n    }\n    if (n % n % 14) {\n        return false;\n    }\n    if (n % n % 15) {\n        return false;\n    }\n    if (n % n % 16) {\n        return false;\n    }\n    if (n % n % 17) {\n        return false;\n    }\n    if (n % n % 18) {\n        return false;\n    }\n    if (n % n % 19) {\n        return false;\n    }\n    if (n % n % 20) {\n        return false;\n    }\n    if (n % n % 21) {\n        return false;\n    }\n    if (n % n % 22) {\n        return false;\n    }\n    if (n % n % 23) {\n        return false;\n    }\n    if (n % n % 24) {\n        return false;\n    }\n    if (n % n % 25) {\n        return false;\n    }\n    if (n % n % 26) {\n        return false;\n    }\n    if (n % n % 27) {\n        return false;\n    }\n    if (n % n % 28) {\n        return false;\n    }\n    if (n % n % 29) {\n        return false;\n    }\n    if (n % n % 30) {\n        return false;\n    }\n    if (n % n % 31) {\n        return false;\n    }\n    if (n % n % 32) {\n        return false;\n    }\n    if (n % n % 33) {\n        return false;\n    }\n    if (n % n % 34) {\n        return false;\n    }\n    if (n % n % 35) {\n        return false;\n    }\n    if (n % n % 36) {\n        return false;\n    }\n    if (n % n % 37) {\n        return false;\n    }\n    if (n % n % 38) {\n        return false;\n    }\n    if (n % n % 39) {\n        return false;\n    }\n    if (n % n % 40) {\n        return false;\n    }\n    if (n % n % 41) {\n        return false;\n    }\n    if (n % n % 42) {\n        return false;\n    }\n    if (n % n % 43) {\n        return false;\n    }\n    if (n % n % 44) {\n        return false;\n    }\n    if (n % n % 45) {\n        return false;\n    }\n    if (n % n % 46) {\n        return false;\n    }\n    if (n % n % 47) {\n        return false;\n    }\n    if (n % n % 48) {\n        return false;\n    }\n    if (n % n % 49) {\n        return false;\n    }\n    if (n % n % 50) {\n        return false;\n    }\n    if (n % n % 51) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprzot3nvp.ts(185,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335181
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    if (n % 1024 === 0) return true;\n    if (n % 4096 === 0) return false;\n    if (n % 8192 === 0) return true;\n    if (n % 16384 === 0) return false;\n    if (n % 32768 === 0) return true;\n    if (n % 65536 === 0) return false;\n    if (n % 131072 === 0) return true;\n    if (n % 262144 === 0) return false;\n    if (n % 524288 === 0) return true;\n    if (n % 1048576 === 0) return false;\n    if (n % 2097152 === 0) return true;\n    if (n % 4194304 === 0) return false;\n    if (n % 8388608 === 0) return true;\n    if (n % 16777216 === 0) return false;\n    if (n % 33554432 === 0) return true;\n    if (n % 67108864 === 0) return false;\n    if (n % 134217728 === 0) return true;\n    if (n % 268435456 === 0) return false;\n    if (n % 536870912 === 0) return true;\n    if (n % 1073741824 === 0) return false;\n    if (n % -2147483648 === 0) return true;\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgipowj0e.js:81:12)\n    at Object.<anonymous> (/tmp/tmpgipowj0e.js:92:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335191
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n === 0) {\n    return true;\n  }\n  return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpanbbghki.js:29:12)\n    at Object.<anonymous> (/tmp/tmpanbbghki.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335191
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  return Math.pow(x, n) === x;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1i5v4tns.js:17:12)\n    at Object.<anonymous> (/tmp/tmp1i5v4tns.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335189
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    if (n % 1024 === 0) return true;\n    if (n % 4096 === 0) return false;\n    if (n % 8192 === 0) return true;\n    if (n % 16384 === 0) return false;\n    if (n % 32768 === 0) return true;\n    if (n % 65536 === 0) return false;\n    if (n % 131072 === 0) return true;\n    if (n % 262144 === 0) return false;\n    if (n % 524288 === 0) return true;\n    if (n % 1048576 === 0) return false;\n    if (n % 2097152 === 0) return true;\n    if (n % 4194304 === 0) return false;\n    if (n % 8388608 === 0) return true;\n    if (n % 16777216 === 0) return false;\n    if (n % 33554432 === 0) return true;\n    if (n % 67108864 === 0) return false;\n    if (n % 134217728 === 0) return true;\n    if (n % 268435456 === 0) return false;\n    if (n % 536870912 === 0) return true;\n    if (n % 1073741824 === 0) return false;\n    if (n % 2147483648 === 0) return true;\n    if (n % 4294967296 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpw8s9pfvd.js:83:12)\n    at Object.<anonymous> (/tmp/tmpw8s9pfvd.js:94:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpod8zpe2t.ts(138,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsw9hw4w_.ts(145,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335191
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x / 2, n);\n    }\n    if (n % 2 === 1) {\n        return false;\n    }\n    return is_simple_power(x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm0spamef.js:29:12)\n    at Object.<anonymous> (/tmp/tmpm0spamef.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335192
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n === 1) {\n        return true;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9suy5kqa.js:35:12)\n    at Object.<anonymous> (/tmp/tmp9suy5kqa.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335192
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return true;\n    }\n    if (n === 1) {\n        return x === 1;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp305sh81x.js:29:12)\n    at Object.<anonymous> (/tmp/tmp305sh81x.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335188
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n < 0) return false;\n    if (n === 0) return true;\n    if (n === 1) return false;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    if (n % 1024 === 0) return true;\n    if (n % 4096 === 0) return false;\n    if (n % 8192 === 0) return true;\n    if (n % 16384 === 0) return false;\n    if (n % 32768 === 0) return true;\n    if (n % 65536 === 0) return false;\n    if (n % 131072 === 0) return true;\n    if (n % 262144 === 0) return false;\n    if (n % 524288 === 0) return true;\n    if (n % 1048576 === 0) return false;\n    if (n % 2097152 === 0) return true;\n    if (n % 4194304 === 0) return false;\n    if (n % 8388608 === 0) return true;\n    if (n % 16777216 === 0) return false;\n    if (n % 33554432 === 0) return true;\n    if (n % 67108864 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgxzotygl.js:73:12)\n    at Object.<anonymous> (/tmp/tmpgxzotygl.js:84:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335192
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    else {\n        return is_simple_power(x * x, n / 2);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpx7iv965c.js:29:12)\n    at Object.<anonymous> (/tmp/tmpx7iv965c.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335192
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n  return x === Math.pow(x, n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqsrfhd87.js:17:12)\n    at Object.<anonymous> (/tmp/tmpqsrfhd87.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335181
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % n % n % n % n % n % n % 3 === 0) {\n        return false;\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpod8zpe2t.ts(138,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335178
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) {\n        return false;\n    }\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    return is_simple_power(x * x, n / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2p95jafx.js:35:12)\n    at Object.<anonymous> (/tmp/tmp2p95jafx.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335192
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n        return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x, n / 5);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpevf7bp84.js:45:12)\n    at Object.<anonymous> (/tmp/tmpevf7bp84.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335192
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    if (n % 1024 === 0) return true;\n    if (n % 4096 === 0) return false;\n    if (n % 8192 === 0) return true;\n    if (n % 16384 === 0) return false;\n    if (n % 32768 === 0) return true;\n    if (n % 65536 === 0) return false;\n    if (n % 131072 === 0) return true;\n    if (n % 262144 === 0) return false;\n    if (n % 524288 === 0) return true;\n    if (n % 1048576 === 0) return false;\n    if (n % 2097152 === 0) return true;\n    if (n % 4194304 === 0) return false;\n    if (n % 8388608 === 0) return true;\n    if (n % 16777216 === 0) return false;\n    if (n % 33554432 === 0) return true;\n    if (n % 67108864 === 0) return false;\n    if (n % 134217728 === 0) return true;\n    if (n % 268435456 === 0) return false;\n    if (n % 536870912 === 0) return true;\n    if (n % 1073741824 === 0) return false;\n    if (n % 2147483648 === 0) return true;\n    if (n % 4294967296 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpw8s9pfvd.js:83:12)\n    at Object.<anonymous> (/tmp/tmpw8s9pfvd.js:94:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n        return false;\n    }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n        return false;\n    }\n    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return false;\n    }\n    if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return false;\n    }\n    if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return false;\n    }\n    if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 53 === 0) {\n        return false;\n    }\n    if (n % n % 59 === 0) {\n        return false;\n    }\n    if (n % n % 63 === 0) {\n        return false;\n    }\n    if (n % n % 69 === 0) {\n        return false;\n    }\n    if (n % n % 73 === 0) {\n        return false;\n    }\n    if (n % n % 79 === 0) {\n        return false;\n    }\n    if (n % n % 83 === 0) {\n        return false;\n    }\n    if (n % n % 89 === 0) {\n        return false;\n    }\n    if (n % n % 97 === 0) {\n        return false;\n    }\n    if (n % n % 103 === 0) {\n        return false;\n    }\n    if (n % n % 105 === 0) {\n        return false;\n    }\n    if (n % n % 109 === 0) {\n        return false;\n    }\n    if (n % n % 113 === 0) {\n        return false;\n    }\n    if (n % n % 115 === 0) {\n        return false;\n    }\n    if (n % n % 117 === 0) {\n        return false;\n    }\n    if (n % n % 119 === 0) {\n        return false;\n    }\n    if (n % n % 123 === 0) {\n        return false;\n    }\n    if (n % n % 125 === 0) {\n        return false;\n    }\n    if (n % n % 129 === 0) {\n        return false;\n    }\n    if (n % n % 133 === 0) {\n        return false;\n    }\n    if (n % n % 135 === 0) {\n        return false;\n    }\n    if (n % n % 137 === 0) {\n        return false;\n    }\n    if (n % n % 139 === 0) {\n        return false;\n    }\n    if (n % n % 143 === 0) {\n        return false;\n    }\n    if (n % n % 145 === 0) {\n        return false;\n    }\n    if (n % n % 147 === 0) {\n        return false;\n    }\n    if (n % n % 149 === 0) {\n        return false;\n    }\n    if (n % n % 153 === 0) {\n        return false;\n    }\n    if (n % n % 155 === 0) {\n        return false;\n    }\n    if (n % n % 157 === 0) {\n        return false;\n    }\n    if (n % n % 159 === 0) {\n        return false;\n    }\n    if (n % n % 163 === 0) {\n        return false;\n    }\n    if (n % n % 165 === 0) {\n        return false;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqe872eny.ts(180,8): error TS1005: '}' expected.\n",
      "timestamp": 1660335192
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % 4 === 0) return false;\n    if (n % 8 === 0) return false;\n    if (n % 16 === 0) return false;\n    if (n % 32 === 0) return false;\n    if (n % 64 === 0) return false;\n    if (n % 128 === 0) return false;\n    if (n % 256 === 0) return false;\n    if (n % 512 === 0) return false;\n    if (n % 1024 === 0) return false;\n    if (n % 4096 === 0) return false;\n    if (n % 8192 === 0) return false;\n    if (n % 16384 === 0) return false;\n    if (n % 32768 === 0) return false;\n    if (n % 65536 === 0) return false;\n    if (n % 131072 === 0) return false;\n    if (n % 262144 === 0) return false;\n    if (n % 524288 === 0) return false;\n    if (n % 1048576 === 0) return false;\n    if (n % 2097152 === 0) return false;\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcmsphza8.js:61:12)\n    at Object.<anonymous> (/tmp/tmpcmsphza8.js:72:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335192
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 === 0) return false;\n    if (n % n === 0) return true;\n    if (n % n % 2 === 0) return false;\n    if (n % n % n === 0) return true;\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjj2raekj.js:29:12)\n    at Object.<anonymous> (/tmp/tmpjj2raekj.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335192
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 === 1) {\n        return is_simple_power(x * x, n / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfpje03ke.js:30:12)\n    at Object.<anonymous> (/tmp/tmpfpje03ke.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660335178
    }
  ]
}