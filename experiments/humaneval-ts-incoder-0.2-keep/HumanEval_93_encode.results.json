{
  "language": "ts",
  "name": "HumanEval_93_encode",
  "results": [
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 96;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpri9i8uqd.js:27:12)\n    at Object.<anonymous> (/tmp/tmpri9i8uqd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === nextLetter) {\n      result += letter;\n      i++;\n    } else {\n      result += letter.toUpperCase();\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_3co_zmk.js:29:12)\n    at Object.<anonymous> (/tmp/tmp_3co_zmk.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[(i + 1) % message.length];\n    const nextLetterIndex = alphabet.indexOf(nextLetter);\n    const nextLetterIndex2 = alphabet.indexOf(nextLetter, (i + 1) % message.length);\n    const nextLetterIndex3 = alphabet.indexOf(nextLetter, (i + 2) % message.length);\n    const nextLetterIndex4 = alphabet.indexOf(nextLetter, (i + 3) % message.length);\n    const nextLetterIndex5 = alphabet.indexOf(nextLetter, (i + 4) % message.length);\n    const nextLetterIndex6 = alphabet.indexOf(nextLetter, (i + 5) % message.length);\n    const nextLetterIndex7 = alphabet.indexOf(nextLetter, (i + 6) % message.length);\n    const nextLetterIndex8 = alphabet.indexOf(nextLetter, (i + 7) % message.length);\n    const nextLetterIndex9 = alphabet.indexOf(nextLetter, (i + 8) % message.length);\n    const nextLetterIndex10 = alphabet.indexOf(nextLetter, (i + 9) % message.length);\n    const nextLetterIndex11 = alphabet.indexOf(nextLetter, (i + 10) % message.length);\n    const nextLetterIndex12 = alphabet.indexOf(nextLetter, (i + 11) % message.length);\n    const nextLetterIndex13 = alphabet.indexOf(nextLetter, (i + 12) % message.length);\n    const nextLetterIndex14 = alphabet.indexOf(nextLetter, (i + 13) % message.length);\n    const nextLetterIndex15 = alphabet.indexOf(nextLetter, (i + 14) % message.length);\n    const nextLetterIndex16 = alphabet.indexOf(nextLetter, (i + 15) % message.length);\n    const nextLetterIndex17 = alphabet.indexOf(nextLetter, (i + 16) % message.length);\n    const nextLetterIndex18 = alphabet.indexOf(nextLetter, (i + 17) % message.length);\n    const nextLetterIndex19 = alphabet.indexOf(nextLetter, (i + 18) % message.length);\n    const nextLetterIndex20 = alphabet.indexOf(nextLetter, (i + 19) % message.length);\n    const nextLetterIndex21 = alphabet.indexOf(nextLetter, (i + 20) % message.length);\n    const nextLetterIndex22 = alphabet.indexOf(nextLetter, (i + 21) % message.length);\n    const nextLetterIndex23 = alphabet.indexOf(nextLetter, (i + 22) % message.length);\n    const nextLetterIndex24 = alphabet.indexOf(nextLetter, (i + 23) % message.length);\n    const nextLetterIndex25 = alphabet.indexOf(nextLetter, (i + 24) % message.length);\n    const nextLetter\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpr2thiv4o.ts(55,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, letter.toUpperCase());\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n      newMessage = newMessage.replace(letter, letter.toLowerCase());\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TeST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpatdi1h85.js:30:12)\n    at Object.<anonymous> (/tmp/tmpatdi1h85.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TeST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter;\n        if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            encodedLetter = letter.toUpperCase();\n        }\n        if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n            encodedLetter = letter.toLowerCase();\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TeST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyh8d92v0.js:29:12)\n    at Object.<anonymous> (/tmp/tmpyh8d92v0.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TeST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      letter = message[++i];\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxgvn_tfa.js:25:12)\n    at Object.<anonymous> (/tmp/tmpxgvn_tfa.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 65;\n    if (index >= 0) {\n      result += String.fromCharCode(index + 1);\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x14\\x05\\x13\\x14'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkt8xwukd.js:28:12)\n    at Object.<anonymous> (/tmp/tmpkt8xwukd.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x14\\x05\\x13\\x14',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    newMessage = newMessage.replace(letter, letter.toUpperCase());\n  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 'A'.charCodeAt(0);\n    newMessage = newMessage.replace(letter, String.fromCharCode(index + 2));\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x15\\x06\\x14\\x15'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8z_aaxe1.js:27:12)\n    at Object.<anonymous> (/tmp/tmp8z_aaxe1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x15\\x06\\x14\\x15',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let vowels = 'aeiouAEIOU';\n  let letters = 'abcdefghijklmnopqrstuvwxyz';\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptmy16ai_.ts(84,9): error TS1005: ']' expected.\n../../../../tmp/tmptmy16ai_.ts(97,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333889
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5rbogc9k.ts(18,19): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp5rbogc9k.ts(19,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp5rbogc9k.ts(19,40): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\") {\n      letter = \"t\";\n    } else if (letter === \"e\") {\n      letter = \"k\";\n    } else if (letter === \"i\") {\n      letter = \"s\";\n    } else if (letter === \"o\") {\n      letter = \"c\";\n    } else if (letter === \"u\") {\n      letter = \"g\";\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp05m4qg6a.js:37:12)\n    at Object.<anonymous> (/tmp/tmp05m4qg6a.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let alphabet: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let vowels: string[] = ['a', 'e', 'i', 'o', 'u'];\n    let newMessage: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (alphabet.indexOf(letter) > -1) {\n            newMessage += letter;\n        } else {\n            let index = alphabet.indexOf(vowels[alphabet.indexOf(letter) - 1]);\n            newMessage += alphabet[(index + 1) % alphabet.length];\n        }\n    }\n    return newMessage;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm,string |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0p2pa5bj.ts(26,2): error TS1110: Type expected.\n../../../../tmp/tmp0p2pa5bj.ts(26,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0p2pa5bj.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmp0p2pa5bj.ts(27,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0p2pa5bj.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmp0p2pa5bj.ts(28,6): error TS1005: ';' expected.\n../../../../tmp/tmp0p2pa5bj.ts(28,40): error TS1109: Expression expected.\n../../../../tmp/tmp0p2pa5bj.ts(30,9): error TS1005: ';' expected.\n",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let vowels = 'aeiouAEIOU'\n  let letters = message.split('')\n  let encoded = ''\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i]\n    let index = vowels.indexOf(letter)\n    if (index >= 0) {\n      letter = vowels[(index + 2) % vowels.length]\n    }\n    encoded += letter\n  }\n  return encoded\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7nwdnb47.js:28:12)\n    at Object.<anonymous> (/tmp/tmp7nwdnb47.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        let nextLetterIndex = alphabet.indexOf(nextLetter);\n        if (nextLetterIndex > -1) {\n            letter = alphabet[nextLetterIndex];\n        }\n        result += letter;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxzi3ygkx.ts(16,31): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpxzi3ygkx.ts(18,22): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333889
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n        let index = vowels.indexOf(letter);\n        if (index > -1) {\n            result += vowels[index - 2];\n        }\n        else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpt9b_3rv2.js:29:12)\n    at Object.<anonymous> (/tmp/tmpt9b_3rv2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    }\n    else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    }\n    else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpr1cu6327.js:33:12)\n    at Object.<anonymous> (/tmp/tmpr1cu6327.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpra5mrjgj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpra5mrjgj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpra5mrjgj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpra5mrjgj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else {\n      result += getLetterForVowel(letter, i);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6pkwrxji.ts(18,17): error TS2304: Cannot find name 'getLetterForVowel'.\n",
      "timestamp": 1660333889
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === letter.toUpperCase()) {\n            result += letter.toUpperCase();\n        } else {\n            result += letter.toLowerCase();\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmvlwf2sm.js:27:12)\n    at Object.<anonymous> (/tmp/tmpmvlwf2sm.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpk57jz723.js:27:12)\n    at Object.<anonymous> (/tmp/tmpk57jz723.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage += letter;\n    } else {\n      newMessage += letter.charCodeAt(0) - 65 + 2;\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'2162021'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5q6vnnxn.js:27:12)\n    at Object.<anonymous> (/tmp/tmp5q6vnnxn.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '2162021',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage.charAt(i);\n    newMessage = newMessage.replace(letter, letter.charCodeAt(0) - 97);\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage.charAt(i);\n    newMessage = newMessage.replace(letter, letter.charCodeAt(0) + 2);\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpul_v8qah.ts(15,45): error TS2769: No overload matches this call.\n  The last overload gave the following error.\n    Argument of type 'number' is not assignable to parameter of type '(substring: string, ...args: any[]) => string'.\n../../../../tmp/tmpul_v8qah.ts(19,45): error TS2769: No overload matches this call.\n  The last overload gave the following error.\n    Argument of type 'number' is not assignable to parameter of type '(substring: string, ...args: any[]) => string'.\n",
      "timestamp": 1660333890
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let encodedMessage: string = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      encodedMessage += letter;\n    } else {\n      const vowelIndex = getVowelIndex(letter);\n      const vowel = vowels[vowelIndex];\n      encodedMessage += vowel;\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7p0bpptt.ts(18,26): error TS2304: Cannot find name 'getVowelIndex'.\n../../../../tmp/tmp7p0bpptt.ts(19,21): error TS2552: Cannot find name 'vowels'. Did you mean 'vowel'?\n",
      "timestamp": 1660333890
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n    newMessage = newMessage.replace(letter, letters[index]);\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk2ggm8m8.ts(16,45): error TS2552: Cannot find name 'letters'. Did you mean 'letter'?\n",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplq5gronc.js:25:12)\n    at Object.<anonymous> (/tmp/tmplq5gronc.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === nextLetter) {\n      result += letter;\n      i++;\n    } else {\n      result += letter.toUpperCase();\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_3co_zmk.js:29:12)\n    at Object.<anonymous> (/tmp/tmp_3co_zmk.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage.charAt(i);\n    newMessage = newMessage.replace(letter, getLetter(i));\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpls2qih1b.ts(15,45): error TS2304: Cannot find name 'getLetter'.\n",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    if (index >= 0) {\n      result += String.fromCharCode(index + 1);\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpnzdza0d0.js:28:12)\n    at Object.<anonymous> (/tmp/tmpnzdza0d0.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let alphabet: string[] = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    let vowels: string[] = ['a', 'e', 'i', 'o', 'u'];\n    let messageArray: string[] = message.split('');\n    let encodedMessage: string = '';\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n        if (vowels.indexOf(letter) > -1) {\n            encodedMessage += alphabet[alphabet.indexOf(letter) + 2];\n        } else {\n            encodedMessage += letter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp36mfmrba.js:30:12)\n    at Object.<anonymous> (/tmp/tmp36mfmrba.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpra5mrjgj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpra5mrjgj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowels = \"aeiouAEIOU\";\n    if (vowels.indexOf(letter) > -1) {\n      letter = vowels.charAt(vowels.indexOf(letter) + 2);\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6504v0mg.js:26:12)\n    at Object.<anonymous> (/tmp/tmp6504v0mg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n      if (index > -1) {\n        result += alphabet[index + 2];\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx77soqm8.ts(18,19): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpx77soqm8.ts(20,19): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage += letter;\n      i++;\n    } else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n      newMessage += letter.toUpperCase();\n      i++;\n    } else {\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxfkgtxf0.js:33:12)\n    at Object.<anonymous> (/tmp/tmpxfkgtxf0.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.charCodeAt(0) - 65;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1941819'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpht_h68oq.js:22:12)\n    at Object.<anonymous> (/tmp/tmpht_h68oq.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1941819',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === letter.toUpperCase()) {\n      result += letter.toUpperCase();\n    } else {\n      result += letter.toLowerCase();\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp367hzvff.js:27:12)\n    at Object.<anonymous> (/tmp/tmp367hzvff.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8lpq3_bp.js:27:12)\n    at Object.<anonymous> (/tmp/tmp8lpq3_bp.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 96;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpri9i8uqd.js:27:12)\n    at Object.<anonymous> (/tmp/tmpri9i8uqd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 1);\n    const nextLetterIndex = alphabet.indexOf(nextLetter);\n    if (nextLetterIndex === -1) {\n      newMessage = newMessage.replace(letter, letter.toUpperCase());\n    } else {\n      newMessage = newMessage.replace(letter, alphabet[nextLetterIndex + 1]);\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_0smgfn8.ts(16,29): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp_0smgfn8.ts(20,47): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333893
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n      i++;\n    }\n    else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n      result += letter.toUpperCase();\n      i++;\n    }\n    else if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n      i++;\n    }\n    else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n      result += letter.toUpperCase();\n      i++;\n    }\n    else if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n      i++;\n    }\n    else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n      result += letter.toUpperCase();\n      i++;\n    }\n    else if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n      i++;\n    }\n    else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n      result += letter.toUpperCase();\n      i++;\n    }\n    else if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n      i++;\n    }\n    else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n      result += letter.toUpperCase();\n      i++;\n    }\n    else if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n      i++;\n    }\n    else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n      result += letter.toUpperCase();\n      i++;\n    }\n    else if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n      i++;\n    }\n    else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n      result += letter.toUpperCase();\n      i++;\n    }\n    else if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === '\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkef1x2p0.ts(72,98): error TS1002: Unterminated string literal.\n../../../../tmp/tmpkef1x2p0.ts(73,1): error TS1005: ')' expected.\n../../../../tmp/tmpkef1x2p0.ts(86,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333893
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n            if (index > -1) {\n                result += alphabet[(index + 1) % alphabet.length];\n            } else {\n                result += letter;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwmn9q3em.ts(18,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpwmn9q3em.ts(20,27): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpwmn9q3em.ts(20,50): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let vowels = 'aeiou';\n    let messageArray = message.split('');\n    let newMessage = '';\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n        let newLetter = letter;\n        for (let j = 0; j < vowels.length; j++) {\n            if (letter === vowels[j]) {\n                newLetter = vowels[j + 1];\n            }\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpe_6zy9rh.js:30:12)\n    at Object.<anonymous> (/tmp/tmpe_6zy9rh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let alphabet: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let vowels: string[] = ['a', 'e', 'i', 'o', 'u'];\n    let newMessage: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (vowels.indexOf(letter) > -1) {\n            newMessage += alphabet[alphabet.indexOf(letter) + 2];\n        } else {\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpy24s44kz.js:29:12)\n    at Object.<anonymous> (/tmp/tmpy24s44kz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333894
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbqbusai0.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbqbusai0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpra5mrjgj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpra5mrjgj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let encodedMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      encodedMessage = encodedMessage.replace(letter, nextLetter);\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpta0mkloq.js:25:12)\n    at Object.<anonymous> (/tmp/tmpta0mkloq.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333894
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpclwei2u7.js:33:12)\n    at Object.<anonymous> (/tmp/tmpclwei2u7.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 65;\n    let nextLetter = message[i + 1];\n    if (index > -1 && nextLetter != \" \") {\n      result += String.fromCharCode(index + 65);\n      result += nextLetter;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEESSTTundefined'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxk290scd.js:30:12)\n    at Object.<anonymous> (/tmp/tmpxk290scd.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEESSTTundefined',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333894
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            letter = letter.toUpperCase();\n        }\n        let nextLetter = message[(i + 1) % (message.length)];\n        if (nextLetter === 'a' || nextLetter === 'e' || nextLetter === 'i' || nextLetter === 'o' || nextLetter === 'u') {\n            nextLetter = nextLetter.toUpperCase();\n        }\n        encodedMessage += letter + nextLetter;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEESSTTT'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpz8g5zbzr.js:29:12)\n    at Object.<anonymous> (/tmp/tmpz8g5zbzr.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEESSTTT',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333894
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    if (index === -1) {\n      result += letter;\n    } else {\n      let letterIndex = index + 2;\n      let letter2 = alphabet[letterIndex];\n      result += alphabet[letterIndex];\n      result += letter2;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo29om1t1.ts(15,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpo29om1t1.ts(20,21): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpo29om1t1.ts(21,17): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333893
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      let vowelIndex = alphabet.indexOf(letter);\n      let vowel = alphabet[vowelIndex + 1];\n      result += vowel;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp76tm3a6t.ts(18,24): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp76tm3a6t.ts(19,19): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowels = \"aeiouAEIOU\";\n    let index = vowels.indexOf(letter);\n    if (index > -1) {\n      result += vowels[index + 1];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6u9k08qk.js:29:12)\n    at Object.<anonymous> (/tmp/tmp6u9k08qk.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333896
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let newMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.charCodeAt(0) - 65 + letter.charCodeAt(1) - 64;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdnu_gom7.js:22:12)\n    at Object.<anonymous> (/tmp/tmpdnu_gom7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333897
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbqbusai0.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbqbusai0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let letterIndex = alphabet.indexOf(letter);\n        if (letterIndex > -1) {\n            let nextLetterIndex = letterIndex + 1;\n            if (nextLetterIndex < alphabet.length) {\n                let nextLetter = alphabet[nextLetterIndex];\n                result += nextLetter;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsgzd1mml.ts(15,27): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpsgzd1mml.ts(18,35): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpsgzd1mml.ts(19,34): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333896
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else {\n      result += getLetterForVowel(letter, i);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6pkwrxji.ts(18,17): error TS2304: Cannot find name 'getLetterForVowel'.\n",
      "timestamp": 1660333889
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[(i + 1) % message.length];\n    const nextLetterIndex = alphabet.indexOf(nextLetter);\n    const nextLetterVowelIndex = alphabet.indexOf(letter);\n    const nextLetterVowelIndex2 = alphabet.indexOf(nextLetter, nextLetterIndex + 1);\n    const nextLetterVowelIndex3 = alphabet.indexOf(nextLetter, nextLetterIndex + 2);\n    const nextLetterVowelIndex4 = alphabet.indexOf(nextLetter, nextLetterIndex + 3);\n    const nextLetterVowelIndex5 = alphabet.indexOf(nextLetter, nextLetterIndex + 4);\n    const nextLetterVowelIndex6 = alphabet.indexOf(nextLetter, nextLetterIndex + 5);\n    const nextLetterVowelIndex7 = alphabet.indexOf(nextLetter, nextLetterIndex + 6);\n    const nextLetterVowelIndex8 = alphabet.indexOf(nextLetter, nextLetterIndex + 7);\n    const nextLetterVowelIndex9 = alphabet.indexOf(nextLetter, nextLetterIndex + 8);\n    const nextLetterVowelIndex10 = alphabet.indexOf(nextLetter, nextLetterIndex + 9);\n    const nextLetterVowelIndex11 = alphabet.indexOf(nextLetter, nextLetterIndex + 10);\n    const nextLetterVowelIndex12 = alphabet.indexOf(nextLetter, nextLetterIndex + 11);\n    const nextLetterVowelIndex13 = alphabet.indexOf(nextLetter, nextLetterIndex + 12);\n    const nextLetterVowelIndex14 = alphabet.indexOf(nextLetter, nextLetterIndex + 13);\n    const nextLetterVowelIndex15 = alphabet.indexOf(nextLetter, nextLetterIndex + 14);\n    const nextLetterVowelIndex16 = alphabet.indexOf(nextLetter, nextLetterIndex + 15);\n    const nextLetterVowelIndex17 = alphabet.indexOf(nextLetter, nextLetterIndex + 16);\n    const nextLetterVowelIndex18 = alphabet.indexOf(nextLetter, nextLetterIndex + 17);\n    const nextLetterVowelIndex19 = alphabet.indexOf(nextLetter, nextLetterIndex + 18);\n    const nextLetterVowelIndex20 = alphabet.indexOf(nextLetter, nextLetterIndex + 19);\n    const nextLetterVowelIndex21 = alphabet.indexOf(nextLetter, nextLetterIndex + 20);\n    const nextLetterVowelIndex22 = alphabet.indexOf(nextLetter, nextLetterIndex + 21);\n    const nextLetterVowelIndex23 = alphabet.indexOf(nextLetter, nextLetterIndex + 22);\n    const nextLetterV\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyuncla7j.ts(54,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333897
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\") {\n      letter = \"t\";\n    } else if (letter === \"e\") {\n      letter = \"k\";\n    } else if (letter === \"i\") {\n      letter = \"s\";\n    } else if (letter === \"o\") {\n      letter = \"c\";\n    } else if (letter === \"u\") {\n      letter = \"g\";\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp05m4qg6a.js:37:12)\n    at Object.<anonymous> (/tmp/tmp05m4qg6a.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 65;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1941819'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0ut5l4q6.js:27:12)\n    at Object.<anonymous> (/tmp/tmp0ut5l4q6.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1941819',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333897
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let newMessage = message;\n    for (let i = 0; i < message.length; i++) {\n        let letter = message.charAt(i);\n        if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            newMessage = newMessage.replace(letter, letter.toUpperCase());\n        }\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage.charAt(i);\n        if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            newMessage = newMessage.replace(letter, letter.toLowerCase());\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpemh44oc3.js:30:12)\n    at Object.<anonymous> (/tmp/tmpemh44oc3.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333897
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpk57jz723.js:27:12)\n    at Object.<anonymous> (/tmp/tmpk57jz723.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        } else {\n            result += letter;\n        }\n        if (letter === nextLetter) {\n            i++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpeqya_fbr.js:36:12)\n    at Object.<anonymous> (/tmp/tmpeqya_fbr.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333897
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let vowels = 'aeiou';\n    let letters = 'abcdefghijklmnopqrstuvwxyz';\n    let encoded = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter in letters) {\n            let index = letters.indexOf(letter);\n            let nextLetter = letters[index + 1];\n            if (nextLetter in vowels) {\n                encoded += letter;\n            } else {\n                encoded += nextLetter;\n            }\n        } else {\n            encoded += letter;\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv2de953s.ts(17,23): error TS2361: The right-hand side of an 'in' expression must not be a primitive.\n../../../../tmp/tmpv2de953s.ts(20,31): error TS2361: The right-hand side of an 'in' expression must not be a primitive.\n",
      "timestamp": 1660333897
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === letter.toUpperCase()) {\n      result += letter.toUpperCase();\n    } else {\n      result += letter.toLowerCase();\n    }\n  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === letter.toUpperCase()) {\n      result += letter.toLowerCase();\n    } else {\n      result += letter.toUpperCase();\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTtest'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmperzjuk7u.js:36:12)\n    at Object.<anonymous> (/tmp/tmperzjuk7u.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTtest',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333897
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = english.indexOf(letter);\n    if (index > -1) {\n      result += english[index + 2];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpb8myg0rr.ts(15,17): error TS2304: Cannot find name 'english'.\n../../../../tmp/tmpb8myg0rr.ts(17,17): error TS2304: Cannot find name 'english'.\n",
      "timestamp": 1660333897
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5rbogc9k.ts(18,19): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp5rbogc9k.ts(19,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp5rbogc9k.ts(19,40): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage += letter;\n      i++;\n    } else {\n      newMessage += nextLetter;\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ESTundefined'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp36c_7laj.js:29:12)\n    at Object.<anonymous> (/tmp/tmp36c_7laj.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ESTundefined',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333897
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n      i++;\n    } else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpybs7mgzn.js:33:12)\n    at Object.<anonymous> (/tmp/tmpybs7mgzn.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333897
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 96;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpri9i8uqd.js:27:12)\n    at Object.<anonymous> (/tmp/tmpri9i8uqd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpra5mrjgj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpra5mrjgj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === nextLetter) {\n      result += letter;\n      i++;\n    } else {\n      result += letter.toUpperCase();\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_3co_zmk.js:29:12)\n    at Object.<anonymous> (/tmp/tmp_3co_zmk.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    newMessage = newMessage.replace(letter, getLetterFromPosition(newMessage, letter, i));\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuh59czye.ts(15,45): error TS2304: Cannot find name 'getLetterFromPosition'.\n",
      "timestamp": 1660333897
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpra5mrjgj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpra5mrjgj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      letter = letter.toUpperCase();\n    }\n    let index = alphabet.indexOf(letter);\n    if (index === -1) {\n      letter = letter.toUpperCase();\n      index = alphabet.indexOf(letter);\n    }\n    result += alphabet[(index + 1) % alphabet.length];\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7m4je8_a.ts(18,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp7m4je8_a.ts(21,15): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp7m4je8_a.ts(23,15): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp7m4je8_a.ts(23,38): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333897
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n            if (index === -1) {\n                result += letter;\n            } else {\n                let nextLetter = alphabet[index + 1];\n                result += nextLetter;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjtd8ifq8.ts(18,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpjtd8ifq8.ts(22,34): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333897
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === nextLetter) {\n      result += letter;\n      i++;\n    } else {\n      result += letter.toUpperCase();\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_3co_zmk.js:29:12)\n    at Object.<anonymous> (/tmp/tmp_3co_zmk.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === nextLetter) {\n      result += letter;\n      i++;\n    } else {\n      result += letter.toUpperCase();\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_3co_zmk.js:29:12)\n    at Object.<anonymous> (/tmp/tmp_3co_zmk.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpz6osnjku.js:25:12)\n    at Object.<anonymous> (/tmp/tmpz6osnjku.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333897
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            result += letter;\n            i++;\n        } else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n            result += letter.toUpperCase();\n            i++;\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpq_hgg7bf.js:33:12)\n    at Object.<anonymous> (/tmp/tmpq_hgg7bf.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333897
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += getLetterForVowel(letter);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpaie9rm1w.ts(18,17): error TS2304: Cannot find name 'getLetterForVowel'.\n",
      "timestamp": 1660333897
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpaby_o59b.js:33:12)\n    at Object.<anonymous> (/tmp/tmpaby_o59b.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333898
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 96;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpri9i8uqd.js:27:12)\n    at Object.<anonymous> (/tmp/tmpri9i8uqd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    if (index != -1) {\n      result += alphabet[(index + 1) % alphabet.length];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6se8ujtg.ts(15,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp6se8ujtg.ts(17,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp6se8ujtg.ts(17,40): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333897
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n      i++;\n    } else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpho92mfi1.js:33:12)\n    at Object.<anonymous> (/tmp/tmpho92mfi1.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333897
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpra5mrjgj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpra5mrjgj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        let nextLetterIndex = alphabet.indexOf(nextLetter);\n        let nextLetterLetter = alphabet[nextLetterIndex + 1];\n        if (letter.toLowerCase() === letter.toUpperCase()) {\n            result += letter;\n        } else if (letter.toLowerCase() === nextLetterLetter) {\n            result += nextLetter;\n        } else {\n            result += alphabet[alphabet.indexOf(letter) + 2];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpur5xnx4k.ts(16,31): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpur5xnx4k.ts(17,32): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpur5xnx4k.ts(23,23): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpur5xnx4k.ts(23,32): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333897
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = ['a', 'e', 'i', 'o', 'u'];\n        let index = vowels.indexOf(letter);\n        if (index > -1) {\n            let nextVowel = vowels[index + 1];\n            result += nextVowel;\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThis doesn't seem to work. `encode('This is a message')` returns `tHKS KS C MGSSCGG`\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code accordingly.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyseiet_0.ts(26,2): error TS1110: Type expected.\n../../../../tmp/tmpyseiet_0.ts(26,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpyseiet_0.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmpyseiet_0.ts(27,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpyseiet_0.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmpyseiet_0.ts(28,7): error TS1109: Expression expected.\n../../../../tmp/tmpyseiet_0.ts(29,6): error TS1005: ';' expected.\n../../../../tmp/tmpyseiet_0.ts(29,37): error TS1005: ';' expected.\n../../../../tmp/tmpyseiet_0.ts(29,42): error TS1228: A type predicate is only allowed in return type position for functions and methods.\n../../../../tmp/tmpyseiet_0.ts(29,45): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpyseiet_0.ts(29,47): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpyseiet_0.ts(29,85): error TS1002: Unterminated string literal.\n../../../../tmp/tmpyseiet_0.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmpyseiet_0.ts(30,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpyseiet_0.ts(31,2): error TS1109: Expression expected.\n../../../../tmp/tmpyseiet_0.ts(31,7): error TS1109: Expression expected.\n../../../../tmp/tmpyseiet_0.ts(32,8): error TS1005: ';' expected.\n../../../../tmp/tmpyseiet_0.ts(32,12): error TS1005: '(' expected.\n../../../../tmp/tmpyseiet_0.ts(32,21): error TS1005: ';' expected.\n../../../../tmp/tmpyseiet_0.ts(32,26): error TS1005: ';' expected.\n../../../../tmp/tmpyseiet_0.ts(32,33): error TS1005: ')' expected.\n../../../../tmp/tmpyseiet_0.ts(32,39): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpyseiet_0.ts(32,43): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpyseiet_0.ts(33,1): error TS1003: Identifier expected.\n../../../../tmp/tmpyseiet_0.ts(33,2): error TS1109: Expression expected.\n../../../../tmp/tmpyseiet_0.ts(33,4): error TS1161: Unterminated regular expression ",
      "timestamp": 1660333897
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpaby_o59b.js:33:12)\n    at Object.<anonymous> (/tmp/tmpaby_o59b.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333898
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage += letter;\n    } else {\n      const nextLetter = message[(i + 1) % (message.length)];\n      if (nextLetter === 'a' || nextLetter === 'e' || nextLetter === 'i' || nextLetter === 'o' || nextLetter === 'u') {\n        newMessage += nextLetter;\n      } else {\n        newMessage += letter.toUpperCase();\n      }\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprq37t3g5.js:33:12)\n    at Object.<anonymous> (/tmp/tmprq37t3g5.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333900
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbqbusai0.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbqbusai0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiouAEIOU\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex >= 0) {\n            result += vowels[vowelIndex + 2];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2l6davf5.js:29:12)\n    at Object.<anonymous> (/tmp/tmp2l6davf5.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333900
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpra5mrjgj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpra5mrjgj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let vowel = vowels[letter];\n            result += vowels[vowel];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd_uro_38.ts(18,25): error TS2552: Cannot find name 'vowels'. Did you mean 'vowel'?\n../../../../tmp/tmpd_uro_38.ts(19,23): error TS2552: Cannot find name 'vowels'. Did you mean 'vowel'?\n",
      "timestamp": 1660333900
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.indexOf(letter) > -1) {\n      const index = vowels.indexOf(letter);\n      const nextLetter = message[i + 1];\n      const nextVowel = message[i + 2];\n      if (nextVowel === letter) {\n        newMessage += nextLetter;\n        i += 2;\n      } else if (nextVowel === letter + letter) {\n        newMessage += letter + letter;\n        i += 2;\n      } else {\n        newMessage += letter;\n        i++;\n      }\n    } else {\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp62q9vxl_.js:42:12)\n    at Object.<anonymous> (/tmp/tmp62q9vxl_.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333900
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\") {\n      result += \"t\";\n    } else if (letter === \"e\") {\n      result += \"g\";\n    } else if (letter === \"i\") {\n      result += \"k\";\n    } else if (letter === \"o\") {\n      result += \"s\";\n    } else if (letter === \"u\") {\n      result += \"c\";\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9yl8jamj.js:39:12)\n    at Object.<anonymous> (/tmp/tmp9yl8jamj.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333900
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let vowelIndex = alphabet.indexOf(letter);\n            let vowel = alphabet[vowelIndex + 1];\n            result += vowel;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprqq6j3r9.ts(18,30): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmprqq6j3r9.ts(19,25): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333900
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += getLetter2PlaceAheadLetter(letter);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk00v2tgl.ts(18,17): error TS2304: Cannot find name 'getLetter2PlaceAheadLetter'.\n",
      "timestamp": 1660333900
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let vowels = 'aeiou';\n  let letters = message.split('');\n  let newMessage = '';\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    let index = vowels.indexOf(letter);\n    if (index >= 0) {\n      let nextVowel = vowels[index + 1];\n      letter = nextVowel;\n    }\n    newMessage += letter;\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqinc0ltc.js:29:12)\n    at Object.<anonymous> (/tmp/tmpqinc0ltc.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333900
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += getLetterFromVowel(letter);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3dd6qz38.ts(18,17): error TS2304: Cannot find name 'getLetterFromVowel'.\n",
      "timestamp": 1660333900
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbqbusai0.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbqbusai0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    if (index === -1) {\n      result += letter;\n    } else {\n      let letter2 = alphabet[index + 1];\n      result += letter2.toUpperCase();\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9bd0nsax.ts(15,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp9bd0nsax.ts(19,21): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333900
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        let vowelIndex2 = vowels.indexOf(message[(i + 1) % (message.length)]);\n        if (vowelIndex != -1 && vowelIndex2 != -1) {\n            letter = vowels[(vowelIndex + vowelIndex2 + 1) % vowels.length];\n        }\n        result += letter;\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThanks for your answer! I didn't know that you can do `vowels.indexOf(letter)` like that. I'm going to try this out and see if it works.\n<|/ c |>\n<| c |>\nYeah, I didn't know that either. That's a really cool trick. Thanks for sharing!\n<|/ c |>\n<| c |>\nThis solution doesn't work if the message is \"test\".\n<|/ c |>\n<| c |>\nIt does work. Try it out with 'test'.\n<|/ c |>\n<| c |>\nIt does work, thank you! I didn't know you could do that like that. I'm going to try this out and see if it works.\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8er4cnd1.ts(25,2): error TS1110: Type expected.\n../../../../tmp/tmp8er4cnd1.ts(25,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp8er4cnd1.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmp8er4cnd1.ts(26,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp8er4cnd1.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmp8er4cnd1.ts(27,7): error TS1109: Expression expected.\n../../../../tmp/tmp8er4cnd1.ts(28,8): error TS1005: ';' expected.\n../../../../tmp/tmp8er4cnd1.ts(28,12): error TS1005: '(' expected.\n../../../../tmp/tmp8er4cnd1.ts(28,17): error TS1005: ';' expected.\n../../../../tmp/tmp8er4cnd1.ts(28,25): error TS1005: ';' expected.\n../../../../tmp/tmp8er4cnd1.ts(28,27): error TS1005: ')' expected.\n../../../../tmp/tmp8er4cnd1.ts(28,93): error TS1005: ';' expected.\n../../../../tmp/tmp8er4cnd1.ts(28,95): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp8er4cnd1.ts(28,101): error TS1434: Unexpected",
      "timestamp": 1660333900
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \" \") {\n      result += letter;\n    } else {\n      result += swapCase(letter);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpl62qaq5h.ts(18,17): error TS2304: Cannot find name 'swapCase'.\n",
      "timestamp": 1660333900
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let encodedLetter = letter.toUpperCase();\n    let vowelIndex = encodedLetter.indexOf('A');\n    let vowel = encodedLetter.charAt(vowelIndex);\n    let encodedVowel = vowel;\n    let vowelIndex = encodedLetter.indexOf('A');\n    let vowel = encodedLetter.charAt(vowelIndex);\n    let encodedVowel = vowel;\n    let vowelIndex = encodedLetter.indexOf('A');\n    let vowel = encodedLetter.charAt(vowelIndex);\n    let encodedVowel = vowel;\n    let vowelIndex = encodedLetter.indexOf('A');\n    let vowel = encodedLetter.charAt(vowelIndex);\n    let encodedVowel = vowel;\n    let vowelIndex = encodedLetter.indexOf('A');\n    let vowel = encodedLetter.charAt(vowelIndex);\n    let encodedVowel = vowel;\n    let vowelIndex = encodedLetter.indexOf('A');\n    let vowel = encodedLetter.charAt(vowelIndex);\n    let encodedVowel = vowel;\n    let vowelIndex = encodedLetter.indexOf('A');\n    let vowel = encodedLetter.charAt(vowelIndex);\n    let encodedVowel = vowel;\n    let vowelIndex = encodedLetter.indexOf('A');\n    let vowel = encodedLetter.charAt(vowelIndex);\n    let encodedVowel = vowel;\n    let vowelIndex = encodedLetter.indexOf('A');\n    let vowel = encodedLetter.charAt(vowelIndex);\n    let encodedVowel = vowel;\n    let vowelIndex = encodedLetter.indexOf('A');\n    let vowel = encodedLetter.charAt(vowelIndex);\n    let encodedVowel = vowel;\n    let vowelIndex = encodedLetter.indexOf('A');\n    let vowel = encodedLetter.charAt(vowelIndex);\n    let encodedVowel = vowel;\n    let vowelIndex = encodedLetter.indexOf('A');\n    let vowel = encodedLetter.charAt(vowelIndex);\n    let encodedVowel = vowel;\n    let vowelIndex = encodedLetter.indexOf('A');\n    let vowel = encodedLetter.charAt(vowelIndex);\n    let encodedVowel = vowel;\n    let vowelIndex = encodedLetter.indexOf('A');\n    let vowel = encodedLetter.charAt(vowelIndex);\n    let encodedVowel = vowel;\n    let vowelIndex = encodedLetter.indexOf('A');\n    let vowel = encodedLetter.charAt(vowelIndex);\n    let encodedVowel = vowel;\n    let vowelIndex = encodedLetter.indexOf('A');\n    let vowel = encodedLetter.charAt(vowelIndex);\n    let encodedVowel = vowel;\n    let vowelIndex = encodedLetter.indexOf('A');\n    let vowel = encodedLetter.charAt(vowelIndex);\n    let encodedV\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcdb6igj9.ts(80,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333901
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiouAEIOU\";\n        let index = vowels.indexOf(letter);\n        if (index > -1) {\n            result += vowels[index + 1];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp53ne07w9.js:29:12)\n    at Object.<anonymous> (/tmp/tmp53ne07w9.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333901
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            result += letter;\n            i++;\n        }\n        else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            result += letter;\n            i++;\n        }\n        else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            result += letter;\n            i++;\n        }\n        else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            result += letter;\n            i++;\n        }\n        else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            result += letter;\n            i++;\n        }\n        else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            result += letter;\n            i++;\n        }\n        else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            result += letter;\n            i++;\n        }\n        else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === '\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmh3elywr.ts(72,102): error TS1002: Unterminated string literal.\n../../../../tmp/tmpmh3elywr.ts(73,1): error TS1005: ')' expected.\n../../../../tmp/tmpmh3elywr.ts(86,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333900
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let encodedMessage = message;\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            letter = letter.toUpperCase();\n        }\n        for (let j = 0; j < letter.length; j++) {\n            let nextLetter = letter[j];\n            if (nextLetter === 'a' || nextLetter === 'e' || nextLetter === 'i' || nextLetter === 'o' || nextLetter === 'u') {\n                nextLetter = nextLetter.toUpperCase();\n            }\n            encodedMessage = encodedMessage.replace(letter, nextLetter);\n        }\n    }\n    return encodedMessage;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv6x624a_.ts(28,2): error TS1110: Type expected.\n../../../../tmp/tmpv6x624a_.ts(28,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpv6x624a_.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmpv6x624a_.ts(29,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpv6x624a_.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmpv6x624a_.ts(30,6): error TS1005: ';' expected.\n../../../../tmp/tmpv6x624a_.ts(30,16): error TS1109: Expression expected.\n../../../../tmp/tmpv6x624a_.ts(32,9): error TS1005: ';' expected.\n",
      "timestamp": 1660333900
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplq5gronc.js:25:12)\n    at Object.<anonymous> (/tmp/tmplq5gronc.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpra5mrjgj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpra5mrjgj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2snoq9u_.js:27:12)\n    at Object.<anonymous> (/tmp/tmp2snoq9u_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333901
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpra5mrjgj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpra5mrjgj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpra5mrjgj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpra5mrjgj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = letter.charCodeAt(0) - 97;\n        if (index >= 0) {\n            result += String.fromCharCode(index + 1);\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpnln_z10r.js:28:12)\n    at Object.<anonymous> (/tmp/tmpnln_z10r.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333901
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplq5gronc.js:25:12)\n    at Object.<anonymous> (/tmp/tmplq5gronc.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"A\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"e\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"E\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"i\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"I\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"o\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"O\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"u\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"U\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"y\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"Y\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"s\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"S\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"t\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"T\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"k\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"K\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"h\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"H\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"g\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"G\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"f\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"F\") {\n            result += letter;\n            i++;\n        }\n        else if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyc55kc9m.ts(121,9): error TS1005: ')' expected.\n../../../../tmp/tmpyc55kc9m.ts(134,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333901
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpra5mrjgj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpra5mrjgj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    if (index != -1) {\n      result += alphabet[(index + 1) % alphabet.length];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6se8ujtg.ts(15,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp6se8ujtg.ts(17,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp6se8ujtg.ts(17,40): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333897
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpra5mrjgj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpra5mrjgj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbqbusai0.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbqbusai0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n    if (index >= 0) {\n      result += message[i];\n    } else {\n      result += letter.toUpperCase();\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmk1kix5v.js:28:12)\n    at Object.<anonymous> (/tmp/tmpmk1kix5v.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333901
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === nextLetter) {\n      result += letter;\n      i++;\n    } else {\n      result += letter.toUpperCase();\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_3co_zmk.js:29:12)\n    at Object.<anonymous> (/tmp/tmp_3co_zmk.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else {\n      result += getVowel(letter);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd9m257sn.ts(18,17): error TS2304: Cannot find name 'getVowel'.\n",
      "timestamp": 1660333901
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 96;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpri9i8uqd.js:27:12)\n    at Object.<anonymous> (/tmp/tmpri9i8uqd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbqbusai0.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbqbusai0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbqbusai0.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbqbusai0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbqbusai0.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbqbusai0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      encodedMessage += letter;\n    } else {\n      const nextLetter = message[(i + 1) % message.length];\n      encodedMessage += nextLetter.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ESTT'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppcpaq_no.js:28:12)\n    at Object.<anonymous> (/tmp/tmppcpaq_no.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ESTT',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333901
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === letter.toUpperCase()) {\n            result += letter.toUpperCase();\n        } else {\n            result += letter.toLowerCase();\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmvlwf2sm.js:27:12)\n    at Object.<anonymous> (/tmp/tmpmvlwf2sm.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let vowels = \"aeiouAEIOU\";\n    let letters = \"abcdefghijklmnopqrstuvwxyz\";\n    let result = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (vowels.indexOf(letter) > -1) {\n            let index = vowels.indexOf(letter);\n            let nextLetter = letters[index + 1];\n            let nextVowel = vowels[index + 2];\n            result += nextLetter.toUpperCase();\n            result += nextVowel;\n        } else {\n            result += letter.toUpperCase();\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'THOST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp330ldzkl.js:33:12)\n    at Object.<anonymous> (/tmp/tmp330ldzkl.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'THOST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333901
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpz6osnjku.js:25:12)\n    at Object.<anonymous> (/tmp/tmpz6osnjku.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333897
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let vowels = 'aeiou';\n    let newMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (alphabet.indexOf(letter) > -1) {\n            newMessage += letter;\n        } else {\n            let index = alphabet.indexOf(vowels.charAt(alphabet.indexOf(letter)));\n            newMessage += alphabet.charAt(index + 1);\n        }\n    }\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nI like this solution, but I wonder if there is a way to do this without having to use indexOf(). I'm thinking maybe a regex replace would work, but I'm not familiar enough with regex to know if that's possible.\n<|/ c |>\n<| c |>\nI added a regex solution to my answer. Hope it helps!\n<|/ c |>\n<| a tags=javascript,algorithm |>\nHere's a solution that uses regular expressions:\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp66l67moe.ts(26,2): error TS1110: Type expected.\n../../../../tmp/tmp66l67moe.ts(26,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp66l67moe.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmp66l67moe.ts(27,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp66l67moe.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmp66l67moe.ts(28,7): error TS1109: Expression expected.\n../../../../tmp/tmp66l67moe.ts(29,3): error TS1005: ';' expected.\n../../../../tmp/tmp66l67moe.ts(29,13): error TS1005: ';' expected.\n../../../../tmp/tmp66l67moe.ts(29,27): error TS1005: ';' expected.\n../../../../tmp/tmp66l67moe.ts(29,29): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp66l67moe.ts(29,39): error TS1005: '(' expected.\n../../../../tmp/tmp66l67moe.ts(29,45): error TS1005: ')' expected.\n../../../../tmp/tmp66l67moe.ts(29,48): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp66l67moe.ts(29,50): error",
      "timestamp": 1660333903
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n      if (index === -1) {\n        result += letter;\n      } else {\n        result += alphabet[index + 2];\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx_9ihv5e.ts(18,19): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpx_9ihv5e.ts(22,19): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333903
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1) {\n            result += vowels[vowelIndex + 1];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp97y16lxl.js:29:12)\n    at Object.<anonymous> (/tmp/tmp97y16lxl.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333904
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const letterIndex = letter.charCodeAt(0) - 65;\n    const letter2 = message[letterIndex + 1];\n    const letter3 = message[letterIndex + 2];\n    const letter4 = message[letterIndex + 3];\n    const letter5 = message[letterIndex + 4];\n    const letter6 = message[letterIndex + 5];\n    const letter7 = message[letterIndex + 6];\n    const letter8 = message[letterIndex + 7];\n    const letter9 = message[letterIndex + 8];\n    const letter10 = message[letterIndex + 9];\n    const letter11 = message[letterIndex + 10];\n    const letter12 = message[letterIndex + 11];\n    const letter13 = message[letterIndex + 12];\n    const letter14 = message[letterIndex + 13];\n    const letter15 = message[letterIndex + 14];\n    const letter16 = message[letterIndex + 15];\n    const letter17 = message[letterIndex + 16];\n    const letter18 = message[letterIndex + 17];\n    const letter19 = message[letterIndex + 18];\n    const letter20 = message[letterIndex + 19];\n    const letter21 = message[letterIndex + 20];\n    const letter22 = message[letterIndex + 21];\n    const letter23 = message[letterIndex + 22];\n    const letter24 = message[letterIndex + 23];\n    const letter25 = message[letterIndex + 24];\n    const letter26 = message[letterIndex + 25];\n    const letter27 = message[letterIndex + 26];\n    const letter28 = message[letterIndex + 27];\n    const letter29 = message[letterIndex + 28];\n    const letter30 = message[letterIndex + 29];\n    const letter31 = message[letterIndex + 30];\n    const letter32 = message[letterIndex + 31];\n    const letter33 = message[letterIndex + 32];\n    const letter34 = message[letterIndex + 33];\n    const letter35 = message[letterIndex + 34];\n    const letter36 = message[letterIndex + 35];\n    const letter37 = message[letterIndex + 36];\n    const letter38 = message[letterIndex + 37];\n    const letter39 = message[letterIndex + 38];\n    const letter40 = message[letterIndex + 39];\n    const letter41 = message[letterIndex + 40];\n    const letter42 = message[letterIndex + 41];\n    const letter43 = \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpl_m8r8j_.ts(58,9): error TS1005: ',' expected.\n../../../../tmp/tmpl_m8r8j_.ts(71,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333903
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n            if (index > -1) {\n                result += alphabet[index + 2];\n            } else {\n                result += letter;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcl20z669.ts(18,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpcl20z669.ts(20,27): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333903
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 65 + letter.charCodeAt(1) - 65;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppewedrjk.js:27:12)\n    at Object.<anonymous> (/tmp/tmppewedrjk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333904
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbqbusai0.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbqbusai0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let newMessage = message;\n    for (let i = 0; i < message.length; i++) {\n        let letter = message.charAt(i);\n        newMessage = newMessage.replace(letter, letter.match(/[a-z]/)[0]);\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage.charAt(i);\n        let vowelIndex = letter.match(/[aeiou]/);\n        if (vowelIndex != null) {\n            let vowel = vowelIndex[0];\n            let vowelIndex = vowelIndex.index;\n            newMessage = newMessage.replace(vowel, letter.charAt(vowelIndex + 2));\n        }\n    }\n    return newMessage;\n}\n</code>\n<|/ a |>\n<| c |>\nI appreciate your efforts, but this doesn't work. Try it with `encode('This is a message')`\n<|/ c |>\n<| c |>\nI tested it and it works. I added the output to the answer. Can you give me an example where it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't work for `encode('This is a message')`\n<|/ c |>\n<| c |>\nI tested it and it works. I added the output to the answer. Can you give me an example where it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't work for `encode('This is a message')`\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplx112mot.ts(28,2): error TS1110: Type expected.\n../../../../tmp/tmplx112mot.ts(28,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmplx112mot.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmplx112mot.ts(29,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmplx112mot.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmplx112mot.ts(30,7): error TS1109: Expression expected.\n../../../../tmp/tmplx112mot.ts(31,3): error TS1005: ';' expected.\n../../../../tmp/tmplx112mot.ts(31,14): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmplx112mot.ts(31,32): error TS1005: ';' expected.\n../../../../tmp/tmplx112mot.ts(31,37): error TS1005: ';' expected.\n../../../../tmp/tmplx112mot.ts(31,72): error TS1005: ';' expected.\n../../../../tmp/tmplx112mot.ts(31,77): error TS1228: A type predicate is only allowed in return type position for functions and methods.\n../../../../tmp/tmplx112mot.ts(31,80): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmplx112mot.ts(31,82): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmplx112mot.ts(31,92): error TS1002: Unterminated string literal.\n../../../../tmp/tmplx112mot.ts(32,2): error TS1109: Expression expected.\n../../../../tmp/tmplx112mot.ts(32,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmplx112mot.ts(33,2): error TS1109: Expression expected.\n../../../../tmp/tmplx112mot.ts(33,7): error TS1109: Expression expected.\n../../../../tmp/tmplx112mot.ts(34,3): error TS1005: ';' expected.\n../../../../tmp/tmplx112mot.ts(34,10): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmplx112mot.ts(34,13): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmplx112mot.ts(34,17): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmplx112mot.ts(34,29): error TS1005: ';' expected.\n../../../../tmp/tmplx112mot.ts(34,35): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmplx112mot.ts(34,39",
      "timestamp": 1660333904
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 65 + letter.charCodeAt(1) - 65;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppewedrjk.js:27:12)\n    at Object.<anonymous> (/tmp/tmppewedrjk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333904
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1) {\n            result += vowels[vowelIndex + 1];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThis does not work. Try it with `encode('This is a message')`\n<|/ c |>\n<| c |>\nIt does work. Try it with `encode('This is a message')`\n<|/ c |>\n<| c |>\nIt does work. Try it with `encode('This is a message')`\n<|/ c |>\n<| c |>\nIt does work. Try it with `encode('This is a message')`\n<|/ c |>\n<| c |>\nIt does work. Try it with `encode('This is a message')`\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7p2h_fky.ts(25,2): error TS1110: Type expected.\n../../../../tmp/tmp7p2h_fky.ts(25,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp7p2h_fky.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmp7p2h_fky.ts(26,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp7p2h_fky.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmp7p2h_fky.ts(27,7): error TS1109: Expression expected.\n../../../../tmp/tmp7p2h_fky.ts(28,6): error TS1005: ';' expected.\n../../../../tmp/tmp7p2h_fky.ts(28,11): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp7p2h_fky.ts(28,25): error TS1005: ';' expected.\n../../../../tmp/tmp7p2h_fky.ts(28,33): error TS1005: '(' expected.\n../../../../tmp/tmp7p2h_fky.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmp7p2h_fky.ts(29,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp7p2h_fky.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmp7p2h_fky.ts(30,7): error TS1109: Expression expected.\n../../../../tmp/tmp7p2h_fky.ts(31,4): error TS1005: ')' expected.\n../../../../tmp/tmp7p2h_fky.ts(31,19): error TS1005: ';' expected.\n../../../../tmp/tmp7p2h_fky.ts(31,27): error TS1005: '(' expected.\n../../../../tmp/tmp7p2h_fky.ts(32,2): error TS1109: Expression expected.\n../../../../tmp/tmp7p2h_fky.ts(32,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp7p2h_fky.ts(33,2): error TS1109: Expression expected.\n../../../../tmp/tmp7p2h_fky.ts(33,7): error TS1109: Expression expected.\n../../../../tmp/tmp7p2h_fky.ts(34,4): error TS1005: ')' expected.\n../../../../tmp/tmp7p2h_fky.ts(34,19): error TS1005: ';' expected.\n../../../../tmp/tmp7p2h_fky.ts(34,27): error TS1005: '(' expected.\n../../../../tmp/tmp7p2h_fky.ts(35,2): error TS1109: Expression expected.\n../../../../tmp/tmp7p2h_fky.ts(35,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp7p2h_fky.ts(36,2): error TS1109: Expression expected.\n../../../../tmp/tmp7p2h_fk",
      "timestamp": 1660333903
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbqbusai0.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbqbusai0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = 'aeiou';\n    let vowelsCount = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsIndex2 = 0;\n    let vowelsIndex3 = 0;\n    let vowelsIndex4 = 0;\n    let vowelsIndex5 = 0;\n    let vowelsIndex6 = 0;\n    let vowelsIndex7 = 0;\n    let vowelsIndex8 = 0;\n    let vowelsIndex9 = 0;\n    let vowelsIndex10 = 0;\n    let vowelsIndex11 = 0;\n    let vowelsIndex12 = 0;\n    let vowelsIndex13 = 0;\n    let vowelsIndex14 = 0;\n    let vowelsIndex15 = 0;\n    let vowelsIndex16 = 0;\n    let vowelsIndex17 = 0;\n    let vowelsIndex18 = 0;\n    let vowelsIndex19 = 0;\n    let vowelsIndex20 = 0;\n    let vowelsIndex21 = 0;\n    let vowelsIndex22 = 0;\n    let vowelsIndex23 = 0;\n    let vowelsIndex24 = 0;\n    let vowelsIndex25 = 0;\n    let vowelsIndex26 = 0;\n    let vowelsIndex27 = 0;\n    let vowelsIndex28 = 0;\n    let vowelsIndex29 = 0;\n    let vowelsIndex30 = 0;\n    let vowelsIndex31 = 0;\n    let vowelsIndex32 = 0;\n    let vowelsIndex33 = 0;\n    let vowelsIndex34 = 0;\n    let vowelsIndex35 = 0;\n    let vowelsIndex36 = 0;\n    let vowelsIndex37 = 0;\n    let vowelsIndex38 = 0;\n    let vowelsIndex39 = 0;\n    let vowelsIndex40 = 0;\n    let vowelsIndex41 = 0;\n    let vowelsIndex42 = 0;\n    let vowelsIndex43 = 0;\n    let vowelsIndex44 = 0;\n    let vowelsIndex45 = 0;\n    let vowelsIndex46 = 0;\n    let vowelsIndex47 = 0;\n    let vowelsIndex48 = 0;\n    let vowelsIndex49 = 0;\n    let vowelsIndex50 = 0;\n    let vowelsIndex51 = 0;\n    let vowelsIndex52 = 0;\n    let vowelsIndex53 = 0;\n    let vowelsIndex54 = 0;\n    let vowelsIndex55 = 0;\n    let vowelsIndex56 = 0;\n    let vowelsIndex57 = 0;\n    let vowelsIndex58 = 0;\n    let vowelsIndex59 = 0;\n    let vowelsIndex60 = 0;\n    let vowelsIndex61 = 0;\n    let vowelsIndex62 = 0;\n    let vowelsIndex63 = 0;\n    let vowelsIndex64 = 0;\n    let vowelsIndex65 = 0;\n    let vowelsIndex66 = 0;\n    let vowelsIndex67 = 0;\n    let vowelsIndex68 = 0;\n    let vowelsIndex69 = 0;\n    let vowelsIndex70 = 0;\n    let vowelsIndex71 = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp7rlzsc9.ts(99,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333904
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n      i++;\n    } else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpybs7mgzn.js:33:12)\n    at Object.<anonymous> (/tmp/tmpybs7mgzn.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333897
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    let nextNextLetter = message[i + 2];\n    let nextNextNextLetter = message[i + 3];\n    let nextNextNextNextLetter = message[i + 4];\n    let nextNextNextNextNextLetter = message[i + 5];\n    let nextNextNextNextNextNextLetter = message[i + 6];\n    let nextNextNextNextNextNextNextLetter = message[i + 7];\n    let nextNextNextNextNextNextNextNextLetter = message[i + 8];\n    let nextNextNextNextNextNextNextNextNextLetter = message[i + 9];\n    let nextNextNextNextNextNextNextNextNextLetter = message[i + 10];\n    let nextNextNextNextNextNextNextNextNextNextLetter = message[i + 11];\n    let nextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 12];\n    let nextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 13];\n    let nextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 14];\n    let nextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 15];\n    let nextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 16];\n    let nextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 17];\n    let nextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 18];\n    let nextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 19];\n    let nextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 20];\n    let nextNextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 21];\n    let nextNextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 22];\n    let nextNextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 23];\n    let nextNextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 24];\n    let nextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 25];\n    let nextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 26];\n    let nextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 27];\n    let nextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcc6parj0.ts(43,9): error TS1005: ',' expected.\n../../../../tmp/tmpcc6parj0.ts(56,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333904
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      letter = message[++i];\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxgvn_tfa.js:25:12)\n    at Object.<anonymous> (/tmp/tmpxgvn_tfa.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpra5mrjgj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpra5mrjgj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpra5mrjgj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpra5mrjgj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let encodedLetter = letter;\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      encodedLetter = letter.toUpperCase();\n    }\n    for (let j = i + 1; j < message.length; j++) {\n      let nextLetter = message[j];\n      if (nextLetter === 'a' || nextLetter === 'e' || nextLetter === 'i' || nextLetter === 'o' || nextLetter === 'u') {\n        nextLetter = nextLetter.toUpperCase();\n      }\n      if (letter === nextLetter) {\n        encodedLetter = encodedLetter + letter;\n      }\n    }\n    encodedMessage += encodedLetter;\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TTEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphgsy32bn.js:35:12)\n    at Object.<anonymous> (/tmp/tmphgsy32bn.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TTEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333904
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpz6osnjku.js:25:12)\n    at Object.<anonymous> (/tmp/tmpz6osnjku.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333897
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\") {\n      result += \"t\";\n    } else if (letter === \"e\") {\n      result += \"k\";\n    } else if (letter === \"i\") {\n      result += \"s\";\n    } else if (letter === \"o\") {\n      result += \"c\";\n    } else if (letter === \"u\") {\n      result += \"g\";\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo_2q86vl.js:39:12)\n    at Object.<anonymous> (/tmp/tmpo_2q86vl.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333904
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpra5mrjgj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpra5mrjgj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const letterIndex = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n    newMessage += letter.split('').map(letter => letterIndex === 2 ? letter.toLowerCase() : letter).join('');\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpspj5q8fk.js:23:12)\n    at Object.<anonymous> (/tmp/tmpspj5q8fk.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333904
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbqbusai0.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbqbusai0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n            if (index > -1) {\n                let letter2 = alphabet[index + 1];\n                result += letter2;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz1kgrzmn.ts(18,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpz1kgrzmn.ts(20,31): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333904
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            result += nextLetter;\n            i++;\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer. I'm sorry I didn't mention this in my question, but I forgot to mention that I cannot use any libraries other than basic Javascript. I'm also not allowed to use any loops or conditionals. I'm only allowed to use basic Javascript and basic conditionals.\n<|/ c |>\n<| c |>\nI updated my answer with a solution that doesn't use any loops or conditionals.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm sorry I didn't mention this in my question, but I forgot to mention that I cannot use any libraries other than basic Javascript. I'm also not allowed to use any loops or conditionals. I'm only allowed to use basic Javascript and basic conditionals.\n<|/ c |>\n<| c |>\nI updated my answer with a solution that doesn't use any loops or conditionals.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppkw99lcq.ts(25,2): error TS1110: Type expected.\n../../../../tmp/tmppkw99lcq.ts(25,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmppkw99lcq.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmppkw99lcq.ts(26,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmppkw99lcq.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmppkw99lcq.ts(27,7): error TS1109: Expression expected.\n../../../../tmp/tmppkw99lcq.ts(28,8): error TS1005: ';' expected.\n../../../../tmp/tmppkw99lcq.ts(28,12): error TS1005: '(' expected.\n../../../../tmp/tmppkw99lcq.ts(28,17): error TS1005: ';' expected.\n../../../../tmp/tmppkw99lcq.ts(28,26): error TS1005: ';' expected.\n../../../../tmp/tmppkw99lcq.ts(28,42): error TS1005: ')' expected.\n../../../../tmp/tmppkw99lcq.ts(28,44): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppkw99lcq.ts(28,63): error TS1005: ';' expected.\n../../../../tmp/tmppkw99lcq.ts(28,77): error TS1005: ';' expected.\n../../../../tmp/tmppkw99lcq.ts(28,79): error TS1435: Unknown keyword or identifier. Did you mean 'for got'?\n../../../../tmp/tmppkw99lcq.ts(28,86): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppkw99lcq.ts(28,89): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppkw99lcq.ts(28,97): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppkw99lcq.ts(28,102): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppkw99lcq.ts(28,104): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppkw99lcq.ts(28,111): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppkw99lcq.ts(28,115): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppkw99lcq.ts(28,119): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppkw99lcq.ts(28,129): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppkw99lcq.ts(28,135): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppkw99lcq.ts(28,14",
      "timestamp": 1660333904
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let newMessage = message;\n    for (let i = 0; i < message.length; i++) {\n        const letter = message[i];\n        newMessage = newMessage.replace(letter, letter.toUpperCase());\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        const letter = newMessage[i];\n        const vowelIndex = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n        const vowel = vowelIndex >= 0 ? String.fromCharCode(vowelIndex + 97) : ' ';\n        newMessage = newMessage.replace(vowel, vowelIndex >= 2 ? String.fromCharCode(vowelIndex - 2) : ' ');\n    }\n    return newMessage;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not work if the message contains two or more vowels.\n<|/ c |>\n<| c |>\nIt does work, if you read my comment on the question. `'This is a message'` returns `'tHKS KS C MGSSCGG'`\n<|/ c |>\n<| c |>\nYes, I read your comment. My comment was meant as a comment on the question, not as a comment on your answer.\n<|/ c |>\n<| c |>\nI see what you mean. I'll edit my answer to include a solution that doesn't require the use of regular expressions.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require regular expressions.\n<|/ c |>\n<| a tags=javascript,string,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0r4p5plk.ts(25,2): error TS1110: Type expected.\n../../../../tmp/tmp0r4p5plk.ts(25,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0r4p5plk.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmp0r4p5plk.ts(26,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0r4p5plk.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmp0r4p5plk.ts(27,7): error TS1109: Expression expected.\n../../../../tmp/tmp0r4p5plk.ts(28,6): error TS1005: ';' expected.\n../../../../tmp/tmp0r4p5plk.ts(28,11): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp0r4p5plk.ts(28,15): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp0r4p5plk.ts(28,23): error TS1005: '(' expected.\n../../../../tmp/tmp0r4p5plk.ts(28,27): error TS1005: ')' expected.\n../../../../tmp/tmp0r4p5plk.ts(28,35): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp0r4p5plk.ts(28,44): error TS1434: Unexpected keyword or identifier.\n../.",
      "timestamp": 1660333904
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === nextLetter) {\n      result += letter;\n      i++;\n    } else {\n      result += letter.toUpperCase();\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_3co_zmk.js:29:12)\n    at Object.<anonymous> (/tmp/tmp_3co_zmk.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbqbusai0.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbqbusai0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = letter.charCodeAt(0) - 97;\n        if (index >= 0) {\n            result += String.fromCharCode(index + 1);\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpnln_z10r.js:28:12)\n    at Object.<anonymous> (/tmp/tmpnln_z10r.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333901
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            result += letter.charCodeAt(0) - 97;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzumzq4dq.js:27:12)\n    at Object.<anonymous> (/tmp/tmpzumzq4dq.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333904
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpra5mrjgj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpra5mrjgj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        let nextLetterIndex = alphabet.indexOf(nextLetter);\n        if (nextLetterIndex === -1) {\n            nextLetterIndex = alphabet.length - 1;\n        }\n        result += alphabet[alphabet.indexOf(letter) + nextLetterIndex];\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqlwwhyio.ts(16,31): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpqlwwhyio.ts(18,31): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpqlwwhyio.ts(20,19): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpqlwwhyio.ts(20,28): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333904
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let alphabet: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let vowels: string[] = ['a', 'e', 'i', 'o', 'u'];\n    let messageArray: string[] = message.split('');\n    let encodedMessage: string[] = [];\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n        let encodedLetter = letter;\n        for (let j = 0; j < alphabet.length; j++) {\n            if (letter === alphabet[j]) {\n                encodedLetter = alphabet[alphabet.indexOf(letter) + 2];\n                break;\n            }\n        }\n        encodedMessage.push(encodedLetter);\n    }\n    return encodedMessage.join('');\n}\n</code>\n<|/ a tags=javascript,algorithm,string |>\n<| c |>\nI like this solution, but I believe it would be better to use a `switch` statement instead of an `if` statement to handle each letter. Also, `encodedLetter` should be declared outside of the loop to avoid redeclaring it on every iteration.\n<|/ c |>\n<| c |>\nYeah, I agree with you on that one. I just wanted to keep it simple and easy to understand. I'll edit my answer to reflect your suggestions.\n<|/ c |>\n<| c |>\nI believe this solution is more efficient than mine. Thanks for your help!\n<|/ c |>\n<| c |>\nI believe this solution is more efficient than mine. Thanks for your help!\n<|/ c |>\n<| c |>\nI believe this solution is more efficient than mine. Thanks for your help!\n<|/ c |>\n<| a tags=javascript,algorithm,string |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph4u3qp8m.ts(29,2): error TS1110: Type expected.\n../../../../tmp/tmph4u3qp8m.ts(29,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmph4u3qp8m.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmph4u3qp8m.ts(30,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmph4u3qp8m.ts(31,2): error TS1109: Expression expected.\n../../../../tmp/tmph4u3qp8m.ts(31,7): error TS1109: Expression expected.\n../../../../tmp/tmph4u3qp8m.ts(32,3): error TS1005: ';' expected.\n../../../../tmp/tmph4u3qp8m.ts(32,13): error TS1005: ';' expected.\n../../../../tmp/tmph4u3qp8m.ts(32,27): error TS1005: ';' expected.\n../../../../tmp/tmph4u3qp8m.ts(32,29): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmph4u3qp8m.ts(32,37): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmph4u3qp8m.ts(32,40): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmph4u3qp8m.ts(32,46): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmph4u3qp8m.ts(32,49): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmph4u3qp8m.ts(32,56): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmph4u3qp8m.ts(32,59): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmph4u3qp8m.ts(32,65): error TS1443: Module declaration names may only use ' or \" quoted strings.\n../../../../tmp/tmph4u3qp8m.ts(32,74): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmph4u3qp8m.ts(32,84): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmph4u3qp8m.ts(32,92): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmph4u3qp8m.ts(32,98): error TS1443: Module declaration names may only use ' or \" quoted strings.\n../../../../tmp/tmph4u3qp8m.ts(32,103): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmph4u3qp8m.ts(32,113): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmph4u3qp8m.ts(32,116): error TS1434: Unexpected keyword or identifier.\n../../../../tm",
      "timestamp": 1660333904
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 96;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpri9i8uqd.js:27:12)\n    at Object.<anonymous> (/tmp/tmpri9i8uqd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else {\n      result += alphabet.indexOf(letter) + 2;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpieykgb8z.ts(18,17): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333904
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === letter.toUpperCase()) {\n      result += letter.toUpperCase();\n    } else {\n      result += letter.toLowerCase();\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpanak4hlz.js:27:12)\n    at Object.<anonymous> (/tmp/tmpanak4hlz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333905
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let newMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            newMessage += letter;\n        }\n        else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n            newMessage += letter;\n        }\n        else if (letter === 'b' || letter === 'c' || letter === 'd' || letter === 'f' || letter === 'g' || letter === 'h' || letter === 'j' || letter === 'k' || letter === 'l' || letter === 'm' || letter === 'n' || letter === 'p' || letter === 'q' || letter === 'r' || letter === 's' || letter === 't' || letter === 'v' || letter === 'w' || letter === 'x' || letter === 'y' || letter === 'z') {\n            newMessage += letter;\n        }\n        else if (letter === 'B' || letter === 'C' || letter === 'D' || letter === 'F' || letter === 'G' || letter === 'H' || letter === 'J' || letter === 'K' || letter === 'L' || letter === 'M' || letter === 'N' || letter === 'P' || letter === 'Q' || letter === 'R' || letter === 'S' || letter === 'T' || letter === 'V' || letter === 'W' || letter === 'X' || letter === 'Y' || letter === 'Z') {\n            newMessage += letter;\n        }\n        else if (letter === '!' || letter === '@' || letter === '#' || letter === '$' || letter === '%' || letter === '^' || letter === '&' || letter === '*' || letter === '(' || letter === ')' || letter === '-' || letter === '_' || letter === '+' || letter === '=' || letter === ':' || letter === '{' || letter === '}' || letter === '[' || letter === ']' || letter === '<' || letter === '>' || letter === '/' || letter === '?' || letter === '\\\\' || letter === '|' || letter === '\"' || letter === '{' || letter === '}' || letter === '[' || letter === ']' || letter === '<' || letter === '>' || letter === '/' || letter === '?' || letter === '\\\\' || letter === '|' || letter === '\"' || letter === '{' || letter === '}' || letter === '[' || letter === ']' || letter === '<' || letter === '>' || letter === '/' || letter === '?' || letter === '\\\\' || letter === '|' || letter === '\"' || letter === '{' || letter === '}' || letter === '[' || letter === ']' || letter === '<' || letter === '>' || letter === '/' || letter === '?' || letter === '\\\\' || letter === '|' || letter === '\"' || letter === '\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpccfm8c9h.ts(28,1096): error TS1002: Unterminated string literal.\n../../../../tmp/tmpccfm8c9h.ts(29,1): error TS1005: ')' expected.\n../../../../tmp/tmpccfm8c9h.ts(42,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333905
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += getLetter2PlaceAhead(letter);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdlsqt7zl.ts(18,17): error TS2304: Cannot find name 'getLetter2PlaceAhead'.\n",
      "timestamp": 1660333905
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let letterIndex = letter.charCodeAt(0) - 97;\n        let letter2 = message[i + 1];\n        let letter2Index = letter2.charCodeAt(0) - 97;\n        if (letterIndex > letter2Index) {\n            result += letter;\n        } else {\n            result += letter2;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmplkv9fglm.js:17\n        let letter2Index = letter2.charCodeAt(0) - 97;\n                                   ^\n\nTypeError: Cannot read properties of undefined (reading 'charCodeAt')\n    at encode (/tmp/tmplkv9fglm.js:17:36)\n    at test (/tmp/tmplkv9fglm.js:30:22)\n    at Object.<anonymous> (/tmp/tmplkv9fglm.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333906
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let alphabet: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let vowels: string[] = ['a', 'e', 'i', 'o', 'u'];\n    let messageArray: string[] = message.split('');\n    let encodedMessage: string = '';\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n        let encodedLetter = letter;\n        for (let j = 0; j < alphabet.length; j++) {\n            if (letter == alphabet[j]) {\n                encodedLetter = alphabet[alphabet.length - j - 1];\n                break;\n            }\n        }\n        for (let j = 0; j < vowels.length; j++) {\n            if (letter == vowels[j]) {\n                encodedLetter = vowels[j];\n                break;\n            }\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpi9_mv2rp.js:38:12)\n    at Object.<anonymous> (/tmp/tmpi9_mv2rp.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n      if (index === -1) {\n        result += letter;\n      } else {\n        let nextLetter = alphabet[index + 1];\n        if (nextLetter === letter) {\n          result += nextLetter;\n        } else {\n          result += letter;\n        }\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwjokan81.ts(18,19): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpwjokan81.ts(22,26): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333906
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = english.indexOf(letter);\n    if (index > 0) {\n      result += english[index - 1];\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbr4ek_sh.ts(15,17): error TS2304: Cannot find name 'english'.\n../../../../tmp/tmpbr4ek_sh.ts(17,17): error TS2304: Cannot find name 'english'.\n",
      "timestamp": 1660333906
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbqbusai0.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbqbusai0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n      if (index === -1) {\n        result += letter;\n      } else {\n        result += alphabet[index + 2];\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx_9ihv5e.ts(18,19): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpx_9ihv5e.ts(22,19): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333903
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = \"aeiou\";\n    const vowelIndex = vowels.indexOf(letter);\n    if (vowelIndex > -1) {\n      result += vowels[vowelIndex + 1];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tist'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpr_zn86qv.js:29:12)\n    at Object.<anonymous> (/tmp/tmpr_zn86qv.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tist',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpclwei2u7.js:33:12)\n    at Object.<anonymous> (/tmp/tmpclwei2u7.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThis doesn't work if the message is \"aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0tepmjaf.ts(28,2): error TS1110: Type expected.\n../../../../tmp/tmp0tepmjaf.ts(28,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0tepmjaf.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmp0tepmjaf.ts(29,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0tepmjaf.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmp0tepmjaf.ts(30,7): error TS1109: Expression expected.\n../../../../tmp/tmp0tepmjaf.ts(31,6): error TS1005: ';' expected.\n../../../../tmp/tmp0tepmjaf.ts(31,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp0tepmjaf.ts(31,425): error TS1002: Unterminated string literal.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let newMessage = message;\n    for (let i = 0; i < message.length; i++) {\n        newMessage = newMessage.replace(\n            /[a-z]/g, \n            function (letter) {\n                return letter.toUpperCase();\n            }\n        );\n        newMessage = newMessage.replace(\n            /[aeiou]/g, \n            function (letter) {\n                return letter.charCodeAt(0) - 64;\n            }\n        );\n    }\n    return newMessage;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprht6bqaj.ts(29,2): error TS1110: Type expected.\n../../../../tmp/tmprht6bqaj.ts(29,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmprht6bqaj.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmprht6bqaj.ts(30,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmprht6bqaj.ts(31,2): error TS1109: Expression expected.\n../../../../tmp/tmprht6bqaj.ts(31,6): error TS1005: ';' expected.\n../../../../tmp/tmprht6bqaj.ts(31,33): error TS1109: Expression expected.\n../../../../tmp/tmprht6bqaj.ts(33,9): error TS1005: ';' expected.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let vowels = 'aeiouAEIOU';\n  let letters = 'abcdefghijklmnopqrstuvwxyz';\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index];\n    for (let j = 0; j < vowels.length; j++) {\n      if (letters[index] === vowels[j]) {\n        encoded += letters[(index + 2) % letters.length];\n      }\n    }\n  }\n  return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'undefinedundefinedundefinedundefined'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphqqxfkvl.js:30:12)\n    at Object.<anonymous> (/tmp/tmphqqxfkvl.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefinedundefinedundefinedundefined',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let letterIndex = letter.charCodeAt(0) - 65;\n    let letterToSwap = letterIndex == 2 ? letter : letter.toUpperCase();\n    let letterToSwapIndex = letterToSwap.charCodeAt(0) - 65;\n    let letterToSwapTo = letterToSwapIndex == 2 ? letterToSwap : letterToSwap.toUpperCase();\n    result += letterToSwapTo;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpx0zh1nd5.js:26:12)\n    at Object.<anonymous> (/tmp/tmpx0zh1nd5.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage += letter;\n      i++;\n    } else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n      newMessage += letter.toUpperCase();\n      i++;\n    } else {\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxfkgtxf0.js:33:12)\n    at Object.<anonymous> (/tmp/tmpxfkgtxf0.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiouAEIOU\";\n        let index = vowels.indexOf(letter);\n        if (index > -1) {\n            result += vowels[index + 2];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjohr1xa6.js:29:12)\n    at Object.<anonymous> (/tmp/tmpjohr1xa6.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let letterIndex = alphabet.indexOf(letter);\n    if (letterIndex > -1) {\n      result += alphabet[letterIndex + 2];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9f0vfrx9.ts(15,23): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp9f0vfrx9.ts(17,17): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let newMessage = message;\n    let vowels = 'aeiou';\n    let vowelsCount = vowels.length;\n    let vowelsMap = {};\n    for (let i = 0; i < vowelsCount; i++) {\n        vowelsMap[vowels[i]] = i;\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage.charAt(i);\n        if (vowelsMap[letter] !== undefined) {\n            let vowelIndex = vowelsMap[letter];\n            let vowel = vowels[vowelIndex];\n            newMessage = newMessage.replace(letter, vowel);\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpaxgpo4dl.js:32:12)\n    at Object.<anonymous> (/tmp/tmpaxgpo4dl.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowels = \"aeiou\";\n    let letterIndex = vowels.indexOf(letter);\n    let vowelIndex = letterIndex + 2;\n    if (letterIndex < 0 || letterIndex >= vowels.length) {\n      result += letter;\n    } else {\n      result += vowels[letterIndex];\n      result += vowels[vowelIndex];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpx4p5fjsv.js:31:12)\n    at Object.<anonymous> (/tmp/tmpx4p5fjsv.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = \"aeiou\";\n    let index = vowels.indexOf(letter);\n    if (index === -1) {\n      index = letter.toUpperCase().charCodeAt(0) - 65;\n    }\n    result += String.fromCharCode(index + 2);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x15\\x03\\x14\\x15'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4xut_jhk.js:27:12)\n    at Object.<anonymous> (/tmp/tmp4xut_jhk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x15\\x03\\x14\\x15',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpz6osnjku.js:25:12)\n    at Object.<anonymous> (/tmp/tmpz6osnjku.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333897
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === letter.toUpperCase()) {\n      result += letter.toUpperCase();\n    } else {\n      result += letter.toLowerCase();\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp367hzvff.js:27:12)\n    at Object.<anonymous> (/tmp/tmp367hzvff.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let newMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        let vowels = ['a', 'e', 'i', 'o', 'u'];\n        for (let j = 0; j < vowels.length; j++) {\n            if (letter == vowels[j]) {\n                newLetter = vowels[j + 1];\n            }\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5na5nawv.js:29:12)\n    at Object.<anonymous> (/tmp/tmp5na5nawv.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 96;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpr9xv8o1e.js:27:12)\n    at Object.<anonymous> (/tmp/tmpr9xv8o1e.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let vowels = 'aeiou';\n    let newMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter);\n        if (vowels.indexOf(letter) > -1) {\n            newMessage += alphabet.indexOf(letter) + 2;\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-1-1-1-1'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpq3dzwf3_.js:27:12)\n    at Object.<anonymous> (/tmp/tmpq3dzwf3_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-1-1-1-1',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpz6osnjku.js:25:12)\n    at Object.<anonymous> (/tmp/tmpz6osnjku.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333897
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let vowels = 'aeiou';\n    let letters = message.split('');\n    let newMessage = '';\n    for (let i = 0; i < letters.length; i++) {\n        let letter = letters[i];\n        let index = letter.charCodeAt(0) - 97;\n        if (index >= 0) {\n            newMessage += letters[index];\n        } else {\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4ggja_lp.js:30:12)\n    at Object.<anonymous> (/tmp/tmp4ggja_lp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333908
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    if (index > -1) {\n      result += alphabet[alphabet.indexOf(letter) + 2];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu3dm1yea.ts(15,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpu3dm1yea.ts(17,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpu3dm1yea.ts(17,26): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333907
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8lpq3_bp.js:27:12)\n    at Object.<anonymous> (/tmp/tmp8lpq3_bp.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 96;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpri9i8uqd.js:27:12)\n    at Object.<anonymous> (/tmp/tmpri9i8uqd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333890
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpclwei2u7.js:33:12)\n    at Object.<anonymous> (/tmp/tmpclwei2u7.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowels = \"AEIOUaeiou\";\n    let index = vowels.indexOf(letter);\n    if (index > -1) {\n      result += vowels[index + 1];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp43wx0043.js:29:12)\n    at Object.<anonymous> (/tmp/tmp43wx0043.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333908
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage += letter;\n      i++;\n    } else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n      newMessage += letter.toUpperCase();\n      i++;\n    } else {\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxfkgtxf0.js:33:12)\n    at Object.<anonymous> (/tmp/tmpxfkgtxf0.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333893
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[(i + 1) % message.length];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.indexOf(letter) > -1 && vowels.indexOf(nextLetter) > -1) {\n      newMessage += letter;\n    } else {\n      newMessage += letter.toUpperCase();\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1ohywzd5.js:29:12)\n    at Object.<anonymous> (/tmp/tmp1ohywzd5.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333908
    }
  ]
}