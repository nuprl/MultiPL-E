{
  "language": "ts",
  "name": "HumanEval_6_parse_nested_parens",
  "results": [
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpz999l4ak.js:28:12)\n    at Object.<anonymous> (/tmp/tmpz999l4ak.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsqqp2xht.js:29:12)\n    at Object.<anonymous> (/tmp/tmpsqqp2xht.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n    } else if (paren_string[i] === ')') {\n      const level = paren_stack.pop();\n      if (level > paren_level[paren_level.length - 1]) {\n        paren_level[paren_level.length - 1] = level;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  0,\n  0,\n  5,\n  6,\n  0,\n  0,\n  9,\n  10,\n  11\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpswtfyty_.js:26:12)\n    at Object.<anonymous> (/tmp/tmpswtfyty_.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     0,  1, 2, 0, 0,\n     5,  6, 0, 0, 9,\n    10, 11\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpxa35nyij.js:30:12)\n    at Object.<anonymous> (/tmp/tmpxa35nyij.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334841
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnodz2hz1.js:29:12)\n    at Object.<anonymous> (/tmp/tmpnodz2hz1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmps5ca4f3z.js:23:12)\n    at Object.<anonymous> (/tmp/tmps5ca4f3z.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  const paren_level_max: number[] = [];\n  const paren_level_max_index: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n      paren_level_max.push(0);\n      paren_level_max_index.push(0);\n    } else if (char === ')') {\n      paren_level[paren_stack.pop()] = paren_level[paren_stack.pop()] - 1;\n      paren_level_max[paren_stack.pop()] = Math.max(paren_level_max[paren_stack.pop()], paren_level[paren_stack.pop()]);\n      paren_level_max_index[paren_stack.pop()] = Math.max(paren_level_max_index[paren_stack.pop()], paren_stack.length - 1);\n    }\n  }\n  return paren_level_max_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  undefined: NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpny07gq6h.js:30:12)\n    at Object.<anonymous> (/tmp/tmpny07gq6h.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, undefined: NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpcvczeox6.js:29:12)\n    at Object.<anonymous> (/tmp/tmpcvczeox6.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_max: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count_index: number[] = [];\n  let paren_level_max_count_index2: number[] = [];\n  let paren_level_max_count_index3: number[] = [];\n  let paren_level_max_count_index4: number[] = [];\n  let paren_level_max_count_index5: number[] = [];\n  let paren_level_max_count_index6: number[] = [];\n  let paren_level_max_count_index7: number[] = [];\n  let paren_level_max_count_index8: number[] = [];\n  let paren_level_max_count_index9: number[] = [];\n  let paren_level_max_count_index10: number[] = [];\n  let paren_level_max_count_index11: number[] = [];\n  let paren_level_max_count_index12: number[] = [];\n  let paren_level_max_count_index13: number[] = [];\n  let paren_level_max_count_index14: number[] = [];\n  let paren_level_max_count_index15: number[] = [];\n  let paren_level_max_count_index16: number[] = [];\n  let paren_level_max_count_index17: number[] = [];\n  let paren_level_max_count_index18: number[] = [];\n  let paren_level_max_count_index19: number[] = [];\n  let paren_level_max_count_index20: number[] = [];\n  let paren_level_max_count_index21: number[] = [];\n  let paren_level_max_count_index22: number[] = [];\n  let paren_level_max_count_index23: number[] = [];\n  let paren_level_max_count_index24: number[] = [];\n  let paren_level_max_count_index25: number[] = [];\n  let paren_level_max_count_index26: number[] = [];\n  let paren_level_max_count_index27: number[] = [];\n  let paren_level_max_count_index28: number[] = [];\n  let paren_level_max_count_index29: number[] = [];\n  let paren_level_max_count_index30: number[] = [];\n  let paren_level_max_count_index31: number[] = [];\n  let paren_level_max_count_index32: number[] = [];\n  let paren_level_max_count_index33: number[] = [];\n  let paren_level_max_count_index34: number[] = [];\n  let paren_level_max_count_index35: number[] = [];\n  let paren_level_max_count_index36: number[] = [];\n  let paren_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpndwrp1_k.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334841
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max--;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpxqd2_tow.js:27:12)\n    at Object.<anonymous> (/tmp/tmpxqd2_tow.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334841
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max_count = 1;\n  let paren_level_max_paren_level = 1;\n  let paren_level_max_paren_level_paren_level = 1;\n  let paren_level_max_paren_level_paren_level_paren_level = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfhsiyf4o.ts(38,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334841
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      const current_level = paren_level.pop();\n      const current_level_length = paren_level.length - 1;\n      if (current_level_length === 0) {\n        paren_level_count--;\n      }\n      if (current_level_length >= 0 && paren_level[current_level_length] === current_level) {\n        paren_level_count--;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpvzrqho9p.js:33:12)\n    at Object.<anonymous> (/tmp/tmpvzrqho9p.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334841
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = (paren_level_count > paren_level_max) ? paren_level_count : paren_level_max;\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level_max = (paren_level_count > paren_level_max) ? paren_level_count : paren_level_max;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsvghwvc4.js:28:12)\n    at Object.<anonymous> (/tmp/tmpsvghwvc4.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpxa35nyij.js:30:12)\n    at Object.<anonymous> (/tmp/tmpxa35nyij.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334841
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_count.push(paren_level.length);\n      paren_count++;\n    } else if (char === ')') {\n      const paren_level = paren_level_count[paren_stack.pop()];\n      if (paren_level > 0) {\n        paren_level_count[paren_stack.pop()]--;\n      }\n      paren_count--;\n    }\n  }\n  return paren_level_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp289njnkf.js:31:12)\n    at Object.<anonymous> (/tmp/tmp289njnkf.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334841
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n      paren_level_count -= 1;\n      paren_level_max = Math.max(paren_level_max, paren_stack.pop());\n      if (paren_level_count === 0) {\n        paren_level_max_index = paren_level_max_count;\n        paren_level_max_count = paren_level;\n      }\n    }\n  }\n  return paren_level_max_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzdt9k03d.ts(22,9): error TS2322: Type 'number[]' is not assignable to type 'number'.\n../../../../tmp/tmpzdt9k03d.ts(26,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334841
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_count += 1;\n      paren_level_max = Math.max(paren_level_max, paren_level_count);\n      paren_level_max_index = i;\n    } else if (char === ')') {\n      paren_count -= 1;\n      paren_level_count -= 1;\n      if (paren_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpmp0ls1_m.js:34:12)\n    at Object.<anonymous> (/tmp/tmpmp0ls1_m.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_count);\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfwor77c_.ts(12,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpfwor77c_.ts(17,26): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpfwor77c_.ts(21,3): error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334841
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (paren_string[i] === ')') {\n      const paren_level_count = paren_level.pop();\n      if (paren_level_count > 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnful51dc.js:26:12)\n    at Object.<anonymous> (/tmp/tmpnful51dc.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_count.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n      paren_level_count[paren_stack.pop()] = paren_count;\n    }\n  }\n  return paren_level_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  1,\n  undefined,\n  NaN,\n  NaN,\n  undefined,\n  undefined,\n  NaN,\n  NaN,\n  undefined,\n  undefined,\n  NaN: NaN,\n  undefined: undefined\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp64wrzkcf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp64wrzkcf.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,                    1,\n    1,                    undefined,\n    NaN,                  NaN,\n    undefined,            undefined,\n    N",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level.pop();\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpf3nlidzc.js:30:12)\n    at Object.<anonymous> (/tmp/tmpf3nlidzc.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(char);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const last_char = paren_stack.pop();\n      if (last_char === '(') {\n        paren_level.pop();\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpdt3xtubr.js:27:12)\n    at Object.<anonymous> (/tmp/tmpdt3xtubr.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnodz2hz1.js:29:12)\n    at Object.<anonymous> (/tmp/tmpnodz2hz1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      levels[group[j]] += 1;\n    }\n  }\n  return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  '(': NaN,\n  ')': NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6h747v4c.js:21:12)\n    at Object.<anonymous> (/tmp/tmp6h747v4c.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '(': NaN, ')': NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(group => parse_nested_parens(group)));\n  return max_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprr8sbitn.ts(8,30): error TS2345: Argument of type 'number[]' is not assignable to parameter of type 'number'.\n../../../../tmp/tmprr8sbitn.ts(9,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334841
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7tkrib79.js:26:12)\n    at Object.<anonymous> (/tmp/tmp7tkrib79.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5nmauo30.js:25:12)\n    at Object.<anonymous> (/tmp/tmp5nmauo30.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (paren_string[i] === ')') {\n      const current_level = paren_level.pop();\n      if (current_level > 0) {\n        paren_level.push(current_level);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpyhvt1m38.js:26:12)\n    at Object.<anonymous> (/tmp/tmpyhvt1m38.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const current_level = paren_level.pop();\n      if (current_level > 0) {\n        paren_level.push(current_level);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpri9bv64o.js:27:12)\n    at Object.<anonymous> (/tmp/tmpri9bv64o.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level.pop();\n      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphic3qwq7.js:30:12)\n    at Object.<anonymous> (/tmp/tmphic3qwq7.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm6j3mk2h.ts(11,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpm6j3mk2h.ts(14,7): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpm6j3mk2h.ts(17,3): error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const max_level = groups.length;\n  const levels: number[] = [];\n  for (let i = 0; i < max_level; i++) {\n    levels.push(0);\n  }\n  for (let i = 0; i < max_level; i++) {\n    for (let j = 0; j < groups.length; j++) {\n      if (groups[j].indexOf(groups[i]) > -1) {\n        levels[i] = Math.max(levels[i], j + 1);\n      }\n    }\n  }\n  return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpb8iklztv.js:8\n    const max_level = groups.length;\n                             ^\n\nTypeError: Cannot read properties of null (reading 'length')\n    at parse_nested_parens (/tmp/tmpb8iklztv.js:8:30)\n    at test (/tmp/tmpb8iklztv.js:25:22)\n    at Object.<anonymous> (/tmp/tmpb8iklztv.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpynhdcnvj.js:28:12)\n    at Object.<anonymous> (/tmp/tmpynhdcnvj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  const paren_level_max: number[] = [];\n  const paren_level_max_index: number[] = [];\n  let paren_level_index = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_paren_level = 0;\n  let paren_level_max_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgbl6mh1m.ts(58,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334845
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6m0_uy3x.ts(70,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n    }\n    if (paren_count === 0) {\n      paren_stack.push(paren_count);\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphohe1qc3.js:25:12)\n    at Object.<anonymous> (/tmp/tmphohe1qc3.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (paren_string[i] === ')') {\n      paren_level[paren_stack.length - 1]++;\n      paren_stack.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  6,\n  2,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpm3l0v23u.js:24:12)\n    at Object.<anonymous> (/tmp/tmpm3l0v23u.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4, 6, 2, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(group => group.length));\n  const levels = new Array(max_level).fill(0);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      levels[group[j]] += 1;\n    }\n  }\n  return levels.map(level => level + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpcqgohqix.js:21:12)\n    at Object.<anonymous> (/tmp/tmpcqgohqix.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const level = paren_stack.pop();\n      paren_level[level] = paren_level[level] - 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpa192o5lw.js:25:12)\n    at Object.<anonymous> (/tmp/tmpa192o5lw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1, -1, -1, -1, -1,\n    -1, -1, -1, -1, -1,\n    -1, -1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnodz2hz1.js:29:12)\n    at Object.<anonymous> (/tmp/tmpnodz2hz1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpmhvm2eul.js:27:12)\n    at Object.<anonymous> (/tmp/tmpmhvm2eul.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_depth = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_depth);\n      paren_depth++;\n    } else if (paren_string[i] === ')') {\n      paren_depth = Math.max(paren_stack.pop(), paren_depth);\n    }\n  }\n  return paren_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmper8101h8.ts(17,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level);\n    } else if (paren_string[i] === ')') {\n      paren_level = Math.max(paren_stack.pop(), paren_level);\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp1u4_hahw.js:22:12)\n    at Object.<anonymous> (/tmp/tmp1u4_hahw.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level.pop();\n      paren_level.push(paren_level_count);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  1,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpvmpf2i8p.js:28:12)\n    at Object.<anonymous> (/tmp/tmpvmpf2i8p.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 0, 0, 1,\n    0, 0, 0, 1, 1,\n    1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_level: number[] = [];\n  let paren_level_max_level_length: number[] = [];\n  let paren_level_max_level_length_count: number[] = [];\n  let paren_level_max_level_length_index_count: number[] = [];\n  let paren_level_max_level_length_index_count_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index: \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4h3zdxs4.ts(35,9): error TS1005: ',' expected.\n../../../../tmp/tmp4h3zdxs4.ts(46,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334845
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_level: number = 0;\n  let paren_level_max_level_length: number = 0;\n  let paren_level_max_level_length_index: number = 0;\n  let paren_level_max_level_length_count: number = 0;\n  let paren_level_max_level_length_index_count: number = 0;\n  let paren_level_max_level_length_count_index: number = 0;\n  let paren_level_max_level_length_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_count_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_count_count_count_index: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprc26tbtf.ts(51,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n      paren_level[paren_level_count] += 1;\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <1 empty item>,\n  NaN,\n  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpqpibrl0z.js:28:12)\n    at Object.<anonymous> (/tmp/tmpqpibrl0z.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty item>, NaN, NaN, NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n    } else if (paren_string[i] === ')') {\n      paren_level--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp21f5nqpz.js:23:12)\n    at Object.<anonymous> (/tmp/tmp21f5nqpz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max = Math.max(paren_level_max, paren_level_count);\n      paren_level_count = 0;\n    } else if (char === ')') {\n      paren_level_count++;\n      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max = 0;\n    } else {\n      paren_level_count++;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <1 empty item>,\n  1,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp8cwhhxox.js:32:12)\n    at Object.<anonymous> (/tmp/tmp8cwhhxox.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty item>, 1, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6qdc3lkf.js:23:12)\n    at Object.<anonymous> (/tmp/tmp6qdc3lkf.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level.length - 1]++;\n    } else if (char === ' ') {\n      paren_level_count--;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n  3,\n  -1,\n  0,\n  4,\n  -1,\n  -3,\n  -2,\n  1,\n  -1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpxxvvqi4g.js:30:12)\n    at Object.<anonymous> (/tmp/tmpxxvvqi4g.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     0,  2,  3, -1, 0,\n     4, -1, -3, -2, 1,\n    -1,  0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  const paren_level_max_count: number[] = [];\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count_index2 = 0;\n  let paren_level_max_count_index3 = 0;\n  let paren_level_max_count_index4 = 0;\n  let paren_level_max_count_index5 = 0;\n  let paren_level_max_count_index6 = 0;\n  let paren_level_max_count_index7 = 0;\n  let paren_level_max_count_index8 = 0;\n  let paren_level_max_count_index9 = 0;\n  let paren_level_max_count_index10 = 0;\n  let paren_level_max_count_index11 = 0;\n  let paren_level_max_count_index12 = 0;\n  let paren_level_max_count_index13 = 0;\n  let paren_level_max_count_index14 = 0;\n  let paren_level_max_count_index15 = 0;\n  let paren_level_max_count_index16 = 0;\n  let paren_level_max_count_index17 = 0;\n  let paren_level_max_count_index18 = 0;\n  let paren_level_max_count_index19 = 0;\n  let paren_level_max_count_index20 = 0;\n  let paren_level_max_count_index21 = 0;\n  let paren_level_max_count_index22 = 0;\n  let paren_level_max_count_index23 = 0;\n  let paren_level_max_count_index24 = 0;\n  let paren_level_max_count_index25 = 0;\n  let paren_level_max_count_index26 = 0;\n  let paren_level_max_count_index27 = 0;\n  let paren_level_max_count_index28 = 0;\n  let paren_level_max_count_index29 = 0;\n  let paren_level_max_count_index30 = 0;\n  let paren_level_max_count_index31 = 0;\n  let paren_level_max_count_index32 = 0;\n  let paren_level_max_count_index33 = 0;\n  let paren_level_max_count_index34 = 0;\n  let paren_level_max_count_index35 = 0;\n  let paren_level_max_count_index36 = 0;\n  let paren_level_max_count_index37 = 0;\n  let paren_level_max_count_index38 = 0;\n  let paren_level_max_count_index39 = 0;\n  let paren_level_max_count_index40 = 0;\n  let paren_level_max_count_index41 = 0;\n  let paren_level_max_count_index42 = 0;\n  let paren_level_max_count_index43 = 0;\n  let paren_level_max_count_index44 = 0;\n  let paren_level_max_count_index45 = 0;\n  let paren_level_max_count_index46 = 0;\n  let paren_level_max_count_index47 = 0;\n  let paren_level_max_count_index48 = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpazht8nak.ts(71,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(char);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count < 0) {\n        paren_level_count = 0;\n        paren_level.pop();\n      }\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_max);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpkrld0ysj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpkrld0ysj.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n    } else if (paren_string[i] === ')') {\n      paren_level--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp21f5nqpz.js:23:12)\n    at Object.<anonymous> (/tmp/tmp21f5nqpz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(-1);\n  const result = [];\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (levels[j] >= 0) {\n        levels[j]++;\n      } else {\n        result.push(levels[j]);\n        levels[j] = 1;\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpcflpjsjw.js:28:12)\n    at Object.<anonymous> (/tmp/tmpcflpjsjw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1, -1, -1, -1, -1,\n    -1, -1, -1, -1, -1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max = Math.max(paren_level_max, paren_level_count);\n      paren_level_count = 0;\n    } else if (char === ')') {\n      paren_level_count++;\n      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max = 0;\n    } else {\n      paren_level_count = 0;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <1 empty item>,\n  1,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmprwyi6sbp.js:32:12)\n    at Object.<anonymous> (/tmp/tmprwyi6sbp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty item>, 1, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(-1);\n  let level = 0;\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    if (group.length <= levels[level]) {\n      levels[level] = group.length;\n      level++;\n    }\n  }\n  return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpyurzk6vh.js:23:12)\n    at Object.<anonymous> (/tmp/tmpyurzk6vh.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1, -1, -1, -1, -1,\n    -1, -1, -1, -1, -1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsqqp2xht.js:29:12)\n    at Object.<anonymous> (/tmp/tmpsqqp2xht.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpalsftb44.js:26:12)\n    at Object.<anonymous> (/tmp/tmpalsftb44.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.shift();\n        paren_level.shift();\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpzqvai4hn.js:29:12)\n    at Object.<anonymous> (/tmp/tmpzqvai4hn.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 0, 0,\n    1, 2, 1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnodz2hz1.js:29:12)\n    at Object.<anonymous> (/tmp/tmpnodz2hz1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level);\n  for (let i = 0; i < levels.length; i++) {\n    levels[i] = 0;\n  }\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        levels[levels.length - 1]++;\n      } else if (group[j] === ')') {\n        levels[levels.length - 1]--;\n      }\n    }\n  }\n  return levels.filter(l => l > 0).length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpw8873p84.ts(23,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnodz2hz1.js:29:12)\n    at Object.<anonymous> (/tmp/tmpnodz2hz1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_count -= 1;\n      if (paren_count === 0) {\n        paren_stack.push(paren_count);\n        paren_level_count += 1;\n      }\n    } else if (char === ' ') {\n      if (paren_count === 0) {\n        paren_stack.push(paren_count);\n        paren_level_count += 1;\n      }\n    } else {\n      paren_count -= 1;\n      if (paren_count === 0) {\n        paren_stack.push(paren_count);\n        paren_level_count += 1;\n      }\n    }\n  }\n  while (paren_stack.length > 0) {\n    paren_level[paren_stack.pop()] = paren_level_count;\n    paren_level_count += 1;\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp61h7hz5n.ts(14,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmp61h7hz5n.ts(19,26): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmp61h7hz5n.ts(24,26): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmp61h7hz5n.ts(30,26): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n",
      "timestamp": 1660334849
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8ll7jobm.ts(75,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7tkrib79.js:26:12)\n    at Object.<anonymous> (/tmp/tmp7tkrib79.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_count += 1;\n      paren_level_max =\n        paren_level_count > paren_level_max_index ? paren_level_count : paren_level_max_index;\n      paren_level_max_index = paren_level_max;\n      paren_count += 1;\n    } else if (char === ')') {\n      paren_count -= 1;\n      if (paren_count === 0) {\n        paren_level[paren_level_max_index] += 1;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptaltpgcu.ts(16,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        levels[groups.length - 1 - i] += 1;\n      } else if (group[j] === ')') {\n        levels[groups.length - 1 - i] -= 1;\n      }\n    }\n  }\n  return levels.filter(l => l > 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpr4ygm1zc.js:26:12)\n    at Object.<anonymous> (/tmp/tmpr4ygm1zc.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_count: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_string: string = '';\n  let paren_level_max_string_index: number = 0;\n  let paren_level_max_string_index2: number = 0;\n  let paren_level_max_string_index3: number = 0;\n  let paren_level_max_string_index4: number = 0;\n  let paren_level_max_string_index5: number = 0;\n  let paren_level_max_string_index6: number = 0;\n  let paren_level_max_string_index7: number = 0;\n  let paren_level_max_string_index8: number = 0;\n  let paren_level_max_string_index9: number = 0;\n  let paren_level_max_string_index10: number = 0;\n  let paren_level_max_string_index11: number = 0;\n  let paren_level_max_string_index12: number = 0;\n  let paren_level_max_string_index13: number = 0;\n  let paren_level_max_string_index14: number = 0;\n  let paren_level_max_string_index15: number = 0;\n  let paren_level_max_string_index16: number = 0;\n  let paren_level_max_string_index17: number = 0;\n  let paren_level_max_string_index18: number = 0;\n  let paren_level_max_string_index19: number = 0;\n  let paren_level_max_string_index20: number = 0;\n  let paren_level_max_string_index21: number = 0;\n  let paren_level_max_string_index22: number = 0;\n  let paren_level_max_string_index23: number = 0;\n  let paren_level_max_string_index24: number = 0;\n  let paren_level_max_string_index25: number = 0;\n  let paren_level_max_string_index26: number = 0;\n  let paren_level_max_string_index27: number = 0;\n  let paren_level_max_string_index28: number = 0;\n  let paren_level_max_string_index29: number = 0;\n  let paren_level_max_string_index30: number = 0;\n  let paren_level_max_string_index31: number = 0;\n  let paren_level_max_string_index32: number = 0;\n  let paren_level_max_string_index33: number = 0;\n  let paren_level_max_string_index34: number = 0;\n  let paren_level_max_string_index35: number = 0;\n  let paren_level_max_string_index36: number = 0;\n  let paren_level_max_string_index37: number = 0;\n  let paren_level_max_string_index38: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp43coesfn.ts(63,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (paren_string[i] === ')') {\n      if (paren_level_count < paren_level_max) {\n        paren_level_count++;\n      }\n      paren_level_count--;\n      paren_level.push(paren_level_count);\n      paren_stack.splice(paren_stack.length - 1, 1);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpj2oxux6r.js:30:12)\n    at Object.<anonymous> (/tmp/tmpj2oxux6r.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_depth = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_depth);\n      paren_depth++;\n    } else if (char === ')') {\n      paren_depth = Math.max(paren_stack.pop(), paren_depth);\n    }\n  }\n  return paren_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpl9j76b2s.ts(18,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpcvczeox6.js:29:12)\n    at Object.<anonymous> (/tmp/tmpcvczeox6.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_level_index: number[] = [];\n  let paren_level_length: number[] = [];\n  let paren_level_length_count: number[] = [];\n  let paren_level_length_index: number[] = [];\n  let paren_level_length_count2: number[] = [];\n  let paren_level_length_index2: number[] = [];\n  let paren_level_length_count3: number[] = [];\n  let paren_level_length_index3: number[] = [];\n  let paren_level_length_count4: number[] = [];\n  let paren_level_length_index4: number[] = [];\n  let paren_level_length_count5: number[] = [];\n  let paren_level_length_index5: number[] = [];\n  let paren_level_length_count6: number[] = [];\n  let paren_level_length_index6: number[] = [];\n  let paren_level_length_count7: number[] = [];\n  let paren_level_length_index7: number[] = [];\n  let paren_level_length_count8: number[] = [];\n  let paren_level_length_index8: number[] = [];\n  let paren_level_length_count9: number[] = [];\n  let paren_level_length_index9: number[] = [];\n  let paren_level_length_count10: number[] = [];\n  let paren_level_length_index10: number[] = [];\n  let paren_level_length_count11: number[] = [];\n  let paren_level_length_index11: number[] = [];\n  let paren_level_length_count12: number[] = [];\n  let paren_level_length_index12: number[] = [];\n  let paren_level_length_count13: number[] = [];\n  let paren_level_length_index13: number[] = [];\n  let paren_level_length_count14: number[] = [];\n  let paren_level_length_index14: number[] = [];\n  let paren_level_length_count15: number[] = [];\n  let paren_level_length_index15: number[] = [];\n  let paren_level_length_count16: number[] = [];\n  let paren_level_length_index16: number[] = [];\n  let paren_level_length_count17: number[] = [];\n  let paren_level_length_index17: number[] = [];\n  let paren_level_length_count18: number[] = [];\n  let paren_level_length_index18: number[] = [];\n  let paren_level_length_count19: number[] = [];\n  let paren_level_length_index19: number[] = [];\n  let paren_level_length_count20: number[] = [];\n  let paren_level_length_index20\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpci2j82ww.ts(63,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334849
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  let paren_level = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n    } else if (paren_string[i] === ')') {\n      paren_level--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfdjhwa1i.ts(11,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpfdjhwa1i.ts(17,3): error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334849
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_level_index = 0;\n  let paren_level_counts_index = 0;\n  let paren_level_char_count = 0;\n  let paren_level_char_index = 0;\n  let paren_level_char = '';\n  let paren_level_char_next = '';\n  let paren_level_char_next_index = 0;\n  let paren_level_char_next_count = 0;\n  let paren_level_char_next_count_index = 0;\n  let paren_level_char_next_count_index2 = 0;\n  let paren_level_char_next_count_index3 = 0;\n  let paren_level_char_next_count_index4 = 0;\n  let paren_level_char_next_count_index5 = 0;\n  let paren_level_char_next_count_index6 = 0;\n  let paren_level_char_next_count_index7 = 0;\n  let paren_level_char_next_count_index8 = 0;\n  let paren_level_char_next_count_index9 = 0;\n  let paren_level_char_next_count_index10 = 0;\n  let paren_level_char_next_count_index11 = 0;\n  let paren_level_char_next_count_index12 = 0;\n  let paren_level_char_next_count_index13 = 0;\n  let paren_level_char_next_count_index14 = 0;\n  let paren_level_char_next_count_index15 = 0;\n  let paren_level_char_next_count_index16 = 0;\n  let paren_level_char_next_count_index17 = 0;\n  let paren_level_char_next_count_index18 = 0;\n  let paren_level_char_next_count_index19 = 0;\n  let paren_level_char_next_count_index20 = 0;\n  let paren_level_char_next_count_index21 = 0;\n  let paren_level_char_next_count_index22 = 0;\n  let paren_level_char_next_count_index23 = 0;\n  let paren_level_char_next_count_index24 = 0;\n  let paren_level_char_next_count_index25 = 0;\n  let paren_level_char_next_count_index26 = 0;\n  let paren_level_char_next_count_index27 = 0;\n  let paren_level_char_next_count_index28 = 0;\n  let paren_level_char_next_count_index29 = 0;\n  let paren_level_char_next_count_index30 = 0;\n  let paren_level_char_next_count_index31 = 0;\n  let paren_level_char_next_count_index32 = 0;\n  let paren_level_char_next_count_index33 = 0;\n  let paren_level_char_next_count_index34 = 0;\n  let paren_level_char_next_count_index35 = 0;\n  let paren_level_char_next_count_index36 = 0;\n  let paren_level_char_next_count_index37 = 0;\n  let paren_level_char_next_count_index38 = 0;\n  let paren_level_char_next_count_index\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfpoeruvd.ts(68,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_level.push(paren_stack.pop());\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  2,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp3l5cevaq.js:29:12)\n    at Object.<anonymous> (/tmp/tmp3l5cevaq.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 0, 0, 1, 0, 0,\n    0, 2, 0, 0, 0, 0,\n    0, 0, 0, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7tkrib79.js:26:12)\n    at Object.<anonymous> (/tmp/tmp7tkrib79.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  const paren_level_max_count: number[] = [];\n  const paren_level_max_count_index: number[] = [];\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgv40cwis.ts(84,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334849
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_count: number;\n  let paren_level_max_string: string;\n  let paren_level_max_string_index: number;\n  let paren_level_max_string_index2: number;\n  let paren_level_max_string_index3: number;\n  let paren_level_max_string_index4: number;\n  let paren_level_max_string_index5: number;\n  let paren_level_max_string_index6: number;\n  let paren_level_max_string_index7: number;\n  let paren_level_max_string_index8: number;\n  let paren_level_max_string_index9: number;\n  let paren_level_max_string_index10: number;\n  let paren_level_max_string_index11: number;\n  let paren_level_max_string_index12: number;\n  let paren_level_max_string_index13: number;\n  let paren_level_max_string_index14: number;\n  let paren_level_max_string_index15: number;\n  let paren_level_max_string_index16: number;\n  let paren_level_max_string_index17: number;\n  let paren_level_max_string_index18: number;\n  let paren_level_max_string_index19: number;\n  let paren_level_max_string_index20: number;\n  let paren_level_max_string_index21: number;\n  let paren_level_max_string_index22: number;\n  let paren_level_max_string_index23: number;\n  let paren_level_max_string_index24: number;\n  let paren_level_max_string_index25: number;\n  let paren_level_max_string_index26: number;\n  let paren_level_max_string_index27: number;\n  let paren_level_max_string_index28: number;\n  let paren_level_max_string_index29: number;\n  let paren_level_max_string_index30: number;\n  let paren_level_max_string_index31: number;\n  let paren_level_max_string_index32: number;\n  let paren_level_max_string_index33: number;\n  let paren_level_max_string_index34: number;\n  let paren_level_max_string_index35: number;\n  let paren_level_max_string_index36: number;\n  let paren_level_max_string_index37: number;\n  let paren_level_max_string_index38: number;\n  let paren_level_max_string_index39: number;\n  let paren_level_max_string_index40: number;\n  let paren_level_max_string_index41: number;\n  let paren_level_max_string_index42: number;\n  let paren_level_max_string_index43: number;\n  let paren_level_max_string_index44: number;\n  let paren_level_max_string_index45: number;\n  let paren\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpguy_bm7l.ts(71,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n      if (paren_count < 0) {\n        throw new Error(`Unbalanced parenthesis at index ${i}`);\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpa5h3_t06.js:27:12)\n    at Object.<anonymous> (/tmp/tmpa5h3_t06.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_level_index: number[] = [];\n  let paren_level_length: number[] = [];\n  let paren_level_length_count: number[] = [];\n  let paren_level_length_index: number[] = [];\n  let paren_level_length_counts: number[] = [];\n  let paren_level_length_counts_index: number[] = [];\n  let paren_level_length_counts_length: number[] = [];\n  let paren_level_length_counts_length_index: number[] = [];\n  let paren_level_length_counts_length_count: number[] = [];\n  let paren_level_length_counts_length_count_index: number[] = [];\n  let paren_level_length_counts_length_counts_index: number[] = [];\n  let paren_level_length_counts_length_counts_length: number[] = [];\n  let paren_level_length_counts_length_counts_length_index: number[] = [];\n  let paren_level_length_counts_length_counts_length_count: number[] = [];\n  let paren_level_length_counts_length_counts_length_count_index: number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_index: number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length: number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_index: number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_count: number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_count_index: number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_counts_index: number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_counts_length: number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_counts_length_index: number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_counts_length_count: number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_counts_length_count_index: number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_counts_length_counts_length: number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_counts_length_counts_length_index: number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_counts_length_counts_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwg68nmjf.ts(49,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7tkrib79.js:26:12)\n    at Object.<anonymous> (/tmp/tmp7tkrib79.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpd_khfq3d.js:24:12)\n    at Object.<anonymous> (/tmp/tmpd_khfq3d.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n    }\n    if (paren_count === 0) {\n      paren_stack.push(paren_count);\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphohe1qc3.js:25:12)\n    at Object.<anonymous> (/tmp/tmphohe1qc3.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      levels[group[j]] += 1;\n    }\n  }\n  return levels.slice(0, max_level);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpm63u_x9a.js:21:12)\n    at Object.<anonymous> (/tmp/tmpm63u_x9a.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = 0;\n      paren_level_count = 0;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level_max = Math.max(paren_level_max, paren_level_count);\n    }\n    paren_level_count += 1;\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp98bdo8md.js:29:12)\n    at Object.<anonymous> (/tmp/tmp98bdo8md.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level_count] = paren_level_max;\n      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '-1': 2,\n  '-10': 11,\n  '-11': 12,\n  '-12': 12,\n  '-2': 3,\n  '-3': 3,\n  '-4': 6,\n  '-5': 6,\n  '-6': 6,\n  '-7': 7,\n  '-8': 10,\n  '-9': 10\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpmiprh0sw.js:30:12)\n    at Object.<anonymous> (/tmp/tmpmiprh0sw.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '-1': 2,   '-2': 3,\n    '-3': 3,   '-4': 6,\n    '-5': 6,   '-6': 6,\n    '-7': 7,   '-8': 10,\n    '-9': 10,  '-10': 11,\n    '-11': 12, '-12'",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n      paren_level[paren_level_count] = paren_level_count;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count < 0) {\n        throw new Error(`Unbalanced parenthesis at index ${i}`);\n      }\n      paren_level[paren_level_count] = paren_level_count;\n      if (paren_level_count === 0) {\n        paren_level_max = Math.max(...paren_level);\n      }\n    } else if (char === ' ') {\n      if (paren_level_count === 0) {\n        throw new Error(`Unbalanced parenthesis at index ${i}`);\n      }\n      paren_level[paren_level_count] = paren_level_count;\n    }\n  }\n  return paren_level_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf0fl4akn.ts(33,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp154sccp6.js:24:12)\n    at Object.<anonymous> (/tmp/tmp154sccp6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n      paren_level = paren_stack.pop();\n    } else {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkymv8rv2.ts(13,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpkymv8rv2.ts(17,7): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpkymv8rv2.ts(18,7): error TS2588: Cannot assign to 'paren_level' because it is a constant.\n../../../../tmp/tmpkymv8rv2.ts(20,7): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count--;\n      paren_level.pop();\n      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp4nf9w72t.js:29:12)\n    at Object.<anonymous> (/tmp/tmp4nf9w72t.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_index: number[] = [];\n  let paren_level_max_value: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3o9eriif.ts(66,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n        paren_level_count += 1;\n      }\n    } else if (paren_string[i] === ' ') {\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n        paren_level_count += 1;\n      }\n    }\n  }\n  if (paren_level_count > 0) {\n    paren_level.push(paren_level_count);\n  }\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > paren_level_max) {\n      paren_level_max = paren_level[i];\n      paren_level_max_index = i;\n    }\n  }\n  const result: number[] = [];\n  for (let i = 0; i < paren_stack.length; i++) {\n    result.push(paren_stack[i]);\n  }\n  result.push(paren_level_max);\n  result.push(paren_level_max_index);\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  1,\n  2,\n  3,\n  1,\n  1,\n  2,\n  3,\n  2,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpekuc3bey.js:51:12)\n    at Object.<anonymous> (/tmp/tmpekuc3bey.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 1, 2, 3,\n    1, 1, 2, 3, 2, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max--;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp29hyhjnp.js:28:12)\n    at Object.<anonymous> (/tmp/tmp29hyhjnp.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp24q11bi4.js:30:12)\n    at Object.<anonymous> (/tmp/tmp24q11bi4.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count++;\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpitrds29b.js:29:12)\n    at Object.<anonymous> (/tmp/tmpitrds29b.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334853
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n      paren_level[paren_level_count] = paren_level_count;\n      paren_level_max = Math.max(paren_level_max, paren_level_count);\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level_count] = paren_level_count;\n      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp8_5jid4j.js:32:12)\n    at Object.<anonymous> (/tmp/tmp8_5jid4j.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2, 3 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334853
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level.length - 1]++;\n    } else if (char === ' ') {\n      paren_level_count--;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n  3,\n  -1,\n  0,\n  4,\n  -1,\n  -3,\n  -2,\n  1,\n  -1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpxxvvqi4g.js:30:12)\n    at Object.<anonymous> (/tmp/tmpxxvvqi4g.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     0,  2,  3, -1, 0,\n     4, -1, -3, -2, 1,\n    -1,  0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.pop();\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp332_th56.ts(11,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmp332_th56.ts(20,3): error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7tkrib79.js:26:12)\n    at Object.<anonymous> (/tmp/tmp7tkrib79.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5nmauo30.js:25:12)\n    at Object.<anonymous> (/tmp/tmp5nmauo30.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level_max = Math.max(...paren_level);\n      }\n      paren_level.splice(paren_level.indexOf(paren_level_count), 1);\n    }\n  }\n  return paren_level_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpl6wb46pg.ts(24,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpil88ji8i.js:30:12)\n    at Object.<anonymous> (/tmp/tmpil88ji8i.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334853
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n    } else if (char === ')') {\n      paren_level.pop();\n      paren_stack.push(paren_level.length);\n    } else if (char === ' ') {\n      paren_level[paren_stack.pop()] += 1;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  1,\n  1,\n  1,\n  2,\n  3,\n  3,\n  2,\n  2,\n  3,\n  4,\n  5,\n  5,\n  4,\n  4,\n  4,\n  4,\n  4,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpkzdpmv24.js:28:12)\n    at Object.<anonymous> (/tmp/tmpkzdpmv24.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 1, 1, 1, 2,\n    3, 3, 2, 2, 3, 4, 5,\n    5, 4, 4, 4, 4, 4, 3\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334853
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_level_max_count: number;\n  let paren_level_max_level: number;\n  let paren_level_max_level_length: number;\n  let paren_level_max_level_length_index: number;\n  let paren_level_max_level_length_index_in_paren_stack: number;\n  let paren_level_max_level_length_index_in_paren_stack_count: number;\n  let paren_level_max_level_length_index_in_paren_stack_count2: number;\n  let paren_level_max_level_length_index_in_paren_stack_count3: number;\n  let paren_level_max_level_length_index_in_paren_stack_count4: number;\n  let paren_level_max_level_length_index_in_paren_stack_count5: number;\n  let paren_level_max_level_length_index_in_paren_stack_count6: number;\n  let paren_level_max_level_length_index_in_paren_stack_count7: number;\n  let paren_level_max_level_length_index_in_paren_stack_count8: number;\n  let paren_level_max_level_length_index_in_paren_stack_count9: number;\n  let paren_level_max_level_length_index_in_paren_stack_count10: number;\n  let paren_level_max_level_length_index_in_paren_stack_count11: number;\n  let paren_level_max_level_length_index_in_paren_stack_count12: number;\n  let paren_level_max_level_length_index_in_paren_stack_count13: number;\n  let paren_level_max_level_length_index_in_paren_stack_count14: number;\n  let paren_level_max_level_length_index_in_paren_stack_count15: number;\n  let paren_level_max_level_length_index_in_paren_stack_count16: number;\n  let paren_level_max_level_length_index_in_paren_stack_count17: number;\n  let paren_level_max_level_length_index_in_paren_stack_count18: number;\n  let paren_level_max_level_length_index_in_paren_stack_count19: number;\n  let paren_level_max_level_length_index_in_paren_stack_count20: number;\n  let paren_level_max_level_length_index_in_paren_stack_count21: number;\n  let paren_level_max_level_length_index_in_paren_stack_count22: number;\n  let paren_level_max_level_length_index_in_paren_stack_count23: number;\n  let paren_level_max_level_length_index_in_paren_stack_count24: number;\n  let paren_level_max_level_length_index_in_paren_stack_count25: number;\n  let paren_level_max_level_length_index_in_paren_stack_count26: number;\n  let paren_level_max_level_length_index_in_paren_stack_count27: number;\n  let paren_level_max_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu7qukvnl.ts(54,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334853
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_count);\n        paren_count++;\n      }\n    } else if (char === ' ') {\n      if (paren_level_count === 0) {\n        paren_level.push(paren_count);\n        paren_count++;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp1l7959jx.js:36:12)\n    at Object.<anonymous> (/tmp/tmp1l7959jx.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334853
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6qxwnjrw.js:30:12)\n    at Object.<anonymous> (/tmp/tmp6qxwnjrw.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0, 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334853
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[] = [];\n    const paren_level_count: number[] = [];\n    const paren_level_max_count: number[] = [];\n    const paren_level_max_count_index: number[] = [];\n    const paren_level_max_count_index2: number[] = [];\n    const paren_level_max_count_index3: number[] = [];\n    const paren_level_max_count_index4: number[] = [];\n    const paren_level_max_count_index5: number[] = [];\n    const paren_level_max_count_index6: number[] = [];\n    const paren_level_max_count_index7: number[] = [];\n    const paren_level_max_count_index8: number[] = [];\n    const paren_level_max_count_index9: number[] = [];\n    const paren_level_max_count_index10: number[] = [];\n    const paren_level_max_count_index11: number[] = [];\n    const paren_level_max_count_index12: number[] = [];\n    const paren_level_max_count_index13: number[] = [];\n    const paren_level_max_count_index14: number[] = [];\n    const paren_level_max_count_index15: number[] = [];\n    const paren_level_max_count_index16: number[] = [];\n    const paren_level_max_count_index17: number[] = [];\n    const paren_level_max_count_index18: number[] = [];\n    const paren_level_max_count_index19: number[] = [];\n    const paren_level_max_count_index20: number[] = [];\n    const paren_level_max_count_index21: number[] = [];\n    const paren_level_max_count_index22: number[] = [];\n    const paren_level_max_count_index23: number[] = [];\n    const paren_level_max_count_index24: number[] = [];\n    const paren_level_max_count_index25: number[] = [];\n    const paren_level_max_count_index26: number[] = [];\n    const paren_level_max_count_index27: number[] = [];\n    const paren_level_max_count_index28: number[] = [];\n    const paren_level_max_count_index29: number[] = [];\n    const paren_level_max_count_index30: number[] = [];\n    const paren_level_max_count_index31: number[] = [];\n    const paren_level_max_count_index32: number[] = [];\n    const paren_level_max_count_index33: number[] = [];\n    const paren_level_max_count_index34: number[] = [];\n    const paren_level_max_count_index35: number[] = [];\n    const paren_level_max_count_index36: number[] = [];\n    const paren_level_max_count_index37: number[] = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz5ydg1d7.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max_count = 1;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n        paren_level_max_count = Math.max(paren_level_max_count, paren_level[paren_level.length - 1]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpqnm27xgd.js:31:12)\n    at Object.<anonymous> (/tmp/tmpqnm27xgd.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpstm_p814.js:28:12)\n    at Object.<anonymous> (/tmp/tmpstm_p814.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjrr8k1q5.ts(70,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(char);\n      paren_level_count += 1;\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n        paren_level_max_index = i;\n        paren_level_max_count = 0;\n      }\n    } else if (char === ')') {\n      paren_level[paren_level_max_count] += 1;\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level_max_count += 1;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpl5h1l29g.js:37:12)\n    at Object.<anonymous> (/tmp/tmpl5h1l29g.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN, NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334856
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  const paren_level_max: number[] = [];\n  let paren_level_index = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_value = 0;\n  let paren_level_max_index2 = 0;\n  let paren_level_max_count2 = 0;\n  let paren_level_max_value2 = 0;\n  let paren_level_max_index3 = 0;\n  let paren_level_max_count3 = 0;\n  let paren_level_max_value3 = 0;\n  let paren_level_max_index4 = 0;\n  let paren_level_max_count4 = 0;\n  let paren_level_max_value4 = 0;\n  let paren_level_max_index5 = 0;\n  let paren_level_max_count5 = 0;\n  let paren_level_max_value5 = 0;\n  let paren_level_max_index6 = 0;\n  let paren_level_max_count6 = 0;\n  let paren_level_max_value6 = 0;\n  let paren_level_max_index7 = 0;\n  let paren_level_max_count7 = 0;\n  let paren_level_max_value7 = 0;\n  let paren_level_max_index8 = 0;\n  let paren_level_max_count8 = 0;\n  let paren_level_max_value8 = 0;\n  let paren_level_max_index9 = 0;\n  let paren_level_max_count9 = 0;\n  let paren_level_max_value9 = 0;\n  let paren_level_max_index10 = 0;\n  let paren_level_max_count10 = 0;\n  let paren_level_max_value10 = 0;\n  let paren_level_max_index11 = 0;\n  let paren_level_max_count11 = 0;\n  let paren_level_max_value11 = 0;\n  let paren_level_max_index12 = 0;\n  let paren_level_max_count12 = 0;\n  let paren_level_max_value12 = 0;\n  let paren_level_max_index13 = 0;\n  let paren_level_max_count13 = 0;\n  let paren_level_max_value13 = 0;\n  let paren_level_max_index14 = 0;\n  let paren_level_max_count14 = 0;\n  let paren_level_max_value14 = 0;\n  let paren_level_max_index15 = 0;\n  let paren_level_max_count15 = 0;\n  let paren_level_max_value15 = 0;\n  let paren_level_max_index16 = 0;\n  let paren_level_max_count16 = 0;\n  let paren_level_max_value16 = 0;\n  let paren_level_max_index17 = 0;\n  let paren_level_max_count17 = 0;\n  let paren_level_max_value17 = 0;\n  let paren_level_max_index18 = 0;\n  let paren_level_max_count18 = 0;\n  let paren_level_max_value\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpavf22s45.ts(77,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334855
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_index: number[] = [];\n  let paren_level_max_value: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3o9eriif.ts(66,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level.length - 1]++;\n      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n  3,\n  0,\n  1,\n  5,\n  1,\n  0,\n  1,\n  4,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp8_5ksy66.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8_5ksy66.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 2, 3, 0, 1,\n    5, 1, 0, 1, 4,\n    2, 3\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334856
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6qdc3lkf.js:23:12)\n    at Object.<anonymous> (/tmp/tmp6qdc3lkf.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptwm61jnu.ts(12,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmptwm61jnu.ts(18,3): error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334856
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n      paren_level = paren_stack.pop();\n    } else {\n      paren_count = paren_stack.pop();\n      paren_level = paren_stack.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnf228jl5.ts(18,7): error TS2588: Cannot assign to 'paren_level' because it is a constant.\n../../../../tmp/tmpnf228jl5.ts(21,7): error TS2588: Cannot assign to 'paren_level' because it is a constant.\n",
      "timestamp": 1660334856
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n      const current_level = paren_level.pop();\n      const current_level_parens = paren_stack.pop();\n      if (current_level_parens === current_level) {\n        paren_level_count--;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpagxuz_qa.ts(18,11): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.\n",
      "timestamp": 1660334856
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6qdc3lkf.js:23:12)\n    at Object.<anonymous> (/tmp/tmp6qdc3lkf.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n      paren_level_count -= 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8gft5793.ts(14,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n",
      "timestamp": 1660334856
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsqqp2xht.js:29:12)\n    at Object.<anonymous> (/tmp/tmpsqqp2xht.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (paren_string[i] === ')') {\n      paren_level[paren_stack.length - 1]++;\n      paren_stack.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  6,\n  2,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpm3l0v23u.js:24:12)\n    at Object.<anonymous> (/tmp/tmpm3l0v23u.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4, 6, 2, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const level_count = paren_stack.pop();\n      if (level_count === undefined) {\n        throw new Error(\n          `Unmatched closing parenthesis at index ${i}: ${paren_string}`\n        );\n      }\n      paren_level[level_count] = paren_level[level_count] - 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpqncr2708.js:28:12)\n    at Object.<anonymous> (/tmp/tmpqncr2708.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1, -1, -1, -1, -1,\n    -1, -1, -1, -1, -1,\n    -1, -1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334856
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsqqp2xht.js:29:12)\n    at Object.<anonymous> (/tmp/tmpsqqp2xht.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsqqp2xht.js:29:12)\n    at Object.<anonymous> (/tmp/tmpsqqp2xht.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6qdc3lkf.js:23:12)\n    at Object.<anonymous> (/tmp/tmp6qdc3lkf.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_level: number[] = [];\n  let paren_level_max_level_length: number[] = [];\n  let paren_level_max_level_length_count: number[] = [];\n  let paren_level_max_level_length_count2: number[] = [];\n  let paren_level_max_level_length_count3: number[] = [];\n  let paren_level_max_level_length_count4: number[] = [];\n  let paren_level_max_level_length_count5: number[] = [];\n  let paren_level_max_level_length_count6: number[] = [];\n  let paren_level_max_level_length_count7: number[] = [];\n  let paren_level_max_level_length_count8: number[] = [];\n  let paren_level_max_level_length_count9: number[] = [];\n  let paren_level_max_level_length_count10: number[] = [];\n  let paren_level_max_level_length_count11: number[] = [];\n  let paren_level_max_level_length_count12: number[] = [];\n  let paren_level_max_level_length_count13: number[] = [];\n  let paren_level_max_level_length_count14: number[] = [];\n  let paren_level_max_level_length_count15: number[] = [];\n  let paren_level_max_level_length_count16: number[] = [];\n  let paren_level_max_level_length_count17: number[] = [];\n  let paren_level_max_level_length_count18: number[] = [];\n  let paren_level_max_level_length_count19: number[] = [];\n  let paren_level_max_level_length_count20: number[] = [];\n  let paren_level_max_level_length_count21: number[] = [];\n  let paren_level_max_level_length_count22: number[] = [];\n  let paren_level_max_level_length_count23: number[] = [];\n  let paren_level_max_level_length_count24: number[] = [];\n  let paren_level_max_level_length_count25: number[] = [];\n  let paren_level_max_level_length_count26: number[] = [];\n  let paren_level_max_level_length_count27: number[] = [];\n  let paren_level_max_level_length_count28: number[] = [];\n  let paren_level_max_level_length_count29: number[] = [];\n  let paren_level_max_level_length_count30: number[] = [];\n  let paren_level_max_level_length_count31: number[] = [];\n  let paren_level_max_level_length_count32: number[] = [];\n  let paren_level_max_level_length_count33\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpviq2qfsy.ts(57,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334856
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n        paren_level_max = Math.max(...paren_level);\n        paren_level_max_count = paren_level.indexOf(paren_level_max);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpa_v6is1q.js:33:12)\n    at Object.<anonymous> (/tmp/tmpa_v6is1q.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334856
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count2: number[] = [];\n  let paren_level_max_count3: number[] = [];\n  let paren_level_max_count4: number[] = [];\n  let paren_level_max_count5: number[] = [];\n  let paren_level_max_count6: number[] = [];\n  let paren_level_max_count7: number[] = [];\n  let paren_level_max_count8: number[] = [];\n  let paren_level_max_count9: number[] = [];\n  let paren_level_max_count10: number[] = [];\n  let paren_level_max_count11: number[] = [];\n  let paren_level_max_count12: number[] = [];\n  let paren_level_max_count13: number[] = [];\n  let paren_level_max_count14: number[] = [];\n  let paren_level_max_count15: number[] = [];\n  let paren_level_max_count16: number[] = [];\n  let paren_level_max_count17: number[] = [];\n  let paren_level_max_count18: number[] = [];\n  let paren_level_max_count19: number[] = [];\n  let paren_level_max_count20: number[] = [];\n  let paren_level_max_count21: number[] = [];\n  let paren_level_max_count22: number[] = [];\n  let paren_level_max_count23: number[] = [];\n  let paren_level_max_count24: number[] = [];\n  let paren_level_max_count25: number[] = [];\n  let paren_level_max_count26: number[] = [];\n  let paren_level_max_count27: number[] = [];\n  let paren_level_max_count28: number[] = [];\n  let paren_level_max_count29: number[] = [];\n  let paren_level_max_count30: number[] = [];\n  let paren_level_max_count31: number[] = [];\n  let paren_level_max_count32: number[] = [];\n  let paren_level_max_count33: number[] = [];\n  let paren_level_max_count34: number[] = [];\n  let paren_level_max_count35: number[] = [];\n  let paren_level_max_count36: number[] = [];\n  let paren_level_max_count37: number[] = [];\n  let paren_level_max_count38: number[] = [];\n  let paren_level_max_count39: number[] = [];\n  let paren_level_max_count40: number[] = [];\n  let \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpy8crv9q7.ts(52,9): error TS1005: ',' expected.\n../../../../tmp/tmpy8crv9q7.ts(63,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334856
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7yhwns10.js:26:12)\n    at Object.<anonymous> (/tmp/tmp7yhwns10.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334856
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max_count = 1;\n  let paren_level_max_level = 1;\n  let paren_level_max_level_index = 0;\n  let paren_level_max_level_length = 0;\n  let paren_level_max_level_length_index = 0;\n  let paren_level_max_level_length_count = 0;\n  let paren_level_max_level_length_count2 = 0;\n  let paren_level_max_level_length_count3 = 0;\n  let paren_level_max_level_length_count4 = 0;\n  let paren_level_max_level_length_count5 = 0;\n  let paren_level_max_level_length_count6 = 0;\n  let paren_level_max_level_length_count7 = 0;\n  let paren_level_max_level_length_count8 = 0;\n  let paren_level_max_level_length_count9 = 0;\n  let paren_level_max_level_length_count10 = 0;\n  let paren_level_max_level_length_count11 = 0;\n  let paren_level_max_level_length_count12 = 0;\n  let paren_level_max_level_length_count13 = 0;\n  let paren_level_max_level_length_count14 = 0;\n  let paren_level_max_level_length_count15 = 0;\n  let paren_level_max_level_length_count16 = 0;\n  let paren_level_max_level_length_count17 = 0;\n  let paren_level_max_level_length_count18 = 0;\n  let paren_level_max_level_length_count19 = 0;\n  let paren_level_max_level_length_count20 = 0;\n  let paren_level_max_level_length_count21 = 0;\n  let paren_level_max_level_length_count22 = 0;\n  let paren_level_max_level_length_count23 = 0;\n  let paren_level_max_level_length_count24 = 0;\n  let paren_level_max_level_length_count25 = 0;\n  let paren_level_max_level_length_count26 = 0;\n  let paren_level_max_level_length_count27 = 0;\n  let paren_level_max_level_length_count28 = 0;\n  let paren_level_max_level_length_count29 = 0;\n  let paren_level_max_level_length_count30 = 0;\n  let paren_level_max_level_length_count31 = 0;\n  let paren_level_max_level_length_count32 = 0;\n  let paren_level_max_level_length_count33 = 0;\n  let paren_level_max_level_length_count34 = 0;\n  let paren_level_max_level_length_count35 = 0;\n  let paren_level_max_level_length_count36 = 0;\n  let paren_level_max_level_length_count37 = 0;\n  let paren_level_max_level_length_count38 = 0;\n  let paren_level_max_level_length_count39 = 0;\n  let paren_level_max_level_length_count40 = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjpxtv85c.ts(67,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334856
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        levels[groups.length - 1 - i] += 1;\n      } else if (group[j] === ')') {\n        levels[groups.length - 1 - i] -= 1;\n      }\n    }\n  }\n  return levels.filter(l => l > 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpr4ygm1zc.js:26:12)\n    at Object.<anonymous> (/tmp/tmpr4ygm1zc.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level_max++;\n      }\n      paren_level[paren_level_count - 1] = paren_level_max;\n      paren_stack.splice(paren_stack.length - 1, 1);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n  '-1': 4\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpods1lgas.js:30:12)\n    at Object.<anonymous> (/tmp/tmpods1lgas.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, '-1': 4 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334856
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.pop();\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbphwyup4.ts(12,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpbphwyup4.ts(21,3): error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334856
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmps5ca4f3z.js:23:12)\n    at Object.<anonymous> (/tmp/tmps5ca4f3z.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const paren_level = paren_stack.pop();\n      const paren_level_diff = paren_level.length - paren_level[paren_level.length - 1];\n      paren_level.push(paren_level[paren_level.length - 1] + paren_level_diff);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfvybazge.ts(16,53): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpfvybazge.ts(17,19): error TS2339: Property 'push' does not exist on type 'string'.\n",
      "timestamp": 1660334856
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n      if (paren_count < 0) {\n        throw new Error(`Unbalanced parenthesis at index ${i}`);\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpa5h3_t06.js:27:12)\n    at Object.<anonymous> (/tmp/tmpa5h3_t06.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_value: number = 0;\n  let paren_level_max_value_length: number = 0;\n  let paren_level_max_value_char: number = 0;\n  let paren_level_max_value_char_count: number = 0;\n  let paren_level_max_value_char_length: number = 0;\n  let paren_level_max_value_char_index: number = 0;\n  let paren_level_max_value_char_value: number = 0;\n  let paren_level_max_value_char_value_index: number = 0;\n  let paren_level_max_value_char_value_value: number = 0;\n  let paren_level_max_value_char_value_value_index: number = 0;\n  let paren_level_max_value_char_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_index: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6h_vuffl.ts(57,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334856
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = groups.length - 1;\n  const levels = new Array<number>(max_level);\n  for (let i = 0; i < max_level; i++) {\n    levels[i] = 0;\n  }\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    if (group === '(') {\n      levels[levels.length - 1]++;\n    } else if (group === ')') {\n      levels[levels.length - 1]--;\n    }\n  }\n  return levels.slice(0, levels.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpd3bik7hf.js:27:12)\n    at Object.<anonymous> (/tmp/tmpd3bik7hf.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334857
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7we0d7mr.ts(17,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334856
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n  const result: number[] = [];\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      levels[group[j]] += 1;\n    }\n  }\n  for (let i = 0; i < levels.length; i++) {\n    if (levels[i] === max_level) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp4tqrxudc.js:27:12)\n    at Object.<anonymous> (/tmp/tmp4tqrxudc.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334858
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6qdc3lkf.js:23:12)\n    at Object.<anonymous> (/tmp/tmp6qdc3lkf.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpz999l4ak.js:28:12)\n    at Object.<anonymous> (/tmp/tmpz999l4ak.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  let paren_depth = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_depth);\n      paren_depth++;\n    } else if (paren_string[i] === ')') {\n      paren_depth = Math.max(paren_stack.pop(), paren_depth);\n    }\n  }\n  return paren_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgdjwuagv.ts(11,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpgdjwuagv.ts(14,30): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpgdjwuagv.ts(17,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334858
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max_count: number;\n  let paren_level_max_level: number;\n  let paren_level_max_level_length: number;\n  let paren_level_max_level_length_count: number;\n  let paren_level_max_level_length_index_count: number;\n  let paren_level_max_level_length_index_count_max: number;\n  let paren_level_max_level_length_index_count_min: number;\n  let paren_level_max_level_length_index_count_min_index: number;\n  let paren_level_max_level_length_index_count_max_index: number;\n  let paren_level_max_level_length_index_count_min_index2: number;\n  let paren_level_max_level_length_index_count_max_index2: number;\n  let paren_level_max_level_length_index_count_min_index3: number;\n  let paren_level_max_level_length_index_count_max_index3: number;\n  let paren_level_max_level_length_index_count_min_index4: number;\n  let paren_level_max_level_length_index_count_max_index4: number;\n  let paren_level_max_level_length_index_count_min_index5: number;\n  let paren_level_max_level_length_index_count_max_index5: number;\n  let paren_level_max_level_length_index_count_min_index6: number;\n  let paren_level_max_level_length_index_count_max_index6: number;\n  let paren_level_max_level_length_index_count_min_index7: number;\n  let paren_level_max_level_length_index_count_max_index7: number;\n  let paren_level_max_level_length_index_count_min_index8: number;\n  let paren_level_max_level_length_index_count_max_index8: number;\n  let paren_level_max_level_length_index_count_min_index9: number;\n  let paren_level_max_level_length_index_count_max_index9: number;\n  let paren_level_max_level_length_index_count_min_index10: number;\n  let paren_level_max_level_length_index_count_max_index10: number;\n  let paren_level_max_level_length_index_count_min_index11: number;\n  let paren_level_max_level_length_index_count_max_index11: number;\n  let paren_level_max_level_length_index_count_min_index12: number;\n  let paren_level_max_level_length_index_count_max_index12: number;\n  let paren_level_max_level_length_index_count_min_index13: number;\n  let paren_level_max_level_length_index_count_max_index13: number;\n  let paren_level_max_level_length_index_count_min_index14: number;\n  let paren_level_max_level_length_index_count_max_index14: number;\n  let paren_level_max_level_length_index_count_min_index15: number;\n  let paren_level_max_level_length_index_count_max_index\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1v5dknqy.ts(58,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334858
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.length);\n        paren_stack.splice(paren_stack.length - 1, 1);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  5,\n  5,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6c37ugjw.js:28:12)\n    at Object.<anonymous> (/tmp/tmp6c37ugjw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 5, 5, 9 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n    } else if (paren_string[i] === ')') {\n      paren_level_count = paren_stack.pop();\n    }\n    paren_level.push(paren_level_count);\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpdi41jswj.js:26:12)\n    at Object.<anonymous> (/tmp/tmpdi41jswj.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8ll7jobm.ts(75,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334849
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_max_count = Math.max(paren_level_max_count, paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_level_count++;\n      }\n    } else if (char === ' ') {\n      if (paren_count === 0) {\n        paren_level_count++;\n      }\n    } else {\n      paren_count--;\n    }\n    paren_level[paren_stack.pop()] = paren_level_count;\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqwf94z8n.ts(15,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const current_level = paren_level.pop();\n      if (current_level > 0) {\n        paren_level.push(current_level);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpri9bv64o.js:27:12)\n    at Object.<anonymous> (/tmp/tmpri9bv64o.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp24q11bi4.js:30:12)\n    at Object.<anonymous> (/tmp/tmp24q11bi4.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_max);\n      }\n      paren_stack.push(paren_string[i]);\n    } else if (char === ' ') {\n      paren_level_count++;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpfgei1gjk.js:33:12)\n    at Object.<anonymous> (/tmp/tmpfgei1gjk.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpalsftb44.js:26:12)\n    at Object.<anonymous> (/tmp/tmpalsftb44.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level_max = Math.max(...paren_level);\n      }\n      paren_level.splice(paren_level.indexOf(paren_level_count), 1);\n    }\n  }\n  return paren_level_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpg6oobbfm.ts(25,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334859
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length);\n      paren_level_count = 0;\n    } else if (char === ')') {\n      paren_level_count = Math.max(paren_level_count, paren_stack.pop());\n    }\n    paren_level_count += 1;\n  }\n  return paren_level_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkfhxj782.ts(22,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      levels[group[j]] += 1;\n    }\n  }\n  return levels.map(l => l === max_level ? l : l - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmps5fp9jlg.js:21:12)\n    at Object.<anonymous> (/tmp/tmps5fp9jlg.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1, -1, -1, -1, -1,\n    -1, -1, -1, -1, -1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp9um0495i.js:27:12)\n    at Object.<anonymous> (/tmp/tmp9um0495i.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(char);\n      paren_level_count += 1;\n      paren_level.push(paren_level_count);\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_level_max_index] = paren_level_count;\n      if (paren_level_count > paren_level_max_count) {\n        paren_level_max_count = paren_level_count;\n        paren_level_max_index = paren_level_max_count;\n      }\n      paren_stack.pop();\n    } else {\n      paren_level[paren_level_max_index] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  0,\n  1,\n  2,\n  3,\n  1,\n  1,\n  2,\n  3,\n  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6ogr28c5.js:38:12)\n    at Object.<anonymous> (/tmp/tmp6ogr28c5.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 0, 1, 2,\n    3, 1, 1, 2, 3,\n    2, 2\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334860
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp154sccp6.js:24:12)\n    at Object.<anonymous> (/tmp/tmp154sccp6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_level_index = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count_index2 = 0;\n  let paren_level_max_count_index3 = 0;\n  let paren_level_max_count_index4 = 0;\n  let paren_level_max_count_index5 = 0;\n  let paren_level_max_count_index6 = 0;\n  let paren_level_max_count_index7 = 0;\n  let paren_level_max_count_index8 = 0;\n  let paren_level_max_count_index9 = 0;\n  let paren_level_max_count_index10 = 0;\n  let paren_level_max_count_index11 = 0;\n  let paren_level_max_count_index12 = 0;\n  let paren_level_max_count_index13 = 0;\n  let paren_level_max_count_index14 = 0;\n  let paren_level_max_count_index15 = 0;\n  let paren_level_max_count_index16 = 0;\n  let paren_level_max_count_index17 = 0;\n  let paren_level_max_count_index18 = 0;\n  let paren_level_max_count_index19 = 0;\n  let paren_level_max_count_index20 = 0;\n  let paren_level_max_count_index21 = 0;\n  let paren_level_max_count_index22 = 0;\n  let paren_level_max_count_index23 = 0;\n  let paren_level_max_count_index24 = 0;\n  let paren_level_max_count_index25 = 0;\n  let paren_level_max_count_index26 = 0;\n  let paren_level_max_count_index27 = 0;\n  let paren_level_max_count_index28 = 0;\n  let paren_level_max_count_index29 = 0;\n  let paren_level_max_count_index30 = 0;\n  let paren_level_max_count_index31 = 0;\n  let paren_level_max_count_index32 = 0;\n  let paren_level_max_count_index33 = 0;\n  let paren_level_max_count_index34 = 0;\n  let paren_level_max_count_index35 = 0;\n  let paren_level_max_count_index36 = 0;\n  let paren_level_max_count_index37 = 0;\n  let paren_level_max_count_index38 = 0;\n  let paren_level_max_count_index39 = 0;\n  let paren_level_max_count_index40 = 0;\n  let paren_level_max_count_index41 = 0;\n  let paren_level_max_count_index42 = 0;\n  let paren_level_max_count_index43 = 0;\n  let paren_level_max_count_index44 = 0;\n  let paren_level_max_count_index45 = 0;\n  let paren_level_max_count_index46 = 0;\n  let \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf50okr5a.ts(61,9): error TS1005: ',' expected.\n../../../../tmp/tmpf50okr5a.ts(72,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334859
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_value: number = 0;\n  let paren_level_max_parens: number = 0;\n  let paren_level_max_parens_index: number = 0;\n  let paren_level_max_parens_value: number = 0;\n  let paren_level_max_parens_parens: number = 0;\n  let paren_level_max_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_value: number = 0;\n  let paren_level_max_parens_parens_parens: number = 0;\n  let paren_level_max_parens_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_parens_value: number = 0;\n  let paren_level_max_parens_parens_parens_parens: number = 0;\n  let paren_level_max_parens_parens_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_parens_parens_value: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_value: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_value: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_value: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_parens: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_parens_value: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_parens_parens: number = 0;\n  let paren_level_max_parens_parens_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyann3xi2.ts(50,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334859
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  const paren_level_max_count: number[] = [];\n  const paren_level_max_count_index: number[] = [];\n  const paren_level_max_count_index2: number[] = [];\n  const paren_level_max_count_index3: number[] = [];\n  const paren_level_max_count_index4: number[] = [];\n  const paren_level_max_count_index5: number[] = [];\n  const paren_level_max_count_index6: number[] = [];\n  const paren_level_max_count_index7: number[] = [];\n  const paren_level_max_count_index8: number[] = [];\n  const paren_level_max_count_index9: number[] = [];\n  const paren_level_max_count_index10: number[] = [];\n  const paren_level_max_count_index11: number[] = [];\n  const paren_level_max_count_index12: number[] = [];\n  const paren_level_max_count_index13: number[] = [];\n  const paren_level_max_count_index14: number[] = [];\n  const paren_level_max_count_index15: number[] = [];\n  const paren_level_max_count_index16: number[] = [];\n  const paren_level_max_count_index17: number[] = [];\n  const paren_level_max_count_index18: number[] = [];\n  const paren_level_max_count_index19: number[] = [];\n  const paren_level_max_count_index20: number[] = [];\n  const paren_level_max_count_index21: number[] = [];\n  const paren_level_max_count_index22: number[] = [];\n  const paren_level_max_count_index23: number[] = [];\n  const paren_level_max_count_index24: number[] = [];\n  const paren_level_max_count_index25: number[] = [];\n  const paren_level_max_count_index26: number[] = [];\n  const paren_level_max_count_index27: number[] = [];\n  const paren_level_max_count_index28: number[] = [];\n  const paren_level_max_count_index29: number[] = [];\n  const paren_level_max_count_index30: number[] = [];\n  const paren_level_max_count_index31: number[] = [];\n  const paren_level_max_count_index32: number[] = [];\n  const paren_level_max_count_index33: number[] = [];\n  const paren_level_max_count_index34: number[] = [];\n  const paren_level_max_count_index35: number[] = [];\n  const paren_level_max_count_index36: number[] = [];\n  const paren_level_max_count_index37: number[] = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpclf6uvv9.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334860
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_value: number = 0;\n  let paren_level_max_parens: number = 0;\n  let paren_level_max_parens_index: number = 0;\n  let paren_level_max_parens_value: number = 0;\n  let paren_level_max_parens_parens: number = 0;\n  let paren_level_max_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_value: number = 0;\n  let paren_level_max_parens_parens_parens: number = 0;\n  let paren_level_max_parens_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_parens_value: number = 0;\n  let paren_level_max_parens_parens_parens_parens: number = 0;\n  let paren_level_max_parens_parens_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_parens_parens_value: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_value: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_value: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_value: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_parens: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_parens_value: number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_parens_parens: number = 0;\n  let paren_level_max_parens_parens_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyann3xi2.ts(50,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max = Math.max(paren_level_max, paren_level_count);\n      paren_level_count = 0;\n    } else if (char === ')') {\n      paren_level_count++;\n      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max = 0;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <1 empty item>,\n  1,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpf2nwa6ay.js:29:12)\n    at Object.<anonymous> (/tmp/tmpf2nwa6ay.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty item>, 1, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334860
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = (paren_level_count > paren_level_max) ? paren_level_count : paren_level_max;\n      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count--;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpbvgoc397.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbvgoc397.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334860
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpb5_533kb.js:28:12)\n    at Object.<anonymous> (/tmp/tmpb5_533kb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334860
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack[paren_stack.length - 1]);\n      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_max);\n        paren_level_max = 0;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  0,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpmtqjtqzs.js:30:12)\n    at Object.<anonymous> (/tmp/tmpmtqjtqzs.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334860
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        levels[groups.length - 1 - i] += 1;\n      } else if (group[j] === ')') {\n        levels[groups.length - 1 - i] -= 1;\n      }\n    }\n  }\n  return levels.filter(l => l > 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpr4ygm1zc.js:26:12)\n    at Object.<anonymous> (/tmp/tmpr4ygm1zc.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n  let level = 0;\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    if (group.length <= level) {\n      levels[level] += 1;\n    } else {\n      levels[level] = Math.max(levels[level], group.length);\n    }\n    level++;\n  }\n  return levels.slice(0, level);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  6,\n  1,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp819njhlh.js:26:12)\n    at Object.<anonymous> (/tmp/tmp819njhlh.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 6, 1, 10 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334860
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnodz2hz1.js:29:12)\n    at Object.<anonymous> (/tmp/tmpnodz2hz1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpynhdcnvj.js:28:12)\n    at Object.<anonymous> (/tmp/tmpynhdcnvj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level_max = Math.max(paren_level_max, paren_stack.pop());\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmppkhq1_pb.js:27:12)\n    at Object.<anonymous> (/tmp/tmppkhq1_pb.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334860
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level.length - 1]++;\n      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n  3,\n  0,\n  1,\n  5,\n  1,\n  0,\n  1,\n  4,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp8_5ksy66.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8_5ksy66.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 2, 3, 0, 1,\n    5, 1, 0, 1, 4,\n    2, 3\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334856
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpz999l4ak.js:28:12)\n    at Object.<anonymous> (/tmp/tmpz999l4ak.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_max: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(char);\n      paren_level.push(0);\n      paren_level_max.push(0);\n    } else if (char === ')') {\n      paren_level[paren_stack.length - 1]++;\n      paren_level_max[paren_stack.length - 1] = Math.max(paren_level_max[paren_stack.length - 1], paren_level[paren_stack.length - 1]);\n      paren_stack.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  6,\n  2,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpoqhz55c9.js:28:12)\n    at Object.<anonymous> (/tmp/tmpoqhz55c9.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4, 6, 2, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334860
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max.apply(null, groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n  const result: number[] = [];\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (levels[j] >= group.length) {\n        levels[j]++;\n        result.push(j);\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_uh_l1m4.js:25:12)\n    at Object.<anonymous> (/tmp/tmp_uh_l1m4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334860
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6fqn6mpy.js:28:12)\n    at Object.<anonymous> (/tmp/tmp6fqn6mpy.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_string_index = 0;\n  let paren_level_max_string_count = 0;\n  let paren_level_max_string_value = '';\n  let paren_level_max_string_value_index = 0;\n  let paren_level_max_string_value_count = 0;\n  let paren_level_max_string_value_value = '';\n  let paren_level_max_string_value_value_index = 0;\n  let paren_level_max_string_value_value_count = 0;\n  let paren_level_max_string_value_value_value = '';\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value = '';\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value = '';\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value = '';\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value = '';\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value = '';\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value = '';\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value = '';\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value = '';\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value = '';\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value = '';\n  let paren_level_max_string_value_value\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuwj193tw.ts(65,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsqqp2xht.js:29:12)\n    at Object.<anonymous> (/tmp/tmpsqqp2xht.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpcvczeox6.js:29:12)\n    at Object.<anonymous> (/tmp/tmpcvczeox6.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpeeq2x1tz.ts(13,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpeeq2x1tz.ts(17,7): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334861
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_string: string[] = [];\n  let paren_level_max_string_count: number[] = [];\n  let paren_level_max_string_index: number[] = [];\n  let paren_level_max_string_index2: number[] = [];\n  let paren_level_max_string_index3: number[] = [];\n  let paren_level_max_string_index4: number[] = [];\n  let paren_level_max_string_index5: number[] = [];\n  let paren_level_max_string_index6: number[] = [];\n  let paren_level_max_string_index7: number[] = [];\n  let paren_level_max_string_index8: number[] = [];\n  let paren_level_max_string_index9: number[] = [];\n  let paren_level_max_string_index10: number[] = [];\n  let paren_level_max_string_index11: number[] = [];\n  let paren_level_max_string_index12: number[] = [];\n  let paren_level_max_string_index13: number[] = [];\n  let paren_level_max_string_index14: number[] = [];\n  let paren_level_max_string_index15: number[] = [];\n  let paren_level_max_string_index16: number[] = [];\n  let paren_level_max_string_index17: number[] = [];\n  let paren_level_max_string_index18: number[] = [];\n  let paren_level_max_string_index19: number[] = [];\n  let paren_level_max_string_index20: number[] = [];\n  let paren_level_max_string_index21: number[] = [];\n  let paren_level_max_string_index22: number[] = [];\n  let paren_level_max_string_index23: number[] = [];\n  let paren_level_max_string_index24: number[] = [];\n  let paren_level_max_string_index25: number[] = [];\n  let paren_level_max_string_index26: number[] = [];\n  let paren_level_max_string_index27: number[] = [];\n  let paren_level_max_string_index28: number[] = [];\n  let paren_level_max_string_index29: number[] = [];\n  let paren_level_max_string_index30: number[] = [];\n  let paren_level_max_string_index31: number[] = [];\n  let paren_level_max_string_index32: number[] = [];\n  let paren_level_max_string_index33: number[] = [];\n  let paren_level_max_string_index34: number[] = [];\n  let paren_level_max_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7h3s5qpf.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnodz2hz1.js:29:12)\n    at Object.<anonymous> (/tmp/tmpnodz2hz1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      const last_paren_level = paren_level.pop();\n      if (paren_stack.length > 0) {\n        const last_paren_level_char = paren_stack.pop();\n        if (last_paren_level_char === '(') {\n          paren_level[last_paren_level] = paren_level[last_paren_level - 1];\n        }\n      }\n      paren_level_count--;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  undefined: undefined\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmprs1a3wc2.js:33:12)\n    at Object.<anonymous> (/tmp/tmprs1a3wc2.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, undefined: undefined ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334862
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsqqp2xht.js:29:12)\n    at Object.<anonymous> (/tmp/tmpsqqp2xht.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334842
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_depth = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_depth);\n      paren_depth++;\n    } else if (char === ')') {\n      paren_depth = Math.max(paren_stack.pop(), paren_depth);\n    }\n  }\n  return paren_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpl9j76b2s.ts(18,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      const current_level = paren_level.pop();\n      const current_level_length = paren_stack.length - paren_level[paren_level.length - 1];\n      if (current_level_length >= current_level) {\n        paren_level_count--;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmprttwin6s.js:30:12)\n    at Object.<anonymous> (/tmp/tmprttwin6s.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334862
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const paren_stack: number[] = [];\n    const paren_level: number[] = [];\n    let paren_level_count: number = 0;\n    let paren_level_max: number = 0;\n    let paren_level_max_index: number = 0;\n    let paren_level_max_value: number = 0;\n    let paren_level_max_value_length: number = 0;\n    let paren_level_max_value_length_index: number = 0;\n    let paren_level_max_value_length_value: number = 0;\n    let paren_level_max_value_length_value_length: number = 0;\n    let paren_level_max_value_length_value_length_index: number = 0;\n    let paren_level_max_value_length_value_length_value: number = 0;\n    let paren_level_max_value_length_value_length_value_length: number = 0;\n    let paren_level_max_value_length_value_length_value_length_index: number = 0;\n    let paren_level_max_value_length_value_length_value_length_value: number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length: number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_index: number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value: number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length: number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_index: number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value: number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length: number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_index: number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value: number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length: number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length_index: number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length_value: number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length: number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length_index: number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length_value: number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_rrzvypi.ts(49,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334862
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level);\n  for (let i = 0; i < levels.length; i++) {\n    levels[i] = 0;\n  }\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        levels[levels.length - 1]++;\n      } else if (group[j] === ')') {\n        levels[levels.length - 1]--;\n      }\n    }\n  }\n  return levels.filter(l => l > 0).length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpw8873p84.ts(23,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334849
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level_max_count = Math.max(paren_level_max_count, paren_level[paren_level.length - 1]);\n      paren_level.pop();\n    }\n  }\n  return paren_level_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_9cl1dkx.ts(23,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334862
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_count: number;\n  let paren_level_max_index: number;\n  let paren_level_max_string: string;\n  let paren_level_max_string_index: number;\n  let paren_level_max_string_index2: number;\n  let paren_level_max_string_index3: number;\n  let paren_level_max_string_index4: number;\n  let paren_level_max_string_index5: number;\n  let paren_level_max_string_index6: number;\n  let paren_level_max_string_index7: number;\n  let paren_level_max_string_index8: number;\n  let paren_level_max_string_index9: number;\n  let paren_level_max_string_index10: number;\n  let paren_level_max_string_index11: number;\n  let paren_level_max_string_index12: number;\n  let paren_level_max_string_index13: number;\n  let paren_level_max_string_index14: number;\n  let paren_level_max_string_index15: number;\n  let paren_level_max_string_index16: number;\n  let paren_level_max_string_index17: number;\n  let paren_level_max_string_index18: number;\n  let paren_level_max_string_index19: number;\n  let paren_level_max_string_index20: number;\n  let paren_level_max_string_index21: number;\n  let paren_level_max_string_index22: number;\n  let paren_level_max_string_index23: number;\n  let paren_level_max_string_index24: number;\n  let paren_level_max_string_index25: number;\n  let paren_level_max_string_index26: number;\n  let paren_level_max_string_index27: number;\n  let paren_level_max_string_index28: number;\n  let paren_level_max_string_index29: number;\n  let paren_level_max_string_index30: number;\n  let paren_level_max_string_index31: number;\n  let paren_level_max_string_index32: number;\n  let paren_level_max_string_index33: number;\n  let paren_level_max_string_index34: number;\n  let paren_level_max_string_index35: number;\n  let paren_level_max_string_index36: number;\n  let paren_level_max_string_index37: number;\n  let paren_level_max_string_index38: number;\n  let paren_level_max_string_index39: number;\n  let paren_level_max_string_index40: number;\n  let paren_level_max_string_index41: number;\n  let paren_level_max_string_index42: number;\n  let paren_level_max_string_index43: number;\n  let paren_level_max_string_index44: number;\n  let paren_level_max_string_index45: number;\n  let paren_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt7g5s4no.ts(71,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334862
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n    } else if (paren_string[i] === ')') {\n      paren_level.pop();\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5b58df3m.js:23:12)\n    at Object.<anonymous> (/tmp/tmp5b58df3m.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334862
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpaakkkm1a.js:25:12)\n    at Object.<anonymous> (/tmp/tmpaakkkm1a.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334862
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_max = Math.max(paren_level_max, paren_level_count);\n      paren_level_count = 0;\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n      paren_level_count++;\n      paren_level_max = Math.max(paren_level_max, paren_level_count);\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp0tl6h_3u.js:31:12)\n    at Object.<anonymous> (/tmp/tmp0tl6h_3u.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334862
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (char === ')') {\n      paren_level.pop();\n      if (paren_level.length === 0) {\n        paren_stack.push(paren_string[i]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_5jxkq_r.js:27:12)\n    at Object.<anonymous> (/tmp/tmp_5jxkq_r.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334862
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  2,\n  1,\n  0,\n  0,\n  2,\n  1,\n  0,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpah99wu5p.js:24:12)\n    at Object.<anonymous> (/tmp/tmpah99wu5p.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 2, 1, 0,\n    0, 2, 1, 0, 1,\n    1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334862
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpalsftb44.js:26:12)\n    at Object.<anonymous> (/tmp/tmpalsftb44.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_level: number[] = [];\n  let paren_level_max_level_length: number[] = [];\n  let paren_level_max_level_length_count: number[] = [];\n  let paren_level_max_level_length_index_count: number[] = [];\n  let paren_level_max_level_length_index_count_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index: number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph89uvycz.ts(46,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334862
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_max);\n      }\n      paren_stack.push(paren_string[i]);\n    } else if (char === ' ') {\n      paren_level_count++;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpfgei1gjk.js:33:12)\n    at Object.<anonymous> (/tmp/tmpfgei1gjk.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    }
  ]
}