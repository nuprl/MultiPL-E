{
  "name": "mbpp_622_get_median",
  "language": "rb",
  "prompt": "# Write a function to find the median of two sorted lists of same size.\ndef get_median(arr1, arr2, n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_median\n    candidate = method(:get_median)\n    assert_equal(16.0, candidate.call([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5))\n    assert_equal(8.5, candidate.call([2, 4, 8, 9], [7, 13, 19, 28], 4))\n    assert_equal(25.0, candidate.call([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n-1] + arr2[n-1]) / 2 if n == 1\n  return [arr1[n-1], arr2[n-1]].min if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2\n  m1 = median(arr1, n)\n  m2 = median(arr2, n)\n  if m1 == m2\n    return m1\n  elsif m1 < m2\n    if n % 2 == 0\n      get_median(arr1[n/2 - 1..-1], arr2[0..n/2 + 1], n - n/2 + 1)\n    else\n      get_median(arr1[n/2..-1], arr2[0..n/2], n - n/2)\n    end\n  else\n    if n % 2 == 0\n      get_median(arr1[0..n/2 + 1], arr2[n/2 - 1..-1], n - n/2 + 1)\n    else\n      get_median(arr1[0..n/2], arr2[n/2..-1], n - n/2)\n    end\n  end\nend",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  count = 0\n  m1 = 0\n  m2 = 0",
    "  return -1 if arr1.size != arr2.size\n  return (arr1[n-1] + arr2[n-1]) / 2.0 if n == 1\n  m1 = median(arr1)\n  m2 = median(arr2)\n  if m1 == m2\n    return m1\n  elsif m1 < m2\n    if n % 2 == 0\n      return get_median(arr1[n/2..-1], arr2[0...n/2], n/2)\n    else\n      return get_median(arr1[n/2..-1], arr2[0...n/2], n/2 + 1)\n    end\n  else\n    if n % 2 == 0\n      return get_median(arr1[0...n/2], arr2[n/2..-1], n/2)\n    else\n      return get_median(arr1[0...n/2], arr2[n/2..-1], n/2 + 1)\n    end\n  end\nend",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n-1] + arr2[n-1])/2 if n == 1\n  return [arr1[n-1], arr2[n-1]].max if n == 2",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n-1] + arr2[n-1])/2 if n == 1\n  return [arr1[n-1], arr2[n-1]].min if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2\n  m1 = median(arr1, n)\n  m2 = median(arr2, n)\n  if m1 == m2\n    return m1\n  elsif m1 < m2\n    if n % 2 == 0\n      get_median(arr1[n/2 - 1..n], arr2[0..n/2], n - n/2 + 1)\n    else\n      get_median(arr1[n/2..n], arr2[0..n/2], n - n/2)\n    end\n  else\n    if n % 2 == 0\n      get_median(arr1[0..n/2], arr2[n/2 - 1..n], n - n/2 + 1)\n    else\n      get_median(arr1[0..n/2], arr2[n/2..n], n - n/2)\n    end\n  end\nend",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2.0 if n == 1\n  return [arr1[n - 1], arr2[n - 1]].min if n == 2",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return nil if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n-1] + arr2[n-1])/2.0 if n == 1\n  return [arr1[n-1], arr2[n-1]].min if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return nil if arr1.size != arr2.size\n  return (arr1[n-1] + arr2[n-1]) / 2.0 if n == 1\n  m1 = median(arr1)\n  m2 = median(arr2)\n  if m1 > m2\n    get_median(arr1[0..n/2], arr2[n/2..-1], n/2 + 1)\n  elsif m1 < m2\n    get_median(arr1[n/2..-1], arr2[0..n/2], n/2 + 1)\n  else\n    m1\n  end\nend",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n-1] + arr2[n-1])/2 if n == 1\n  return [arr1[n-1], arr2[n-1]].min if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  if n == 0\n    return -1\n  end",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1",
    "  return -1 if n <= 0\n  return -1 if n != arr1.size || n != arr2.size",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  if n <= 0\n    return -1\n  elsif n == 1\n    return (arr1[0] + arr2[0]) / 2\n  elsif n == 2\n    return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n  end",
    "  return (arr1[n-1] + arr2[n-1])/2 if n == 1\n  return [arr1[n-1], arr2[n-1]].min if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  if n == 0\n    return -1\n  end\n  if n == 1\n    return (arr1[0] + arr2[0]) / 2\n  end\n  if n == 2\n    return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n  end",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  return (arr1[n-1] + arr2[n-1]) / 2.0 if n == 1\n  return [arr1[n-1], arr2[n-1]].min if n == 2",
    "  return nil if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1\n  return [arr1[n - 1], arr2[n - 1]].min if n == 2",
    "  return (arr1[n-1] + arr2[n-1]) / 2 if n == 1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return get_median_rec(arr1, arr2, 0, n - 1, n)\nend",
    "  return (arr1[n-1] + arr2[n-1]) / 2 if n == 1\n  return [arr1[n-1], arr2[n-1]].min if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return ((arr1[0] + arr2[0]) / 2.0) if n == 1\n  return ((arr1[0] + arr2[0]) / 2.0) if n == 2",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  return (arr1[n-1] + arr2[n-1]) / 2 if n == 1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n-1] + arr2[n-1]) / 2 if n == 1\n  return [arr1[n-1], arr2[n-1]].min if n == 2",
    "  return (arr1[n-1] + arr2[n-1])/2 if n == 1\n  return [arr1[n-1], arr2[n-1]].min if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n-1] + arr2[n-1])/2 if n == 1\n  return [arr1[n-1], arr2[n-1]].min if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n-1] + arr2[n-1]) / 2 if n == 1\n  return [arr1[n-1], arr2[n-1]].min if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return get_median_single(arr1, n) if n <= 0\n  return get_median_single(arr2, n) if n <= 0",
    "  if n == 0\n    return -1\n  end",
    "  return nil if arr1.nil? || arr2.nil? || n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n-1] + arr2[n-1])/2 if n == 1\n  return [arr1[n-1], arr2[n-1]].min if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1\n  return [arr1[n - 1], arr2[n - 1]].min if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2.0 if n == 1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2\n  m1 = median(arr1, n)\n  m2 = median(arr2, n)\n  if m1 == m2\n    return m1\n  elsif m1 < m2\n    if n % 2 == 0\n      get_median(arr1[n/2 - 1..-1], arr2[0..n/2 + 1], n - n/2 + 1)\n    else\n      get_median(arr1[n/2..-1], arr2[0..n/2], n - n/2)\n    end\n  else\n    if n % 2 == 0\n      get_median(arr1[0..n/2 + 1], arr2[n/2 - 1..-1], n - n/2 + 1)\n    else\n      get_median(arr1[0..n/2], arr2[n/2..-1], n - n/2)\n    end\n  end\nend",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1\n  return [arr1[n - 1], arr2[n - 1]].min if n == 2",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    if i == n\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elsif j == n\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2\n  m1 = median(arr1, n)\n  m2 = median(arr2, n)\n  if m1 == m2\n    return m1\n  elsif m1 < m2\n    if n % 2 == 0\n      get_median(arr1[n / 2 - 1..n], arr2[0..n / 2], n / 2 + 1)\n    else\n      get_median(arr1[n / 2..n], arr2[0..n / 2], n / 2 + 1)\n    end\n  else\n    if n % 2 == 0\n      get_median(arr1[0..n / 2], arr2[n / 2 - 1..n], n / 2 + 1)\n    else\n      get_median(arr1[0..n / 2], arr2[n / 2..n], n / 2 + 1)\n    end\n  end\nend",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return nil if arr1.size != arr2.size\n  return (arr1[n-1] + arr2[n-1])/2.0 if n == 1\n  return [arr1[n-1], arr2[n-1]].min if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n-1] + arr2[n-1]) / 2 if n == 1\n  return [arr1[n-1], arr2[n-1]].min if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1\n    count += 1\n    if arr1[i] < arr2[j]\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n    end\n  end\n  (m1 + m2) / 2.0\nend",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1",
    "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n-1] + arr2[n-1]) / 2 if n == 1\n  return [arr1[n-1], arr2[n-1]].min if n == 2",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2"
  ]
}