{
  "name": "mbpp_622_get_median",
  "language": "rb",
  "prompt": "# Write a function to find the median of two sorted lists of same size.\ndef get_median(arr1, arr2, n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_median\n    candidate = method(:get_median)\n    assert_equal(16.0, candidate.call([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5))\n    assert_equal(8.5, candidate.call([2, 4, 8, 9], [7, 13, 19, 28], 4))\n    assert_equal(25.0, candidate.call([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n-1] + arr2[n-1]) / 2 if n == 1\n  return [arr1[n-1], arr2[n-1]].min if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[1]) / 2 if n == 2\n  m1 = median(arr1, n)\n  m2 = median(arr2, n)\n  if m1 == m2\n    return m1\n  elsif m1 < m2\n    if n % 2 == 0\n      get_median(arr1[n/2 - 1..-1], arr2[0..n/2 + 1], n - n/2 + 1)\n    else\n      get_median(arr1[n/2..-1], arr2[0..n/2], n - n/2)\n    end\n  else\n    if n % 2 == 0\n      get_median(arr1[0..n/2 + 1], arr2[n/2 - 1..-1], n - n/2 + 1)\n    else\n      get_median(arr1[0..n/2], arr2[n/2..-1], n - n/2)\n    end\n  end\nend",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  i = 0\n  j = 0\n  count = 0\n  m1 = 0\n  m2 = 0",
    "  return -1 if arr1.size != arr2.size\n  return (arr1[n-1] + arr2[n-1]) / 2.0 if n == 1\n  m1 = median(arr1)\n  m2 = median(arr2)\n  if m1 == m2\n    return m1\n  elsif m1 < m2\n    if n % 2 == 0\n      return get_median(arr1[n/2..-1], arr2[0...n/2], n/2)\n    else\n      return get_median(arr1[n/2..-1], arr2[0...n/2], n/2 + 1)\n    end\n  else\n    if n % 2 == 0\n      return get_median(arr1[0...n/2], arr2[n/2..-1], n/2)\n    else\n      return get_median(arr1[0...n/2], arr2[n/2..-1], n/2 + 1)\n    end\n  end\nend",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return (arr1[n-1] + arr2[n-1])/2 if n == 1\n  return [arr1[n-1], arr2[n-1]].max if n == 2",
    "  return (arr1[n - 1] + arr2[n - 1]) / 2 if n == 1",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2",
    "  return -1 if n <= 0\n  return (arr1[0] + arr2[0]) / 2 if n == 1\n  return (arr1[0] + arr2[0]) / 2 if n == 2"
  ]
}