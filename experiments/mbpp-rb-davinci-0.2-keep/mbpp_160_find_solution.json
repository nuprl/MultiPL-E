{
  "name": "mbpp_160_find_solution",
  "language": "rb",
  "prompt": "# Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef find_solution(a, b, n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  x = 0\n  while x <= n\n    y = (n - (a * x)) / b\n    return [x, y] if y >= 0 && y % 1 == 0\n    x += 1\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && (n - a * x) % b == 0\n  end\n  nil\nend",
    "  if n % gcd(a, b) == 0\n    x = n / b\n    y = n / a\n    return x, y\n  else\n    return nil\n  end\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return x, y if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if x * a + y * b == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x * a + y * b != n\n    return nil if y < 0\n    x += 1\n    y = (n - x * a) / b\n  end\n  return x, y\nend",
    "  x = 0\n  while a * x <= n\n    y = (n - a * x) / b\n    return [x, y] if b * y == n - a * x\n    x += 1\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if (n - a * x) % b == 0\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if x + y * b == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  return nil\nend",
    "  return nil if n % gcd(a, b) != 0\n  x, y = extended_gcd(a, b)\n  return nil if x.nil? || y.nil?\n  x *= n / gcd(a, b)\n  y *= n / gcd(a, b)\n  return x, y\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if x + y * b == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - (a * x)) / b\n    return [x, y] if y >= 0 && (y % 1).zero?\n    x += 1\n  end\n  nil\nend",
    "  # Your code here\nend",
    "  # x = 0\n  # while x <= n\n  #   y = (n - a * x) / b\n  #   return [x, y] if y >= 0 && y.integer?\n  #   x += 1\n  # end\n  # nil\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend"
  ]
}