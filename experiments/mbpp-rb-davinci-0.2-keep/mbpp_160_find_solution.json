{
  "name": "mbpp_160_find_solution",
  "language": "rb",
  "prompt": "# Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef find_solution(a, b, n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  x = 0\n  while x <= n\n    y = (n - (a * x)) / b\n    return [x, y] if y >= 0 && y % 1 == 0\n    x += 1\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && (n - a * x) % b == 0\n  end\n  nil\nend",
    "  if n % gcd(a, b) == 0\n    x = n / b\n    y = n / a\n    return x, y\n  else\n    return nil\n  end\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return x, y if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if x * a + y * b == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x * a + y * b != n\n    return nil if y < 0\n    x += 1\n    y = (n - x * a) / b\n  end\n  return x, y\nend",
    "  x = 0\n  while a * x <= n\n    y = (n - a * x) / b\n    return [x, y] if b * y == n - a * x\n    x += 1\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if (n - a * x) % b == 0\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if x + y * b == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  return nil\nend",
    "  return nil if n % gcd(a, b) != 0\n  x, y = extended_gcd(a, b)\n  return nil if x.nil? || y.nil?\n  x *= n / gcd(a, b)\n  y *= n / gcd(a, b)\n  return x, y\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if x + y * b == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - (a * x)) / b\n    return [x, y] if y >= 0 && (y % 1).zero?\n    x += 1\n  end\n  nil\nend",
    "  # Your code here\nend",
    "  # x = 0\n  # while x <= n\n  #   y = (n - a * x) / b\n  #   return [x, y] if y >= 0 && y.integer?\n  #   x += 1\n  # end\n  # nil\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if x + y * b == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - (a * x)) / b\n    return [x, y] if y >= 0 && (y % 1 == 0)\n    x += 1\n  end\n  return nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y == y.to_i\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.to_i == y\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y % 1 == 0\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - (a * x)) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  return nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    if a * x + b * y == n\n      return [x, y]\n    end\n    x += 1\n    y = (n - a * x) / b\n  end\n  return nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y == y.to_i\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if (n - a * x) % b == 0\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    if x * a + y * b == n\n      return [x, y]\n    end\n    x += 1\n    y = (n - x * a) / b\n  end\n  return nil\nend",
    "  x = 0\n  y = n\n  while x <= n\n    y = n - x * a\n    if y % b == 0\n      return [x, y / b]\n    end\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  return nil if a == 0 && b == 0\n  return nil if n % gcd(a, b) != 0\n  x, y = 0, 0\n  if a == 0\n    x = 0\n    y = n / b\n  elsif b == 0\n    x = n / a\n    y = 0\n  else\n    x, y = find_solution(b, a % b, n)\n    x, y = y, x - (a / b) * y\n  end\n  return x, y\nend",
    "  return nil if n % gcd(a, b) != 0\n  x, y = 0, n / a\n  while a * x + b * y != n\n    x += 1\n    y -= 1\n  end\n  return x, y\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    if a * x + b * y == n\n      return [x, y]\n    end\n    x += 1\n    y = (n - a * x) / b\n  end\n  return nil\nend",
    "  x = 0\n  y = n / b\n  while (x <= n / a) && (y >= 0)\n    if a * x + b * y == n\n      return [x, y]\n    end\n    x += 1\n    y -= 1\n  end\n  return nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - (a * x)) / b\n    return [x, y] if y >= 0 && y % 1 == 0\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n\n  while x <= y\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n / a\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - (a * x)) / b\n    return [x, y] if y >= 0 && y.to_i == y\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n/b\n  while x <= n/a\n    return [x, y] if a*x + b*y == n\n    x += 1\n    y -= 1\n  end\n  return nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  # Your code here\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if (n - a * x) % b == 0\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    if x * a + y * b == n\n      return [x, y]\n    end\n    x += 1\n    y -= 1\n  end\n  return nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return x, y if a * x + b * y == n\n  end\n  nil\nend",
    "  x = 0\n  y = n\n  while x <= n\n    if a * x + b * y == n\n      return [x, y]\n    else\n      x += 1\n      y -= 1\n    end\n  end\n  return nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y == y.to_i\n    x += 1\n  end\n  nil\nend",
    "  if n % gcd(a, b) == 0\n    x = n / a\n    y = 0\n    while x >= 0\n      if (n - a * x) % b == 0\n        y = (n - a * x) / b\n        return [x, y]\n      end\n      x -= 1\n    end\n  end\n  return nil\nend",
    "  # your code here\nend",
    "  return nil if a > n || b > n\n  return [0, n/b] if a == 0\n  return [n/a, 0] if b == 0\n  x, y = find_solution(b, a % b, n)\n  [y, x - y * (a / b)]\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - (a * x)) / b\n    return [x, y] if (a * x) + (b * y) == n\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a*x) / b\n    return [x, y] if y >= 0 && y % 1 == 0\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  return nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  x = 0\n  y = n/b\n  while x <= n/a\n    return [x, y] if a*x + b*y == n\n    x += 1\n    y -= 1\n  end\n  return nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x * a + y * b < n\n    x += 1\n    y -= 1\n  end\n  return nil if x * a + y * b != n\n  return x, y\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if (n - a * x) % b == 0\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - (a * x)) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.to_i == y\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - (a * x)) / b\n    return [x, y] if y >= 0 && (y % 1).zero?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y == y.to_i\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - (a * x)) / b\n    return [x, y] if (a * x) + (b * y) == n\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while (x * a + y * b) < n\n    x += 1\n    y = (n - x * a) / b\n  end\n  return nil if (x * a + y * b) != n\n  return [x, y]\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a*x)/b\n    return [x, y] if y >= 0 && y % 1 == 0\n    x += 1\n  end\n  return nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - (a * x)) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n do\n    if a * x + b * y == n\n      return [x, y]\n    end\n    x += 1\n    y = (n - a * x) / b\n  end\n  return nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if (n - a * x) % b == 0\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y == y.to_i\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  return nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if x + y * b == n\n    x += 1\n    y = (n - x) / b\n  end\n  return nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a*x) / b\n    return [x, y] if y >= 0 && y.to_i == y\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n\n  while x <= n\n    if x * a + y * b == n\n      return [x, y]\n    end\n    x += 1\n    y -= 1\n  end\n  return nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while a * x + b * y < n\n    x += 1\n    y = (n - a * x) / b\n  end\n  return nil if a * x + b * y != n\n  return x, y\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if x + y * b == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return x, y if y >= 0 && (n - a * x) % b == 0\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    if a * x + b * y == n\n      return x, y\n    end\n    x += 1\n    y -= 1\n  end\n  return nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n\n  while x <= y\n    if a * x + b * y == n\n      return x, y\n    end\n    x += 1\n    y -= 1\n  end\n  return nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  # your code here\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if x + y * b == n\n    x += 1\n    y = (n - x) / b\n  end\n  nil\nend",
    "  x = 0\n  y = n\n  while y >= 0\n    if x + y == n\n      return [x, y]\n    end\n    x += 1\n    y -= 1\n  end\n  return nil\nend",
    "  return nil if a == 0 && b == 0\n  return [n/a, 0] if b == 0\n  return [0, n/b] if a == 0\n  x, y = find_solution(b, a % b, n)\n  [y, x - y * (a / b)]\nend",
    "  return nil if n > a * b\n  (0..a).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if n == a * x + b * y\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    if a * x + b * y == n\n      return [x, y]\n    else\n      x += 1\n      y -= 1\n    end\n  end\n  return nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while (x * a) + (y * b) != n\n    if y < 0\n      return nil\n    end\n    x += 1\n    y = (n - (x * a)) / b\n  end\n  return [x, y]\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return x, y if (n - a * x) % b == 0\n  end\n  nil\nend",
    "  x = 0\n  y = n\n  while y >= 0\n    if x + y == n\n      return [x, y]\n    else\n      x += 1\n      y -= 1\n    end\n  end\n  return nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y -= 1\n  end\n  return nil\nend",
    "  x = 0\n  y = n / b\n  while x * a <= n\n    return [x, y] if x * a + y * b == n\n    x += 1\n    y = (n - x * a) / b\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.to_i == y\n    x += 1\n  end\n  return nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - (a * x)) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - (a * x)) / b\n    return [x, y] if y >= 0 && (y % 1).zero?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if x + y * b == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while (x * a + y * b) != n\n    return nil if y < 0\n    x += 1\n    y = (n - a * x) / b\n  end\n  return [x, y]\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b",
    "  x = 0\n  while x * a <= n\n    y = (n - x * a) / b\n    return [x, y] if y * b + x * a == n\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && (y % 1).zero?\n    x += 1\n  end\n  nil\nend",
    "  # Your code here\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y == y.to_i\n    x += 1\n  end\n  nil\nend",
    "  return nil if n > a * b\n  (0..a).each do |x|\n    (0..b).each do |y|\n      return [x, y] if a * x + b * y == n\n    end\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if (n - a * x) % b == 0\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y % 1 == 0\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if (n - a * x) % b == 0\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a*x) / b\n    return [x, y] if y >= 0 && (y % 1 == 0)\n    x += 1\n  end\n  return nil\nend",
    "  x = 0\n  y = n / b\n  while (x <= n / a)\n    return [x, y] if (a * x + b * y == n)\n    x += 1\n    y -= 1\n  end\n  return nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if (y * b + x * a) == n\n    x += 1\n  end\n  nil\nend",
    "  return nil if n % gcd(a, b) != 0\n  x, y = 0, 0\n  while x * a + y * b != n\n    x += 1\n    y -= 1\n  end\n  [x, y]\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  return nil\nend",
    "  (0..n).each do |x|\n    y = (n - (a * x)) / b\n    return [x, y] if (a * x) + (b * y) == n\n  end\n  nil\nend",
    "  # your code here\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - (a * x)) / b\n    return [x, y] if y >= 0 && (y % 1).zero?\n    x += 1\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && (n - a * x) % b == 0\n  end\n  nil\nend",
    "  return nil if n > a * b\n  (0..a).each do |x|\n    (0..b).each do |y|\n      return [x, y] if a * x + b * y == n\n    end\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if (n - a * x) % b == 0\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if (n - a * x) % b == 0\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return x, y if a * x + b * y == n\n  end\n  nil\nend",
    "  x = 0\n  y = n\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && (n - a * x) % b == 0\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while (x <= n / a)\n    if (a * x + b * y == n)\n      return x, y\n    end\n    x += 1\n    y -= 1\n  end\n  return nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y == y.to_i\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    if x * a + y * b == n\n      return [x, y]\n    end\n    x += 1\n    y = (n - x * a) / b\n  end\n  return nil\nend",
    "  x = 0\n  y = n\n  while x <= n\n    return [x, y] if x * a + y * b == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if x + y * b == n\n    x += 1\n    y = (n - x) / b\n  end\n  nil\nend",
    "  return nil if n > a * b\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if y * b + x * a == n\n  end\n  nil\nend",
    "  x = 0\n  y = n\n  while x <= n\n    return [x, y] if x * a + y * b == n\n    x += 1\n    y -= 1\n  end\n  nil\nend",
    "  return nil if a == 0 && b == 0\n  return nil if a == 0 && n != 0\n  return nil if b == 0 && n != 0\n  return nil if a == 0 && n % b != 0\n  return nil if b == 0 && n % a != 0\n  return nil if a != 0 && b != 0 && n % a != 0 && n % b != 0\n  return nil if a != 0 && b != 0 && n % a != 0 && n % b == 0\n  return nil if a != 0 && b != 0 && n % a == 0 && n % b != 0\n  return nil if a != 0 && b != 0 && n % a == 0 && n % b == 0 && n % (a + b) != 0\n  return nil if a != 0 && b != 0 && n % a == 0 && n % b == 0 && n % (a + b) == 0 && n % (a * b) != 0\n  return nil if a != 0 && b != 0 && n % a == 0 && n % b == 0 && n % (a + b) == 0 && n % (a * b) == 0 && n % (a * a) != 0\n  return nil if a != 0 && b != 0 && n % a == 0 && n % b == 0 && n % (a + b) == 0 && n % (a * b) == 0 && n % (a * a) == 0 && n % (b * b) != 0\n  return nil if a != 0 && b != 0 && n % a == 0 && n % b == 0 && n % (a + b) == 0 && n % (a * b) == 0 && n % (a * a) == 0 && n % (b * b) == 0 && n % (a * a * a) != 0\n  return nil if a != 0 && b != 0 && n % a == 0 && n % b == 0 && n % (a + b) == 0 && n % (a * b) == 0 && n % (a * a) == 0 && n % (b * b) == 0 && n % (a * a * a) == 0 && n % (b * b * b) != 0\n  return nil if a != 0 && b != 0 && n % a",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if x + y * b == n\n    x += 1\n    y = (n - x) / b\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.to_i == y\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y -= 1\n  end\n  return nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  x = 0\n  y = n\n  while x <= n\n    if x * a + y * b == n\n      return x, y\n    end\n    x += 1\n    y -= 1\n  end\n  return nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - (a * x)) / b\n    if y >= 0 && y == y.to_i\n      return [x, y]\n    end\n    x += 1\n  end\n  return nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y % 1 == 0\n    x += 1\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y % 1 == 0\n    x += 1\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && (n - a * x) % b == 0\n  end\n  nil\nend",
    "  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && y.integer?\n    x += 1\n  end\n  nil\nend",
    "  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend",
    "  x = 0\n  y = n / b\n  while x <= n\n    return [x, y] if a * x + b * y == n\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend"
  ]
}