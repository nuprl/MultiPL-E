{
  "name": "mbpp_415_max_Product",
  "language": "rb",
  "prompt": "# Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_Product\n    candidate = method(:max_Product)\n    assert_equal([7, 8], candidate.call([1, 2, 3, 4, 7, 0, 8, 4]))\n    assert_equal([-4, -6], candidate.call([0, -1, -2, -4, 5, 0, -6]))\n    assert_equal([2, 3], candidate.call([1, 2, 3]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  max_product = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      if arr[i]*arr[j] > max_product\n        max_product = arr[i]*arr[j]\n      end\n    end\n  end\n  return max_product\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  n = arr.length\n  return (arr[n - 1] * arr[n - 2])\nend",
    "  max = arr.max\n  arr.delete(max)\n  max2 = arr.max\n  puts max * max2\nend",
    "  arr.sort!\n  return (arr[-1] * arr[-2])\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  arr[-1]*arr[-2]\nend\nputs max_Product([1,2,3,4,5])",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend\nputs max_Product([1,2,3,4,5,6])",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  if arr[-1]*arr[-2] > arr[0]*arr[1]\n    return arr[-1]*arr[-2]\n  else\n    return arr[0]*arr[1]\n  end\nend",
    "  arr.sort!\n  if arr[0] * arr[1] > arr[-1] * arr[-2]\n    return arr[0] * arr[1]\n  else\n    return arr[-1] * arr[-2]\n  end\nend"
  ]
}