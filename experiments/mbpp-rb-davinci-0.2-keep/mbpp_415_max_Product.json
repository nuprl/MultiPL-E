{
  "name": "mbpp_415_max_Product",
  "language": "rb",
  "prompt": "# Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_Product\n    candidate = method(:max_Product)\n    assert_equal([7, 8], candidate.call([1, 2, 3, 4, 7, 0, 8, 4]))\n    assert_equal([-4, -6], candidate.call([0, -1, -2, -4, 5, 0, -6]))\n    assert_equal([2, 3], candidate.call([1, 2, 3]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  max_product = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      if arr[i]*arr[j] > max_product\n        max_product = arr[i]*arr[j]\n      end\n    end\n  end\n  return max_product\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  n = arr.length\n  return (arr[n - 1] * arr[n - 2])\nend",
    "  max = arr.max\n  arr.delete(max)\n  max2 = arr.max\n  puts max * max2\nend",
    "  arr.sort!\n  return (arr[-1] * arr[-2])\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  arr[-1]*arr[-2]\nend\nputs max_Product([1,2,3,4,5])",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend\nputs max_Product([1,2,3,4,5,6])",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  if arr[-1]*arr[-2] > arr[0]*arr[1]\n    return arr[-1]*arr[-2]\n  else\n    return arr[0]*arr[1]\n  end\nend",
    "  arr.sort!\n  if arr[0] * arr[1] > arr[-1] * arr[-2]\n    return arr[0] * arr[1]\n  else\n    return arr[-1] * arr[-2]\n  end\nend",
    "  max_product = 0\n  for i in 0...arr.length\n    for j in i+1...arr.length\n      if arr[i] * arr[j] > max_product\n        max_product = arr[i] * arr[j]\n      end\n    end\n  end\n  return max_product\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  max_product = arr[0] * arr[1]\n  arr.each_with_index do |num1, i|\n    arr.each_with_index do |num2, j|\n      if i != j\n        max_product = num1 * num2 if num1 * num2 > max_product\n      end\n    end\n  end\n  max_product\nend",
    "  arr.sort!\n  n = arr.length\n  return (arr[n-1] * arr[n-2])\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  max = arr.max\n  arr.delete(max)\n  max2 = arr.max\n  max * max2\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  max = arr[0]\n  min = arr[0]\n  max_product = arr[0]\n  for i in 1..arr.length-1\n    if arr[i] < 0\n      temp = max\n      max = min\n      min = temp\n    end\n    max = [arr[i], max*arr[i]].max\n    min = [arr[i], min*arr[i]].min\n    max_product = [max_product, max].max\n  end\n  return max_product\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  max = arr[-1] * arr[-2]\n  return max\nend",
    "  max_product = arr[0] * arr[1]\n  arr.each_with_index do |num, i|\n    arr.each_with_index do |num2, j|\n      if i != j\n        max_product = num * num2 if num * num2 > max_product\n      end\n    end\n  end\n  max_product\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  max_product = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      if (arr[i] * arr[j]) > max_product\n        max_product = arr[i] * arr[j]\n      end\n    end\n  end\n  return max_product\nend",
    "  max_product = 0\n  arr.each do |i|\n    arr.each do |j|\n      max_product = i * j if i * j > max_product\n    end\n  end\n  max_product\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.max(2).inject(:*)\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  if arr[-1]*arr[-2] > arr[0]*arr[1]\n    return arr[-1]*arr[-2]\n  else\n    return arr[0]*arr[1]\n  end\nend",
    "  max_product = 0\n  arr.each do |i|\n    arr.each do |j|\n      if i * j > max_product\n        max_product = i * j\n      end\n    end\n  end\n  max_product\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return (arr[-1]*arr[-2])\nend\nputs max_Product([1,2,3,4,5])\nputs max_Product([-1,-2,-3,-4,-5])\nputs max_Product([1,2,3,4,5,6])\nputs max_Product([-1,-2,-3,-4,-5,-6])\nputs max_Product([1,2,3,4,5,6,7])\nputs max_Product([-1,-2,-3,-4,-5,-6,-7])\nputs max_Product([1,2,3,4,5,6,7,8])\nputs max_Product([-1,-2,-3,-4,-5,-6,-7,-8])\nputs max_Product([1,2,3,4,5,6,7,8,9])\nputs max_Product([-1,-2,-3,-4,-5,-6,-7,-8,-9])\nputs max_Product([1,2,3,4,5,6,7,8,9,10])\nputs max_Product([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10])\nputs max_Product([1,2,3,4,5,6,7,8,9,10,11])\nputs max_Product([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11])\nputs max_Product([1,2,3,4,5,6,7,8,9,10,11,12])\nputs max_Product([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12])\nputs max_Product([1,2,3,4,5,6,7,8,9,10,11,12,13])\nputs max_Product([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13])\nputs max_Product([1,2,3,4,5,6,7,8,9,10,11,12",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  arr[-1] * arr[-2]\nend",
    "  max = arr[0]\n  arr.each do |i|\n    if i > max\n      max = i\n    end\n  end\n  return max\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend\nputs max_Product([1,2,3,4,5])\nputs max_Product([-1,-2,-3,-4,-5])",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  max_product = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      if arr[i] * arr[j] > max_product\n        max_product = arr[i] * arr[j]\n      end\n    end\n  end\n  return max_product\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  max_product = 0\n  arr.each_with_index do |num, index|\n    arr.each_with_index do |num2, index2|\n      if index != index2\n        product = num * num2\n        if product > max_product\n          max_product = product\n        end\n      end\n    end\n  end\n  max_product\nend",
    "  max_product = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      product = arr[i] * arr[j]\n      if product > max_product\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  max_product = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      product = arr[i] * arr[j]\n      if product > max_product\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend",
    "  max = arr.max\n  arr.delete_at(arr.index(max))\n  max * arr.max\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return (arr[-1] * arr[-2])\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  max_product = 0\n  arr.each do |i|\n    arr.each do |j|\n      max_product = i * j if i * j > max_product\n    end\n  end\n  max_product\nend",
    "  max = arr.max\n  arr.delete(max)\n  max_2 = arr.max\n  puts max * max_2\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  max_product = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      if arr[i] * arr[j] > max_product\n        max_product = arr[i] * arr[j]\n      end\n    end\n  end\n  return max_product\nend",
    "  max = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      if arr[i] * arr[j] > max\n        max = arr[i] * arr[j]\n      end\n    end\n  end\n  return max\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  arr[-1] * arr[-2]\nend",
    "  max_product = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      if arr[i] * arr[j] > max_product\n        max_product = arr[i] * arr[j]\n      end\n    end\n  end\n  return max_product\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  return (arr[-1] * arr[-2])\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return (arr[-1]*arr[-2])\nend",
    "  arr.sort!\n  arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  max = arr.max\n  arr.delete(max)\n  max2 = arr.max\n  puts max * max2\nend\nmax_Product([1,2,3,4,5,6,7,8,9])",
    "  arr.sort!\n  arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend\nputs max_Product([1,2,3,4,5,6,7,8,9])",
    "  max_product = 0\n  arr.each do |i|\n    arr.each do |j|\n      if i * j > max_product\n        max_product = i * j\n      end\n    end\n  end\n  max_product\nend",
    "  arr.sort!\n  arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  max_product = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      if arr[i]*arr[j] > max_product\n        max_product = arr[i]*arr[j]\n      end\n    end\n  end\n  return max_product\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  arr[-1] * arr[-2]\nend",
    "  max_product = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      product = arr[i] * arr[j]\n      if product > max_product\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend\nputs max_Product([1,2,3,4,5])",
    "  arr.sort!\n  max_product = arr[-1] * arr[-2]\n  return max_product\nend",
    "  arr.sort!\n  arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  return (arr[-1] * arr[-2])\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  if arr[-1]*arr[-2] > arr[0]*arr[1]\n    return arr[-1]*arr[-2]\n  else\n    return arr[0]*arr[1]\n  end\nend",
    "  arr.sort!\n  arr[-1]*arr[-2]\nend",
    "  max_product = arr[0] * arr[1]\n  arr.each_with_index do |num1, i|\n    arr.each_with_index do |num2, j|\n      next if i == j\n      max_product = num1 * num2 if num1 * num2 > max_product\n    end\n  end\n  max_product\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  max_product = 0\n  for i in 0...arr.length\n    for j in i+1...arr.length\n      product = arr[i] * arr[j]\n      if product > max_product\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  return (arr[-1] * arr[-2])\nend",
    "  arr.combination(2).to_a.map { |a, b| a * b }.max\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  max_product = arr[0] * arr[1]\n  arr.each_with_index do |num, index|\n    next if index == arr.length - 1\n    product = num * arr[index + 1]\n    max_product = product if product > max_product\n  end\n  max_product\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  arr[-1] * arr[-2]\nend",
    "  max_product = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      if arr[i]*arr[j] > max_product\n        max_product = arr[i]*arr[j]\n      end\n    end\n  end\n  return max_product\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  n = arr.length\n  return (arr[n-1]*arr[n-2])\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  return (arr[-1]*arr[-2])\nend",
    "  max = arr.max\n  arr.delete(max)\n  max1 = arr.max\n  puts \"The pair with highest product is #{max} and #{max1}\"\nend",
    "  arr.sort!\n  return (arr[-1] * arr[-2])\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  max_product = arr[0] * arr[1]\n  arr.each_with_index do |num, i|\n    arr.each_with_index do |num2, j|\n      max_product = num * num2 if num * num2 > max_product && i != j\n    end\n  end\n  max_product\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  max_product = 0\n  for i in 0...arr.length\n    for j in i+1...arr.length\n      if arr[i]*arr[j] > max_product\n        max_product = arr[i]*arr[j]\n      end\n    end\n  end\n  return max_product\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  return (arr[-1] * arr[-2])\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  max_product = 0\n  arr.each_with_index do |num1, index1|\n    arr.each_with_index do |num2, index2|\n      if index2 > index1\n        product = num1 * num2\n        if product > max_product\n          max_product = product\n        end\n      end\n    end\n  end\n  return max_product\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  max = arr.max\n  arr.delete(max)\n  max2 = arr.max\n  max * max2\nend",
    "  arr.sort!\n  arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  max = arr[-1] * arr[-2]\n  puts max\nend",
    "  max_product = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      max_product = arr[i]*arr[j] if arr[i]*arr[j] > max_product\n    end\n  end\n  max_product\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return (arr[-1] * arr[-2])\nend",
    "  max = arr.max\n  arr.delete(max)\n  second_max = arr.max\n  puts \"#{max} * #{second_max} = #{max * second_max}\"\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return (arr[-1] * arr[-2])\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  return (arr[-1] * arr[-2])\nend",
    "  max = arr[0]\n  arr.each do |i|\n    if i > max\n      max = i\n    end\n  end\n  return max\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  if arr[0] * arr[1] > arr[-1] * arr[-2]\n    return arr[0] * arr[1]\n  else\n    return arr[-1] * arr[-2]\n  end\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  arr[-1] * arr[-2]\nend",
    "  max_product = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      if arr[i] * arr[j] > max_product\n        max_product = arr[i] * arr[j]\n      end\n    end\n  end\n  return max_product\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  if arr[-1] * arr[-2] > arr[0] * arr[1]\n    return arr[-1] * arr[-2]\n  else\n    return arr[0] * arr[1]\n  end\nend",
    "  max_product = 0\n  arr.each do |i|\n    arr.each do |j|\n      max_product = i * j if i * j > max_product\n    end\n  end\n  max_product\nend",
    "  arr.sort!\n  arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  arr.combination(2).to_a.map {|x| x.inject(:*)}.max\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  max_product = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      if arr[i]*arr[j] > max_product\n        max_product = arr[i]*arr[j]\n      end\n    end\n  end\n  return max_product\nend",
    "  arr.sort!\n  return arr[-1] * arr[-2]\nend",
    "  max = arr.max\n  arr.delete(max)\n  max2 = arr.max\n  puts \"The maximum product is #{max * max2}\"\nend",
    "  arr.sort!\n  arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "\tarr.sort!\n\treturn arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  arr[-1] * arr[-2]\nend",
    "  arr.sort!\n  return arr[-1]*arr[-2]\nend",
    "  arr.sort!\n  return (arr[-1] * arr[-2])\nend",
    "  max_product = 0\n  arr.each_with_index do |ele1, i|\n    arr.each_with_index do |ele2, j|\n      if i != j\n        product = ele1 * ele2\n        max_product = product if product > max_product\n      end\n    end\n  end\n  max_product\nend"
  ]
}