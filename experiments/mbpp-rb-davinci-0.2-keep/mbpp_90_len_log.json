{
  "name": "mbpp_90_len_log",
  "language": "rb",
  "prompt": "# Write a python function to find the length of the longest word.\ndef len_log(list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_len_log\n    candidate = method(:len_log)\n    assert_equal(7, candidate.call([\"python\", \"PHP\", \"bigdata\"]))\n    assert_equal(3, candidate.call([\"a\", \"ab\", \"abc\"]))\n    assert_equal(5, candidate.call([\"small\", \"big\", \"tall\"]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend",
    "    list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend",
    "    list1.max_by(&:length)\nend\nlist1 = [\"Python\",\"Ruby\",\"Java\",\"C++\",\"C\"]\nputs len_log(list1)",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend"
  ]
}