{
  "name": "mbpp_583_catalan_number",
  "language": "rb",
  "prompt": "# Write a function which returns nth catalan number.\ndef catalan_number(num)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_catalan_number\n    candidate = method(:catalan_number)\n    assert_equal(16796, candidate.call(10))\n    assert_equal(4862, candidate.call(9))\n    assert_equal(429, candidate.call(7))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return 1 if num == 0\n  return 0 if num < 0\n  (0..num-1).inject(0) { |sum, i| sum + catalan_number(i) * catalan_number(num - i - 1) }\nend",
    "  return 1 if num == 0\n  return 0 if num < 0\n  (0..num-1).inject(0) { |sum, i| sum + catalan_number(i) * catalan_number(num - i - 1) }\nend",
    "  return 1 if num <= 1\n  catalan_number(num - 1) * (4 * num - 2) / (num + 1)\nend",
    "  return 1 if num <= 1\n  catalan_number(num - 1) * (4 * num - 2) / (num + 1)\nend",
    "  return 1 if num == 0\n  return 0 if num < 0\n  catalan_number(num - 1) * (4 * num - 2) / (num + 1)\nend",
    "  return 1 if num == 0\n  catalan_number(num - 1) * (4 * num - 2) / (num + 1)\nend",
    "  return 1 if num <= 1\n  (0...num).inject(0) { |sum, i| sum + catalan_number(i) * catalan_number(num - i - 1) }\nend",
    "  return 1 if num == 0\n  return 0 if num < 0\n  catalan_number(num - 1) * (4 * num - 2) / (num + 1)\nend",
    "  return 1 if num <= 1\n  (0..num-1).inject(0) { |sum, i| sum + catalan_number(i) * catalan_number(num - i - 1) }\nend",
    "  return 1 if num == 0\n  catalan_number(num - 1) * (4 * num - 2) / (num + 1)\nend",
    "  return 1 if num == 0\n  return 0 if num < 0\n  return catalan_number(num - 1) * (4 * num - 2) / (num + 1)\nend",
    "  return 1 if num == 0\n  return 0 if num < 0\n  (0..num-1).inject(0) { |sum, i| sum + catalan_number(i) * catalan_number(num-i-1) }\nend",
    "  return 1 if num == 0\n  return catalan_number(num - 1) * (4 * num - 2) / (num + 1)\nend",
    "  return 1 if num == 0\n  return 0 if num < 0\n  2 * (2 * num - 1) * catalan_number(num - 1) / (num + 1)\nend",
    "  return 1 if num == 0\n  return 0 if num < 0\n  catalan_number(num - 1) * (4 * num - 2) / (num + 1)\nend",
    "  return 1 if num == 0\n  catalan_number(num-1) * (2*num - 1) / (num + 1)\nend",
    "  return 1 if num == 0\n  return 0 if num < 0\n  catalan_number(num - 1) * (4 * num - 2) / (num + 1)\nend",
    "  return 1 if num == 0\n  return catalan_number(num - 1) * (4 * num - 2) / (num + 1)\nend",
    "  return 1 if num == 0\n  return 1 if num == 1\n  (0...num).inject(0) { |sum, i| sum + catalan_number(i) * catalan_number(num - i - 1) }\nend",
    "  return 1 if num == 0\n  return 0 if num < 0\n  catalan_number(num - 1) * (4 * num - 2) / (num + 1)\nend"
  ]
}