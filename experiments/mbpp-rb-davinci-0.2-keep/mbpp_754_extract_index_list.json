{
  "name": "mbpp_754_extract_index_list",
  "language": "rb",
  "prompt": "# We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\ndef extract_index_list(l1, l2, l3)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  l1.zip(l2, l3).select { |e| e.uniq.size == 1 }.map { |e| e[0] }\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend",
    "  l1.each_with_index.select { |e, i| e == l2[i] && e == l3[i] }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.first : nil }.compact\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map(&:first)\nend",
    "  # l1.zip(l2, l3).select { |e| e.uniq.size == 1 }.map(&:first)\n  l1.zip(l2, l3).select { |e| e.uniq.size == 1 }.map { |e| e.first }\nend",
    "  l1.each_with_index.select { |e, i| l2[i] == e && l3[i] == e }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.uniq[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map { |x, y, z| x }\nend",
    "  # TODO: return a list of index where the elements are common\n  common_index = []\n  l1.each_with_index do |element, index|\n    if element == l2[index] && element == l3[index]\n      common_index << index\n    end\n  end\n  common_index\nend",
    "  common_elements = []\n  l1.each_with_index do |element, index|\n    common_elements << element if l2[index] == element && l3[index] == element\n  end\n  common_elements\nend",
    "  # TODO: return the list of common elements\n  result = []\n  l1.each_with_index do |element, index|\n    if l2[index] == element && l3[index] == element\n      result << element\n    end\n  end\n  return result\nend",
    "  # TODO: return a list of common elements\n  # l1 = [1, 2, 3, 4, 5]\n  # l2 = [2, 3, 4, 5, 6]\n  # l3 = [3, 4, 5, 6, 7]\n  # extract_index_list(l1, l2, l3)\n  # => [3, 4, 5]\n  # l1 = [1, 2, 3, 4, 5]\n  # l2 = [2, 3, 4, 5, 6]\n  # l3 = [3, 4, 5, 6, 7]\n  # extract_index_list(l1, l2, l3)\n  # => [3, 4, 5]\n  # l1 = [1, 2, 3, 4, 5]\n  # l2 = [2, 3, 4, 5, 6]\n  # l3 = [3, 4, 5, 6, 7]\n  # extract_index_list(l1, l2, l3)\n  # => [3, 4, 5]\n  # l1 = [1, 2, 3, 4, 5]\n  # l2 = [2, 3, 4, 5, 6]\n  # l3 = [3, 4, 5, 6, 7]\n  # extract_index_list(l1, l2, l3)\n  # => [3, 4, 5]\n  # l1 = [1, 2, 3, 4, 5]\n  # l2 = [2, 3, 4, 5, 6]\n  # l3 = [3, 4, 5, 6, 7]\n  # extract_index_list(l1, l2, l3)\n  # => [3, 4, 5]\n  # l1 = [1, 2, 3, 4, 5]\n  # l2 = [2, 3, 4, 5, 6]\n  # l3 = [3, 4, 5, 6, 7]\n  # extract_index_list(l1, l2, l3)\n  # => [3, 4, 5]\n  # l1 = [1, 2, 3, 4, 5]\n  #",
    "  # TODO: return a list of common elements\n  # TODO: return a list of common elements\n  l1.zip(l2, l3).select{|a, b, c| a == b && a == c}.map{|a, b, c| a}\nend",
    "  # write your code here\n  result = []\n  l1.each_with_index do |e, i|\n    result << e if l2[i] == e && l3[i] == e\n  end\n  result\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |e| e[0] if e.uniq.size == 1 }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.first : nil }.compact\nend",
    "  l1.zip(l2, l3).select { |e| e.uniq.length == 1 }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x| x[0] if x[0] == x[1] && x[1] == x[2] }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.uniq[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x[0] if x[0] == x[1] && x[1] == x[2] }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && x == z }.map(&:first)\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map(&:first)\nend",
    "  l1.each_with_index.select { |e, i| e == l2[i] && e == l3[i] }.map(&:first)\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x, y, z| [x, y, z] }\nend",
    "  l1.zip(l2, l3).select { |x| x.uniq.size == 1 }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && x == z }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && x == z }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend",
    "  common_elements = []\n  l1.each_with_index do |element, index|\n    if element == l2[index] && element == l3[index]\n      common_elements << element\n    end\n  end\n  common_elements\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.uniq[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.first : nil }.compact\nend",
    "  l1.each_with_index.select { |_, index| l1[index] == l2[index] && l1[index] == l3[index] }.map { |element, _| element }\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.first : nil }.compact\nend",
    "  common_elements = []\n  l1.each_with_index do |element, index|\n    if l2[index] == element && l3[index] == element\n      common_elements << element\n    end\n  end\n  common_elements\nend",
    "  l1.zip(l2, l3).map { |a, b, c| [a, b, c] if a == b && b == c }.compact\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend",
    "  common_elements = []\n  l1.each_with_index do |element, index|\n    common_elements << element if l2[index] == element && l3[index] == element\n  end\n  common_elements\nend",
    "  common_elements = []\n  l1.each_with_index do |element, index|\n    common_elements << element if element == l2[index] && element == l3[index]\n  end\n  common_elements\nend",
    "  l1.zip(l2, l3).map(&:uniq).reject(&:one?).flatten\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |a, b, c| [a, b, c] if a == b && b == c }.compact\nend",
    "  l1.zip(l2, l3).select { |x| x.uniq.size == 1 }.map(&:first)\nend",
    "  l1.zip(l2, l3).map {|x| x.uniq.length == 1 ? x[0] : nil}.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).select { |e| e.uniq.size == 1 }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x, y, z| [x, y, z] }\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x, y, z| [x, y, z] }\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }\nend",
    "  l1.zip(l2, l3).select { |e| e.uniq.size == 1 }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.uniq[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.uniq[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).select { |e| e.uniq.size == 1 }.map(&:first)\nend",
    "  common_elements = []\n  l1.each_with_index do |element, index|\n    if element == l2[index] && element == l3[index]\n      common_elements << element\n    end\n  end\n  common_elements\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |a, b, c| a == b && b == c ? a : nil }.compact\nend",
    "  l1.zip(l2, l3).select { |a, b, c| a == b && b == c }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.first : nil }.compact\nend",
    "  # TODO: return a list of common elements\n  common_elements = []\n  l1.each_with_index do |element, index|\n    common_elements << element if l2[index] == element && l3[index] == element\n  end\n  common_elements\nend",
    "  l1.zip(l2, l3).map { |x, y, z| [x, y, z] }\nend",
    "  common_elements = []\n  l1.each_with_index do |element, index|\n    if l2[index] == element && l3[index] == element\n      common_elements << element\n    end\n  end\n  common_elements\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.uniq[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).select { |e| e.uniq.size == 1 }.map { |e| e.first }\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).select { |x| x.uniq.length == 1 }.map { |x| x[0] }\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map(&:first)\nend",
    "  l1.zip(l2, l3).select { |e| e.uniq.size == 1 }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.first : nil }.compact\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend",
    "  l1.zip(l2, l3).select {|x, y, z| x == y && y == z}.flatten\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.first : nil }.compact\nend",
    "  result = []\n  l1.each_with_index do |element, index|\n    result << element if l2[index] == element && l3[index] == element\n  end\n  result\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x[0] if x[0] == x[1] && x[1] == x[2] }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| [x, y, z] }\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x[0] if x[0] == x[1] && x[1] == x[2] }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x[0] : nil }.compact\nend",
    "  [l1, l2, l3].transpose.select { |x| x.uniq.length == 1 }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x[0] if x[0] == x[1] && x[1] == x[2] }.compact\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x, y, z| [x, y, z] }\nend",
    "  l1.zip(l2, l3).map {|x| x.uniq.length == 1 ? x.uniq[0] : nil}.compact\nend",
    "  l1.zip(l2, l3).select { |e| e.uniq.size == 1 }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.first : nil }.compact\nend",
    "  common_elements = []\n  l1.each_with_index do |element, index|\n    common_elements << element if l2[index] == element && l3[index] == element\n  end\n  common_elements\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map { |x, y, z| x }\nend",
    "  l1.zip(l2, l3).select { |e| e.uniq.size == 1 }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| [x, y, z] }\nend",
    "  common_elements = []\n  l1.each_with_index do |element, index|\n    common_elements << element if l2[index] == element && l3[index] == element\n  end\n  common_elements\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend",
    "  result = []\n  l1.each_with_index do |e, i|\n    result << e if l2[i] == e && l3[i] == e\n  end\n  result\nend",
    "  l1.zip(l2, l3).select { |a, b, c| a == b && b == c }.map(&:first)\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x[0] if x[0] == x[1] && x[1] == x[2] }.compact\nend",
    "  l1.zip(l2, l3).select { |e| e.uniq.length == 1 }.map { |e| e[0] }\nend",
    "  l1.each_index.select { |i| l1[i] == l2[i] && l1[i] == l3[i] }\nend",
    "  result = []\n  l1.each_with_index do |e, i|\n    result << e if l2[i] == e && l3[i] == e\n  end\n  result\nend",
    "  l1.zip(l2, l3).map { |x, y, z| [x, y, z] }\nend",
    "  l1.zip(l2, l3).map { |x| x[0] if x[0] == x[1] && x[1] == x[2] }.compact\nend",
    "  l1.zip(l2, l3).select { |e| e.uniq.size == 1 }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend",
    "  # TODO: return a list of common elements\n  # l1 = [1, 2, 3, 4, 5]\n  # l2 = [2, 3, 4, 5, 6]\n  # l3 = [3, 4, 5, 6, 7]\n  # => [3, 4, 5]\n  # l1 = [1, 2, 3, 4, 5]\n  # l2 = [2, 3, 4, 5, 6]\n  # l3 = [3, 4, 5, 6, 7, 8]\n  # => [3, 4, 5]\n  # l1 = [1, 2, 3, 4, 5]\n  # l2 = [2, 3, 4, 5, 6, 7]\n  # l3 = [3, 4, 5, 6, 7, 8]\n  # => [3, 4, 5]\n  # l1 = [1, 2, 3, 4, 5]\n  # l2 = [2, 3, 4, 5, 6, 7]\n  # l3 = [3, 4, 5, 6, 7]\n  # => [3, 4, 5]\n  # l1 = [1, 2, 3, 4, 5]\n  # l2 = [2, 3, 4, 5, 6]\n  # l3 = [3, 4, 5, 6, 7]\n  # => [3, 4, 5]\n  # l1 = [1, 2, 3, 4, 5]\n  # l2 = [2, 3, 4, 5, 6]\n  # l3 = [3, 4, 5, 6, 7]\n  # => [3, 4, 5]\n  # l1 = [1, 2, 3, 4, 5]\n  # l2 = [2, 3, 4, 5, 6]\n  # l3 = [3, 4, 5, 6, 7]\n  # => [3, 4, 5]\n  # l1 = [1, 2, 3, 4, 5]\n  # l2 = [2, 3, 4, 5, 6]\n  # l3 = [3, 4, 5, 6, 7]\n  # => [3,",
    "  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.first : nil }.compact\nend",
    "  l1.each_with_index.select { |e, i| e == l2[i] && e == l3[i] }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x| x[0] if x[0] == x[1] && x[1] == x[2] }.compact\nend",
    "  l1.zip(l2, l3).select { |e| e.uniq.size == 1 }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |e| e[0] if e[0] == e[1] && e[1] == e[2] }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend",
    "  result = []\n  l1.each_with_index do |e, i|\n    if e == l2[i] && e == l3[i]\n      result << e\n    end\n  end\n  result\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |e| e[0] if e[0] == e[1] && e[1] == e[2] }.compact\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend",
    "  # TODO\n  l1.zip(l2, l3).select {|x, y, z| x == y && y == z}.flatten\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.uniq[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x[0] if x[0] == x[1] && x[1] == x[2] }.compact\nend",
    "  l1.each_with_index.select { |e, i| e == l2[i] && e == l3[i] }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e.first : nil }.compact\nend",
    "  # write your code here\n  l1.zip(l2, l3).select { |e| e.uniq.length == 1 }.map { |e| e[0] }\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x, y, z| [x, y, z] if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map{|x| x.uniq.length == 1 ? x.uniq[0] : nil}.compact\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.length == 1 ? e.first : nil }.compact\nend",
    "  l1.zip(l2, l3).select { |e| e.uniq.size == 1 }.map(&:first)\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map(&:first)\nend",
    "  l1.each_with_index.select { |x, i| x == l2[i] && x == l3[i] }.map(&:first)\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |x| x[0] if x[0] == x[1] && x[1] == x[2] }.compact\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map(&:first)\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map(&:first)\nend",
    "  l1.each_with_index.select{|x, i| l2[i] == x && l3[i] == x}.map(&:first)\nend",
    "  l1.zip(l2, l3).map { |e| e.uniq.size == 1 ? e[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x[0] if x[0] == x[1] && x[1] == x[2] }.compact\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map(&:first)\nend",
    "  l1.zip(l2, l3).select { |x, y, z| x == y && y == z }.map(&:first)\nend",
    "  result = []\n  l1.each_with_index do |e, i|\n    if l2[i] == e && l3[i] == e\n      result << e\n    end\n  end\n  result\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.size == 1 ? x.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map(&:first)\nend",
    "  common_elements = []\n  l1.each_with_index do |element, index|\n    if element == l2[index] && element == l3[index]\n      common_elements << element\n    end\n  end\n  common_elements\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x.first : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x| x.uniq.length == 1 ? x[0] : nil }.compact\nend",
    "  l1.zip(l2, l3).map { |x, y, z| x if x == y && y == z }.compact\nend"
  ]
}