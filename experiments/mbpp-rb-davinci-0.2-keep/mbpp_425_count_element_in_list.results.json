{
  "name": "mbpp_425_count_element_in_list",
  "language": "rb",
  "prompt": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_425_count_element_in_list.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpph_x2f0j\nStarted\n.\nFinished in 0.000382261 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2616.01 tests/s, 7848.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |element|\n    if element.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpykoc8qb_\nStarted\n.\nFinished in 0.000392184 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2549.82 tests/s, 7649.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpphaa1vmp\nStarted\n.\nFinished in 0.000342442 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2920.20 tests/s, 8760.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |i|\n    if i.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpanxic4bb\nStarted\n.\nFinished in 0.000394663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2533.81 tests/s, 7601.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |element|\n    if element.class == Array\n      count += count_element_in_list(element, x)\n    else\n      count += 1 if element == x\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0mgl00cz\nStarted\n.\nFinished in 0.000390727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2559.33 tests/s, 7678.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |list| list.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptm3reqwh\nStarted\n.\nFinished in 0.00038846 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.27 tests/s, 7722.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |list|\n    if list.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw4myzw8g\nStarted\n.\nFinished in 0.000406264 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.45 tests/s, 7384.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |i|\n    if i.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpanxic4bb\nStarted\n.\nFinished in 0.000394663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2533.81 tests/s, 7601.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |i|\n    if i.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpanxic4bb\nStarted\n.\nFinished in 0.000394663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2533.81 tests/s, 7601.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpph_x2f0j\nStarted\n.\nFinished in 0.000382261 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2616.01 tests/s, 7848.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpph_x2f0j\nStarted\n.\nFinished in 0.000382261 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2616.01 tests/s, 7848.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |element|\n    if element.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpykoc8qb_\nStarted\n.\nFinished in 0.000392184 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2549.82 tests/s, 7649.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpph_x2f0j\nStarted\n.\nFinished in 0.000382261 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2616.01 tests/s, 7848.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpph_x2f0j\nStarted\n.\nFinished in 0.000382261 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2616.01 tests/s, 7848.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpph_x2f0j\nStarted\n.\nFinished in 0.000382261 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2616.01 tests/s, 7848.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |item|\n    if item.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe6lir6g0\nStarted\n.\nFinished in 0.000421928 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2370.07 tests/s, 7110.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphhojrqij\nStarted\n.\nFinished in 0.000419016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2386.54 tests/s, 7159.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |i|\n    if i.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpanxic4bb\nStarted\n.\nFinished in 0.000394663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2533.81 tests/s, 7601.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |item|\n    if item.include?(x)\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0zie3k_e\nStarted\n.\nFinished in 0.000649338 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1540.03 tests/s, 4620.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpph_x2f0j\nStarted\n.\nFinished in 0.000382261 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2616.01 tests/s, 7848.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpph_x2f0j\nStarted\n.\nFinished in 0.000382261 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2616.01 tests/s, 7848.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.map { |e| e.count(x) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpudeg_zl3\nStarted\n.\nFinished in 0.0004278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2337.54 tests/s, 7012.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpph_x2f0j\nStarted\n.\nFinished in 0.000382261 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2616.01 tests/s, 7848.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |i|\n    if i.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpanxic4bb\nStarted\n.\nFinished in 0.000394663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2533.81 tests/s, 7601.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpph_x2f0j\nStarted\n.\nFinished in 0.000382261 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2616.01 tests/s, 7848.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpph_x2f0j\nStarted\n.\nFinished in 0.000382261 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2616.01 tests/s, 7848.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |element|\n    if element.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpykoc8qb_\nStarted\n.\nFinished in 0.000392184 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2549.82 tests/s, 7649.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |element|\n    if element.is_a?(Array)\n      count += count_element_in_list(element, x)\n    else\n      count += 1 if element == x\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpduf7xm5a\nStarted\n.\nFinished in 0.000422149 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.83 tests/s, 7106.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |i|\n    if i.include?(x)\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi91n7ia_\nStarted\n.\nFinished in 0.000419579 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2383.34 tests/s, 7150.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |i|\n    if i.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpanxic4bb\nStarted\n.\nFinished in 0.000394663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2533.81 tests/s, 7601.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |element|\n    if element.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpykoc8qb_\nStarted\n.\nFinished in 0.000392184 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2549.82 tests/s, 7649.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.select { |sublist| sublist.include?(x) }.size\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppjh3m2jh\nStarted\n.\nFinished in 0.000431118 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.55 tests/s, 6958.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |list| list.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptm3reqwh\nStarted\n.\nFinished in 0.00038846 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.27 tests/s, 7722.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpph_x2f0j\nStarted\n.\nFinished in 0.000382261 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2616.01 tests/s, 7848.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |i|\n    if i.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpanxic4bb\nStarted\n.\nFinished in 0.000394663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2533.81 tests/s, 7601.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |y|\n    if y.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphz8x5qpi\nStarted\n.\nFinished in 0.000420667 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2377.18 tests/s, 7131.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |i|\n    if i.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpanxic4bb\nStarted\n.\nFinished in 0.000394663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2533.81 tests/s, 7601.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |list| list.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptm3reqwh\nStarted\n.\nFinished in 0.00038846 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.27 tests/s, 7722.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |e| e.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyt4hs0tr\nStarted\n.\nFinished in 0.000409913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2439.54 tests/s, 7318.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.map { |i| i.count(x) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmploslzs30\nStarted\n.\nFinished in 0.000402842 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2482.36 tests/s, 7447.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |i|\n    if i.include?(x)\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi91n7ia_\nStarted\n.\nFinished in 0.000419579 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2383.34 tests/s, 7150.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpphaa1vmp\nStarted\n.\nFinished in 0.000342442 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2920.20 tests/s, 8760.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |list|\n    count += 1 if list.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbub9pwl2\nStarted\n.\nFinished in 0.000399195 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2505.04 tests/s, 7515.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpphaa1vmp\nStarted\n.\nFinished in 0.000342442 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2920.20 tests/s, 8760.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |list| list.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptm3reqwh\nStarted\n.\nFinished in 0.00038846 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.27 tests/s, 7722.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |list| list.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptm3reqwh\nStarted\n.\nFinished in 0.00038846 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.27 tests/s, 7722.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |list| list.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptm3reqwh\nStarted\n.\nFinished in 0.00038846 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.27 tests/s, 7722.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.map{|i| i.count(x)}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpumxexrb3\nStarted\n.\nFinished in 0.00039097 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2557.74 tests/s, 7673.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphhojrqij\nStarted\n.\nFinished in 0.000419016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2386.54 tests/s, 7159.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |element|\n    if element.is_a?(Array)\n      count += count_element_in_list(element, x)\n    elsif element == x\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5psogner\nStarted\n.\nFinished in 0.000428369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2334.44 tests/s, 7003.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |list| list.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptm3reqwh\nStarted\n.\nFinished in 0.00038846 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.27 tests/s, 7722.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpphaa1vmp\nStarted\n.\nFinished in 0.000342442 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2920.20 tests/s, 8760.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpphaa1vmp\nStarted\n.\nFinished in 0.000342442 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2920.20 tests/s, 8760.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |list| list.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptm3reqwh\nStarted\n.\nFinished in 0.00038846 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.27 tests/s, 7722.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |list|\n    count += 1 if list.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbub9pwl2\nStarted\n.\nFinished in 0.000399195 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2505.04 tests/s, 7515.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.map { |sublist| sublist.include?(x) ? 1 : 0 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj9pm_sj4\nStarted\n.\nFinished in 0.000602405 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1660.01 tests/s, 4980.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |list| list.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptm3reqwh\nStarted\n.\nFinished in 0.00038846 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.27 tests/s, 7722.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |list| list.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptm3reqwh\nStarted\n.\nFinished in 0.00038846 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.27 tests/s, 7722.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |item| item.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhn8njhw\nStarted\n.\nFinished in 0.000657486 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1520.94 tests/s, 4562.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |element|\n    if element.class == Array\n      count += count_element_in_list(element, x)\n    else\n      count += 1 if element == x\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0mgl00cz\nStarted\n.\nFinished in 0.000390727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2559.33 tests/s, 7678.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |list| list.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptm3reqwh\nStarted\n.\nFinished in 0.00038846 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.27 tests/s, 7722.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |i|\n    if i.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpanxic4bb\nStarted\n.\nFinished in 0.000394663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2533.81 tests/s, 7601.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |i|\n    if i.include?(x)\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi91n7ia_\nStarted\n.\nFinished in 0.000419579 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2383.34 tests/s, 7150.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphhojrqij\nStarted\n.\nFinished in 0.000419016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2386.54 tests/s, 7159.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpphaa1vmp\nStarted\n.\nFinished in 0.000342442 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2920.20 tests/s, 8760.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |element|\n    if element.class == Array\n      count += count_element_in_list(element, x)\n    elsif element == x\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptfl3ijc8\nStarted\n.\nFinished in 0.000420468 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2378.30 tests/s, 7134.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |e|\n    if e.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuv2a_fio\nStarted\n.\nFinished in 0.000400498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2496.89 tests/s, 7490.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpph_x2f0j\nStarted\n.\nFinished in 0.000382261 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2616.01 tests/s, 7848.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |i|\n    if i.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpanxic4bb\nStarted\n.\nFinished in 0.000394663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2533.81 tests/s, 7601.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |list| list.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptm3reqwh\nStarted\n.\nFinished in 0.00038846 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.27 tests/s, 7722.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpph_x2f0j\nStarted\n.\nFinished in 0.000382261 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2616.01 tests/s, 7848.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |e| e.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyt4hs0tr\nStarted\n.\nFinished in 0.000409913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2439.54 tests/s, 7318.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |i|\n    if i.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpanxic4bb\nStarted\n.\nFinished in 0.000394663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2533.81 tests/s, 7601.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpph_x2f0j\nStarted\n.\nFinished in 0.000382261 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2616.01 tests/s, 7848.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |i|\n    if i.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpanxic4bb\nStarted\n.\nFinished in 0.000394663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2533.81 tests/s, 7601.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |element|\n    if element.include?(x)\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0khbvgzk\nStarted\n.\nFinished in 0.000607694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1645.57 tests/s, 4936.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpph_x2f0j\nStarted\n.\nFinished in 0.000382261 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2616.01 tests/s, 7848.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |element|\n    if element.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpykoc8qb_\nStarted\n.\nFinished in 0.000392184 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2549.82 tests/s, 7649.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |i|\n    if i.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpanxic4bb\nStarted\n.\nFinished in 0.000394663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2533.81 tests/s, 7601.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |i|\n    if i.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpanxic4bb\nStarted\n.\nFinished in 0.000394663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2533.81 tests/s, 7601.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpph_x2f0j\nStarted\n.\nFinished in 0.000382261 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2616.01 tests/s, 7848.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |list| list.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptm3reqwh\nStarted\n.\nFinished in 0.00038846 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.27 tests/s, 7722.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |list|\n    if list.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw4myzw8g\nStarted\n.\nFinished in 0.000406264 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.45 tests/s, 7384.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    sublist.each do |element|\n      if element == x\n        count += 1\n      end\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphhojrqij\nStarted\n.\nFinished in 0.000419016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2386.54 tests/s, 7159.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |i|\n    if i.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpanxic4bb\nStarted\n.\nFinished in 0.000394663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2533.81 tests/s, 7601.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.map { |sublist| sublist.count(x) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpef8fvrwi\nStarted\n.\nFinished in 0.00040819 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2449.84 tests/s, 7349.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |element|\n    if element.is_a?(Array)\n      count += count_element_in_list(element, x)\n    elsif element == x\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5psogner\nStarted\n.\nFinished in 0.000428369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2334.44 tests/s, 7003.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolfqb720\nStarted\n.\nFinished in 0.000406311 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.17 tests/s, 7383.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |item|\n    if item.is_a?(Array)\n      count += count_element_in_list(item, x)\n    else\n      count += 1 if item == x\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn4962k6a\nStarted\n.\nFinished in 0.000401488 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2490.73 tests/s, 7472.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpphaa1vmp\nStarted\n.\nFinished in 0.000342442 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2920.20 tests/s, 8760.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.map { |e| e.count(x) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpudeg_zl3\nStarted\n.\nFinished in 0.0004278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2337.54 tests/s, 7012.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpphaa1vmp\nStarted\n.\nFinished in 0.000342442 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2920.20 tests/s, 8760.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    count += 1 if sublist.include?(x)\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdfppm1d4\nStarted\n.\nFinished in 0.000632357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.39 tests/s, 4744.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |i|\n    if i.include?(x)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpanxic4bb\nStarted\n.\nFinished in 0.000394663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2533.81 tests/s, 7601.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  count = 0\n  list1.each do |sublist|\n    if sublist.include?(x)\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpphaa1vmp\nStarted\n.\nFinished in 0.000342442 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2920.20 tests/s, 8760.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x)\n  list1.count { |sublist| sublist.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21eps53v\nStarted\n.\nFinished in 0.000377485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2649.11 tests/s, 7947.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}