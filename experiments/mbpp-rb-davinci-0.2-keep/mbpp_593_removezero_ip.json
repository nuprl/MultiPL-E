{
  "name": "mbpp_593_removezero_ip",
  "language": "rb",
  "prompt": "# Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_removezero_ip\n    candidate = method(:removezero_ip)\n    assert_equal(\"216.8.94.196\", candidate.call(\"216.08.094.196\"))\n    assert_equal(\"12.1.24\", candidate.call(\"12.01.024\"))\n    assert_equal(\"216.8.94.196\", candidate.call(\"216.08.094.0196\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  ip.split('.').map { |x| x.to_i.to_s }.join('.')\nend",
    "  ip.split('.').map { |i| i.to_i.to_s }.join('.')\nend",
    "  ip.split('.').map { |x| x.to_i.to_s }.join('.')\nend",
    "  ip.split('.').map { |x| x.to_i.to_s }.join('.')\nend",
    "  ip.split('.').map { |x| x.to_i.to_s }.join('.')\nend",
    "  ip.split('.').map { |x| x.to_i.to_s }.join('.')\nend",
    "  ip.split('.').map { |i| i.to_i.to_s }.join('.')\nend",
    "  ip.split('.').map { |x| x.to_i.to_s }.join('.')\nend",
    "  ip.split('.').map{|i| i.to_i.to_s}.join('.')\nend",
    "  ip.split('.').map { |x| x.to_i.to_s }.join('.')\nend",
    "  ip.split('.').map { |x| x.to_i.to_s }.join('.')\nend",
    "  ip.split('.').map { |x| x.to_i.to_s }.join('.')\nend",
    "  ip.split('.').map { |i| i.to_i.to_s }.join('.')\nend",
    "  ip.split(\".\").map { |i| i.to_i.to_s }.join(\".\")\nend",
    "  ip.split('.').map { |x| x.to_i.to_s }.join('.')\nend",
    "  ip.split(\".\").map {|i| i.to_i.to_s}.join(\".\")\nend",
    "  ip.split('.').map {|i| i.to_i.to_s}.join('.')\nend",
    "  ip.split('.').map { |i| i.to_i.to_s }.join('.')\nend",
    "  ip.split('.').map { |i| i.to_i.to_s }.join('.')\nend",
    "  ip.split('.').map { |x| x.to_i.to_s }.join('.')\nend"
  ]
}