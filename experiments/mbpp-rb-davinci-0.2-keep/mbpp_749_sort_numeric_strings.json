{
  "name": "mbpp_749_sort_numeric_strings",
  "language": "rb",
  "prompt": "# Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\ndef sort_numeric_strings(nums_str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numeric_strings\n    candidate = method(:sort_numeric_strings)\n    assert_equal([-500, -12, 0, 4, 7, 12, 45, 100, 200], candidate.call([\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"]))\n    assert_equal([1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9], candidate.call([\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"]))\n    assert_equal([1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17], candidate.call([\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  nums_str.sort_by { |num| num.to_i }\nend",
    "  nums_str.sort_by { |num| num.to_i }\nend",
    "  nums_str.sort_by { |x| x.to_i }\nend",
    "  nums_str.sort_by { |num| num.to_i }\nend",
    "  nums_str.sort_by { |num| num.to_i }\nend",
    "  nums_str.sort_by { |num| num.to_i }\nend",
    "  nums_str.sort_by { |num| num.to_i }\nend",
    "  nums_str.sort_by { |num| num.to_i }\nend",
    "  nums_str.sort_by { |num| num.to_i }\nend",
    "  nums_str.sort_by { |num| num.to_i }\nend",
    "  nums_str.sort_by { |num| num.to_i }\nend",
    "  nums_str.sort_by { |num| num.to_i }\nend",
    "  nums_str.sort_by { |num| num.to_i }\nend",
    "  nums_str.sort_by { |num| num.to_i }\nend",
    "  nums_str.sort_by { |num| num.to_i }\nend",
    "  nums_str.sort_by { |num| num.to_i }\nend",
    "  nums_str.sort_by { |num| num.to_i }\nend",
    "  nums_str.sort_by { |num| num.to_i }\nend",
    "  nums_str.sort_by { |num| num.to_i }\nend",
    "  nums_str.sort_by { |x| x.to_i }\nend"
  ]
}