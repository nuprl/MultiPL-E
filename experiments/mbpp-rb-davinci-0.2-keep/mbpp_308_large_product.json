{
  "name": "mbpp_308_large_product",
  "language": "rb",
  "prompt": "# Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\ndef large_product(nums1, nums2, n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_large_product\n    candidate = method(:large_product)\n    assert_equal([60, 54, 50], candidate.call([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3))\n    assert_equal([60, 54, 50, 48], candidate.call([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4))\n    assert_equal([60, 54, 50, 48, 45], candidate.call([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  nums1.sort!\n  nums2.sort!\n  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort!\n  products[-n..-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  # sort both arrays in descending order\n  # multiply the first n elements of each array\n  # return the largest n products\n  nums1.sort!.reverse!\n  nums2.sort!.reverse!\n  products = []\n  n.times do |i|\n    products << nums1[i] * nums2[i]\n  end\n  products.max\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  # Write your code here\n  nums1.sort.reverse.map { |x| nums2.sort.reverse.map { |y| x * y } }.flatten.sort.reverse[n - 1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  nums1.sort!\n  nums2.sort!\n  products = []\n  (0...nums1.length).each do |i|\n    (0...nums2.length).each do |j|\n      products << nums1[i] * nums2[j]\n    end\n  end\n  products.sort!\n  products[-n..-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  # Write your code here\n  nums1.sort!\n  nums2.sort!\n  nums1.reverse!\n  nums2.reverse!\n  result = []\n  i = 0\n  while i < n\n    result << nums1[i] * nums2[i]\n    i += 1\n  end\n  result\nend",
    "  nums1.product(nums2).map { |pair| pair.reduce(:*) }.sort.reverse[n - 1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  nums1.sort.reverse.take(n).product(nums2.sort.reverse.take(n)).map { |a, b| a * b }.sort.reverse.take(n)\nend",
    "  nums1.product(nums2).sort_by { |pair| pair.reduce(:*) }.last(n)\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0..n-1]\nend",
    "  nums1.sort!.reverse!\n  nums2.sort!.reverse!\n  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort!.reverse!\n  products[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  nums1.sort!\n  nums2.sort!\n  nums1.reverse!\n  nums2.reverse!\n  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort!\n  products.reverse!\n  products[0..n-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  nums1.product(nums2).sort_by { |n1, n2| n1 * n2 }.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  # Write your code here\n  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0..n-1]\nend",
    "  nums1.product(nums2).map { |pair| pair.reduce(:*) }.sort.reverse[n-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  # Write your code here\n  nums1.sort!\n  nums2.sort!\n  nums1.reverse!\n  nums2.reverse!\n  result = []\n  i = 0\n  while i < n\n    result << nums1[i] * nums2[i]\n    i += 1\n  end\n  result\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0..n-1]\nend",
    "  nums1.product(nums2).sort_by { |a, b| a * b }.last(n)\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0..n-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort[-n..-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0..n-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  nums1.sort.reverse.take(n).product(nums2.sort.reverse.take(n)).map { |x, y| x * y }.sort.reverse.take(n)\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  nums1.product(nums2).map { |a, b| a * b }.sort.reverse[n - 1]\nend",
    "  nums1.product(nums2).sort_by { |a, b| a * b }.reverse.take(n)\nend",
    "  # Write your code here\n  nums1.sort!\n  nums2.sort!\n  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort!\n  products[-n..-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  # Write your code here\n  nums1.sort!\n  nums2.sort!\n  nums1.reverse!\n  nums2.reverse!\n  result = []\n  i = 0\n  while i < n\n    result << nums1[i] * nums2[i]\n    i += 1\n  end\n  result\nend",
    "  nums1.sort!\n  nums2.sort!\n  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort!.reverse!\n  products[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort[-n..-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort[-n..-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.last(n)\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0..n-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0..n-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  nums1.product(nums2).sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort[-n..-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort[-n..-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  nums1.product(nums2).map { |pair| pair.reduce(:*) }.sort.reverse[n - 1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = nums1.product(nums2).map { |pair| pair.inject(:*) }.sort.reverse\n  products[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort[-n..-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0..n-1]\nend",
    "  nums1.product(nums2).sort_by { |a, b| a * b }.last(n)\nend",
    "  nums1.sort!.reverse!\n  nums2.sort!.reverse!\n  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort!.reverse!\n  products[0..n - 1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  # Write your code here\n  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0..n-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0..n-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  nums1.product(nums2).map { |a, b| a * b }.sort.reverse[n - 1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0..n-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  nums1.product(nums2).map { |a, b| a * b }.sort.reverse[n - 1]\nend",
    "  products = nums1.product(nums2).map { |a, b| a * b }.sort.reverse\n  products[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort[-n..-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  # Write your code here\n  nums1.sort!\n  nums2.sort!\n  result = []\n  i = nums1.length - 1\n  j = nums2.length - 1\n  while result.length < n\n    if nums1[i] * nums2[j] > nums1[i] * nums2[j - 1]\n      result << nums1[i] * nums2[j]\n      j -= 1\n    else\n      result << nums1[i] * nums2[j - 1]\n      i -= 1\n    end\n  end\n  result\nend",
    "  # Write your code here\n  nums1.sort!\n  nums2.sort!\n  result = []\n  i = nums1.length - 1\n  j = nums2.length - 1\n  while n > 0\n    if nums1[i] * nums2[j] > nums1[i - 1] * nums2[j - 1]\n      result << nums1[i] * nums2[j]\n      j -= 1\n    else\n      result << nums1[i - 1] * nums2[j - 1]\n      i -= 1\n    end\n    n -= 1\n  end\n  result\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.last(n)\nend",
    "  # Write your code here\n  nums1.sort!\n  nums2.sort!\n  result = []\n  while n > 0\n    result << nums1.last * nums2.last\n    nums1.pop\n    nums2.pop\n    n -= 1\n  end\n  result.sort!\n  result[-1]\nend",
    "  nums1.product(nums2).sort_by { |a, b| a * b }.reverse[0...n]\nend",
    "  products = nums1.product(nums2).map { |pair| pair.reduce(:*) }.sort.reverse\n  products[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0..n-1]\nend",
    "  # Write your code here\n  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  # create a hash to store the products\n  products = {}\n  # iterate through the first list\n  nums1.each do |num1|\n    # iterate through the second list\n    nums2.each do |num2|\n      # multiply the two numbers and store the product in the hash\n      products[num1 * num2] = [num1, num2]\n    end\n  end\n  # sort the hash by the keys (products)\n  products = products.sort_by { |product, factors| product }\n  # return the last n elements of the hash\n  products[-n..-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  # Write your code here\n  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[n-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0..n-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  nums1.product(nums2).sort_by { |a, b| a * b }.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = nums1.product(nums2)\n  products.sort_by { |pair| pair.reduce(:*) }.last(n)\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  # Write your code here\n  nums1.sort! { |a, b| b <=> a }\n  nums2.sort! { |a, b| b <=> a }\n  result = []\n  i = 0\n  j = 0\n  while result.length < n\n    if nums1[i] * nums2[j] > nums1[i] * nums2[j + 1]\n      result << nums1[i] * nums2[j]\n      j += 1\n    else\n      result << nums1[i] * nums2[j + 1]\n      i += 1\n    end\n  end\n  result\nend",
    "  nums1.product(nums2).sort_by { |a, b| a * b }.last(n)\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0..n-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  nums1.product(nums2).sort_by { |a, b| a * b }.last(n)\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0..n-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  nums1.product(nums2).map { |pair| pair.reduce(:*) }.sort.reverse[n - 1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  nums1.product(nums2).sort_by { |a, b| a * b }.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = nums1.product(nums2).map { |pair| pair.reduce(:*) }.sort.reverse\n  products[0...n]\nend",
    "  products = nums1.product(nums2).map { |pair| pair.reduce(:*) }.sort.reverse\n  products[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0..n-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0..n-1]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[0...n]\nend",
    "  products = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      products << num1 * num2\n    end\n  end\n  products.sort.reverse[n-1]\nend"
  ]
}