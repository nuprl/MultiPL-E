{
  "name": "mbpp_806_max_run_uppercase",
  "language": "rb",
  "prompt": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyo4wa8dl\nStarted\n.\nFinished in 0.000439154 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2277.11 tests/s, 6831.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  count = 0\n  max_count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      count += 1\n    else\n      count = 0\n    end\n    max_count = count if count > max_count\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdswyj0__\nStarted\n.\nFinished in 0.000380037 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2631.32 tests/s, 7893.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.chars.chunk { |c| c.upcase == c }.max_by { |k, v| v.size }.last.size\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4uszufx_\nStarted\n.\nFinished in 0.000440663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2269.31 tests/s, 6807.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.match(/[A-Z]/)\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplz2k6cq7\nStarted\n.\nFinished in 0.000398357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2510.31 tests/s, 7530.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.split('').each do |c|\n    if c == c.upcase\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpji8f384e\nStarted\n.\nFinished in 0.000408611 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2447.32 tests/s, 7341.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      count += 1\n      max_count = count if count > max_count\n    else\n      count = 0\n    end\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_0rptfj9\nStarted\n.\nFinished in 0.000439487 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2275.38 tests/s, 6826.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppntle3fa\nStarted\n.\nFinished in 0.000404633 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2471.38 tests/s, 7414.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppntle3fa\nStarted\n.\nFinished in 0.000404633 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2471.38 tests/s, 7414.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      count += 1\n    else\n      max_count = count if count > max_count\n      count = 0\n    end\n  end\n  max_count = count if count > max_count\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_f7j4u09\nStarted\n.\nFinished in 0.000407779 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2452.31 tests/s, 7356.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.chars.chunk { |c| c.upcase == c }.map { |c, a| a.size }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa5qu4qeh\nStarted\n.\nFinished in 0.000475504 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2103.03 tests/s, 6309.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      count += 1\n      max_count = count if count > max_count\n    else\n      count = 0\n    end\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_0rptfj9\nStarted\n.\nFinished in 0.000439487 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2275.38 tests/s, 6826.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpeqmhfvaa\nStarted\n.\nFinished in 0.000436383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2291.56 tests/s, 6874.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char.match(/[A-Z]/)\n      count += 1\n      max_count = count if count > max_count\n    else\n      count = 0\n    end\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpaoe7ng7f\nStarted\n.\nFinished in 0.000498502 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2006.01 tests/s, 6018.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyo4wa8dl\nStarted\n.\nFinished in 0.000439154 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2277.11 tests/s, 6831.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnvkv0x7s\nStarted\n.\nFinished in 0.000436501 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.95 tests/s, 6872.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.chars.chunk { |c| c.upcase == c }.map { |k, v| v.join }.max_by(&:length)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "Loaded suite /tmp/tmpbi49kt9e\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmpbi49kt9e.rb:9:in `test_max_run_uppercase'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_run_uppercase\n      8:     candidate = method(:max_run_uppercase)\n  =>  9:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n     10:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     11:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     12:   end\n<5> expected but was\n<\"ISBES\">\n===============================================================================\n\nFinished in 0.006449854 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.04 tests/s, 155.04 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyo4wa8dl\nStarted\n.\nFinished in 0.000439154 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2277.11 tests/s, 6831.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.split('').each_with_index.map do |char, index|\n    if char == char.upcase\n      test_str.split('')[index..-1].join('').split('').take_while { |char| char == char.upcase }.count\n    end\n  end.compact.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprvhq8jj6\nStarted\n.\nFinished in 0.000708763 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1410.91 tests/s, 4232.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyo4wa8dl\nStarted\n.\nFinished in 0.000439154 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2277.11 tests/s, 6831.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk2k7wji7\nStarted\n.\nFinished in 0.000433734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.56 tests/s, 6916.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnvkv0x7s\nStarted\n.\nFinished in 0.000436501 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.95 tests/s, 6872.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp_pah07zf.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_pah07zf.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.chars.chunk { |c| c == c.upcase }.map { |k, v| v.join }.max_by(&:length)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "Loaded suite /tmp/tmpybsawa51\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmpybsawa51.rb:9:in `test_max_run_uppercase'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_run_uppercase\n      8:     candidate = method(:max_run_uppercase)\n  =>  9:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n     10:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     11:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     12:   end\n<5> expected but was\n<\"ISBES\">\n===============================================================================\n\nFinished in 0.007504292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.26 tests/s, 133.26 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp_pah07zf.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_pah07zf.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      count += 1\n      max_count = count if count > max_count\n    else\n      count = 0\n    end\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_0rptfj9\nStarted\n.\nFinished in 0.000439487 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2275.38 tests/s, 6826.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprgnovbso\nStarted\n.\nFinished in 0.000436727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2289.76 tests/s, 6869.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.chars.chunk { |c| c.upcase == c }.map { |c, a| a.join }.max_by(&:length)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "Loaded suite /tmp/tmp29l72otc\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmp29l72otc.rb:9:in `test_max_run_uppercase'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_run_uppercase\n      8:     candidate = method(:max_run_uppercase)\n  =>  9:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n     10:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     11:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     12:   end\n<5> expected but was\n<\"ISBES\">\n===============================================================================\n\nFinished in 0.007700127 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.87 tests/s, 129.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyo4wa8dl\nStarted\n.\nFinished in 0.000439154 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2277.11 tests/s, 6831.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      run += 1\n    else\n      max_run = run if run > max_run\n      run = 0\n    end\n  end\n  max_run = run if run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncgff1uh\nStarted\n.\nFinished in 0.000423297 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2362.41 tests/s, 7087.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp_pah07zf.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_pah07zf.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprgnovbso\nStarted\n.\nFinished in 0.000436727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2289.76 tests/s, 6869.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      run += 1\n    else\n      run = 0\n    end\n    max_run = run if run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx97ze0sg\nStarted\n.\nFinished in 0.000392613 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.04 tests/s, 7641.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.chars.chunk(&:upcase).max_by { |_, v| v.size }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "Loaded suite /tmp/tmp4ogxffk9\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmp4ogxffk9.rb:9:in `test_max_run_uppercase'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_run_uppercase\n      8:     candidate = method(:max_run_uppercase)\n  =>  9:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n     10:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     11:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     12:   end\n<5> expected but was\n<\"G\">\n===============================================================================\n\nFinished in 0.009064228 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n110.32 tests/s, 110.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpeqmhfvaa\nStarted\n.\nFinished in 0.000436383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2291.56 tests/s, 6874.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.chars.chunk_while { |a, b| a.upcase == b.upcase }.map { |a| a.join }.max_by(&:length)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "Loaded suite /tmp/tmpvkls5in7\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmpvkls5in7.rb:9:in `test_max_run_uppercase'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_run_uppercase\n      8:     candidate = method(:max_run_uppercase)\n  =>  9:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n     10:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     11:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     12:   end\n<5> expected but was\n<\"G\">\n===============================================================================\n\nFinished in 0.006760675 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.91 tests/s, 147.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyo4wa8dl\nStarted\n.\nFinished in 0.000439154 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2277.11 tests/s, 6831.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.match(/[A-Z]/)\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwv74pa_g\nStarted\n.\nFinished in 0.000444176 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2251.36 tests/s, 6754.08 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk2k7wji7\nStarted\n.\nFinished in 0.000433734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.56 tests/s, 6916.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd92xo9zx\nStarted\n.\nFinished in 0.000447305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2235.61 tests/s, 6706.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      count += 1\n      max_count = count if count > max_count\n    else\n      count = 0\n    end\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbaz6frrn\nStarted\n.\nFinished in 0.000469887 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2128.17 tests/s, 6384.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      run += 1\n    else\n      run = 0\n    end\n    max_run = run if run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx97ze0sg\nStarted\n.\nFinished in 0.000392613 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.04 tests/s, 7641.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      count += 1\n    else\n      count = 0\n    end\n    max_count = count if count > max_count\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3iepiyd4\nStarted\n.\nFinished in 0.000430766 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.45 tests/s, 6964.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnvkv0x7s\nStarted\n.\nFinished in 0.000436501 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.95 tests/s, 6872.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      count += 1\n    else\n      count = 0\n    end\n    max_count = count if count > max_count\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0oey64b3\nStarted\n.\nFinished in 0.000472834 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2114.91 tests/s, 6344.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp_pah07zf.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_pah07zf.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd92xo9zx\nStarted\n.\nFinished in 0.000447305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2235.61 tests/s, 6706.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppntle3fa\nStarted\n.\nFinished in 0.000404633 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2471.38 tests/s, 7414.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2y0gilyr\nStarted\n.\nFinished in 0.000434623 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2300.84 tests/s, 6902.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd92xo9zx\nStarted\n.\nFinished in 0.000447305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2235.61 tests/s, 6706.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpeqmhfvaa\nStarted\n.\nFinished in 0.000436383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2291.56 tests/s, 6874.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprgnovbso\nStarted\n.\nFinished in 0.000436727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2289.76 tests/s, 6869.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpeqmhfvaa\nStarted\n.\nFinished in 0.000436383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2291.56 tests/s, 6874.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd92xo9zx\nStarted\n.\nFinished in 0.000447305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2235.61 tests/s, 6706.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprgnovbso\nStarted\n.\nFinished in 0.000436727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2289.76 tests/s, 6869.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "Loaded suite /tmp/tmpni7ecjrg\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmpni7ecjrg.rb:9:in `test_max_run_uppercase'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_run_uppercase\n      8:     candidate = method(:max_run_uppercase)\n  =>  9:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n     10:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     11:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     12:   end\n<5> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007936665 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n126.00 tests/s, 126.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.match(/[A-Z]/)\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplz2k6cq7\nStarted\n.\nFinished in 0.000398357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2510.31 tests/s, 7530.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "Loaded suite /tmp/tmpg3v5fipm\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmpg3v5fipm.rb:20:in `test_max_run_uppercase'\n     17:   def test_max_run_uppercase\n     18:     candidate = method(:max_run_uppercase)\n     19:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n  => 20:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     21:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     22:   end\n     23: end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.013411758 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.56 tests/s, 149.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      count += 1\n    else\n      count = 0\n    end\n    max_count = count if count > max_count\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3iepiyd4\nStarted\n.\nFinished in 0.000430766 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.45 tests/s, 6964.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.match(/[A-Z]/)\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpha16bgci\nStarted\n.\nFinished in 0.000485797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2058.47 tests/s, 6175.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.chars.chunk{|c| c.upcase == c}.map{|k,v| v.size}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdkvaefnb\nStarted\n.\nFinished in 0.000476869 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.01 tests/s, 6291.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk2k7wji7\nStarted\n.\nFinished in 0.000433734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.56 tests/s, 6916.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.split(\"\").map {|x| x.ord}.select {|x| x >= 65 && x <= 90}.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "Loaded suite /tmp/tmpnaa2zihl\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmpnaa2zihl.rb:9:in `test_max_run_uppercase'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_run_uppercase\n      8:     candidate = method(:max_run_uppercase)\n  =>  9:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n     10:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     11:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     12:   end\n<5> expected but was\n<13>\n===============================================================================\n\nFinished in 0.006990176 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.06 tests/s, 143.06 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.chars.chunk_while { |i, j| i.upcase == j.upcase }.map(&:join).max_by(&:size)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "Loaded suite /tmp/tmpa6gbhov4\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmpa6gbhov4.rb:9:in `test_max_run_uppercase'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_run_uppercase\n      8:     candidate = method(:max_run_uppercase)\n  =>  9:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n     10:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     11:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     12:   end\n<5> expected but was\n<\"G\">\n===============================================================================\n\nFinished in 0.007833104 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n127.66 tests/s, 127.66 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp_pah07zf.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_pah07zf.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.chars.chunk_while { |a, b| a.upcase == b.upcase }.max_by(&:size).join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "Loaded suite /tmp/tmp75462q01\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmp75462q01.rb:9:in `test_max_run_uppercase'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_run_uppercase\n      8:     candidate = method(:max_run_uppercase)\n  =>  9:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n     10:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     11:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     12:   end\n<5> expected but was\n<\"G\">\n===============================================================================\n\nFinished in 0.006520784 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.36 tests/s, 153.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppntle3fa\nStarted\n.\nFinished in 0.000404633 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2471.38 tests/s, 7414.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      run += 1\n    else\n      run = 0\n    end\n    max_run = run if run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx97ze0sg\nStarted\n.\nFinished in 0.000392613 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.04 tests/s, 7641.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  count = 0\n  max_count = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      count += 1\n    else\n      count = 0\n    end\n    max_count = count if count > max_count\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplyo5c49q\nStarted\n.\nFinished in 0.000515224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1940.90 tests/s, 5822.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.chars.chunk(&:upcase).max_by { |_, chunk| chunk.size }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "Loaded suite /tmp/tmpb16u4c3d\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmpb16u4c3d.rb:9:in `test_max_run_uppercase'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_run_uppercase\n      8:     candidate = method(:max_run_uppercase)\n  =>  9:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n     10:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     11:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     12:   end\n<5> expected but was\n<\"G\">\n===============================================================================\n\nFinished in 0.006639236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n150.62 tests/s, 150.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpeqmhfvaa\nStarted\n.\nFinished in 0.000436383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2291.56 tests/s, 6874.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk2k7wji7\nStarted\n.\nFinished in 0.000433734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.56 tests/s, 6916.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.match(/[A-Z]/)\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplz2k6cq7\nStarted\n.\nFinished in 0.000398357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2510.31 tests/s, 7530.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.chars.each_with_object([]) do |char, arr|\n    if char == char.upcase\n      arr << char\n    else\n      arr << char\n      arr << ' '\n    end\n  end.join.split.map(&:length).max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "Loaded suite /tmp/tmpcnp8r3o8\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmpcnp8r3o8.rb:16:in `test_max_run_uppercase'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_run_uppercase\n     15:     candidate = method(:max_run_uppercase)\n  => 16:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n     17:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     18:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     19:   end\n<5> expected but was\n<6>\n===============================================================================\n\nFinished in 0.007294453 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.09 tests/s, 137.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpt_x5r7j1\nStarted\n.\nFinished in 0.000507403 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1970.82 tests/s, 5912.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      if current_run > max_run\n        max_run = current_run\n      end\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "Loaded suite /tmp/tmpykvxw0j_\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmpykvxw0j_.rb:22:in `test_max_run_uppercase'\n     19:   def test_max_run_uppercase\n     20:     candidate = method(:max_run_uppercase)\n     21:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n  => 22:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     23:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     24:   end\n     25: end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006820804 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.61 tests/s, 293.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      run += 1\n    else\n      max_run = run if run > max_run\n      run = 0\n    end\n  end\n  max_run = run if run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsy30dqks\nStarted\n.\nFinished in 0.000407601 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2453.38 tests/s, 7360.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  current_count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_count += 1\n      max_count = current_count if current_count > max_count\n    else\n      current_count = 0\n    end\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1aul29zh\nStarted\n.\nFinished in 0.000575348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1738.08 tests/s, 5214.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      count += 1\n    else\n      count = 0\n    end\n    max_count = count if count > max_count\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3wnwlenr\nStarted\n.\nFinished in 0.000430278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2324.08 tests/s, 6972.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  run = 0\n  test_str.chars.each do |char|\n    if char == char.upcase\n      run += 1\n    else\n      run = 0\n    end\n    max_run = run if run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgfwnarh4\nStarted\n.\nFinished in 0.000841548 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1188.29 tests/s, 3564.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  current_count = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_count += 1\n      max_count = current_count if current_count > max_count\n    else\n      current_count = 0\n    end\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkfujfnf8\nStarted\n.\nFinished in 0.00069114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1446.88 tests/s, 4340.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppntle3fa\nStarted\n.\nFinished in 0.000404633 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2471.38 tests/s, 7414.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      count += 1\n    else\n      count = 0\n    end\n    max_count = count if count > max_count\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3iepiyd4\nStarted\n.\nFinished in 0.000430766 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.45 tests/s, 6964.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd92xo9zx\nStarted\n.\nFinished in 0.000447305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2235.61 tests/s, 6706.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.chars.each do |char|\n    if char == char.upcase\n      count += 1\n    else\n      count = 0\n    end\n    max_count = count if count > max_count\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplac0tcr4\nStarted\n.\nFinished in 0.000437126 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2287.67 tests/s, 6863.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      count += 1\n      max_count = count if count > max_count\n    else\n      count = 0\n    end\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3tqw15or\nStarted\n.\nFinished in 0.000486278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2056.44 tests/s, 6169.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  # Write your code here\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      count += 1\n    else\n      max_count = count if count > max_count\n      count = 0\n    end\n  end\n  max_count = count if count > max_count\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphtrz2_8e\nStarted\n.\nFinished in 0.000412369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.01 tests/s, 7275.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppntle3fa\nStarted\n.\nFinished in 0.000404633 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2471.38 tests/s, 7414.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      count += 1\n      max_count = count if count > max_count\n    else\n      count = 0\n    end\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0nzp95x4\nStarted\n.\nFinished in 0.000420345 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2379.00 tests/s, 7136.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2y0gilyr\nStarted\n.\nFinished in 0.000434623 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2300.84 tests/s, 6902.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  count = 0\n  max = 0\n  test_str.chars.each do |char|\n    if char == char.upcase\n      count += 1\n      max = count if count > max\n    else\n      count = 0\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp664e8kqe\nStarted\n.\nFinished in 0.000393804 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2539.33 tests/s, 7618.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}