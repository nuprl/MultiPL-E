{
  "name": "mbpp_297_flatten_list",
  "language": "rb",
  "prompt": "# Write a function to flatten a given nested list structure.\ndef flatten_list(list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_flatten_list\n    candidate = method(:flatten_list)\n    assert_equal([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120], candidate.call([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]))\n    assert_equal([10, 20, 40, 30, 56, 25, 10, 20, 33, 40], candidate.call([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]))\n    assert_equal([1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  list1.flatten\nend",
    "  list1.flatten\nend",
    "  list1.flatten\nend",
    "  list1.flatten\nend",
    "  list1.flatten\nend",
    "  list1.flatten\nend",
    "  list1.flatten\nend",
    "  list1.flatten\nend",
    "  list1.flatten\nend",
    "  list1.flatten\nend",
    "  list1.flatten\nend",
    "  list1.flatten\nend",
    "  list1.flatten\nend",
    "  list1.flatten\nend",
    "  list1.flatten\nend",
    "  list1.flatten\nend",
    "  list1.flatten\nend",
    "  list1.flatten\nend",
    "  list1.flatten\nend",
    "  list1.flatten\nend"
  ]
}