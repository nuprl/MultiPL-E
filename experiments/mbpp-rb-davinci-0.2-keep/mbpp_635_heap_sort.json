{
  "name": "mbpp_635_heap_sort",
  "language": "rb",
  "prompt": "# Write a function to sort the given list.\ndef heap_sort(iterable)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_heap_sort\n    candidate = method(:heap_sort)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    assert_equal([14, 22, 25, 25, 35, 58, 65, 75, 85], candidate.call([25, 35, 22, 85, 14, 65, 75, 25, 58]))\n    assert_equal([1, 5, 7, 9], candidate.call([7, 1, 9, 5]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # ...\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  # Write your code here\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  until heap.empty?\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # TODO: implement\nend",
    "  # Write your code here\nend",
    "  # Write your code here\nend",
    "  # ...\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me\nend",
    "  # Write your code here\nend",
    "  # TODO: implement me\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # Write your code here\nend",
    "  # TODO: implement me\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  # TODO: implement me\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # ...\nend",
    "  # TODO: implement me\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  # Write your code here.\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # TODO: implement me\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # Write your code here\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # Write your code here\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # TODO: implement me\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  # ...\nend",
    "  # TODO: implement me\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # TODO: implement me\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  heap = BinaryHeap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.extract\n  end\n  sorted\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted.push(heap.pop)\n  end\n  sorted\nend",
    "  # ...\nend",
    "  # TODO: implement me\nend",
    "  heap = Heap.new\n  iterable.each do |item|\n    heap.insert(item)\n  end\n  sorted = []\n  while heap.size > 0\n    sorted << heap.extract\n  end\n  sorted\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # Your code goes here\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  # ...\nend",
    "  # TODO: implement me\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  # ...\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  heap = Heap.new(iterable)\n  result = []\n  while heap.size > 0\n    result << heap.pop\n  end\n  result\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  heap = Heap.new(iterable)\n  result = []\n  until heap.empty?\n    result << heap.pop\n  end\n  result\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # TODO: implement me\nend",
    "  # ...\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # Write your code here\nend",
    "  # ...\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # ...\nend",
    "  heap = BinaryHeap.new(iterable)\n  result = []\n  until heap.empty?\n    result << heap.extract\n  end\n  result\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  until heap.size == 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # TODO: implement\nend",
    "  # ...\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted.push(heap.pop)\n  end\n  sorted\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  until heap.empty?\n    sorted << heap.extract\n  end\n  sorted\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  heap = Heap.new(iterable)\n  sorted = []\n  while heap.size > 0\n    sorted << heap.pop\n  end\n  sorted\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # Write your code here\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # ...\nend",
    "  # TODO: implement me\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  # ...\nend",
    "  # TODO: implement me!\nend",
    "  # TODO: implement me!\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  # ...\nend",
    "  heap = Heap.new(iterable)\n  heap.sort\nend",
    "  # Write your code here\nend",
    "  # Write your code here\nend",
    "  # ...\nend"
  ]
}