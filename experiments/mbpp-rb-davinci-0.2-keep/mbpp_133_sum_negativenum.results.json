{
  "name": "mbpp_133_sum_negativenum",
  "language": "rb",
  "prompt": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7_a2jgji\nStarted\n.\nFinished in 0.000394549 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2534.54 tests/s, 7603.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp07jduj30\nStarted\n.\nFinished in 0.000376386 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2656.85 tests/s, 7970.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7_a2jgji\nStarted\n.\nFinished in 0.000394549 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2534.54 tests/s, 7603.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpujiuomq7\nStarted\n.\nFinished in 0.000382314 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2615.65 tests/s, 7846.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpujiuomq7\nStarted\n.\nFinished in 0.000382314 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2615.65 tests/s, 7846.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv_c6061w\nStarted\n.\nFinished in 0.000372304 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2685.98 tests/s, 8057.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7_a2jgji\nStarted\n.\nFinished in 0.000394549 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2534.54 tests/s, 7603.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  neg_nums = nums.select { |num| num < 0 }\n  neg_nums.inject(0) { |sum, num| sum + num }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpha3j54_b\nStarted\n.\nFinished in 0.000371464 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2692.05 tests/s, 8076.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp07jduj30\nStarted\n.\nFinished in 0.000376386 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2656.85 tests/s, 7970.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.inject(0) {|sum, num| sum + num}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi2awwxzl\nStarted\n.\nFinished in 0.000393696 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2540.03 tests/s, 7620.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select{|num| num < 0}.inject(0){|sum, num| sum + num}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxq6g_g58\nStarted\n.\nFinished in 0.000384607 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2600.06 tests/s, 7800.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv_c6061w\nStarted\n.\nFinished in 0.000372304 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2685.98 tests/s, 8057.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpujiuomq7\nStarted\n.\nFinished in 0.000382314 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2615.65 tests/s, 7846.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7_a2jgji\nStarted\n.\nFinished in 0.000394549 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2534.54 tests/s, 7603.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv_c6061w\nStarted\n.\nFinished in 0.000372304 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2685.98 tests/s, 8057.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp07jduj30\nStarted\n.\nFinished in 0.000376386 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2656.85 tests/s, 7970.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  neg_nums = nums.select { |num| num < 0 }\n  neg_nums.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6y8foab1\nStarted\n.\nFinished in 0.000851909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1173.83 tests/s, 3521.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp07jduj30\nStarted\n.\nFinished in 0.000376386 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2656.85 tests/s, 7970.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpujiuomq7\nStarted\n.\nFinished in 0.000382314 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2615.65 tests/s, 7846.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpujiuomq7\nStarted\n.\nFinished in 0.000382314 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2615.65 tests/s, 7846.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpujiuomq7\nStarted\n.\nFinished in 0.000382314 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2615.65 tests/s, 7846.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7_a2jgji\nStarted\n.\nFinished in 0.000394549 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2534.54 tests/s, 7603.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo116j3fn\nStarted\n.\nFinished in 0.000390272 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2562.32 tests/s, 7686.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7_a2jgji\nStarted\n.\nFinished in 0.000394549 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2534.54 tests/s, 7603.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv_c6061w\nStarted\n.\nFinished in 0.000372304 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2685.98 tests/s, 8057.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpt570rexb\nStarted\n.\nFinished in 0.000784766 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1274.27 tests/s, 3822.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7_a2jgji\nStarted\n.\nFinished in 0.000394549 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2534.54 tests/s, 7603.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7_a2jgji\nStarted\n.\nFinished in 0.000394549 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2534.54 tests/s, 7603.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp07jduj30\nStarted\n.\nFinished in 0.000376386 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2656.85 tests/s, 7970.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  neg_nums = nums.select { |num| num < 0 }\n  neg_nums.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6y8foab1\nStarted\n.\nFinished in 0.000851909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1173.83 tests/s, 3521.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpujiuomq7\nStarted\n.\nFinished in 0.000382314 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2615.65 tests/s, 7846.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv_c6061w\nStarted\n.\nFinished in 0.000372304 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2685.98 tests/s, 8057.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select{|num| num < 0}.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_nxs2x_u\nStarted\n.\nFinished in 0.000342765 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2917.45 tests/s, 8752.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select {|num| num < 0}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp07jduj30\nStarted\n.\nFinished in 0.000376386 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2656.85 tests/s, 7970.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  nums.select { |num| num < 0 }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7_a2jgji\nStarted\n.\nFinished in 0.000394549 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2534.54 tests/s, 7603.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5c1hxrey\nStarted\n.\nFinished in 0.000407456 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2454.25 tests/s, 7362.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums)\n  sum = 0\n  nums.each do |num|\n    if num < 0\n      sum += num\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxzzss7m\nStarted\n.\nFinished in 0.000407926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2451.43 tests/s, 7354.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}