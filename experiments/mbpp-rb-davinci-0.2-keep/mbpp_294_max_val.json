{
  "name": "mbpp_294_max_val",
  "language": "rb",
  "prompt": "# Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_val\n    candidate = method(:max_val)\n    assert_equal(5, candidate.call([\"Python\", 3, 2, 4, 5, \"version\"]))\n    assert_equal(25, candidate.call([\"Python\", 15, 20, 25]))\n    assert_equal(50, candidate.call([\"Python\", 30, 20, 40, 50, \"version\"]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  max = listval[0]\n  listval.each do |val|\n    if val.is_a?(Array)\n      val.each do |v|\n        if v > max\n          max = v\n        end\n      end\n    else\n      if val > max\n        max = val\n      end\n    end\n  end\n  max\nend",
    "  max = listval[0]\n  listval.each do |val|\n    if val > max\n      max = val\n    end\n  end\n  return max\nend",
    "  max = listval[0]\n  listval.each do |x|\n    if x > max\n      max = x\n    end\n  end\n  max\nend",
    "  max = listval[0]\n  listval.each do |val|\n    if val.class == Fixnum || val.class == Float\n      if val > max\n        max = val\n      end\n    end\n  end\n  max\nend",
    "  return listval.max\nend",
    "  max = listval[0]\n  listval.each do |val|\n    if val.is_a?(Array)\n      val.each do |v|\n        if v > max\n          max = v\n        end\n      end\n    else\n      if val > max\n        max = val\n      end\n    end\n  end\n  max\nend",
    "  max = listval[0]\n  listval.each do |val|\n    if val > max\n      max = val\n    end\n  end\n  return max\nend",
    "  listval.flatten.max\nend",
    "  max = listval[0]\n  listval.each do |i|\n    if i > max\n      max = i\n    end\n  end\n  max\nend",
    "  max = listval[0]\n  listval.each do |i|\n    if i > max\n      max = i\n    end\n  end\n  return max\nend",
    "  max = listval[0]\n  listval.each do |val|\n    if val > max\n      max = val\n    end\n  end\n  return max\nend",
    "  max = listval[0]\n  listval.each do |val|\n    if val.is_a?(Array)\n      val.each do |v|\n        if v > max\n          max = v\n        end\n      end\n    else\n      if val > max\n        max = val\n      end\n    end\n  end\n  max\nend",
    "  listval.max\nend",
    "  listval.max\nend",
    "  max = listval[0]\n  listval.each do |val|\n    if val > max\n      max = val\n    end\n  end\n  return max\nend",
    "  listval.max\nend",
    "  max = listval[0]\n  listval.each do |val|\n    if val > max\n      max = val\n    end\n  end\n  return max\nend",
    "  listval.max\nend",
    "  max = listval[0]\n  listval.each do |x|\n    if x > max\n      max = x\n    end\n  end\n  max\nend",
    "  max = listval[0]\n  listval.each do |val|\n    if val > max\n      max = val\n    end\n  end\n  return max\nend"
  ]
}