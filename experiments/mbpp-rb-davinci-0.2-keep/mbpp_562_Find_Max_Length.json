{
  "name": "mbpp_562_Find_Max_Length",
  "language": "rb",
  "prompt": "# Write a python function to find the length of the longest sublists.\ndef Find_Max_Length(lst)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Find_Max_Length\n    candidate = method(:Find_Max_Length)\n    assert_equal(4, candidate.call([[1], [1, 4], [5, 6, 7, 8]]))\n    assert_equal(3, candidate.call([[0, 1], [2, 2], [3, 2, 1]]))\n    assert_equal(5, candidate.call([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    max_length = 0\n    for i in 0..lst.length-1\n        if lst[i].length > max_length\n            max_length = lst[i].length\n        end\n    end\n    return max_length\nend",
    "    lst.map{|x| x.length}.max\nend",
    "    max_length = 0\n    for i in 0..lst.length-1\n        if lst[i].length > max_length\n            max_length = lst[i].length\n        end\n    end\n    return max_length\nend",
    "    max_length = 0\n    for i in 0..lst.length-1\n        if lst[i].length > max_length\n            max_length = lst[i].length\n        end\n    end\n    return max_length\nend",
    "    max_length = 0\n    lst.each do |sublist|\n        if sublist.length > max_length\n            max_length = sublist.length\n        end\n    end\n    return max_length\nend",
    "    max_len = 0\n    lst.each do |sublist|\n        if sublist.length > max_len\n            max_len = sublist.length\n        end\n    end\n    return max_len\nend",
    "    lst.map!{|x| x.length}.max\nend\nFind_Max_Length([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])",
    "    max_length = 0\n    for i in 0..lst.length-1\n        if lst[i].length > max_length\n            max_length = lst[i].length\n        end\n    end\n    return max_length\nend",
    "    max_length = 0\n    for i in 0..lst.length-1\n        if lst[i].length > max_length\n            max_length = lst[i].length\n        end\n    end\n    return max_length\nend",
    "    max_length = 0\n    for i in 0..lst.length-1\n        if lst[i].length > max_length\n            max_length = lst[i].length\n        end\n    end\n    return max_length\nend",
    "    max_length = 0\n    lst.each do |l|\n        if l.length > max_length\n            max_length = l.length\n        end\n    end\n    return max_length\nend",
    "    max = 0\n    for i in 0..lst.length-1\n        if lst[i].length > max\n            max = lst[i].length\n        end\n    end\n    return max\nend",
    "    max_length = 0\n    lst.each do |sublist|\n        if sublist.length > max_length\n            max_length = sublist.length\n        end\n    end\n    return max_length\nend",
    "    lst.map{|x| x.length}.max\nend\nFind_Max_Length([[1,2,3],[1,2,3,4,5],[1,2,3,4,5,6,7,8,9]])",
    "    max_length = 0\n    for i in 0..lst.length-1\n        if lst[i].length > max_length\n            max_length = lst[i].length\n        end\n    end\n    return max_length\nend",
    "    max = 0\n    for i in 0..lst.length-1\n        if lst[i].length > max\n            max = lst[i].length\n        end\n    end\n    return max\nend",
    "    lst.max_by(&:length).length\nend",
    "    max_len = 0\n    lst.each do |i|\n        max_len = i.length if i.length > max_len\n    end\n    return max_len\nend",
    "    max_length = 0\n    lst.each do |sublist|\n        if sublist.length > max_length\n            max_length = sublist.length\n        end\n    end\n    return max_length\nend",
    "    lst.map{|x| x.length}.max\nend"
  ]
}