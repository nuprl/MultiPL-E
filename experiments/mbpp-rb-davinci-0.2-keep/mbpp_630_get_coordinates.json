{
  "name": "mbpp_630_get_coordinates",
  "language": "rb",
  "prompt": "# Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef get_coordinates(test_tup)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_coordinates\n    candidate = method(:get_coordinates)\n    assert_equal([[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]], candidate.call([3, 4]))\n    assert_equal([[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]], candidate.call([4, 5]))\n    assert_equal([[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]], candidate.call([5, 6]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # Write your code here\nend",
    "  # Write your code here\n  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates\nend",
    "  test_tup.each_with_object([]) do |coordinate, coordinates|\n    coordinates << [coordinate[0] + 1, coordinate[1]]\n    coordinates << [coordinate[0] - 1, coordinate[1]]\n    coordinates << [coordinate[0], coordinate[1] + 1]\n    coordinates << [coordinate[0], coordinate[1] - 1]\n  end\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates\nend",
    "  # Write your code here\n  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  # Write your code here\n  # Hint: Use the .product method to get all the possible combinations of the coordinates.\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-product\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-flatten\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-uniq\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-select\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-map\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-sort\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-sort_by\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-each\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-each_with_index\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-each_with_object\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-inject\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-reduce\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-join\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-zip\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-transpose\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-reverse\n  # https://ruby-doc.org/core-2.4.1/Array.",
    "  x, y = test_tup\n  [\n    [x, y + 1],\n    [x, y - 1],\n    [x + 1, y],\n    [x - 1, y]\n  ]\nend",
    "  # Write your code here\n  test_tup.each_with_object([]) do |coordinate, coordinates|\n    coordinates << [coordinate[0] + 1, coordinate[1]]\n    coordinates << [coordinate[0] - 1, coordinate[1]]\n    coordinates << [coordinate[0], coordinate[1] + 1]\n    coordinates << [coordinate[0], coordinate[1] - 1]\n  end\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1,y-1]\n  coordinates << [x-1,y]\n  coordinates << [x-1,y+1]\n  coordinates << [x,y-1]\n  coordinates << [x,y+1]\n  coordinates << [x+1,y-1]\n  coordinates << [x+1,y]\n  coordinates << [x+1,y+1]\n  return coordinates\nend",
    "  # Write your code here.\nend",
    "  # Write your code here\n  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates\nend",
    "\tx = test_tup[0]\n\ty = test_tup[1]\n\treturn [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x - 1, y]\n  coordinates << [x + 1, y]\n  coordinates << [x, y - 1]\n  coordinates << [x, y + 1]\n  coordinates << [x - 1, y - 1]\n  coordinates << [x + 1, y + 1]\n  coordinates << [x - 1, y + 1]\n  coordinates << [x + 1, y - 1]\n  coordinates\nend",
    "  # Write your code here\n  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates.push([x-1,y])\n  coordinates.push([x+1,y])\n  coordinates.push([x,y-1])\n  coordinates.push([x,y+1])\n  coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates\nend",
    "  # Write your code here\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates\nend",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates\nend",
    "  # Write your code here\n  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1, y-1]\n  coordinates << [x-1, y]\n  coordinates << [x-1, y+1]\n  coordinates << [x, y-1]\n  coordinates << [x, y+1]\n  coordinates << [x+1, y-1]\n  coordinates << [x+1, y]\n  coordinates << [x+1, y+1]\n  coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates\nend",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  # Write your code here\n  # Hint: Use the adjacent_coordinates function defined above\n  adjacent_coordinates(test_tup)\nend",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  # Write your code here\n  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates\nend",
    "  # Write your code here\nend",
    "  coordinates = []\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1, y-1]\n  coordinates << [x-1, y]\n  coordinates << [x-1, y+1]\n  coordinates << [x, y-1]\n  coordinates << [x, y+1]\n  coordinates << [x+1, y-1]\n  coordinates << [x+1, y]\n  coordinates << [x+1, y+1]\n  coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\nend",
    "  # TODO: Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates\nend",
    "  # Write your code here\nend",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates\nend",
    "  # First, we need to get the x and y coordinates from the tuple.\n  x = test_tup[0]\n  y = test_tup[1]\n  # Next, we need to create an array of all the adjacent coordinates.\n  adjacent_coordinates = []\n  adjacent_coordinates << [x - 1, y - 1]\n  adjacent_coordinates << [x - 1, y]\n  adjacent_coordinates << [x - 1, y + 1]\n  adjacent_coordinates << [x, y - 1]\n  adjacent_coordinates << [x, y + 1]\n  adjacent_coordinates << [x + 1, y - 1]\n  adjacent_coordinates << [x + 1, y]\n  adjacent_coordinates << [x + 1, y + 1]\n  # Finally, we need to return the array of adjacent coordinates.\n  return adjacent_coordinates\nend",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  # Write your code here\n  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\nend",
    "  # Create an array to store the adjacent coordinates\n  adjacent_coordinates = []\n  # Create an array to store the possible adjacent coordinates\n  possible_coordinates = []\n  # Create an array to store the possible adjacent coordinates\n  possible_coordinates << [test_tup[0] + 1, test_tup[1]]\n  possible_coordinates << [test_tup[0] - 1, test_tup[1]]\n  possible_coordinates << [test_tup[0], test_tup[1] + 1]\n  possible_coordinates << [test_tup[0], test_tup[1] - 1]\n  possible_coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  possible_coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  possible_coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  possible_coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  # Loop through the possible coordinates\n  possible_coordinates.each do |coordinate|\n    # Check if the coordinate is within the board\n    if coordinate[0] >= 0 && coordinate[0] <= 7 && coordinate[1] >= 0 && coordinate[1] <= 7\n      # Add the coordinate to the adjacent coordinates array\n      adjacent_coordinates << coordinate\n    end\n  end\n  # Return the adjacent coordinates array\n  return adjacent_coordinates\nend",
    "  # Write your code here\nend",
    "  # First, we need to get the x and y coordinates from the tuple.\n  x = test_tup[0]\n  y = test_tup[1]\n  # Then, we need to create an array of the adjacent coordinates.\n  adjacent_coordinates = [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n  # Finally, we need to return the array of adjacent coordinates.\n  return adjacent_coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  return [[x-1,y-1],[x-1,y],[x-1,y+1],[x,y-1],[x,y+1],[x+1,y-1],[x+1,y],[x+1,y+1]]\nend",
    "  # Write your code here\n  # test_tup = (1,1)\n  # test_tup = (1,2)\n  # test_tup = (1,3)\n  # test_tup = (2,1)\n  # test_tup = (2,2)\n  # test_tup = (2,3)\n  # test_tup = (3,1)\n  # test_tup = (3,2)\n  # test_tup = (3,3)\n  # test_tup = (4,1)\n  # test_tup = (4,2)\n  # test_tup = (4,3)\n  # test_tup = (5,1)\n  # test_tup = (5,2)\n  # test_tup = (5,3)\n  # test_tup = (6,1)\n  # test_tup = (6,2)\n  # test_tup = (6,3)\n  # test_tup = (7,1)\n  # test_tup = (7,2)\n  # test_tup = (7,3)\n  # test_tup = (8,1)\n  # test_tup = (8,2)\n  # test_tup = (8,3)\n  # test_tup = (9,1)\n  # test_tup = (9,2)\n  # test_tup = (9,3)\n  # test_tup = (10,1)\n  # test_tup = (10,2)\n  # test_tup = (10,3)\n  # test_tup = (11,1)\n  # test_tup = (11,2)\n  # test_tup = (11,3)\n  # test_tup = (12,1)\n  # test_tup = (12,2)\n  # test_tup = (12,3)\n  # test_tup = (13,1)\n  # test_tup = (13,2)\n  # test_tup = (13,",
    "  # Write your code here\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  # Write your code here\nend",
    "  # Write your code here\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  coordinates = []\n  x = test_tup[0]\n  y = test_tup[1]\n  coordinates << [x+1, y]\n  coordinates << [x-1, y]\n  coordinates << [x, y+1]\n  coordinates << [x, y-1]\n  coordinates << [x+1, y+1]\n  coordinates << [x-1, y-1]\n  coordinates << [x+1, y-1]\n  coordinates << [x-1, y+1]\n  coordinates\nend",
    "  # Write your code here\n  # return the array of coordinates\n  x = test_tup[0]\n  y = test_tup[1]\n  return [[x-1,y-1],[x-1,y],[x-1,y+1],[x,y-1],[x,y+1],[x+1,y-1],[x+1,y],[x+1,y+1]]\nend",
    "  # Write your code here\n  # Hint: You can use the get_row_col function to get the row and column of a given coordinate\n  # Hint: You can use the get_adjacent_coordinates function to get the adjacent coordinates of a given coordinate\n  # Hint: You can use the get_coordinate function to get the coordinate of a given row and column\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x - 1, y]\n  coordinates << [x + 1, y]\n  coordinates << [x, y - 1]\n  coordinates << [x, y + 1]\n  coordinates << [x - 1, y - 1]\n  coordinates << [x + 1, y - 1]\n  coordinates << [x - 1, y + 1]\n  coordinates << [x + 1, y + 1]\n  coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\nend",
    "  x, y = test_tup\n  [\n    [x + 1, y],\n    [x - 1, y],\n    [x, y + 1],\n    [x, y - 1],\n    [x + 1, y + 1],\n    [x - 1, y - 1],\n    [x + 1, y - 1],\n    [x - 1, y + 1]\n  ]\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates\nend",
    "  test_tup.each_with_object([]) do |coordinate, coordinates|\n    coordinates << [coordinate[0] + 1, coordinate[1]]\n    coordinates << [coordinate[0] - 1, coordinate[1]]\n    coordinates << [coordinate[0], coordinate[1] + 1]\n    coordinates << [coordinate[0], coordinate[1] - 1]\n  end\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  return [[x-1, y], [x+1, y], [x, y-1], [x, y+1]]\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1, y-1]\n  coordinates << [x-1, y]\n  coordinates << [x-1, y+1]\n  coordinates << [x, y-1]\n  coordinates << [x, y+1]\n  coordinates << [x+1, y-1]\n  coordinates << [x+1, y]\n  coordinates << [x+1, y+1]\n  coordinates\nend",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  # Write your code here\n  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates\nend",
    "  # Write your code here\n  # return an array of tuples\n  # e.g. [(1,2), (2,2), (3,2), (1,3), (2,3), (3,3)]\n  # for (2,2)\n  # return an array of tuples\n  # e.g. [(1,1), (2,1), (3,1), (1,2), (3,2), (1,3), (2,3), (3,3)]\n  # for (2,2)\n  # return an array of tuples\n  # e.g. [(1,1), (2,1), (3,1), (1,2), (3,2), (1,3), (2,3), (3,3)]\n  # for (2,2)\n  # return an array of tuples\n  # e.g. [(1,1), (2,1), (3,1), (1,2), (3,2), (1,3), (2,3), (3,3)]\n  # for (2,2)\n  # return an array of tuples\n  # e.g. [(1,1), (2,1), (3,1), (1,2), (3,2), (1,3), (2,3), (3,3)]\n  # for (2,2)\n  # return an array of tuples\n  # e.g. [(1,1), (2,1), (3,1), (1,2), (3,2), (1,3), (2,3), (3,3)]\n  # for (2,2)\n  # return an array of tuples\n  # e.g. [(1,1), (2,1), (3,1), (1,2), (3,2), (1,3), (2,3), (3,3)]\n  # for (2,2)\n  # return an array of tuples\n  # e.g. [(1,1), (2,1), (3,1), (1,2), (3,2), (1,3), (2,3), (3,3)]\n  # for",
    "  x = test_tup[0]\n  y = test_tup[1]\n  return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1, y-1]\n  coordinates << [x-1, y]\n  coordinates << [x-1, y+1]\n  coordinates << [x, y-1]\n  coordinates << [x, y+1]\n  coordinates << [x+1, y-1]\n  coordinates << [x+1, y]\n  coordinates << [x+1, y+1]\n  coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1, y-1]\n  coordinates << [x-1, y]\n  coordinates << [x-1, y+1]\n  coordinates << [x, y-1]\n  coordinates << [x, y+1]\n  coordinates << [x+1, y-1]\n  coordinates << [x+1, y]\n  coordinates << [x+1, y+1]\n  coordinates\nend",
    "  # Write your code here\nend",
    "  # Write your code here\nend",
    "  # Get the x and y coordinates from the tuple\n  x, y = test_tup\n  # Create a list of all the adjacent coordinates\n  adjacent_coordinates = [[x + 1, y], [x - 1, y], [x, y + 1], [x, y - 1]]\n  # Return the list of adjacent coordinates\n  adjacent_coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates\nend",
    "  x, y = test_tup\n  [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates\nend",
    "  # Write your code here\n  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  # Write your code here\n  # return an array of tuples\n  # Example:\n  # test_tup = (1,2)\n  # return [(0,1), (0,2), (0,3), (1,1), (1,3), (2,1), (2,2), (2,3)]\nend",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates\nend",
    "  # Write your code here\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  # TODO: Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n  # The function should return an array of coordinate tuples.\n  # For example, if the input is (0, 0), the function should return\n  # [(0, 1), (1, 0), (0, -1), (-1, 0)]\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n  # Hint: Use the math library to calculate the square root of 2.\n ",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1, y-1]\n  coordinates << [x-1, y]\n  coordinates << [x-1, y+1]\n  coordinates << [x, y-1]\n  coordinates << [x, y+1]\n  coordinates << [x+1, y-1]\n  coordinates << [x+1, y]\n  coordinates << [x+1, y+1]\n  coordinates\nend",
    "  # Write your code here\n  x = test_tup[0]\n  y = test_tup[1]\n  return [[x-1,y],[x+1,y],[x,y-1],[x,y+1]]\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x, y + 1]\n  coordinates << [x, y - 1]\n  coordinates << [x + 1, y]\n  coordinates << [x - 1, y]\n  coordinates << [x + 1, y + 1]\n  coordinates << [x + 1, y - 1]\n  coordinates << [x - 1, y + 1]\n  coordinates << [x - 1, y - 1]\n  coordinates\nend",
    "  # Write your code here\n  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates\nend",
    "  # Write your code here\n  # Hint: Use the get_row_col function to get the row and column of the given coordinate.\n  # Hint: Use the get_adjacent_coordinates function to get the adjacent coordinates of the given coordinate.\n  # Hint: Use the get_coordinate function to get the coordinate tuple of the given row and column.\n  # Hint: Use the get_coordinate_string function to get the coordinate string of the given coordinate tuple.\n  # Hint: Use the get_coordinate_tuple function to get the coordinate tuple of the given coordinate string.\n  # Hint: Use the get_coordinate_tuple function to get the coordinate tuple of the given coordinate string.\n  # Hint: Use the get_coordinate_tuple function to get the coordinate tuple of the given coordinate string.\n  # Hint: Use the get_coordinate_tuple function to get the coordinate tuple of the given coordinate string.\n  # Hint: Use the get_coordinate_tuple function to get the coordinate tuple of the given coordinate string.\n  # Hint: Use the get_coordinate_tuple function to get the coordinate tuple of the given coordinate string.\n  # Hint: Use the get_coordinate_tuple function to get the coordinate tuple of the given coordinate string.\n  # Hint: Use the get_coordinate_tuple function to get the coordinate tuple of the given coordinate string.\n  # Hint: Use the get_coordinate_tuple function to get the coordinate tuple of the given coordinate string.\n  # Hint: Use the get_coordinate_tuple function to get the coordinate tuple of the given coordinate string.\n  # Hint: Use the get_coordinate_tuple function to get the coordinate tuple of the given coordinate string.\n  # Hint: Use the get_coordinate_tuple function to get the coordinate tuple of the given coordinate string.\n  # Hint: Use the get_coordinate_tuple function to get the coordinate tuple of the given coordinate string.\n  # Hint: Use the get_coordinate_tuple function to get the coordinate tuple of the given coordinate string.\n  # Hint: Use the get_coordinate_tuple function to get the coordinate tuple of the given coordinate",
    "  # Write your code here\n  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  # Write your code here\n  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates\nend",
    "  # TODO: Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n  # Return a list of coordinate tuples.\n  # Example:\n  # get_coordinates((0,0)) => [(0,1), (1,0), (1,1)]\n  # get_coordinates((0,1)) => [(0,0), (0,2), (1,0), (1,1), (1,2)]\n  # get_coordinates((0,2)) => [(0,1), (1,1), (1,2)]\n  # get_coordinates((1,0)) => [(0,0), (0,1), (1,1), (2,0), (2,1)]\n  # get_coordinates((1,1)) => [(0,0), (0,1), (0,2), (1,0), (1,2), (2,0), (2,1), (2,2)]\n  # get_coordinates((1,2)) => [(0,1), (0,2), (1,1), (2,1), (2,2)]\n  # get_coordinates((2,0)) => [(1,0), (1,1), (2,1)]\n  # get_coordinates((2,1)) => [(1,0), (1,1), (1,2), (2,0), (2,2)]\n  # get_coordinates((2,2)) => [(1,1), (1,2), (2,1)]\nend",
    "  # Write your code here\nend",
    "  # Write your code here\n  x, y = test_tup\n  [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\nend",
    "  # Write your code here\n  # Use the following line to format the output strings:\n  # puts \"The adjacent coordinates for the given coordinates are: \"\n  # puts \"({}, {})\".format(x, y)\n  # where x and y are the coordinates of the adjacent cell\n  x = test_tup[0]\n  y = test_tup[1]\n  puts \"The adjacent coordinates for the given coordinates are: \"\n  puts \"({}, {})\".format(x-1, y)\n  puts \"({}, {})\".format(x+1, y)\n  puts \"({}, {})\".format(x, y-1)\n  puts \"({}, {})\".format(x, y+1)\n  puts \"({}, {})\".format(x-1, y-1)\n  puts \"({}, {})\".format(x+1, y+1)\n  puts \"({}, {})\".format(x-1, y+1)\n  puts \"({}, {})\".format(x+1, y-1)\nend",
    "  # Write your code here\nend",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  # Write your code here\n  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates.push([x-1,y-1])\n  coordinates.push([x-1,y])\n  coordinates.push([x-1,y+1])\n  coordinates.push([x,y-1])\n  coordinates.push([x,y+1])\n  coordinates.push([x+1,y-1])\n  coordinates.push([x+1,y])\n  coordinates.push([x+1,y+1])\n  return coordinates\nend",
    "  # Write your code here\n  x = test_tup[0]\n  y = test_tup[1]\n  return [[x-1,y-1],[x-1,y],[x-1,y+1],[x,y-1],[x,y+1],[x+1,y-1],[x+1,y],[x+1,y+1]]\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  return [[x-1,y-1],[x-1,y],[x-1,y+1],[x,y-1],[x,y+1],[x+1,y-1],[x+1,y],[x+1,y+1]]\nend",
    "  adjacent_coordinates = []\n  adjacent_coordinates << [test_tup[0] + 1, test_tup[1]]\n  adjacent_coordinates << [test_tup[0] - 1, test_tup[1]]\n  adjacent_coordinates << [test_tup[0], test_tup[1] + 1]\n  adjacent_coordinates << [test_tup[0], test_tup[1] - 1]\n  adjacent_coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  adjacent_coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  adjacent_coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  adjacent_coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  adjacent_coordinates\nend",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  # Write your code here\n  test_tup.each_with_object([]) do |coordinate, coordinates|\n    coordinates << [coordinate[0] + 1, coordinate[1]]\n    coordinates << [coordinate[0] - 1, coordinate[1]]\n    coordinates << [coordinate[0], coordinate[1] + 1]\n    coordinates << [coordinate[0], coordinate[1] - 1]\n  end\nend",
    "  # TODO: Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n  # The function should return an array of coordinate tuples.\n  # Example:\n  # get_coordinates((0,0)) => [(0,1), (1,0), (1,1)]\n  # get_coordinates((0,1)) => [(0,0), (0,2), (1,0), (1,1), (1,2)]\n  # get_coordinates((1,1)) => [(0,0), (0,1), (0,2), (1,0), (1,2), (2,0), (2,1), (2,2)]\n  # get_coordinates((2,2)) => [(1,1), (1,2), (2,1)]\n  # get_coordinates((3,3)) => [(2,2), (2,3), (3,2)]\n  # get_coordinates((4,4)) => [(3,3), (3,4), (4,3)]\n  # get_coordinates((5,5)) => [(4,4), (4,5), (5,4)]\n  # get_coordinates((6,6)) => [(5,5), (5,6), (6,5)]\n  # get_coordinates((7,7)) => [(6,6), (6,7), (7,6)]\n  # get_coordinates((8,8)) => [(7,7), (7,8), (8,7)]\n  # get_coordinates((9,9)) => [(8,8), (8,9), (9,8)]\n  # get_coordinates((10,10)) => [(9,9), (9,10), (10,9)]\n  # get_coordinates((11,11)) => [(10,10), (10,11), (11,10)]\n  # get_coordinates((12,12)) => [(11,11), (11,12), (12,11)]\n  # get_coordinates((13,13)) => [(12,12), (12,13), (13,12)]\n  # get_coordinates((14,14)) => [(13,13",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates\nend",
    "  # Write your code here\nend",
    "  # Write your code here\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  # Write your code here\n  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1, y]\n  coordinates << [x+1, y]\n  coordinates << [x, y-1]\n  coordinates << [x, y+1]\n  coordinates << [x-1, y-1]\n  coordinates << [x+1, y+1]\n  coordinates << [x-1, y+1]\n  coordinates << [x+1, y-1]\n  coordinates\nend",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  # TODO: Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to get the adjacent coordinates.\n  # Hint: Use the above function to",
    "  # Write your code here\n  # Get the x and y coordinates from the tuple\n  x = test_tup[0]\n  y = test_tup[1]\n  # Create a list of all the adjacent coordinates\n  adjacent_coordinates = [[x-1, y], [x+1, y], [x, y-1], [x, y+1]]\n  # Return the list of adjacent coordinates\n  return adjacent_coordinates\nend",
    "  # Write your code here\nend",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1, y-1]\n  coordinates << [x-1, y]\n  coordinates << [x-1, y+1]\n  coordinates << [x, y-1]\n  coordinates << [x, y+1]\n  coordinates << [x+1, y-1]\n  coordinates << [x+1, y]\n  coordinates << [x+1, y+1]\n  return coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  return [[x-1,y-1],[x-1,y],[x-1,y+1],[x,y-1],[x,y+1],[x+1,y-1],[x+1,y],[x+1,y+1]]\nend",
    "  # Write your code here\nend",
    "  # Write your code here\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1, y-1]\n  coordinates << [x-1, y]\n  coordinates << [x-1, y+1]\n  coordinates << [x, y-1]\n  coordinates << [x, y+1]\n  coordinates << [x+1, y-1]\n  coordinates << [x+1, y]\n  coordinates << [x+1, y+1]\n  coordinates\nend",
    "  test_tup.each_with_object([]) do |coord, arr|\n    arr << [coord[0] + 1, coord[1]]\n    arr << [coord[0] - 1, coord[1]]\n    arr << [coord[0], coord[1] + 1]\n    arr << [coord[0], coord[1] - 1]\n  end\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1, y-1]\n  coordinates << [x-1, y]\n  coordinates << [x-1, y+1]\n  coordinates << [x, y-1]\n  coordinates << [x, y+1]\n  coordinates << [x+1, y-1]\n  coordinates << [x+1, y]\n  coordinates << [x+1, y+1]\n  coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  # Write your code here\n  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates\nend",
    "  # TODO: Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates` function.\n  # Hint: Use the `get_adjacent_coordinates",
    "  # Write your code here\n  x, y = test_tup\n  coordinates = []\n  coordinates << [x - 1, y - 1]\n  coordinates << [x - 1, y]\n  coordinates << [x - 1, y + 1]\n  coordinates << [x, y - 1]\n  coordinates << [x, y + 1]\n  coordinates << [x + 1, y - 1]\n  coordinates << [x + 1, y]\n  coordinates << [x + 1, y + 1]\n  coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "\t# Write your code here\n\tcoordinates = []\n\tcoordinates << [test_tup[0] + 1, test_tup[1]]\n\tcoordinates << [test_tup[0] - 1, test_tup[1]]\n\tcoordinates << [test_tup[0], test_tup[1] + 1]\n\tcoordinates << [test_tup[0], test_tup[1] - 1]\n\tcoordinates\nend",
    "  test_tup.each_with_object([]) do |coordinate, coordinates|\n    coordinates << [coordinate[0] + 1, coordinate[1]]\n    coordinates << [coordinate[0] - 1, coordinate[1]]\n    coordinates << [coordinate[0], coordinate[1] + 1]\n    coordinates << [coordinate[0], coordinate[1] - 1]\n  end\nend",
    "  # Write your code here\n  test_tup.each_with_object([]) do |coordinate, result|\n    result << [coordinate[0] + 1, coordinate[1]]\n    result << [coordinate[0] - 1, coordinate[1]]\n    result << [coordinate[0], coordinate[1] + 1]\n    result << [coordinate[0], coordinate[1] - 1]\n  end\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  return coordinates\nend",
    "  # Write your code here\nend",
    "  # Write your code here\nend",
    "  # Write your code here\nend",
    "  # Write your code here\n  x = test_tup[0]\n  y = test_tup[1]\n  return [[x-1,y-1],[x-1,y],[x-1,y+1],[x,y-1],[x,y+1],[x+1,y-1],[x+1,y],[x+1,y+1]]\nend",
    "  x, y = test_tup\n  [\n    [x, y + 1],\n    [x, y - 1],\n    [x + 1, y],\n    [x - 1, y]\n  ]\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates\nend",
    "  row = test_tup[0]\n  col = test_tup[1]\n  coordinates = []\n  coordinates << [row - 1, col]\n  coordinates << [row + 1, col]\n  coordinates << [row, col - 1]\n  coordinates << [row, col + 1]\n  coordinates << [row - 1, col - 1]\n  coordinates << [row - 1, col + 1]\n  coordinates << [row + 1, col - 1]\n  coordinates << [row + 1, col + 1]\n  coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  return [[x-1,y-1],[x-1,y],[x-1,y+1],[x,y-1],[x,y+1],[x+1,y-1],[x+1,y],[x+1,y+1]]\nend",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  # Create a list of all possible adjacent coordinates.\n  adjacent_coordinates = []\n  adjacent_coordinates << [test_tup[0] + 1, test_tup[1]]\n  adjacent_coordinates << [test_tup[0] - 1, test_tup[1]]\n  adjacent_coordinates << [test_tup[0], test_tup[1] + 1]\n  adjacent_coordinates << [test_tup[0], test_tup[1] - 1]\n  adjacent_coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  adjacent_coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  adjacent_coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  adjacent_coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  # Return the list of adjacent coordinates.\n  adjacent_coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1, y-1]\n  coordinates << [x-1, y]\n  coordinates << [x-1, y+1]\n  coordinates << [x, y-1]\n  coordinates << [x, y+1]\n  coordinates << [x+1, y-1]\n  coordinates << [x+1, y]\n  coordinates << [x+1, y+1]\n  coordinates\nend",
    "  # Write your code here\nend",
    "  # Write your code here.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.\n  # You can add more functions if you need.",
    "  x = test_tup[0]\n  y = test_tup[1]\n  return [\n    [x-1, y-1],\n    [x-1, y],\n    [x-1, y+1],\n    [x, y-1],\n    [x, y+1],\n    [x+1, y-1],\n    [x+1, y],\n    [x+1, y+1]\n  ]\nend",
    "  # Write your code here\n  # test_tup = [1,1]\n  # test_tup = [1,2]\n  # test_tup = [2,1]\n  # test_tup = [2,2]\n  # test_tup = [2,3]\n  # test_tup = [3,2]\n  # test_tup = [3,3]\n  # test_tup = [3,4]\n  # test_tup = [4,3]\n  # test_tup = [4,4]\n  # test_tup = [4,5]\n  # test_tup = [5,4]\n  # test_tup = [5,5]\n  # test_tup = [5,6]\n  # test_tup = [6,5]\n  # test_tup = [6,6]\n  # test_tup = [6,7]\n  # test_tup = [7,6]\n  # test_tup = [7,7]\n  # test_tup = [7,8]\n  # test_tup = [8,7]\n  # test_tup = [8,8]\n  # test_tup = [8,9]\n  # test_tup = [9,8]\n  # test_tup = [9,9]\n  # test_tup = [9,10]\n  # test_tup = [10,9]\n  # test_tup = [10,10]\n  # test_tup = [10,11]\n  # test_tup = [11,10]\n  # test_tup = [11,11]\n  # test_tup = [11,12]\n  # test_tup = [12,11]\n  # test_tup = [12,12]\n  # test_tup = [12,13]\n  # test_tup = [13,12]\n  # test_tup = [13,13]\n  # test_tup = [13,14]\n  # test_tup = [14,",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  return coordinates\nend",
    "  # Get the x and y coordinates from the tuple\n  x = test_tup[0]\n  y = test_tup[1]",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x - 1, y - 1]\n  coordinates << [x - 1, y]\n  coordinates << [x - 1, y + 1]\n  coordinates << [x, y - 1]\n  coordinates << [x, y + 1]\n  coordinates << [x + 1, y - 1]\n  coordinates << [x + 1, y]\n  coordinates << [x + 1, y + 1]\n  coordinates\nend",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x, y - 1],\n    [x + 1, y - 1],\n    [x - 1, y],\n    [x + 1, y],\n    [x - 1, y + 1],\n    [x, y + 1],\n    [x + 1, y + 1]\n  ]\nend",
    "  # Write your code here\n  x = test_tup[0]\n  y = test_tup[1]\n  return [[x,y+1],[x,y-1],[x+1,y],[x-1,y]]\nend",
    "  # Write your code here\nend",
    "  # Write your code here\n  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1, y-1]\n  coordinates << [x-1, y]\n  coordinates << [x-1, y+1]\n  coordinates << [x, y-1]\n  coordinates << [x, y+1]\n  coordinates << [x+1, y-1]\n  coordinates << [x+1, y]\n  coordinates << [x+1, y+1]\n  coordinates\nend",
    "  # Write your code here\n  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1, y-1]\n  coordinates << [x-1, y]\n  coordinates << [x-1, y+1]\n  coordinates << [x, y-1]\n  coordinates << [x, y+1]\n  coordinates << [x+1, y-1]\n  coordinates << [x+1, y]\n  coordinates << [x+1, y+1]\n  coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1, y-1]\n  coordinates << [x-1, y]\n  coordinates << [x-1, y+1]\n  coordinates << [x, y-1]\n  coordinates << [x, y+1]\n  coordinates << [x+1, y-1]\n  coordinates << [x+1, y]\n  coordinates << [x+1, y+1]\n  return coordinates\nend",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  # Write your code here\n  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1,y-1]\n  coordinates << [x-1,y]\n  coordinates << [x-1,y+1]\n  coordinates << [x,y-1]\n  coordinates << [x,y+1]\n  coordinates << [x+1,y-1]\n  coordinates << [x+1,y]\n  coordinates << [x+1,y+1]\n  coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1, y-1]\n  coordinates << [x-1, y]\n  coordinates << [x-1, y+1]\n  coordinates << [x, y-1]\n  coordinates << [x, y+1]\n  coordinates << [x+1, y-1]\n  coordinates << [x+1, y]\n  coordinates << [x+1, y+1]\n  return coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1, y-1]\n  coordinates << [x-1, y]\n  coordinates << [x-1, y+1]\n  coordinates << [x, y-1]\n  coordinates << [x, y+1]\n  coordinates << [x+1, y-1]\n  coordinates << [x+1, y]\n  coordinates << [x+1, y+1]\n  coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\nend",
    "  # Write your code here\n  x = test_tup[0]\n  y = test_tup[1]\n  return [[x-1,y-1],[x-1,y],[x-1,y+1],[x,y-1],[x,y+1],[x+1,y-1],[x+1,y],[x+1,y+1]]\nend",
    "  # Write your code here\n  x = test_tup[0]\n  y = test_tup[1]\n  return [[x-1,y-1],[x-1,y],[x-1,y+1],[x,y-1],[x,y+1],[x+1,y-1],[x+1,y],[x+1,y+1]]\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1, y-1]\n  coordinates << [x-1, y]\n  coordinates << [x-1, y+1]\n  coordinates << [x, y-1]\n  coordinates << [x, y+1]\n  coordinates << [x+1, y-1]\n  coordinates << [x+1, y]\n  coordinates << [x+1, y+1]\n  coordinates\nend",
    "  # Write your code here\n  x,y = test_tup\n  [[x-1,y-1],[x-1,y],[x-1,y+1],[x,y-1],[x,y+1],[x+1,y-1],[x+1,y],[x+1,y+1]]\nend",
    "",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1, y-1]\n  coordinates << [x-1, y]\n  coordinates << [x-1, y+1]\n  coordinates << [x, y-1]\n  coordinates << [x, y+1]\n  coordinates << [x+1, y-1]\n  coordinates << [x+1, y]\n  coordinates << [x+1, y+1]\n  return coordinates\nend",
    "  # Write your code here\nend",
    "  # Write your code here\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  # Write your code here\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates\nend",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x, y - 1],\n    [x + 1, y - 1],\n    [x - 1, y],\n    [x + 1, y],\n    [x - 1, y + 1],\n    [x, y + 1],\n    [x + 1, y + 1]\n  ]\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  # TODO: Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n  # test_tup = (1,1)\n  # result = [(0,0), (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2)]\n  # result = [(0,0), (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2)]\n  # result = [(0,0), (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2)]\n  # result = [(0,0), (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2)]\n  # result = [(0,0), (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2)]\n  # result = [(0,0), (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2)]\n  # result = [(0,0), (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2)]\n  # result = [(0,0), (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2)]\n  # result = [(0,0), (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2)]\n  # result = [(0,0), (0,1), (0,2), (1,0), (1,",
    "  x, y = test_tup[0], test_tup[1]\n  [[x - 1, y - 1], [x - 1, y], [x - 1, y + 1], [x, y - 1], [x, y + 1], [x + 1, y - 1], [x + 1, y], [x + 1, y + 1]]\nend",
    "  # Write your code here\nend",
    "  # Write your code here\nend",
    "  # Write your code here\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you wrote in the previous question\n  # Hint: Use the function you",
    "  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1, y-1]\n  coordinates << [x-1, y]\n  coordinates << [x-1, y+1]\n  coordinates << [x, y-1]\n  coordinates << [x, y+1]\n  coordinates << [x+1, y-1]\n  coordinates << [x+1, y]\n  coordinates << [x+1, y+1]\n  coordinates\nend"
  ]
}