{
  "name": "mbpp_630_get_coordinates",
  "language": "rb",
  "prompt": "# Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef get_coordinates(test_tup)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_coordinates\n    candidate = method(:get_coordinates)\n    assert_equal([[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]], candidate.call([3, 4]))\n    assert_equal([[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]], candidate.call([4, 5]))\n    assert_equal([[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]], candidate.call([5, 6]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # Write your code here\nend",
    "  # Write your code here\n  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates\nend",
    "  test_tup.each_with_object([]) do |coordinate, coordinates|\n    coordinates << [coordinate[0] + 1, coordinate[1]]\n    coordinates << [coordinate[0] - 1, coordinate[1]]\n    coordinates << [coordinate[0], coordinate[1] + 1]\n    coordinates << [coordinate[0], coordinate[1] - 1]\n  end\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates\nend",
    "  # Write your code here\n  x, y = test_tup\n  [\n    [x - 1, y - 1],\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1]\n  ]\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates\nend",
    "  # Write your code here\n  # Hint: Use the .product method to get all the possible combinations of the coordinates.\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-product\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-flatten\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-uniq\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-select\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-map\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-sort\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-sort_by\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-each\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-each_with_index\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-each_with_object\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-inject\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-reduce\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-join\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-zip\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-transpose\n  # https://ruby-doc.org/core-2.4.1/Array.html#method-i-reverse\n  # https://ruby-doc.org/core-2.4.1/Array.",
    "  x, y = test_tup\n  [\n    [x, y + 1],\n    [x, y - 1],\n    [x + 1, y],\n    [x - 1, y]\n  ]\nend",
    "  # Write your code here\n  test_tup.each_with_object([]) do |coordinate, coordinates|\n    coordinates << [coordinate[0] + 1, coordinate[1]]\n    coordinates << [coordinate[0] - 1, coordinate[1]]\n    coordinates << [coordinate[0], coordinate[1] + 1]\n    coordinates << [coordinate[0], coordinate[1] - 1]\n  end\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x-1,y-1]\n  coordinates << [x-1,y]\n  coordinates << [x-1,y+1]\n  coordinates << [x,y-1]\n  coordinates << [x,y+1]\n  coordinates << [x+1,y-1]\n  coordinates << [x+1,y]\n  coordinates << [x+1,y+1]\n  return coordinates\nend",
    "  # Write your code here.\nend",
    "  # Write your code here\n  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates\nend",
    "\tx = test_tup[0]\n\ty = test_tup[1]\n\treturn [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\nend",
    "  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates << [x - 1, y]\n  coordinates << [x + 1, y]\n  coordinates << [x, y - 1]\n  coordinates << [x, y + 1]\n  coordinates << [x - 1, y - 1]\n  coordinates << [x + 1, y + 1]\n  coordinates << [x - 1, y + 1]\n  coordinates << [x + 1, y - 1]\n  coordinates\nend",
    "  # Write your code here\n  x = test_tup[0]\n  y = test_tup[1]\n  coordinates = []\n  coordinates.push([x-1,y])\n  coordinates.push([x+1,y])\n  coordinates.push([x,y-1])\n  coordinates.push([x,y+1])\n  coordinates\nend",
    "  coordinates = []\n  coordinates << [test_tup[0] + 1, test_tup[1]]\n  coordinates << [test_tup[0] - 1, test_tup[1]]\n  coordinates << [test_tup[0], test_tup[1] + 1]\n  coordinates << [test_tup[0], test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] + 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] + 1, test_tup[1] - 1]\n  coordinates << [test_tup[0] - 1, test_tup[1] + 1]\n  coordinates\nend",
    "  # Write your code here\nend"
  ]
}