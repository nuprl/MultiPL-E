{
  "name": "mbpp_130_max_occurrences",
  "language": "rb",
  "prompt": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |num, count| count == max_count }.keys\nend",
    "  # create a hash to store the number of occurrences of each item\n  occurrences = Hash.new(0)\n  # iterate through the array and increment the value of the key\n  nums.each { |num| occurrences[num] += 1 }\n  # find the key with the highest value\n  occurrences.max_by { |key, value| value }[0]\nend",
    "  # Write your code here\n  return -1 if nums.empty?\n  hash = {}\n  nums.each do |num|\n    hash[num] = hash[num].to_i + 1\n  end\n  hash.max_by {|k,v| v}[0]\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend",
    "  max_count = 0\n  max_num = nil\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n    if counts[num] > max_count\n      max_count = counts[num]\n      max_num = num\n    end\n  end\n  max_num\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |k, v| v }.first\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  nums.inject(Hash.new(0)) { |h, e| h[e] += 1; h }.max_by { |k, v| v }[0]\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, v| v }.first\nend",
    "  # TODO: implement me\n  nums.max_by { |num| nums.count(num) }\nend",
    "  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |_, v| v == max_freq }.keys\nend",
    "  # create a hash to store the frequency of each item\n  freq_hash = {}\n  # iterate over each item in the list\n  nums.each do |num|\n    # if the item is not in the hash, add it\n    if !freq_hash[num]\n      freq_hash[num] = 1\n    # if the item is in the hash, increment its frequency\n    else\n      freq_hash[num] += 1\n    end\n  end\n  # create a variable to store the item with the highest frequency\n  max_item = nil\n  # create a variable to store the highest frequency\n  max_freq = 0\n  # iterate over each item in the hash\n  freq_hash.each do |num, freq|\n    # if the frequency of the current item is higher than the current highest frequency\n    if freq > max_freq\n      # set the current item as the item with the highest frequency\n      max_item = num\n      # set the current frequency as the highest frequency\n      max_freq = freq\n    end\n  end\n  # return the item with the highest frequency\n  max_item\nend",
    "  max_count = 0\n  max_item = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_item = num\n    end\n  end\n  max_item\nend",
    "  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  hash.max_by{|k,v| v}[0]\nend",
    "  nums.max_by { |num| nums.count(num) }\nend",
    "  count = Hash.new(0)\n  nums.each do |num|\n    count[num] += 1\n  end\n  count.max_by { |k, v| v }[0]\nend",
    "  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend",
    "  max = 0\n  max_num = nil\n  nums.each do |num|\n    if nums.count(num) > max\n      max = nums.count(num)\n      max_num = num\n    end\n  end\n  max_num\nend"
  ]
}