{
  "name": "mbpp_130_max_occurrences",
  "language": "rb",
  "prompt": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |num, count| count == max_count }.keys\nend",
    "  # create a hash to store the number of occurrences of each item\n  occurrences = Hash.new(0)\n  # iterate through the array and increment the value of the key\n  nums.each { |num| occurrences[num] += 1 }\n  # find the key with the highest value\n  occurrences.max_by { |key, value| value }[0]\nend",
    "  # Write your code here\n  return -1 if nums.empty?\n  hash = {}\n  nums.each do |num|\n    hash[num] = hash[num].to_i + 1\n  end\n  hash.max_by {|k,v| v}[0]\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend",
    "  max_count = 0\n  max_num = nil\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n    if counts[num] > max_count\n      max_count = counts[num]\n      max_num = num\n    end\n  end\n  max_num\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |k, v| v }.first\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  nums.inject(Hash.new(0)) { |h, e| h[e] += 1; h }.max_by { |k, v| v }[0]\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, v| v }.first\nend",
    "  # TODO: implement me\n  nums.max_by { |num| nums.count(num) }\nend",
    "  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |_, v| v == max_freq }.keys\nend",
    "  # create a hash to store the frequency of each item\n  freq_hash = {}\n  # iterate over each item in the list\n  nums.each do |num|\n    # if the item is not in the hash, add it\n    if !freq_hash[num]\n      freq_hash[num] = 1\n    # if the item is in the hash, increment its frequency\n    else\n      freq_hash[num] += 1\n    end\n  end\n  # create a variable to store the item with the highest frequency\n  max_item = nil\n  # create a variable to store the highest frequency\n  max_freq = 0\n  # iterate over each item in the hash\n  freq_hash.each do |num, freq|\n    # if the frequency of the current item is higher than the current highest frequency\n    if freq > max_freq\n      # set the current item as the item with the highest frequency\n      max_item = num\n      # set the current frequency as the highest frequency\n      max_freq = freq\n    end\n  end\n  # return the item with the highest frequency\n  max_item\nend",
    "  max_count = 0\n  max_item = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_item = num\n    end\n  end\n  max_item\nend",
    "  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  hash.max_by{|k,v| v}[0]\nend",
    "  nums.max_by { |num| nums.count(num) }\nend",
    "  count = Hash.new(0)\n  nums.each do |num|\n    count[num] += 1\n  end\n  count.max_by { |k, v| v }[0]\nend",
    "  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend",
    "  max = 0\n  max_num = nil\n  nums.each do |num|\n    if nums.count(num) > max\n      max = nums.count(num)\n      max_num = num\n    end\n  end\n  max_num\nend",
    "  nums.inject(Hash.new(0)) { |h, n| h[n] += 1; h }.max_by { |k, v| v }.first\nend",
    "  count = Hash.new(0)\n  nums.each { |num| count[num] += 1 }\n  count.max_by { |_, v| v }[0]\nend",
    "  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |k, v| v == max_freq }.keys\nend",
    "  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_num = num\n    end\n  end\n  max_num\nend",
    "  nums.group_by { |n| n }.values.max_by(&:size).first\nend",
    "  nums.max_by { |num| nums.count(num) }\nend",
    "  # create a hash to store the number of occurrences\n  occurrences = {}\n  # iterate through the array\n  nums.each do |num|\n    # if the number is not in the hash, add it with a value of 1\n    if occurrences[num].nil?\n      occurrences[num] = 1\n    # if the number is in the hash, increment its value by 1\n    else\n      occurrences[num] += 1\n    end\n  end\n  # find the max value in the hash\n  max_value = occurrences.values.max\n  # find the key associated with the max value\n  max_key = occurrences.key(max_value)\n  # return the key\n  max_key\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend",
    "  # create a hash to store the number of occurrences of each item\n  occurrences = {}\n  # iterate through the list\n  nums.each do |num|\n    # if the item is not in the hash, add it with a value of 1\n    if occurrences[num] == nil\n      occurrences[num] = 1\n    # if the item is in the hash, increment the value by 1\n    else\n      occurrences[num] += 1\n    end\n  end\n  # create a variable to store the item with the maximum frequency\n  max_item = nil\n  # create a variable to store the maximum frequency\n  max_occurrence = 0\n  # iterate through the hash\n  occurrences.each do |item, occurrence|\n    # if the current item's frequency is greater than the current maximum frequency\n    if occurrence > max_occurrence\n      # set the maximum frequency to the current item's frequency\n      max_occurrence = occurrence\n      # set the maximum item to the current item\n      max_item = item\n    end\n  end\n  # return the maximum item\n  max_item\nend",
    "  nums.group_by { |num| num }.values.max_by(&:size).first\nend",
    "  nums.group_by { |i| i }.max_by { |k, v| v.size }.first\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  # Write your code here\n  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_num = num\n    end\n  end\n  max_num\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend",
    "  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |_, v| v == max_freq }.keys\nend",
    "  # Write your code here\n  hash = {}\n  nums.each do |num|\n    if hash.has_key?(num)\n      hash[num] += 1\n    else\n      hash[num] = 1\n    end\n  end\n  max = 0\n  max_key = nil\n  hash.each do |key, value|\n    if value > max\n      max = value\n      max_key = key\n    end\n  end\n  max_key\nend",
    "  nums.max_by { |num| nums.count(num) }\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  freq.max_by { |_, v| v }.first\nend",
    "  max_count = 0\n  max_num = nil\n  counts = Hash.new(0)",
    "  count = Hash.new(0)\n  nums.each do |num|\n    count[num] += 1\n  end\n  count.max_by { |k, v| v }[0]\nend",
    "  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend",
    "  nums.inject(Hash.new(0)) { |hash, num| hash[num] += 1; hash }.max_by { |_, v| v }.first\nend",
    "  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |num, count| count }[0]\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend",
    "  nums.group_by{|i| i}.values.max_by(&:size).first\nend",
    "  nums.group_by { |num| num }.values.max_by(&:size).first\nend",
    "  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend",
    "  nums.inject(Hash.new(0)) { |h, e| h[e] += 1; h }.max_by { |k, v| v }.first\nend",
    "  nums.group_by { |num| num }.values.max_by(&:size).first\nend",
    "  # Write your code here\n  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_num = num\n    end\n  end\n  max_num\nend",
    "  # Write your code here\n  hash = {}\n  nums.each do |num|\n    if hash[num]\n      hash[num] += 1\n    else\n      hash[num] = 1\n    end\n  end\n  max = 0\n  max_key = nil\n  hash.each do |key, value|\n    if value > max\n      max = value\n      max_key = key\n    end\n  end\n  max_key\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  nums.uniq.max_by { |num| nums.count(num) }\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend",
    "  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_num = num\n    end\n  end\n  max_num\nend",
    "  freq = {}\n  nums.each do |num|\n    if freq.has_key?(num)\n      freq[num] += 1\n    else\n      freq[num] = 1\n    end\n  end\n  max_freq = 0\n  max_freq_num = nil\n  freq.each do |num, freq|\n    if freq > max_freq\n      max_freq = freq\n      max_freq_num = num\n    end\n  end\n  max_freq_num\nend",
    "  nums.inject(Hash.new(0)) { |h, e| h[e] += 1; h }.max_by { |k, v| v }.first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend",
    "  # Write your code here\n  max = 0\n  nums.each do |num|\n    if nums.count(num) > max\n      max = nums.count(num)\n    end\n  end\n  max\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |k, v| v }.first\nend",
    "  nums.group_by { |num| num }.values.max_by(&:size).first\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  # Write your code here\n  count = Hash.new(0)\n  nums.each do |num|\n    count[num] += 1\n  end\n  max = count.values.max\n  count.select { |key, value| value == max }.keys\nend",
    "  max = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max\n      max = count\n      max_num = num\n    end\n  end\n  max_num\nend",
    "  nums.group_by { |num| num }.max_by { |k, v| v.length }.first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend",
    "  nums.group_by{|x| x}.values.max_by(&:size).first\nend",
    "  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  counts.max_by { |k, v| v }[0]\nend",
    "  nums.group_by { |num| num }.values.max_by(&:size).first\nend",
    "  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend",
    "  count = Hash.new(0)\n  nums.each { |num| count[num] += 1 }\n  count.max_by { |num, count| count }.first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend",
    "  nums.group_by { |n| n }.values.max_by(&:size).first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |k, v| v }[0]\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend",
    "  nums.max_by { |num| nums.count(num) }\nend",
    "  max = 0\n  max_num = nil\n  nums.each do |num|\n    if nums.count(num) > max\n      max = nums.count(num)\n      max_num = num\n    end\n  end\n  max_num\nend",
    "  nums.group_by { |num| num }.values.max_by(&:size).first\nend",
    "  # create a hash to store the frequency of each item\n  freq = {}\n  # iterate through the list\n  nums.each do |num|\n    # if the hash already has the item, increment its value by 1\n    if freq.has_key?(num)\n      freq[num] += 1\n    # otherwise, add the item to the hash and set its value to 1\n    else\n      freq[num] = 1\n    end\n  end\n  # find the item with the maximum frequency\n  max_freq = freq.values.max\n  # return the item with the maximum frequency\n  freq.key(max_freq)\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend",
    "  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend",
    "  nums.group_by{|x| x}.max_by{|k,v| v.length}.first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_key = nums[0]\n  counts.each do |k, v|\n    max_key = k if v > counts[max_key]\n  end\n  max_key\nend",
    "  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }.first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend",
    "  nums.group_by { |n| n }.values.max_by(&:size).first\nend",
    "  nums.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }.max_by { |_, v| v }.first\nend",
    "  nums.group_by { |num| num }.values.max_by(&:size).first\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  # create a hash to store the frequency of each item\n  freq = {}\n  # iterate through the list\n  nums.each do |num|\n    # if the item is not in the hash, add it and set its value to 1\n    if freq[num].nil?\n      freq[num] = 1\n    # if the item is in the hash, increment its value by 1\n    else\n      freq[num] += 1\n    end\n  end\n  # find the max value in the hash\n  max = freq.values.max\n  # return the key with the max value\n  freq.key(max)\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend",
    "  nums.group_by { |num| num }.values.max_by(&:size).first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |num, count| count == max_count }.keys\nend",
    "  # create a hash with the number of occurrences of each number\n  occurrences = {}\n  nums.each do |num|\n    occurrences[num] = nums.count(num)\n  end\n  # find the max number of occurrences\n  max_occurrences = occurrences.values.max\n  # find the number(s) that occur the max number of times\n  max_occurrences_nums = []\n  occurrences.each do |num, count|\n    if count == max_occurrences\n      max_occurrences_nums << num\n    end\n  end\n  # return the number(s) that occur the max number of times\n  max_occurrences_nums\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend",
    "  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  freq.max_by { |k, v| v }[0]\nend",
    "  nums.inject(Hash.new(0)) { |h, e| h[e] += 1; h }.max_by { |k, v| v }[0]\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend",
    "  count = Hash.new(0)\n  nums.each { |num| count[num] += 1 }\n  max = count.values.max\n  count.select { |k, v| v == max }.keys\nend",
    "  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }.first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend",
    "  nums.inject(Hash.new(0)) { |h, n| h[n] += 1; h }.max_by { |k, v| v }[0]\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  count = Hash.new(0)\n  nums.each do |num|\n    count[num] += 1\n  end\n  count.max_by { |k, v| v }[0]\nend",
    "  # create a hash to store the number of occurrences of each number\n  occurrences = {}\n  nums.each do |num|\n    occurrences[num] = 0 unless occurrences[num]\n    occurrences[num] += 1\n  end",
    "  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend",
    "  # find the max number of occurrences of any number in the list\n  max_count = 0\n  nums.each do |num|\n    count = nums.count(num)\n    max_count = count if count > max_count\n  end",
    "  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }.first\nend",
    "  nums.group_by { |num| num }.values.max_by(&:size).first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend",
    "  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  counts.max_by { |k, v| v }[0]\nend",
    "  # create a hash to store the number and its frequency\n  # iterate over the array and store the number and its frequency in the hash\n  # find the max value in the hash\n  # return the key of the max value\n  num_freq = {}\n  nums.each do |num|\n    num_freq[num] = nums.count(num)\n  end",
    "  # TODO: return the item with maximum frequency\n  hash = Hash.new(0)\n  nums.each { |num| hash[num] += 1 }\n  hash.max_by { |k, v| v }[0]\nend",
    "  nums.group_by{|i| i}.max_by{|k,v| v.size}.first\nend",
    "  nums.group_by{|num| num}.values.max_by(&:size).first\nend",
    "  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |_, v| v }.first\nend",
    "  count = Hash.new(0)\n  nums.each { |num| count[num] += 1 }\n  count.max_by { |_, v| v }.first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  nums.group_by { |n| n }.values.max_by(&:size).first\nend",
    "  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  freq.max_by { |_, v| v }.first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |num, count| count }[0]\nend",
    "  nums.max_by { |num| nums.count(num) }\nend",
    "  count = Hash.new(0)\n  nums.each do |num|\n    count[num] += 1\n  end\n  count.max_by { |k, v| v }[0]\nend",
    "  nums.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }.max_by { |_, v| v }.first\nend",
    "  max_count = 0\n  max_item = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_item = num\n    end\n  end\n  max_item\nend",
    "  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend",
    "  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend",
    "  nums.group_by { |num| num }.values.max_by(&:size).first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend",
    "  count = Hash.new(0)\n  nums.each { |num| count[num] += 1 }\n  max = count.values.max\n  count.select { |k, v| v == max }.keys\nend",
    "  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |_, v| v }.first\nend",
    "  # Write your code here\n  hash = {}\n  nums.each do |num|\n    if hash[num]\n      hash[num] += 1\n    else\n      hash[num] = 1\n    end\n  end\n  max = hash.values.max\n  hash.select { |k, v| v == max }.keys\nend",
    "  nums.group_by{|x| x}.values.max_by(&:size).first\nend",
    "  # Write your code here\n  max_count = 0\n  max_item = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_item = num\n    end\n  end\n  max_item\nend",
    "  nums.max_by { |num| nums.count(num) }\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, v| v }[0]\nend",
    "  nums.group_by{|x| x}.values.max_by(&:size).first\nend",
    "  nums.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }.max_by { |_, v| v }.first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend",
    "  nums.inject(Hash.new(0)) { |h, e| h[e] += 1; h }.max_by { |k, v| v }[0]\nend",
    "  nums.max_by { |num| nums.count(num) }\nend",
    "  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |num, count| count == max_count }.keys\nend",
    "  # create a hash to store the number of times each number occurs\n  num_occurrences = {}\n  # iterate through the list of numbers\n  nums.each do |num|\n    # if the number is not in the hash, add it to the hash and set its value to 1\n    if !num_occurrences.has_key?(num)\n      num_occurrences[num] = 1\n    # if the number is in the hash, increment its value by 1\n    else\n      num_occurrences[num] += 1\n    end\n  end\n  # create a variable to store the number with the maximum frequency\n  max_num = nil\n  # create a variable to store the maximum frequency\n  max_occurrence = 0\n  # iterate through the hash\n  num_occurrences.each do |num, occurrence|\n    # if the number of occurrences is greater than the current maximum, update the maximum number and maximum frequency\n    if occurrence > max_occurrence\n      max_num = num\n      max_occurrence = occurrence\n    end\n  end\n  # return the maximum number\n  max_num\nend",
    "  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }.first\nend",
    "  # Write your code here\n  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_num = num\n    end\n  end\n  max_num\nend",
    "  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  max = hash.values.max\n  hash.select { |k, v| v == max }.keys\nend",
    "  # create a hash to store the number of occurrences of each number\n  occurrences = Hash.new(0)\n  # iterate through the list and count the number of occurrences of each number\n  nums.each do |num|\n    occurrences[num] += 1\n  end\n  # find the number with the maximum number of occurrences\n  max_occurrences = occurrences.values.max\n  # find the key corresponding to the maximum number of occurrences\n  max_occurrences_key = occurrences.key(max_occurrences)\n  # return the key\n  max_occurrences_key\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  hash.max_by { |k, v| v }[0]\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |k, v| v == max_freq }.keys\nend",
    "  nums.uniq.max_by { |n| nums.count(n) }\nend",
    "  nums.group_by{|x| x}.values.max_by(&:size).first\nend",
    "  nums.group_by{|x| x}.values.max_by(&:size).first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend",
    "  nums.group_by { |n| n }.values.max_by(&:size).first\nend",
    "  # write your code here\n  count = Hash.new(0)\n  nums.each do |num|\n    count[num] += 1\n  end\n  count.max_by { |k, v| v }[0]\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, v| v }.first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend",
    "  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend",
    "  nums.group_by{|x| x}.values.max_by(&:size).first\nend",
    "  nums.group_by {|x| x}.values.max_by(&:size).first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend",
    "  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend",
    "  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |k, v| v == max_freq }.keys\nend",
    "  # create a hash to store the number of occurrences of each number\n  occurrences = {}",
    "  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  max_value = hash.values.max\n  hash.select { |k, v| v == max_value }.keys\nend",
    "  nums.inject(Hash.new(0)) { |h,v| h[v] += 1; h }.max_by { |k,v| v }[0]\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, v| v }[0]\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend",
    "  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  # Write your code here\n  hash = Hash.new(0)\n  nums.each { |num| hash[num] += 1 }\n  max = hash.values.max\n  hash.select { |k, v| v == max }.keys\nend",
    "  freq_hash = Hash.new(0)\n  nums.each { |num| freq_hash[num] += 1 }\n  freq_hash.max_by { |k, v| v }[0]\nend",
    "  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_num = num\n    end\n  end\n  max_num\nend",
    "  nums.max_by { |num| nums.count(num) }\nend",
    "  nums.group_by(&:itself).values.max_by(&:size).first\nend",
    "  nums.max_by { |num| nums.count(num) }\nend",
    "  # Write your code here\n  max = 0\n  max_num = nil\n  nums.each do |num|\n    if nums.count(num) > max\n      max = nums.count(num)\n      max_num = num\n    end\n  end\n  max_num\nend",
    "  # write your code here\n  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    if nums.count(num) > max_count\n      max_count = nums.count(num)\n      max_num = num\n    end\n  end\n  max_num\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend",
    "  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend"
  ]
}