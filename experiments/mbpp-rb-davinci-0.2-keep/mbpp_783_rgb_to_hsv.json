{
  "name": "mbpp_783_rgb_to_hsv",
  "language": "rb",
  "prompt": "# Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef rgb_to_hsv(r, g, b)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rgb_to_hsv\n    candidate = method(:rgb_to_hsv)\n    assert_equal([0, 0.0, 100.0], candidate.call(255, 255, 255))\n    assert_equal([120.0, 100.0, 84.31372549019608], candidate.call(0, 215, 0))\n    assert_equal([149.26829268292684, 95.34883720930233, 84.31372549019608], candidate.call(10, 215, 110))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  r /= 255.0\n  g /= 255.0\n  b /= 255.0\n  cmax = [r, g, b].max\n  cmin = [r, g, b].min\n  delta = cmax - cmin\n  if delta == 0\n    h = 0\n  elsif cmax == r\n    h = 60 * (((g - b) / delta) % 6)\n  elsif cmax == g\n    h = 60 * (((b - r) / delta) + 2)\n  elsif cmax == b\n    h = 60 * (((r - g) / delta) + 4)\n  end\n  if cmax == 0\n    s = 0\n  else\n    s = delta / cmax\n  end\n  v = cmax\n  [h, s, v]\nend",
    "  r /= 255.0\n  g /= 255.0\n  b /= 255.0\n  cmax = [r, g, b].max\n  cmin = [r, g, b].min\n  delta = cmax - cmin",
    "  r /= 255.0\n  g /= 255.0\n  b /= 255.0\n  cmax = [r, g, b].max\n  cmin = [r, g, b].min\n  delta = cmax - cmin\n  if delta == 0\n    h = 0\n  elsif cmax == r\n    h = 60 * (((g - b) / delta) % 6)\n  elsif cmax == g\n    h = 60 * (((b - r) / delta) + 2)\n  elsif cmax == b\n    h = 60 * (((r - g) / delta) + 4)\n  end\n  if cmax == 0\n    s = 0\n  else\n    s = delta / cmax\n  end\n  v = cmax\n  [h, s, v]\nend",
    "  r, g, b = r/255.0, g/255.0, b/255.0\n  c_max = [r, g, b].max\n  c_min = [r, g, b].min\n  delta = c_max - c_min",
    "  r = r.to_f\n  g = g.to_f\n  b = b.to_f\n  max = [r, g, b].max\n  min = [r, g, b].min\n  delta = max - min\n  if max == min\n    h = 0\n  elsif max == r\n    h = 60 * ((g - b) / delta % 6)\n  elsif max == g\n    h = 60 * ((b - r) / delta + 2)\n  elsif max == b\n    h = 60 * ((r - g) / delta + 4)\n  end\n  s = max == 0 ? 0 : delta / max\n  v = max\n  [h, s, v]\nend",
    "  r = r.to_f\n  g = g.to_f\n  b = b.to_f\n  max = [r, g, b].max\n  min = [r, g, b].min\n  delta = max - min\n  if max == min\n    h = 0\n  elsif max == r\n    h = (60 * ((g - b) / delta)).modulo(360)\n  elsif max == g\n    h = (60 * ((b - r) / delta) + 120)\n  elsif max == b\n    h = (60 * ((r - g) / delta) + 240)\n  end\n  if max == 0\n    s = 0\n  else\n    s = (delta / max) * 100\n  end\n  v = max * 100\n  return [h, s, v]\nend",
    "  r, g, b = r.to_f, g.to_f, b.to_f\n  max = [r, g, b].max\n  min = [r, g, b].min\n  delta = max - min\n  v = max\n  if max != 0\n    s = delta / max\n    if r == max\n      h = (g - b) / delta\n    elsif g == max\n      h = 2 + (b - r) / delta\n    elsif b == max\n      h = 4 + (r - g) / delta\n    end\n    h *= 60\n    h += 360 if h < 0\n  else\n    s = 0\n    h = -1\n  end\n  [h, s, v]\nend",
    "  r = r.to_f\n  g = g.to_f\n  b = b.to_f\n  max = [r, g, b].max\n  min = [r, g, b].min\n  diff = max - min\n  if max == min\n    h = 0\n  elsif max == r\n    h = (60 * ((g - b) / diff) + 360) % 360\n  elsif max == g\n    h = (60 * ((b - r) / diff) + 120)\n  elsif max == b\n    h = (60 * ((r - g) / diff) + 240)\n  end\n  if max == 0\n    s = 0\n  else\n    s = 1 - (min / max)\n  end\n  v = max\n  [h, s, v]\nend",
    "  r = r.to_f\n  g = g.to_f\n  b = b.to_f\n  max = [r, g, b].max\n  min = [r, g, b].min\n  delta = max - min\n  v = max\n  s = max == 0 ? 0 : (delta / max)\n  if max == min\n    h = 0\n  elsif max == r\n    h = (g - b) / delta + (g < b ? 6 : 0)\n  elsif max == g\n    h = (b - r) / delta + 2\n  elsif max == b\n    h = (r - g) / delta + 4\n  end\n  h = h / 6\n  h = h * 360\n  return [h, s, v]\nend",
    "  r, g, b = r/255.0, g/255.0, b/255.0\n  max = [r, g, b].max\n  min = [r, g, b].min\n  delta = max - min\n  v = max\n  s = max == 0 ? 0 : (delta/max)\n  if max == min\n    h = 0\n  elsif max == r\n    h = (g - b) / delta + (g < b ? 6 : 0)\n  elsif max == g\n    h = (b - r) / delta + 2\n  elsif max == b\n    h = (r - g) / delta + 4\n  end\n  h = h/6\n  [h, s, v]\nend",
    "  r /= 255.0\n  g /= 255.0\n  b /= 255.0\n  cmax = [r, g, b].max\n  cmin = [r, g, b].min\n  delta = cmax - cmin\n  if delta == 0\n    h = 0\n  elsif cmax == r\n    h = 60 * (((g - b) / delta) % 6)\n  elsif cmax == g\n    h = 60 * (((b - r) / delta) + 2)\n  elsif cmax == b\n    h = 60 * (((r - g) / delta) + 4)\n  end\n  if cmax == 0\n    s = 0\n  else\n    s = delta / cmax\n  end\n  v = cmax\n  [h, s, v]\nend",
    "  r /= 255.0\n  g /= 255.0\n  b /= 255.0\n  max = [r, g, b].max\n  min = [r, g, b].min\n  h = 0\n  s = 0\n  v = max\n  diff = max - min\n  s = max == 0 ? 0 : diff / max\n  if max == min\n    h = 0\n  else\n    case max\n    when r\n      h = (g - b) / diff + (g < b ? 6 : 0)\n    when g\n      h = (b - r) / diff + 2\n    when b\n      h = (r - g) / diff + 4\n    end\n    h /= 6\n  end\n  [h, s, v]\nend",
    "  r /= 255.0\n  g /= 255.0\n  b /= 255.0\n  cmax = [r, g, b].max\n  cmin = [r, g, b].min\n  delta = cmax - cmin\n  if delta == 0\n    h = 0\n  elsif cmax == r\n    h = 60 * ((g - b) / delta % 6)\n  elsif cmax == g\n    h = 60 * ((b - r) / delta + 2)\n  elsif cmax == b\n    h = 60 * ((r - g) / delta + 4)\n  end\n  if cmax == 0\n    s = 0\n  else\n    s = delta / cmax\n  end\n  v = cmax\n  [h, s, v]\nend",
    "  r = r / 255.0\n  g = g / 255.0\n  b = b / 255.0\n  cmax = [r, g, b].max\n  cmin = [r, g, b].min\n  delta = cmax - cmin\n  if delta == 0\n    h = 0\n  elsif cmax == r\n    h = 60 * (((g - b) / delta) % 6)\n  elsif cmax == g\n    h = 60 * (((b - r) / delta) + 2)\n  elsif cmax == b\n    h = 60 * (((r - g) / delta) + 4)\n  end\n  if cmax == 0\n    s = 0\n  else\n    s = delta / cmax\n  end\n  v = cmax\n  return h, s, v\nend",
    "  r = r.to_f\n  g = g.to_f\n  b = b.to_f\n  max = [r, g, b].max\n  min = [r, g, b].min\n  delta = max - min\n  if max == min\n    h = 0\n  elsif max == r\n    h = (60 * ((g - b) / delta) + 360) % 360\n  elsif max == g\n    h = (60 * ((b - r) / delta) + 120) % 360\n  elsif max == b\n    h = (60 * ((r - g) / delta) + 240) % 360\n  end\n  if max == 0\n    s = 0\n  else\n    s = (delta / max) * 100\n  end\n  v = max * 100\n  return h, s, v\nend",
    "  r /= 255.0\n  g /= 255.0\n  b /= 255.0\n  cmax = [r, g, b].max\n  cmin = [r, g, b].min\n  delta = cmax - cmin\n  if delta == 0\n    h = 0\n  elsif cmax == r\n    h = 60 * (((g - b) / delta) % 6)\n  elsif cmax == g\n    h = 60 * (((b - r) / delta) + 2)\n  elsif cmax == b\n    h = 60 * (((r - g) / delta) + 4)\n  end\n  if cmax == 0\n    s = 0\n  else\n    s = delta / cmax\n  end\n  v = cmax\n  [h, s, v]\nend",
    "  r = r.to_f\n  g = g.to_f\n  b = b.to_f\n  max = [r, g, b].max\n  min = [r, g, b].min\n  h = 0\n  s = 0\n  v = max",
    "  r, g, b = r.to_f, g.to_f, b.to_f\n  max = [r, g, b].max\n  min = [r, g, b].min\n  delta = max - min\n  if max == min\n    h = 0\n  elsif max == r\n    h = 60 * ((g - b) / delta % 6)\n  elsif max == g\n    h = 60 * ((b - r) / delta + 2)\n  elsif max == b\n    h = 60 * ((r - g) / delta + 4)\n  end\n  s = max == 0 ? 0 : delta / max\n  v = max\n  [h, s, v]\nend",
    "  r = r.to_f\n  g = g.to_f\n  b = b.to_f\n  max = [r, g, b].max\n  min = [r, g, b].min\n  h = 0\n  s = 0\n  v = max\n  if max != 0\n    s = (max - min) / max\n    if max == r\n      h = 60 * (g - b) / (max - min)\n    elsif max == g\n      h = 60 * (b - r) / (max - min) + 120\n    elsif max == b\n      h = 60 * (r - g) / (max - min) + 240\n    end\n    if h < 0\n      h += 360\n    end\n  end\n  return h, s, v\nend",
    "  r /= 255.0\n  g /= 255.0\n  b /= 255.0\n  max = [r, g, b].max\n  min = [r, g, b].min\n  h = 0\n  s = 0\n  v = max\n  delta = max - min\n  if max != 0\n    s = delta / max\n    if r == max\n      h = (g - b) / delta\n    elsif g == max\n      h = 2 + (b - r) / delta\n    elsif b == max\n      h = 4 + (r - g) / delta\n    end\n    h *= 60\n    if h < 0\n      h += 360\n    end\n  end\n  return h, s, v\nend"
  ]
}