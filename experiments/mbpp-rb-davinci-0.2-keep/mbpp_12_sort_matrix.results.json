{
  "name": "mbpp_12_sort_matrix",
  "language": "rb",
  "prompt": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(0, :+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf2qfynsg\nStarted\n.\nFinished in 0.000468818 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2133.02 tests/s, 6399.07 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by {|row| row.inject(:+)}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps7j50eym\nStarted\n.\nFinished in 0.000381746 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2619.54 tests/s, 7858.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(0, :+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf2qfynsg\nStarted\n.\nFinished in 0.000468818 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2133.02 tests/s, 6399.07 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(0, :+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf2qfynsg\nStarted\n.\nFinished in 0.000468818 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2133.02 tests/s, 6399.07 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by {|row| row.reduce(:+)}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5i_uyu7_\nStarted\n.\nFinished in 0.000474453 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2107.69 tests/s, 6323.07 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by {|row| row.inject(0, :+)}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplrlu0lw8\nStarted\n.\nFinished in 0.000386275 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2588.83 tests/s, 7766.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(0, :+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf2qfynsg\nStarted\n.\nFinished in 0.000468818 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2133.02 tests/s, 6399.07 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(0, :+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf2qfynsg\nStarted\n.\nFinished in 0.000468818 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2133.02 tests/s, 6399.07 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(0, :+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf2qfynsg\nStarted\n.\nFinished in 0.000468818 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2133.02 tests/s, 6399.07 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvu8wqn1\nStarted\n.\nFinished in 0.000409404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.58 tests/s, 7327.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n  m.sort_by { |row| row.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgtnbdzsy\nStarted\n.\nFinished in 0.000534913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1869.46 tests/s, 5608.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}