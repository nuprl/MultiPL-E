{
  "name": "mbpp_776_count_vowels",
  "language": "rb",
  "prompt": "# Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_vowels\n    candidate = method(:count_vowels)\n    assert_equal(7, candidate.call(\"bestinstareels\"))\n    assert_equal(12, candidate.call(\"partofthejourneyistheend\"))\n    assert_equal(5, candidate.call(\"amazonprime\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  vowels = ['a', 'e', 'i', 'o', 'u']\n  count = 0\n  test_str.each_char.with_index do |char, index|\n    if vowels.include?(char)\n      if index == 0\n        count += 1 if vowels.include?(test_str[index + 1])\n      elsif index == test_str.length - 1\n        count += 1 if vowels.include?(test_str[index - 1])\n      else\n        count += 1 if vowels.include?(test_str[index + 1]) || vowels.include?(test_str[index - 1])\n      end\n    end\n  end\n  count\nend",
    "  vowels = \"aeiou\"\n  count = 0\n  test_str.each_char.with_index do |char, i|\n    if vowels.include?(char) && vowels.include?(test_str[i+1])\n      count += 1\n    end\n  end\n  count\nend",
    "  count = 0\n  test_str.each_char.with_index do |char, index|\n    if char =~ /[aeiou]/ && (index == 0 || index == test_str.length - 1)\n      count += 1\n    elsif char =~ /[aeiou]/ && test_str[index - 1] =~ /[aeiou]/\n      count += 1\n    end\n  end\n  count\nend",
    "  count = 0\n  vowels = \"aeiou\"\n  test_str.each_char.with_index do |char, index|\n    if vowels.include?(char)\n      if index == 0\n        count += 1 if vowels.include?(test_str[index + 1])\n      elsif index == test_str.length - 1\n        count += 1 if vowels.include?(test_str[index - 1])\n      else\n        count += 1 if vowels.include?(test_str[index - 1]) || vowels.include?(test_str[index + 1])\n      end\n    end\n  end\n  count\nend",
    "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_count = 0\n  test_str.split(\"\").each_with_index do |char, index|\n    if vowels.include?(char)\n      if index == 0\n        vowel_count += 1 if vowels.include?(test_str[index + 1])\n      elsif index == test_str.length - 1\n        vowel_count += 1 if vowels.include?(test_str[index - 1])\n      else\n        vowel_count += 1 if vowels.include?(test_str[index + 1]) || vowels.include?(test_str[index - 1])\n      end\n    end\n  end\n  vowel_count\nend",
    "  vowels = \"aeiou\"\n  count = 0\n  test_str.each_char.with_index do |char, index|\n    if vowels.include?(char)\n      if index == 0\n        count += 1 if vowels.include?(test_str[index + 1])\n      elsif index == test_str.length - 1\n        count += 1 if vowels.include?(test_str[index - 1])\n      else\n        count += 1 if vowels.include?(test_str[index - 1]) || vowels.include?(test_str[index + 1])\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  test_str.each_char.with_index do |char, index|\n    if char =~ /[aeiou]/\n      if index == 0\n        count += 1 if test_str[index + 1] =~ /[aeiou]/\n      elsif index == test_str.length - 1\n        count += 1 if test_str[index - 1] =~ /[aeiou]/\n      else\n        count += 1 if test_str[index - 1] =~ /[aeiou]/ || test_str[index + 1] =~ /[aeiou]/\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  test_str.each_char.with_index do |char, index|\n    if char =~ /[aeiou]/\n      count += 1 if test_str[index - 1] =~ /[aeiou]/ || test_str[index + 1] =~ /[aeiou]/\n    end\n  end\n  count\nend",
    "  vowels = \"aeiou\"\n  count = 0\n  test_str.each_char.with_index do |char, index|\n    if vowels.include?(char)\n      if index == 0\n        count += 1 if vowels.include?(test_str[index + 1])\n      elsif index == test_str.length - 1\n        count += 1 if vowels.include?(test_str[index - 1])\n      else\n        count += 1 if vowels.include?(test_str[index - 1]) || vowels.include?(test_str[index + 1])\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  test_str.each_char.with_index do |char, index|\n    if char =~ /[aeiou]/\n      if index == 0\n        count += 1 if test_str[index + 1] =~ /[aeiou]/\n      elsif index == test_str.length - 1\n        count += 1 if test_str[index - 1] =~ /[aeiou]/\n      else\n        count += 1 if test_str[index - 1] =~ /[aeiou]/ || test_str[index + 1] =~ /[aeiou]/\n      end\n    end\n  end\n  count\nend",
    "  vowels = ['a', 'e', 'i', 'o', 'u']\n  count = 0\n  test_str.each_char.with_index do |char, index|\n    if vowels.include?(char)\n      count += 1 if vowels.include?(test_str[index + 1])\n    end\n  end\n  count\nend",
    "  vowels = \"aeiou\"\n  count = 0\n  test_str.each_char.with_index do |char, index|\n    if vowels.include?(char)\n      if index == 0\n        count += 1 if vowels.include?(test_str[index + 1])\n      elsif index == test_str.length - 1\n        count += 1 if vowels.include?(test_str[index - 1])\n      else\n        count += 1 if vowels.include?(test_str[index - 1]) || vowels.include?(test_str[index + 1])\n      end\n    end\n  end\n  count\nend",
    "  vowels = 'aeiou'\n  count = 0\n  test_str.each_char.with_index do |char, index|\n    if vowels.include?(char)\n      if index == 0\n        count += 1 if vowels.include?(test_str[index + 1])\n      elsif index == test_str.length - 1\n        count += 1 if vowels.include?(test_str[index - 1])\n      else\n        count += 1 if vowels.include?(test_str[index - 1]) || vowels.include?(test_str[index + 1])\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  test_str.each_char.with_index do |char, index|\n    if char =~ /[aeiou]/\n      if index == 0\n        count += 1 if test_str[index + 1] =~ /[aeiou]/\n      elsif index == test_str.length - 1\n        count += 1 if test_str[index - 1] =~ /[aeiou]/\n      else\n        count += 1 if test_str[index + 1] =~ /[aeiou]/ || test_str[index - 1] =~ /[aeiou]/\n      end\n    end\n  end\n  count\nend",
    "  vowels = ['a', 'e', 'i', 'o', 'u']\n  count = 0\n  test_str.each_char do |char|\n    if vowels.include?(char)\n      count += 1\n    end\n  end\n  count\nend",
    "  count = 0\n  test_str.each_char.with_index do |char, index|\n    if char =~ /[aeiou]/\n      if index == 0\n        count += 1 if test_str[index + 1] =~ /[aeiou]/\n      elsif index == test_str.length - 1\n        count += 1 if test_str[index - 1] =~ /[aeiou]/\n      else\n        count += 1 if test_str[index - 1] =~ /[aeiou]/ || test_str[index + 1] =~ /[aeiou]/\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  test_str.each_char.with_index do |char, index|\n    if char =~ /[aeiou]/\n      if index == 0\n        count += 1 if test_str[index+1] =~ /[aeiou]/\n      elsif index == test_str.length - 1\n        count += 1 if test_str[index-1] =~ /[aeiou]/\n      else\n        count += 1 if test_str[index-1] =~ /[aeiou]/ || test_str[index+1] =~ /[aeiou]/\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  test_str.split('').each_with_index do |char, index|\n    if index == 0\n      count += 1 if char.match(/[aeiou]/)\n    elsif index == test_str.length - 1\n      count += 1 if char.match(/[aeiou]/)\n    else\n      count += 1 if char.match(/[aeiou]/) && test_str[index - 1].match(/[aeiou]/) && test_str[index + 1].match(/[aeiou]/)\n    end\n  end\n  count\nend",
    "  vowels = \"aeiou\"\n  count = 0\n  test_str.each_char.with_index do |char, index|\n    if vowels.include?(char)\n      if index == 0\n        if vowels.include?(test_str[index + 1])\n          count += 1\n        end\n      elsif index == test_str.length - 1\n        if vowels.include?(test_str[index - 1])\n          count += 1\n        end\n      else\n        if vowels.include?(test_str[index - 1]) || vowels.include?(test_str[index + 1])\n          count += 1\n        end\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  test_str.each_char.with_index do |char, index|\n    if vowels.include?(char)\n      if index > 0\n        count += 1 if vowels.include?(test_str[index - 1])\n      end\n      if index < test_str.length - 1\n        count += 1 if vowels.include?(test_str[index + 1])\n      end\n    end\n  end\n  count\nend"
  ]
}