{
  "name": "mbpp_750_add_tuple",
  "language": "rb",
  "prompt": "# Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_tuple\n    candidate = method(:add_tuple)\n    assert_equal([5, 6, 7, 9, 10], candidate.call([5, 6, 7], [9, 10]))\n    assert_equal([6, 7, 8, 10, 11], candidate.call([6, 7, 8], [10, 11]))\n    assert_equal([7, 8, 9, 11, 12], candidate.call([7, 8, 9], [11, 12]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_list << test_tup\nend",
    "  test_list << test_tup\nend",
    "  test_list.push(test_tup)\n  return test_list\nend",
    "  test_list.push(test_tup)\n  puts test_list\nend",
    "  test_list.push(test_tup)\n  puts test_list\nend",
    "  test_list.push(test_tup)\n  return test_list\nend",
    "  test_list.push(test_tup)\n  puts test_list\nend",
    "  test_list << test_tup\n  return test_list\nend",
    "  test_list << test_tup\n  test_list\nend",
    "  test_list << test_tup\nend",
    "    test_list << test_tup\n    return test_list\nend",
    "",
    "  test_list.push(test_tup)\n  return test_list\nend",
    "  test_list.push(test_tup)\n  return test_list\nend",
    "  test_list.push(test_tup)\n  puts test_list\nend",
    "  test_list.push(test_tup)\n  puts test_list\nend",
    "  test_list.push(test_tup)\n  return test_list\nend",
    "  test_list << test_tup\nend",
    "  test_list.push(test_tup)\n  return test_list\nend",
    "  test_list << test_tup\n  return test_list\nend"
  ]
}