{
  "name": "mbpp_252_convert",
  "language": "rb",
  "prompt": "# Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_convert\n    candidate = method(:convert)\n    assert_equal([1.0, 0.0], candidate.call(1))\n    assert_equal([4.0, 0.0], candidate.call(4))\n    assert_equal([5.0, 0.0], candidate.call(5))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.each do |number|\n    puts \"The polar coordinates of #{number} are #{number.polar}\"\n  end\nend",
    "  numbers.each do |number|\n    puts \"The polar coordinates of #{number} are #{number.polar}\"\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map {|number| number.polar}\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.each do |number|\n    puts \"#{number} => #{number.polar}\"\n  end\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.each do |number|\n    puts \"The polar coordinates of #{number} are #{number.polar}\"\n  end\nend",
    "  numbers.map { |n| n.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |x| x.polar }\nend",
    "  numbers.map { |number| number.polar }\nend",
    "  numbers.map { |n| n.polar }\nend",
    "  numbers.map { |number| number.polar }\nend"
  ]
}