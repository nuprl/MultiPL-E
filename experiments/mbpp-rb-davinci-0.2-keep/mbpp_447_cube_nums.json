{
  "name": "mbpp_447_cube_nums",
  "language": "rb",
  "prompt": "# Write a function to find cubes of individual elements in a list.\ndef cube_nums(nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_cube_nums\n    candidate = method(:cube_nums)\n    assert_equal([1, 8, 27, 64, 125, 216, 343, 512, 729, 1000], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30]))\n    assert_equal([1728, 3375], candidate.call([12, 15]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  nums.map { |num| num ** 3 }\nend",
    "  nums.map { |num| num ** 3 }\nend",
    "  nums.map {|num| num ** 3}\nend",
    "  nums.map { |num| num ** 3 }\nend",
    "  nums.map {|num| num ** 3}\nend",
    "  nums.map { |num| num ** 3 }\nend",
    "  nums.map { |num| num ** 3 }\nend",
    "  nums.map { |num| num ** 3 }\nend",
    "  nums.map { |num| num ** 3 }\nend",
    "  nums.map { |num| num ** 3 }\nend",
    "  nums.map { |num| num ** 3 }\nend",
    "  nums.map { |num| num ** 3 }\nend",
    "  nums.map { |num| num ** 3 }\nend",
    "  nums.map { |num| num ** 3 }\nend",
    "  nums.map { |num| num ** 3 }\nend",
    "  nums.map { |num| num ** 3 }\nend",
    "  nums.map { |num| num ** 3 }\nend",
    "  nums.map { |num| num ** 3 }\nend",
    "  nums.map { |num| num ** 3 }\nend",
    "  nums.map { |num| num ** 3 }\nend"
  ]
}