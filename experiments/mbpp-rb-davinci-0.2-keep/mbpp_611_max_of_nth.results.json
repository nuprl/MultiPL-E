{
  "name": "mbpp_611_max_of_nth",
  "language": "rb",
  "prompt": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |list| list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb4qzbvxv\nStarted\n.\nFinished in 0.000387067 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2583.53 tests/s, 7750.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |sub_array|\n    if sub_array[n] > max\n      max = sub_array[n]\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpditai5aa\nStarted\n.\nFinished in 0.000394414 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2535.41 tests/s, 7606.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6rv3udd0\nStarted\n.\nFinished in 0.000359694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2780.14 tests/s, 8340.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map{|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp26lhikys\nStarted\n.\nFinished in 0.000389529 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2567.20 tests/s, 7701.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = 0\n  test_list.each do |row|\n    if row[n] > max\n      max = row[n]\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdaqr3cb7\nStarted\n.\nFinished in 0.000390441 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2561.21 tests/s, 7683.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sublist| sublist[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi86jl6dc\nStarted\n.\nFinished in 0.000412353 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.11 tests/s, 7275.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |sublist|\n    if sublist[n] > max\n      max = sublist[n]\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa_a6pggs\nStarted\n.\nFinished in 0.000397545 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.44 tests/s, 7546.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |sub_list|\n    if sub_list[n] > max\n      max = sub_list[n]\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpknexhxan\nStarted\n.\nFinished in 0.000383654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2606.52 tests/s, 7819.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map{|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp26lhikys\nStarted\n.\nFinished in 0.000389529 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2567.20 tests/s, 7701.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6rv3udd0\nStarted\n.\nFinished in 0.000359694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2780.14 tests/s, 8340.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |sub_list|\n    if sub_list[n] > max\n      max = sub_list[n]\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu2gfnt4f\nStarted\n.\nFinished in 0.000401046 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2493.48 tests/s, 7480.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max_value = 0\n  test_list.each do |row|\n    if row[n] > max_value\n      max_value = row[n]\n    end\n  end\n  return max_value\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwpvcckk9\nStarted\n.\nFinished in 0.000406548 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2459.73 tests/s, 7379.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6rv3udd0\nStarted\n.\nFinished in 0.000359694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2780.14 tests/s, 8340.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  # test_list.map { |x| x[n] }.max\n  test_list.map(&:max)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "Loaded suite /tmp/tmpaa52n4x2\nStarted\nF\n===============================================================================\nFailure: test_max_of_nth(TestHumanEval)\n/tmp/tmpaa52n4x2.rb:10:in `test_max_of_nth'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_max_of_nth\n      9:     candidate = method(:max_of_nth)\n  => 10:     assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n     11:     assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n     12:     assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n     13:   end\n<19> expected but was\n<[7, 5, 19]>\n\ndiff:\n? [7, 5, 19]\n===============================================================================\n\nFinished in 0.006728692 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.62 tests/s, 148.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |list|\n    if list[n] > max\n      max = list[n]\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphtxhdnrx\nStarted\n.\nFinished in 0.000389439 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2567.80 tests/s, 7703.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6rv3udd0\nStarted\n.\nFinished in 0.000359694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2780.14 tests/s, 8340.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = 0\n  test_list.each do |sub_list|\n    if sub_list[n] > max\n      max = sub_list[n]\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwk41ibni\nStarted\n.\nFinished in 0.000398537 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.18 tests/s, 7527.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_arr| sub_arr[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp0tbnwik\nStarted\n.\nFinished in 0.000394388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2535.57 tests/s, 7606.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sublist| sublist[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi86jl6dc\nStarted\n.\nFinished in 0.000412353 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.11 tests/s, 7275.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = 0\n  test_list.each do |row|\n    if row[n] > max\n      max = row[n]\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdaqr3cb7\nStarted\n.\nFinished in 0.000390441 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2561.21 tests/s, 7683.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = 0\n  test_list.each do |row|\n    if row[n] > max\n      max = row[n]\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdaqr3cb7\nStarted\n.\nFinished in 0.000390441 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2561.21 tests/s, 7683.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "Loaded suite /tmp/tmpp1a7hsuc\nStarted\nF\n===============================================================================\nFailure: test_max_of_nth(TestHumanEval)\n/tmp/tmpp1a7hsuc.rb:9:in `test_max_of_nth'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_of_nth\n      8:     candidate = method(:max_of_nth)\n  =>  9:     assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n     10:     assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n     11:     assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n     12:   end\n<19> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006356649 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.32 tests/s, 157.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |row|\n    if row[n] > max\n      max = row[n]\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpaut7v7ys\nStarted\n.\nFinished in 0.000398836 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2507.30 tests/s, 7521.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sublist| sublist[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi86jl6dc\nStarted\n.\nFinished in 0.000412353 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.11 tests/s, 7275.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sublist| sublist[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi86jl6dc\nStarted\n.\nFinished in 0.000412353 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.11 tests/s, 7275.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |sub_list|\n    if sub_list[n] > max\n      max = sub_list[n]\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu2gfnt4f\nStarted\n.\nFinished in 0.000401046 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2493.48 tests/s, 7480.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |row|\n    if row[n] > max\n      max = row[n]\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpaut7v7ys\nStarted\n.\nFinished in 0.000398836 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2507.30 tests/s, 7521.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = 0\n  test_list.each do |x|\n    if x[n] > max\n      max = x[n]\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnu5lvter\nStarted\n.\nFinished in 0.000389099 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2570.04 tests/s, 7710.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6rv3udd0\nStarted\n.\nFinished in 0.000359694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2780.14 tests/s, 8340.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "Loaded suite /tmp/tmpp1a7hsuc\nStarted\nF\n===============================================================================\nFailure: test_max_of_nth(TestHumanEval)\n/tmp/tmpp1a7hsuc.rb:9:in `test_max_of_nth'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_of_nth\n      8:     candidate = method(:max_of_nth)\n  =>  9:     assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n     10:     assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n     11:     assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n     12:   end\n<19> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006356649 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.32 tests/s, 157.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6rv3udd0\nStarted\n.\nFinished in 0.000359694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2780.14 tests/s, 8340.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_array| sub_array[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnf_7stfe\nStarted\n.\nFinished in 0.000393048 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2544.22 tests/s, 7632.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6rv3udd0\nStarted\n.\nFinished in 0.000359694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2780.14 tests/s, 8340.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |row|\n    if row[n] > max\n      max = row[n]\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu9l4etrx\nStarted\n.\nFinished in 0.000475782 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2101.80 tests/s, 6305.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6rv3udd0\nStarted\n.\nFinished in 0.000359694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2780.14 tests/s, 8340.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6rv3udd0\nStarted\n.\nFinished in 0.000359694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2780.14 tests/s, 8340.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6rv3udd0\nStarted\n.\nFinished in 0.000359694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2780.14 tests/s, 8340.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  # test_list.map { |x| x[n] }.max\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8fibgl8m\nStarted\n.\nFinished in 0.000431763 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2316.09 tests/s, 6948.26 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max_value = 0\n  test_list.each do |sub_list|\n    if sub_list[n] > max_value\n      max_value = sub_list[n]\n    end\n  end\n  return max_value\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf12e6g79\nStarted\n.\nFinished in 0.000391424 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2554.77 tests/s, 7664.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6rv3udd0\nStarted\n.\nFinished in 0.000359694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2780.14 tests/s, 8340.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sublist| sublist[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi86jl6dc\nStarted\n.\nFinished in 0.000412353 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.11 tests/s, 7275.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |row|\n    if row[n] > max\n      max = row[n]\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpaut7v7ys\nStarted\n.\nFinished in 0.000398836 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2507.30 tests/s, 7521.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |sub_list| sub_list[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpve5_7vo2\nStarted\n.\nFinished in 0.000371224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2693.79 tests/s, 8081.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |row|\n    if row[n] > max\n      max = row[n]\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu9l4etrx\nStarted\n.\nFinished in 0.000475782 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2101.80 tests/s, 6305.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6rv3udd0\nStarted\n.\nFinished in 0.000359694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2780.14 tests/s, 8340.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6rv3udd0\nStarted\n.\nFinished in 0.000359694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2780.14 tests/s, 8340.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "Loaded suite /tmp/tmpp1a7hsuc\nStarted\nF\n===============================================================================\nFailure: test_max_of_nth(TestHumanEval)\n/tmp/tmpp1a7hsuc.rb:9:in `test_max_of_nth'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_of_nth\n      8:     candidate = method(:max_of_nth)\n  =>  9:     assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n     10:     assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n     11:     assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n     12:   end\n<19> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006356649 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.32 tests/s, 157.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |sub_list|\n    if sub_list[n] > max\n      max = sub_list[n]\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu2gfnt4f\nStarted\n.\nFinished in 0.000401046 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2493.48 tests/s, 7480.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |sub_list|\n    if sub_list[n] > max\n      max = sub_list[n]\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpknexhxan\nStarted\n.\nFinished in 0.000383654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2606.52 tests/s, 7819.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6rv3udd0\nStarted\n.\nFinished in 0.000359694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2780.14 tests/s, 8340.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |row|\n    if row[n] > max\n      max = row[n]\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu9l4etrx\nStarted\n.\nFinished in 0.000475782 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2101.80 tests/s, 6305.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |row| row[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbi8lqzql\nStarted\n.\nFinished in 0.000333278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3000.50 tests/s, 9001.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |sublist|\n    if sublist[n] > max\n      max = sublist[n]\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa_a6pggs\nStarted\n.\nFinished in 0.000397545 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2515.44 tests/s, 7546.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |x|\n    if x[n] > max\n      max = x[n]\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5m3q47uh\nStarted\n.\nFinished in 0.00039615 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2524.30 tests/s, 7572.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6rv3udd0\nStarted\n.\nFinished in 0.000359694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2780.14 tests/s, 8340.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = 0\n  test_list.each do |row|\n    if row[n] > max\n      max = row[n]\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdaqr3cb7\nStarted\n.\nFinished in 0.000390441 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2561.21 tests/s, 7683.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map { |x| x[n] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5igxno74\nStarted\n.\nFinished in 0.000381641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.26 tests/s, 7860.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  max = test_list[0][n]\n  test_list.each do |sub_list|\n    if sub_list[n] > max\n      max = sub_list[n]\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpknexhxan\nStarted\n.\nFinished in 0.000383654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2606.52 tests/s, 7819.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n  test_list.map {|x| x[n]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n",
      "timestamp": 1665510316,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6rv3udd0\nStarted\n.\nFinished in 0.000359694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2780.14 tests/s, 8340.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}