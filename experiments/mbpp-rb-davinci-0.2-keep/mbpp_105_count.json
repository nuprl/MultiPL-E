{
  "name": "mbpp_105_count",
  "language": "rb",
  "prompt": "# Write a python function to count true booleans in the given list.\ndef count(lst)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count\n    candidate = method(:count)\n    assert_equal(2, candidate.call([true, false, true]))\n    assert_equal(0, candidate.call([false, false]))\n    assert_equal(3, candidate.call([true, true, true]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  lst.count(true)\nend",
    "  count = 0\n  lst.each do |x|\n    if x == true\n      count += 1\n    end\n  end\n  return count\nend",
    "  lst.count(true)\nend",
    "  lst.count(true)\nend",
    "  count = 0\n  lst.each do |x|\n    if x == true\n      count += 1\n    end\n  end\n  return count\nend",
    "  lst.count(true)\nend",
    "  lst.count(true)\nend",
    "  lst.count(true)\nend",
    "  lst.count(true)\nend",
    "  count = 0\n  lst.each do |i|\n    if i == true\n      count += 1\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in lst\n        if i == true\n            count += 1\n        end\n    end\n    return count\nend",
    "  lst.count(true)\nend",
    "  lst.count(true)\nend",
    "  lst.count(true)\nend",
    "  lst.count(true)\nend",
    "  count = 0\n  lst.each do |item|\n    if item == true\n      count += 1\n    end\n  end\n  count\nend",
    "  count = 0\n  lst.each do |x|\n    if x == true\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  lst.each do |i|\n    if i == true\n      count += 1\n    end\n  end\n  count\nend",
    "  lst.count(true)\nend",
    "  count = 0\n  lst.each do |i|\n    if i == true\n      count += 1\n    end\n  end\n  return count\nend"
  ]
}