{
  "name": "mbpp_282_sub_list",
  "language": "rb",
  "prompt": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |a, b| a - b }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |a, b| a - b }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  # TODO\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  # Write your code here\n  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  # TODO: return a new list which contains the subtraction of the elements of nums1 and nums2\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend",
    "  # Write your code here\n  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend",
    "  nums1.zip(nums2).map { |x, y| x - y }\nend"
  ]
}