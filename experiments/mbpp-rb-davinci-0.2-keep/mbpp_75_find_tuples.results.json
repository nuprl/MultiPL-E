{
  "name": "mbpp_75_find_tuples",
  "language": "rb",
  "prompt": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n    test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpeo2gyy5y\nStarted\n.\nFinished in 0.000385674 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2592.86 tests/s, 7778.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |tuple|\n    if tuple.all? { |elem| elem % k == 0 }\n      result.push(tuple)\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6kkvi5yt\nStarted\n.\nFinished in 0.000424165 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2357.57 tests/s, 7072.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select do |tuple|\n    tuple.all? { |element| element % k == 0 }\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpt4oz0oz7\nStarted\n.\nFinished in 0.000369932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2703.20 tests/s, 8109.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |tuple|\n    if tuple.all? { |element| element % k == 0 }\n      result.push(tuple)\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp62u5k9b_\nStarted\n.\nFinished in 0.000429688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2327.27 tests/s, 6981.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6bmnvffy\nStarted\n.\nFinished in 0.000418683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2388.44 tests/s, 7165.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |ele| ele % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4ttenknq\nStarted\n.\nFinished in 0.000405227 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2467.75 tests/s, 7403.26 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6bmnvffy\nStarted\n.\nFinished in 0.000418683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2388.44 tests/s, 7165.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |ele| ele.all? { |ele1| ele1 % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuaet4w8u\nStarted\n.\nFinished in 0.000409433 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.40 tests/s, 7327.21 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6bmnvffy\nStarted\n.\nFinished in 0.000418683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2388.44 tests/s, 7165.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |element| element % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy_y_f1k2\nStarted\n.\nFinished in 0.000518058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1930.29 tests/s, 5790.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6bmnvffy\nStarted\n.\nFinished in 0.000418683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2388.44 tests/s, 7165.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |elem| elem % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpid_486en\nStarted\n.\nFinished in 0.000784743 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1274.30 tests/s, 3822.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |ele| ele % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_9igtnpb\nStarted\n.\nFinished in 0.000917642 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1089.75 tests/s, 3269.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.each do |tuple|\n    if tuple.all? { |num| num % k == 0 }\n      puts tuple\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "Loaded suite /tmp/tmp2gsh5cei\nStarted\n6\n24\n12\nF\n===============================================================================\nFailure: test_find_tuples(TestHumanEval)\n/tmp/tmp2gsh5cei.rb:13:in `test_find_tuples'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_tuples\n     12:     candidate = method(:find_tuples)\n  => 13:     assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n     14:     assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n     15:     assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n     16:   end\n<[[6, 24, 12]]> expected but was\n<[[6, 24, 12], [7, 9, 6], [12, 18, 21]]>\n\ndiff:\n? [[6, 24, 12], [7, 9, 6], [12, 18, 21]]\n===============================================================================\n\nFinished in 0.018036145 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n55.44 tests/s, 55.44 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6bmnvffy\nStarted\n.\nFinished in 0.000418683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2388.44 tests/s, 7165.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |elem| elem % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpid_486en\nStarted\n.\nFinished in 0.000784743 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1274.30 tests/s, 3822.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |elem| elem % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpid_486en\nStarted\n.\nFinished in 0.000784743 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1274.30 tests/s, 3822.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |tuple|\n    result << tuple if tuple.all? { |e| e % k == 0 }\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe8ccyd9a\nStarted\n.\nFinished in 0.000692078 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1444.92 tests/s, 4334.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |elem| elem % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpid_486en\nStarted\n.\nFinished in 0.000784743 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1274.30 tests/s, 3822.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6bmnvffy\nStarted\n.\nFinished in 0.000418683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2388.44 tests/s, 7165.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |e| e % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8_ut5t4k\nStarted\n.\nFinished in 0.000514484 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1943.70 tests/s, 5831.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6bmnvffy\nStarted\n.\nFinished in 0.000418683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2388.44 tests/s, 7165.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |tuple|\n    if tuple.all? { |elem| elem % k == 0 }\n      result << tuple\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpm0cum02n\nStarted\n.\nFinished in 0.00053093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1883.49 tests/s, 5650.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |elem| elem % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpid_486en\nStarted\n.\nFinished in 0.000784743 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1274.30 tests/s, 3822.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |tuple|\n    flag = true\n    tuple.each do |num|\n      if num % k != 0\n        flag = false\n        break\n      end\n    end\n    result.push(tuple) if flag\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbt4bz9m1\nStarted\n.\nFinished in 0.000526017 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1901.08 tests/s, 5703.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |elem| elem % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpid_486en\nStarted\n.\nFinished in 0.000784743 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1274.30 tests/s, 3822.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6bmnvffy\nStarted\n.\nFinished in 0.000418683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2388.44 tests/s, 7165.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |ele| ele.all? { |ele1| ele1 % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuaet4w8u\nStarted\n.\nFinished in 0.000409433 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.40 tests/s, 7327.21 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  res = []\n  test_list.each do |sub_list|\n    flag = true\n    sub_list.each do |num|\n      if num % k != 0\n        flag = false\n        break\n      end\n    end\n    res.push(sub_list) if flag == true\n  end\n  res\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptzz0w_e9\nStarted\n.\nFinished in 0.000524934 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1905.00 tests/s, 5715.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n    result = []\n    test_list.each do |tuple|\n        flag = true\n        tuple.each do |num|\n            if num % k != 0\n                flag = false\n                break\n            end\n        end\n        if flag\n            result.push(tuple)\n        end\n    end\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsczz2s5l\nStarted\n.\nFinished in 0.000548044 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1824.67 tests/s, 5474.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  res = []\n  test_list.each do |tuple|\n    res << tuple if tuple.all? { |e| e % k == 0 }\n  end\n  res\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2a3fb5bp\nStarted\n.\nFinished in 0.000495246 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2019.20 tests/s, 6057.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |ele| ele.all? { |ele1| ele1 % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuaet4w8u\nStarted\n.\nFinished in 0.000409433 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.40 tests/s, 7327.21 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6bmnvffy\nStarted\n.\nFinished in 0.000418683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2388.44 tests/s, 7165.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6bmnvffy\nStarted\n.\nFinished in 0.000418683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2388.44 tests/s, 7165.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6bmnvffy\nStarted\n.\nFinished in 0.000418683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2388.44 tests/s, 7165.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6bmnvffy\nStarted\n.\nFinished in 0.000418683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2388.44 tests/s, 7165.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6bmnvffy\nStarted\n.\nFinished in 0.000418683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2388.44 tests/s, 7165.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |tuple|\n    result << tuple if tuple.all? { |elem| elem % k == 0 }\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqd53p4xn\nStarted\n.\nFinished in 0.000823842 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1213.82 tests/s, 3641.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |tuple|\n    result << tuple if tuple.all? { |elem| elem % k == 0 }\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqd53p4xn\nStarted\n.\nFinished in 0.000823842 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1213.82 tests/s, 3641.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |elem| elem.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyem_xnkd\nStarted\n.\nFinished in 0.00050458 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1981.85 tests/s, 5945.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each { |tuple| result.push(tuple) if tuple.all? { |elem| elem % k == 0 } }\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfomnrj7c\nStarted\n.\nFinished in 0.000475893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2101.31 tests/s, 6303.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |elem| elem % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpid_486en\nStarted\n.\nFinished in 0.000784743 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1274.30 tests/s, 3822.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |elem| elem.all? { |n| n % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5aepsrlo\nStarted\n.\nFinished in 0.000497894 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2008.46 tests/s, 6025.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6bmnvffy\nStarted\n.\nFinished in 0.000418683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2388.44 tests/s, 7165.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |elem| elem % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpid_486en\nStarted\n.\nFinished in 0.000784743 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1274.30 tests/s, 3822.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |tuple|\n    result << tuple if tuple.all? { |elem| elem % k == 0 }\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqd53p4xn\nStarted\n.\nFinished in 0.000823842 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1213.82 tests/s, 3641.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6bmnvffy\nStarted\n.\nFinished in 0.000418683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2388.44 tests/s, 7165.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |elem| elem % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpid_486en\nStarted\n.\nFinished in 0.000784743 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1274.30 tests/s, 3822.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6bmnvffy\nStarted\n.\nFinished in 0.000418683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2388.44 tests/s, 7165.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n    test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpeo2gyy5y\nStarted\n.\nFinished in 0.000385674 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2592.86 tests/s, 7778.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |tuple|\n    result.push(tuple) if tuple.all? { |num| num % k == 0 }\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc33jmxu0\nStarted\n.\nFinished in 0.000500406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1998.38 tests/s, 5995.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6bmnvffy\nStarted\n.\nFinished in 0.000418683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2388.44 tests/s, 7165.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  res = []\n  test_list.each do |i|\n    res.push(i) if i.all? { |e| e % k == 0 }\n  end\n  res\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdqtib_9e\nStarted\n.\nFinished in 0.000533948 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1872.84 tests/s, 5618.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |element| element % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy_y_f1k2\nStarted\n.\nFinished in 0.000518058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1930.29 tests/s, 5790.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphcx31uuu\nStarted\n.\nFinished in 0.000442736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.68 tests/s, 6776.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckvpj7lr\nStarted\n.\nFinished in 0.000398008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2512.51 tests/s, 7537.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}