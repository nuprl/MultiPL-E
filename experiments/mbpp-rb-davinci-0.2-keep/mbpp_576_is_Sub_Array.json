{
  "name": "mbpp_576_is_Sub_Array",
  "language": "rb",
  "prompt": "# Write a python function to check whether a list is sublist of another or not.\ndef is_Sub_Array(a, b)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_Sub_Array\n    candidate = method(:is_Sub_Array)\n    assert_equal(false, candidate.call([1, 4, 3, 5], [1, 2]))\n    assert_equal(true, candidate.call([1, 2, 1], [1, 2, 1]))\n    assert_equal(false, candidate.call([1, 0, 2, 2], [2, 2, 0]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  a.each_with_index do |x, i|\n    return true if x == b[0] && a[i..i+b.length-1] == b\n  end\n  false\nend",
    "  a.each_with_index do |x, i|\n    return true if a[i, b.size] == b\n  end\n  false\nend",
    "  a.each_with_index do |e, i|\n    return true if a[i, b.length] == b\n  end\n  false\nend",
    "  a.each_with_index do |x, i|\n    if x == b[0]\n      return true if b == a[i, b.length]\n    end\n  end\n  false\nend",
    "  if a.size > b.size\n    return false\n  end\n  for i in 0..a.size-1\n    if a[i] != b[i]\n      return false\n    end\n  end\n  return true\nend",
    "    for i in 0..a.length-1\n        for j in 0..b.length-1\n            if a[i] == b[j]\n                return true\n            end\n        end\n    end\n    return false\nend",
    "  if a.size < b.size\n    return false\n  end\n  for i in 0...a.size\n    if a[i] == b[0]\n      for j in 0...b.size\n        if a[i + j] != b[j]\n          break\n        end\n        if j == b.size - 1\n          return true\n        end\n      end\n    end\n  end\n  return false\nend",
    "  a.each_with_index do |x, i|\n    if x == b[0]\n      return true if b == a[i, b.size]\n    end\n  end\n  false\nend",
    "  b.each_with_index do |x, i|\n    if x == a[0]\n      return true if a == b[i, a.size]\n    end\n  end\n  false\nend",
    "  b.each do |i|\n    return false if a.index(i).nil?\n  end\n  true\nend",
    "  if a.size > b.size\n    return false\n  end\n  for i in 0..(b.size - a.size)\n    if a == b[i, a.size]\n      return true\n    end\n  end\n  return false\nend",
    "    a.each_index do |i|\n        if a[i] == b[0]\n            if a[i..i+b.length-1] == b\n                return true\n            end\n        end\n    end\n    return false\nend",
    "  b.each_with_index do |e, i|\n    return false if e != a[i]\n  end\n  true\nend",
    "    if a.size > b.size\n        return false\n    end\n    for i in 0..b.size - a.size\n        if a == b[i, a.size]\n            return true\n        end\n    end\n    return false\nend",
    "    if a.size > b.size\n        return false\n    end\n    for i in 0..b.size-1\n        if b[i] == a[0]\n            j = 1\n            while j < a.size\n                if b[i+j] != a[j]\n                    break\n                end\n                j += 1\n            end\n            if j == a.size\n                return true\n            end\n        end\n    end\n    return false\nend",
    "  b.each do |i|\n    if a.include?(i)\n      return true\n    else\n      return false\n    end\n  end\nend",
    "  b.each do |i|\n    return false unless a.include?(i)\n  end\n  true\nend",
    "    if a.size > b.size\n        return false\n    end\n    for i in 0..b.size - a.size\n        if a == b[i, a.size]\n            return true\n        end\n    end\n    return false\nend",
    "  a.each_with_index do |x, i|\n    if x == b[0]\n      return true if b == a[i, b.length]\n    end\n  end\n  false\nend",
    "    if a.size > b.size\n        return false\n    end\n    for i in 0..(b.size - a.size)\n        if a == b[i, a.size]\n            return true\n        end\n    end\n    return false\nend"
  ]
}