{
  "name": "mbpp_457_Find_Min",
  "language": "rb",
  "prompt": "# Write a python function to find the sublist having minimum length.\ndef Find_Min(lst)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Find_Min\n    candidate = method(:Find_Min)\n    assert_equal([1], candidate.call([[1], [1, 2], [1, 2, 3]]))\n    assert_equal([1, 1], candidate.call([[1, 1], [1, 1, 1], [1, 2, 7, 8]]))\n    assert_equal([\"x\"], candidate.call([[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    lst.min_by(&:length)\nend",
    "    lst.min_by(&:length)\nend",
    "    lst.min_by(&:size)\nend",
    "    min = lst[0].length\n    for i in lst\n        if i.length < min\n            min = i.length\n        end\n    end\n    return min\nend",
    "    min = lst[0].length\n    for i in 0...lst.length\n        if min > lst[i].length\n            min = lst[i].length\n        end\n    end\n    return min\nend",
    "    min = lst[0].length\n    for i in 1...lst.length\n        if lst[i].length < min\n            min = lst[i].length\n        end\n    end\n    return min\nend",
    "    min = lst[0]\n    for i in lst\n        if i.length < min.length\n            min = i\n        end\n    end\n    return min\nend",
    "    min = lst[0].length\n    for i in 0...lst.length\n        if lst[i].length < min\n            min = lst[i].length\n        end\n    end\n    return min\nend",
    "    min = lst[0].length\n    for i in 0..lst.length-1\n        if lst[i].length < min\n            min = lst[i].length\n        end\n    end\n    return min\nend",
    "    min = lst[0].length\n    for i in lst\n        if i.length < min\n            min = i.length\n        end\n    end\n    return min\nend",
    "    min = lst[0].length\n    for i in 0...lst.length\n        if lst[i].length < min\n            min = lst[i].length\n        end\n    end\n    return min\nend",
    "    min = lst[0].length\n    for i in 0..lst.length-1\n        if min > lst[i].length\n            min = lst[i].length\n        end\n    end\n    return min\nend",
    "    min_len = lst[0].length\n    min_list = lst[0]\n    for i in 0..lst.length-1\n        if lst[i].length < min_len\n            min_len = lst[i].length\n            min_list = lst[i]\n        end\n    end\n    return min_list\nend",
    "    min = lst[0]\n    for i in lst\n        if min.length > i.length\n            min = i\n        end\n    end\n    return min\nend",
    "    min = lst[0]\n    for i in lst\n        if i.length < min.length\n            min = i\n        end\n    end\n    return min\nend",
    "    min = lst[0].length\n    for i in 0..lst.length-1\n        if lst[i].length < min\n            min = lst[i].length\n        end\n    end\n    return min\nend",
    "    min_len = lst[0].length\n    min_sublist = lst[0]\n    for i in 0...lst.length\n        if min_len > lst[i].length\n            min_len = lst[i].length\n            min_sublist = lst[i]\n        end\n    end\n    return min_sublist\nend",
    "    lst.min_by(&:size)\nend",
    "    min = lst[0]\n    for i in 0..lst.length-1\n        if lst[i].length < min.length\n            min = lst[i]\n        end\n    end\n    return min\nend",
    "    min = lst[0].length\n    for i in 0...lst.length\n        if lst[i].length < min\n            min = lst[i].length\n        end\n    end\n    return min\nend"
  ]
}