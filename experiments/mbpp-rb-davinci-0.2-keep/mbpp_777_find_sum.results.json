{
  "name": "mbpp_777_find_sum",
  "language": "rb",
  "prompt": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9y0sg_7k\nStarted\n.\nFinished in 0.000520093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1922.73 tests/s, 5768.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.inject(0) { |sum, x| sum + x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5e5psg0b\nStarted\n.\nFinished in 0.000517709 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.59 tests/s, 5794.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |a|\n    if arr.count(a) == 1\n      sum += a\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpzb62sahu\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpzb62sahu.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.009270381 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.87 tests/s, 107.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.inject(0) {|sum, x| sum + x}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwn29_9lt\nStarted\n.\nFinished in 0.000513807 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1946.26 tests/s, 5838.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpg2k3gupg\nStarted\n.\nFinished in 0.000513897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1945.92 tests/s, 5837.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  puts sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpk2yhqzyj\nStarted\n20\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpk2yhqzyj.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007303726 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.92 tests/s, 136.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |num|\n    if arr.count(num) == 1\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp6yg4kh75\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp6yg4kh75.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007521093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.96 tests/s, 132.96 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |num|\n    if arr.count(num) == 1\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp6yg4kh75\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp6yg4kh75.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007521093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.96 tests/s, 132.96 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpqrtr6l0m\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpqrtr6l0m.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006606814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.36 tests/s, 151.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i unless arr.count(i) > 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpqn9x0g1g\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpqn9x0g1g.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006361725 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.19 tests/s, 157.19 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |num|\n    if arr.count(num) == 1\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp6yg4kh75\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp6yg4kh75.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007521093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.96 tests/s, 132.96 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.inject(0){|sum,x| sum + x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpag8iy4na\nStarted\n.\nFinished in 0.000400334 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2497.91 tests/s, 7493.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.inject(0) { |sum, x| sum + x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5e5psg0b\nStarted\n.\nFinished in 0.000517709 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.59 tests/s, 5794.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.inject(0){|sum,x| sum + x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpag8iy4na\nStarted\n.\nFinished in 0.000400334 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2497.91 tests/s, 7493.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpqrtr6l0m\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpqrtr6l0m.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006606814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.36 tests/s, 151.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpqrtr6l0m\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpqrtr6l0m.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006606814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.36 tests/s, 151.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |x|\n    if arr.count(x) == 1\n      sum += x\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpjuptkq30\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjuptkq30.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006381781 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n156.70 tests/s, 156.70 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |num|\n    sum += num if arr.count(num) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmphl74wxik\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmphl74wxik.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006497917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.90 tests/s, 153.90 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.inject(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfn3umeg8\nStarted\n.\nFinished in 0.000399529 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2502.95 tests/s, 7508.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |e|\n    sum += e if arr.count(e) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmp7helzu1_\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp7helzu1_.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006365593 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.09 tests/s, 157.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |num|\n    sum += num if arr.count(num) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmphl74wxik\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmphl74wxik.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006497917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.90 tests/s, 153.90 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpqrtr6l0m\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpqrtr6l0m.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006606814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.36 tests/s, 151.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |e|\n    sum += e if arr.count(e) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmp7helzu1_\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp7helzu1_.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006365593 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.09 tests/s, 157.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |x|\n    if arr.count(x) == 1\n      sum += x\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpjuptkq30\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjuptkq30.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006381781 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n156.70 tests/s, 156.70 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpqrtr6l0m\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpqrtr6l0m.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006606814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.36 tests/s, 151.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpqrtr6l0m\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpqrtr6l0m.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006606814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.36 tests/s, 151.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |x|\n    if arr.count(x) == 1\n      sum += x\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpjuptkq30\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjuptkq30.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006381781 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n156.70 tests/s, 156.70 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpqrtr6l0m\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpqrtr6l0m.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006606814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.36 tests/s, 151.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  puts sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpk2yhqzyj\nStarted\n20\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpk2yhqzyj.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007303726 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.92 tests/s, 136.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |x|\n    sum += x if arr.count(x) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpvzbgcahh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpvzbgcahh.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.012578838 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n79.50 tests/s, 79.50 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.inject(0) { |sum, x| sum + x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5e5psg0b\nStarted\n.\nFinished in 0.000517709 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.59 tests/s, 5794.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.inject(0){|sum,x| sum + x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpag8iy4na\nStarted\n.\nFinished in 0.000400334 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2497.91 tests/s, 7493.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |num|\n    if arr.count(num) == 1\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp6yg4kh75\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp6yg4kh75.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007521093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.96 tests/s, 132.96 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |e|\n    sum += e if arr.count(e) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmp7helzu1_\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp7helzu1_.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006365593 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.09 tests/s, 157.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i unless arr.count(i) > 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpqn9x0g1g\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpqn9x0g1g.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006361725 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.19 tests/s, 157.19 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.inject(0) { |sum, x| sum + x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5e5psg0b\nStarted\n.\nFinished in 0.000517709 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.59 tests/s, 5794.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9y0sg_7k\nStarted\n.\nFinished in 0.000520093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1922.73 tests/s, 5768.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.inject(0) { |sum, x| sum + x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5e5psg0b\nStarted\n.\nFinished in 0.000517709 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.59 tests/s, 5794.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpqrtr6l0m\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpqrtr6l0m.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006606814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.36 tests/s, 151.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |num|\n    sum += num unless arr.count(num) > 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpxqqqzobp\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpxqqqzobp.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.012785194 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n78.22 tests/s, 78.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n\tarr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpabl5cyeo\nStarted\n.\nFinished in 0.000503 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1988.07 tests/s, 5964.21 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpg2k3gupg\nStarted\n.\nFinished in 0.000513897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1945.92 tests/s, 5837.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpqrtr6l0m\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpqrtr6l0m.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006606814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.36 tests/s, 151.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpqrtr6l0m\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpqrtr6l0m.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006606814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.36 tests/s, 151.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |x|\n    if arr.count(x) == 1\n      sum += x\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpo6btm9cq\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpo6btm9cq.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.011287052 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n88.60 tests/s, 88.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpqrtr6l0m\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpqrtr6l0m.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006606814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.36 tests/s, 151.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |num|\n    sum += num if arr.count(num) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmphl74wxik\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmphl74wxik.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006497917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.90 tests/s, 153.90 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpqrtr6l0m\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpqrtr6l0m.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006606814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.36 tests/s, 151.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpqrtr6l0m\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpqrtr6l0m.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006606814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.36 tests/s, 151.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |x|\n    if arr.count(x) == 1\n      sum += x\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpjuptkq30\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjuptkq30.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006381781 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n156.70 tests/s, 156.70 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  puts sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpk2yhqzyj\nStarted\n20\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpk2yhqzyj.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007303726 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.92 tests/s, 136.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.inject(0) { |sum, n| sum + n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp603bb5ti\nStarted\n.\nFinished in 0.000393054 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2544.18 tests/s, 7632.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |num|\n    if arr.count(num) == 1\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp6yg4kh75\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp6yg4kh75.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007521093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.96 tests/s, 132.96 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |num|\n    if arr.count(num) == 1\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp6yg4kh75\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp6yg4kh75.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007521093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.96 tests/s, 132.96 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9y0sg_7k\nStarted\n.\nFinished in 0.000520093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1922.73 tests/s, 5768.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmpjcnv69mh\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpjcnv69mh.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007596192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |x|\n    if arr.count(x) == 1\n      sum += x\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpo6btm9cq\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpo6btm9cq.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.011287052 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n88.60 tests/s, 88.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpqrtr6l0m\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpqrtr6l0m.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006606814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.36 tests/s, 151.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9y0sg_7k\nStarted\n.\nFinished in 0.000520093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1922.73 tests/s, 5768.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpqrtr6l0m\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpqrtr6l0m.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006606814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.36 tests/s, 151.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "Loaded suite /tmp/tmp2ezo0hkw\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmp2ezo0hkw.rb:13:in `test_find_sum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_sum\n     12:     candidate = method(:find_sum)\n  => 13:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     14:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     15:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     16:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.007530266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.80 tests/s, 132.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1665509766,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgf86ejjn\nStarted\n.\nFinished in 0.000704451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1419.55 tests/s, 4258.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "Loaded suite /tmp/tmpqrtr6l0m\nStarted\nF\n===============================================================================\nFailure: test_find_sum(TestHumanEval)\n/tmp/tmpqrtr6l0m.rb:15:in `test_find_sum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_sum\n     14:     candidate = method(:find_sum)\n  => 15:     assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n     16:     assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n     17:     assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n     18:   end\n<21> expected but was\n<20>\n\ndiff:\n? 21\n?  0\n?  ?\n===============================================================================\n\nFinished in 0.006606814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.36 tests/s, 151.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n  arr.uniq.inject(0){|sum,x| sum + x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpag8iy4na\nStarted\n.\nFinished in 0.000400334 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2497.91 tests/s, 7493.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}