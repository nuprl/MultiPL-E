{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "rb",
  "prompt": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk(&:itself).map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps_8lrop1\nStarted\n.\nFinished in 0.000699309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1429.98 tests/s, 4289.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|y| y[1]}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd7chlwyb\nStarted\n.\nFinished in 0.000569172 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1756.94 tests/s, 5270.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x,y| y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps0o3ta4a\nStarted\n.\nFinished in 0.0005428 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1842.30 tests/s, 5526.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "Loaded suite /tmp/tmpvv0unnca\nStarted\nF\n===============================================================================\nFailure: test_pack_consecutive_duplicates(TestHumanEval)\n/tmp/tmpvv0unnca.rb:9:in `test_pack_consecutive_duplicates'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_pack_consecutive_duplicates\n      8:     candidate = method(:pack_consecutive_duplicates)\n  =>  9:     assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     10:     assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     11:     assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     12:   end\n<[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]>\n\ndiff:\n? [[0, 0], [1], [2], [3], [4,                4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n?      1   2    3             5, 6, 7, 8, 9,                                           \n? -    ??   ???    ???   ???????         +++++++++++++++  ----------------------------------------\n===============================================================================\n\nFinished in 0.014283868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.01 tests/s, 70.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list2 = []\n  list1.each do |i|\n    if list2.last.nil? || list2.last.last != i\n      list2 << [i]\n    else\n      list2.last << i\n    end\n  end\n  list2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7at2926u\nStarted\n.\nFinished in 0.000509567 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1962.45 tests/s, 5887.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map { |x| x[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpda38vew5\nStarted\n.\nFinished in 0.000508628 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1966.07 tests/s, 5898.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map { |e| e.last }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptil2o0xe\nStarted\n.\nFinished in 0.000548601 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1822.82 tests/s, 5468.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "Loaded suite /tmp/tmpvv0unnca\nStarted\nF\n===============================================================================\nFailure: test_pack_consecutive_duplicates(TestHumanEval)\n/tmp/tmpvv0unnca.rb:9:in `test_pack_consecutive_duplicates'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_pack_consecutive_duplicates\n      8:     candidate = method(:pack_consecutive_duplicates)\n  =>  9:     assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     10:     assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     11:     assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     12:   end\n<[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]>\n\ndiff:\n? [[0, 0], [1], [2], [3], [4,                4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n?      1   2    3             5, 6, 7, 8, 9,                                           \n? -    ??   ???    ???   ???????         +++++++++++++++  ----------------------------------------\n===============================================================================\n\nFinished in 0.014283868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.01 tests/s, 70.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpue9ofyh3\nStarted\n.\nFinished in 0.000558244 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1791.33 tests/s, 5373.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "Loaded suite /tmp/tmpevqll_fd\nStarted\nF\n===============================================================================\nFailure: test_pack_consecutive_duplicates(TestHumanEval)\n/tmp/tmpevqll_fd.rb:9:in `test_pack_consecutive_duplicates'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_pack_consecutive_duplicates\n      8:     candidate = method(:pack_consecutive_duplicates)\n  =>  9:     assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     10:     assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     11:     assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     12:   end\n<[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]>\n\ndiff:\n? [[0, 0], [1], [2], [3], [4,                4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n?      1   2    3             5, 6, 7, 8, 9,                                           \n? -    ??   ???    ???   ???????         +++++++++++++++  ----------------------------------------\n===============================================================================\n\nFinished in 0.015680541 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n63.77 tests/s, 63.77 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "Loaded suite /tmp/tmpvv0unnca\nStarted\nF\n===============================================================================\nFailure: test_pack_consecutive_duplicates(TestHumanEval)\n/tmp/tmpvv0unnca.rb:9:in `test_pack_consecutive_duplicates'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_pack_consecutive_duplicates\n      8:     candidate = method(:pack_consecutive_duplicates)\n  =>  9:     assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     10:     assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     11:     assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     12:   end\n<[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]>\n\ndiff:\n? [[0, 0], [1], [2], [3], [4,                4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n?      1   2    3             5, 6, 7, 8, 9,                                           \n? -    ??   ???    ???   ???????         +++++++++++++++  ----------------------------------------\n===============================================================================\n\nFinished in 0.014283868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.01 tests/s, 70.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x,y| y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps0o3ta4a\nStarted\n.\nFinished in 0.0005428 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1842.30 tests/s, 5526.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x, y| y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxpet3e85\nStarted\n.\nFinished in 0.000462134 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2163.87 tests/s, 6491.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpue9ofyh3\nStarted\n.\nFinished in 0.000558244 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1791.33 tests/s, 5373.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |i| i }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "Loaded suite /tmp/tmpgrp_ba6_\nStarted\nF\n===============================================================================\nFailure: test_pack_consecutive_duplicates(TestHumanEval)\n/tmp/tmpgrp_ba6_.rb:9:in `test_pack_consecutive_duplicates'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_pack_consecutive_duplicates\n      8:     candidate = method(:pack_consecutive_duplicates)\n  =>  9:     assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     10:     assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     11:     assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     12:   end\n<[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]>\n\ndiff:\n? [[0, 0], [1], [2], [3], [4,                4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n?      1   2    3             5, 6, 7, 8, 9,                                           \n? -    ??   ???    ???   ???????         +++++++++++++++  ----------------------------------------\n===============================================================================\n\nFinished in 0.012929332 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.34 tests/s, 77.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |i| i }.map { |i, a| a }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9kcvcuos\nStarted\n.\nFinished in 0.000853716 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1171.35 tests/s, 3514.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |i| i }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj_sm8lj3\nStarted\n.\nFinished in 0.000444029 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2252.11 tests/s, 6756.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x,y| y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps0o3ta4a\nStarted\n.\nFinished in 0.0005428 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1842.30 tests/s, 5526.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |i| i }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "Loaded suite /tmp/tmpgrp_ba6_\nStarted\nF\n===============================================================================\nFailure: test_pack_consecutive_duplicates(TestHumanEval)\n/tmp/tmpgrp_ba6_.rb:9:in `test_pack_consecutive_duplicates'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_pack_consecutive_duplicates\n      8:     candidate = method(:pack_consecutive_duplicates)\n  =>  9:     assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     10:     assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     11:     assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     12:   end\n<[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]>\n\ndiff:\n? [[0, 0], [1], [2], [3], [4,                4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n?      1   2    3             5, 6, 7, 8, 9,                                           \n? -    ??   ???    ???   ???????         +++++++++++++++  ----------------------------------------\n===============================================================================\n\nFinished in 0.012929332 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.34 tests/s, 77.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x,y| y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps0o3ta4a\nStarted\n.\nFinished in 0.0005428 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1842.30 tests/s, 5526.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk(&:itself).map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps_8lrop1\nStarted\n.\nFinished in 0.000699309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1429.98 tests/s, 4289.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x,y| y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps0o3ta4a\nStarted\n.\nFinished in 0.0005428 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1842.30 tests/s, 5526.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |i| i }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj_sm8lj3\nStarted\n.\nFinished in 0.000444029 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2252.11 tests/s, 6756.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk(&:itself).map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps_8lrop1\nStarted\n.\nFinished in 0.000699309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1429.98 tests/s, 4289.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x| x[1]}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpub27inb5\nStarted\n.\nFinished in 0.000451422 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2215.22 tests/s, 6645.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "Loaded suite /tmp/tmpvv0unnca\nStarted\nF\n===============================================================================\nFailure: test_pack_consecutive_duplicates(TestHumanEval)\n/tmp/tmpvv0unnca.rb:9:in `test_pack_consecutive_duplicates'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_pack_consecutive_duplicates\n      8:     candidate = method(:pack_consecutive_duplicates)\n  =>  9:     assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     10:     assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     11:     assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     12:   end\n<[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]>\n\ndiff:\n? [[0, 0], [1], [2], [3], [4,                4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n?      1   2    3             5, 6, 7, 8, 9,                                           \n? -    ??   ???    ???   ???????         +++++++++++++++  ----------------------------------------\n===============================================================================\n\nFinished in 0.014283868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.01 tests/s, 70.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  result = []\n  list1.each_with_index do |item, index|\n    if index == 0\n      result << [item]\n    elsif item == list1[index - 1]\n      result[-1] << item\n    else\n      result << [item]\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgqnp154b\nStarted\n.\nFinished in 0.000441484 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2265.09 tests/s, 6795.26 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x,y| y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps0o3ta4a\nStarted\n.\nFinished in 0.0005428 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1842.30 tests/s, 5526.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk(&:itself).map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps_8lrop1\nStarted\n.\nFinished in 0.000699309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1429.98 tests/s, 4289.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "Loaded suite /tmp/tmpvv0unnca\nStarted\nF\n===============================================================================\nFailure: test_pack_consecutive_duplicates(TestHumanEval)\n/tmp/tmpvv0unnca.rb:9:in `test_pack_consecutive_duplicates'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_pack_consecutive_duplicates\n      8:     candidate = method(:pack_consecutive_duplicates)\n  =>  9:     assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     10:     assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     11:     assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     12:   end\n<[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]>\n\ndiff:\n? [[0, 0], [1], [2], [3], [4,                4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n?      1   2    3             5, 6, 7, 8, 9,                                           \n? -    ??   ???    ???   ???????         +++++++++++++++  ----------------------------------------\n===============================================================================\n\nFinished in 0.014283868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.01 tests/s, 70.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk(&:itself).map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps_8lrop1\nStarted\n.\nFinished in 0.000699309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1429.98 tests/s, 4289.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map { |x| x.last }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp250bby3\nStarted\n.\nFinished in 0.000465498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2148.24 tests/s, 6444.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |i| i }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj_sm8lj3\nStarted\n.\nFinished in 0.000444029 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2252.11 tests/s, 6756.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x,y| y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps0o3ta4a\nStarted\n.\nFinished in 0.0005428 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1842.30 tests/s, 5526.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk {|x| x}.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpptr6e9gv\nStarted\n.\nFinished in 0.000454555 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2199.95 tests/s, 6599.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "Loaded suite /tmp/tmpfsx_2yuo\nStarted\nF\n===============================================================================\nFailure: test_pack_consecutive_duplicates(TestHumanEval)\n/tmp/tmpfsx_2yuo.rb:9:in `test_pack_consecutive_duplicates'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_pack_consecutive_duplicates\n      8:     candidate = method(:pack_consecutive_duplicates)\n  =>  9:     assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     10:     assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     11:     assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     12:   end\n<[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]>\n\ndiff:\n? [[0, 0], [1], [2], [3], [4,                4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n?      1   2    3             5, 6, 7, 8, 9,                                           \n? -    ??   ???    ???   ???????         +++++++++++++++  ----------------------------------------\n===============================================================================\n\nFinished in 0.012868968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.71 tests/s, 77.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpue9ofyh3\nStarted\n.\nFinished in 0.000558244 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1791.33 tests/s, 5373.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |i| i }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj_sm8lj3\nStarted\n.\nFinished in 0.000444029 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2252.11 tests/s, 6756.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "Loaded suite /tmp/tmpvv0unnca\nStarted\nF\n===============================================================================\nFailure: test_pack_consecutive_duplicates(TestHumanEval)\n/tmp/tmpvv0unnca.rb:9:in `test_pack_consecutive_duplicates'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_pack_consecutive_duplicates\n      8:     candidate = method(:pack_consecutive_duplicates)\n  =>  9:     assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     10:     assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     11:     assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     12:   end\n<[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]>\n\ndiff:\n? [[0, 0], [1], [2], [3], [4,                4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n?      1   2    3             5, 6, 7, 8, 9,                                           \n? -    ??   ???    ???   ???????         +++++++++++++++  ----------------------------------------\n===============================================================================\n\nFinished in 0.014283868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.01 tests/s, 70.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x,y| y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps0o3ta4a\nStarted\n.\nFinished in 0.0005428 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1842.30 tests/s, 5526.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x, y| y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxpet3e85\nStarted\n.\nFinished in 0.000462134 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2163.87 tests/s, 6491.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x,y| y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps0o3ta4a\nStarted\n.\nFinished in 0.0005428 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1842.30 tests/s, 5526.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  result = []\n  list1.each_with_index do |e, i|\n    if i == 0\n      result << [e]\n    elsif list1[i] == list1[i-1]\n      result[-1] << e\n    else\n      result << [e]\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp02bpnqu0\nStarted\n.\nFinished in 0.000445455 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2244.90 tests/s, 6734.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x,y| y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps0o3ta4a\nStarted\n.\nFinished in 0.0005428 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1842.30 tests/s, 5526.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "Loaded suite /tmp/tmpvv0unnca\nStarted\nF\n===============================================================================\nFailure: test_pack_consecutive_duplicates(TestHumanEval)\n/tmp/tmpvv0unnca.rb:9:in `test_pack_consecutive_duplicates'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_pack_consecutive_duplicates\n      8:     candidate = method(:pack_consecutive_duplicates)\n  =>  9:     assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     10:     assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     11:     assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     12:   end\n<[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]>\n\ndiff:\n? [[0, 0], [1], [2], [3], [4,                4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n?      1   2    3             5, 6, 7, 8, 9,                                           \n? -    ??   ???    ???   ???????         +++++++++++++++  ----------------------------------------\n===============================================================================\n\nFinished in 0.014283868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.01 tests/s, 70.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "Loaded suite /tmp/tmpvv0unnca\nStarted\nF\n===============================================================================\nFailure: test_pack_consecutive_duplicates(TestHumanEval)\n/tmp/tmpvv0unnca.rb:9:in `test_pack_consecutive_duplicates'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_pack_consecutive_duplicates\n      8:     candidate = method(:pack_consecutive_duplicates)\n  =>  9:     assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     10:     assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     11:     assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     12:   end\n<[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]>\n\ndiff:\n? [[0, 0], [1], [2], [3], [4,                4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n?      1   2    3             5, 6, 7, 8, 9,                                           \n? -    ??   ???    ???   ???????         +++++++++++++++  ----------------------------------------\n===============================================================================\n\nFinished in 0.014283868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.01 tests/s, 70.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpue9ofyh3\nStarted\n.\nFinished in 0.000558244 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1791.33 tests/s, 5373.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk(&:itself).map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps_8lrop1\nStarted\n.\nFinished in 0.000699309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1429.98 tests/s, 4289.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x,y| y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps0o3ta4a\nStarted\n.\nFinished in 0.0005428 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1842.30 tests/s, 5526.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "Loaded suite /tmp/tmpvv0unnca\nStarted\nF\n===============================================================================\nFailure: test_pack_consecutive_duplicates(TestHumanEval)\n/tmp/tmpvv0unnca.rb:9:in `test_pack_consecutive_duplicates'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_pack_consecutive_duplicates\n      8:     candidate = method(:pack_consecutive_duplicates)\n  =>  9:     assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     10:     assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     11:     assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     12:   end\n<[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]>\n\ndiff:\n? [[0, 0], [1], [2], [3], [4,                4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n?      1   2    3             5, 6, 7, 8, 9,                                           \n? -    ??   ???    ???   ???????         +++++++++++++++  ----------------------------------------\n===============================================================================\n\nFinished in 0.014283868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.01 tests/s, 70.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x,y| y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps0o3ta4a\nStarted\n.\nFinished in 0.0005428 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1842.30 tests/s, 5526.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map { |x, y| y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp40ybild3\nStarted\n.\nFinished in 0.000443174 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2256.45 tests/s, 6769.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "Loaded suite /tmp/tmpvv0unnca\nStarted\nF\n===============================================================================\nFailure: test_pack_consecutive_duplicates(TestHumanEval)\n/tmp/tmpvv0unnca.rb:9:in `test_pack_consecutive_duplicates'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_pack_consecutive_duplicates\n      8:     candidate = method(:pack_consecutive_duplicates)\n  =>  9:     assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     10:     assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     11:     assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     12:   end\n<[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]>\n\ndiff:\n? [[0, 0], [1], [2], [3], [4,                4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n?      1   2    3             5, 6, 7, 8, 9,                                           \n? -    ??   ???    ???   ???????         +++++++++++++++  ----------------------------------------\n===============================================================================\n\nFinished in 0.014283868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.01 tests/s, 70.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "Loaded suite /tmp/tmpvv0unnca\nStarted\nF\n===============================================================================\nFailure: test_pack_consecutive_duplicates(TestHumanEval)\n/tmp/tmpvv0unnca.rb:9:in `test_pack_consecutive_duplicates'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_pack_consecutive_duplicates\n      8:     candidate = method(:pack_consecutive_duplicates)\n  =>  9:     assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     10:     assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     11:     assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     12:   end\n<[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]>\n\ndiff:\n? [[0, 0], [1], [2], [3], [4,                4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n?      1   2    3             5, 6, 7, 8, 9,                                           \n? -    ??   ???    ???   ???????         +++++++++++++++  ----------------------------------------\n===============================================================================\n\nFinished in 0.014283868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.01 tests/s, 70.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x,y| y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps0o3ta4a\nStarted\n.\nFinished in 0.0005428 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1842.30 tests/s, 5526.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpue9ofyh3\nStarted\n.\nFinished in 0.000558244 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1791.33 tests/s, 5373.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "Loaded suite /tmp/tmpvv0unnca\nStarted\nF\n===============================================================================\nFailure: test_pack_consecutive_duplicates(TestHumanEval)\n/tmp/tmpvv0unnca.rb:9:in `test_pack_consecutive_duplicates'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_pack_consecutive_duplicates\n      8:     candidate = method(:pack_consecutive_duplicates)\n  =>  9:     assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     10:     assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     11:     assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     12:   end\n<[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]>\n\ndiff:\n? [[0, 0], [1], [2], [3], [4,                4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n?      1   2    3             5, 6, 7, 8, 9,                                           \n? -    ??   ???    ???   ???????         +++++++++++++++  ----------------------------------------\n===============================================================================\n\nFinished in 0.014283868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.01 tests/s, 70.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x| x[1]}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpub27inb5\nStarted\n.\nFinished in 0.000451422 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2215.22 tests/s, 6645.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x| x[1]}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpub27inb5\nStarted\n.\nFinished in 0.000451422 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2215.22 tests/s, 6645.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "Loaded suite /tmp/tmpvv0unnca\nStarted\nF\n===============================================================================\nFailure: test_pack_consecutive_duplicates(TestHumanEval)\n/tmp/tmpvv0unnca.rb:9:in `test_pack_consecutive_duplicates'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_pack_consecutive_duplicates\n      8:     candidate = method(:pack_consecutive_duplicates)\n  =>  9:     assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     10:     assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     11:     assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     12:   end\n<[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]>\n\ndiff:\n? [[0, 0], [1], [2], [3], [4,                4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n?      1   2    3             5, 6, 7, 8, 9,                                           \n? -    ??   ???    ???   ???????         +++++++++++++++  ----------------------------------------\n===============================================================================\n\nFinished in 0.014283868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.01 tests/s, 70.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.inject([[]]) do |result, element|\n    if result.last.empty? || result.last.last == element\n      result.last << element\n    else\n      result << [element]\n    end\n    result\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpndg8wqcq\nStarted\n.\nFinished in 0.000431482 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2317.59 tests/s, 6952.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map { |x| x[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpda38vew5\nStarted\n.\nFinished in 0.000508628 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1966.07 tests/s, 5898.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x,y| y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps0o3ta4a\nStarted\n.\nFinished in 0.0005428 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1842.30 tests/s, 5526.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "Loaded suite /tmp/tmpvv0unnca\nStarted\nF\n===============================================================================\nFailure: test_pack_consecutive_duplicates(TestHumanEval)\n/tmp/tmpvv0unnca.rb:9:in `test_pack_consecutive_duplicates'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_pack_consecutive_duplicates\n      8:     candidate = method(:pack_consecutive_duplicates)\n  =>  9:     assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     10:     assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     11:     assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     12:   end\n<[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]>\n\ndiff:\n? [[0, 0], [1], [2], [3], [4,                4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n?      1   2    3             5, 6, 7, 8, 9,                                           \n? -    ??   ???    ???   ???????         +++++++++++++++  ----------------------------------------\n===============================================================================\n\nFinished in 0.014283868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.01 tests/s, 70.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  result = []\n  list1.each_with_index do |element, index|\n    if index == 0\n      result << [element]\n    elsif list1[index] == list1[index - 1]\n      result[-1] << element\n    else\n      result << [element]\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp64mpio9\nStarted\n.\nFinished in 0.00041007 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2438.61 tests/s, 7315.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpue9ofyh3\nStarted\n.\nFinished in 0.000558244 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1791.33 tests/s, 5373.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk {|x| x}.map {|x,y| y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxrgg5nf1\nStarted\n.\nFinished in 0.000455378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2195.98 tests/s, 6587.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |i| i }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj_sm8lj3\nStarted\n.\nFinished in 0.000444029 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2252.11 tests/s, 6756.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk(&:itself).map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps_8lrop1\nStarted\n.\nFinished in 0.000699309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1429.98 tests/s, 4289.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk(&:itself).map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps_8lrop1\nStarted\n.\nFinished in 0.000699309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1429.98 tests/s, 4289.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk {|x| x}.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpptr6e9gv\nStarted\n.\nFinished in 0.000454555 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2199.95 tests/s, 6599.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |n| n }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xycb24c\nStarted\n.\nFinished in 0.000492909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.77 tests/s, 6086.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map { |x| x[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpda38vew5\nStarted\n.\nFinished in 0.000508628 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1966.07 tests/s, 5898.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk{|x| x}.map{|x,y| y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps0o3ta4a\nStarted\n.\nFinished in 0.0005428 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1842.30 tests/s, 5526.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |e| e }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe4pmbaxv\nStarted\n.\nFinished in 0.000558013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.07 tests/s, 5376.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1)\n  list1.chunk { |x| x }.map(&:last)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1rhla3w4\nStarted\n.\nFinished in 0.000476824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.21 tests/s, 6291.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}