{
  "name": "mbpp_399_bitwise_xor",
  "language": "rb",
  "prompt": "# Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_bitwise_xor\n    candidate = method(:bitwise_xor)\n    assert_equal([15, 6, 5, 10], candidate.call([10, 4, 6, 9], [5, 2, 3, 3]))\n    assert_equal([13, 6, 3, 14], candidate.call([11, 5, 7, 10], [6, 3, 4, 4]))\n    assert_equal([11, 2, 13, 13], candidate.call([12, 6, 8, 11], [7, 4, 5, 6]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  result = []\n  test_tup1.each_with_index do |value, index|\n    result << value ^ test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x ^ y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x ^ y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x ^ y }\nend",
    "  result = []\n  test_tup1.each_with_index do |value, index|\n    result << (value ^ test_tup2[index])\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x ^ y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x ^ y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x ^ y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x ^ y }\nend",
    "  test_tup1.zip(test_tup2).map {|x,y| x ^ y}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x ^ y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x ^ y }\nend",
    "  # Write your code here\n  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 ^ test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x ^ y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x ^ y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x ^ y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x ^ y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x ^ y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x ^ y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x ^ y }\nend"
  ]
}