{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "rb",
  "prompt": "# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_increasing_subseq\n    candidate = method(:max_sum_increasing_subseq)\n    assert_equal(11, candidate.call([1, 101, 2, 3, 100, 4, 5], 7, 4, 6))\n    assert_equal(7, candidate.call([1, 101, 2, 3, 100, 4, 5], 7, 2, 5))\n    assert_equal(71, candidate.call([11, 15, 19, 21, 26, 28, 31], 7, 2, 4))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return 0 if index == n\n  return a[index] if index == k\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[index + 1]\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[k]\n  return max_sum_increasing_subseq(a, n, index + 1, k)\nend",
    "  return 0 if index == n\n  return a[index] if index == k\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[index + 1]\n  return max_sum_increasing_subseq(a, n, index + 1, k)\nend",
    "  return 0 if index >= n\n  return a[index] if index == k\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[index + 1]\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[k]\n  return max_sum_increasing_subseq(a, n, index + 1, k)\nend",
    "  return 0 if index == n\n  return a[index] if index == k\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[index + 1]\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[k]\n  return max_sum_increasing_subseq(a, n, index + 1, k)\nend",
    "  return 0 if index == n\n  return a[index] if index == k\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[index + 1]\n  return max_sum_increasing_subseq(a, n, index + 1, k)\nend",
    "  return 0 if index >= n\n  return a[index] if index == k\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[index + 1]\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[k]\n  return max_sum_increasing_subseq(a, n, index + 1, k)\nend",
    "  return 0 if index == n\n  return a[index] if index == k\n  return a[index] if index == k - 1\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[index + 1]\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[k]\n  return max_sum_increasing_subseq(a, n, index + 1, k)\nend",
    "  return 0 if index >= n\n  return a[index] if index == k\n  return [a[index], max_sum_increasing_subseq(a, n, index + 1, k)].max if index < k\n  [a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)].max\nend",
    "  return 0 if index >= n\n  return a[index] if index == k\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[index + 1]\n  return max_sum_increasing_subseq(a, n, index + 1, k)\nend",
    "  return 0 if index < 0\n  return a[index] if index == k\n  return a[index] + max_sum_increasing_subseq(a, n, index - 1, k) if a[index] < a[k]\n  return max_sum_increasing_subseq(a, n, index - 1, k)\nend",
    "  return 0 if index >= n\n  return a[index] if index == k\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[index + 1]\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[k]\n  return max_sum_increasing_subseq(a, n, index + 1, k)\nend",
    "  return 0 if index >= n\n  return a[index] if index == k\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[index + 1]\n  return a[index]\nend",
    "  return 0 if index >= n\n  return a[index] if index == k\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[index + 1]\n  return max_sum_increasing_subseq(a, n, index + 1, k)\nend",
    "  return 0 if index >= n\n  return a[index] if index == k\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[index + 1]\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[k]\n  return max_sum_increasing_subseq(a, n, index + 1, k)\nend",
    "  return 0 if index >= n\n  return a[index] if index == k\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[index + 1]\n  return max_sum_increasing_subseq(a, n, index + 1, k)\nend",
    "  return 0 if index == n\n  return a[index] if index == k\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[index + 1]\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[k]\n  return max_sum_increasing_subseq(a, n, index + 1, k)\nend",
    "  return 0 if index == n\n  return a[index] if index == k\n  return max_sum_increasing_subseq(a, n, index + 1, k) if a[index] >= a[k]\n  return [max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index)].max\nend",
    "  return 0 if index == n\n  return a[index] if index == k\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[index + 1]\n  return max_sum_increasing_subseq(a, n, index + 1, k)\nend",
    "  return 0 if index >= n\n  return a[index] if k == index\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[k]\n  return max_sum_increasing_subseq(a, n, index + 1, k)\nend",
    "  return 0 if index == n\n  return a[index] if index == k\n  return a[index] + max_sum_increasing_subseq(a, n, index + 1, k) if a[index] < a[index + 1]\n  return max_sum_increasing_subseq(a, n, index + 1, k)\nend"
  ]
}