{
  "name": "mbpp_808_check_K",
  "language": "rb",
  "prompt": "# Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_K\n    candidate = method(:check_K)\n    assert_equal(true, candidate.call([10, 4, 5, 6, 8], 6))\n    assert_equal(false, candidate.call([1, 2, 3, 4, 5, 6], 7))\n    assert_equal(true, candidate.call([7, 8, 9, 44, 11, 12], 11))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  for i in test_tup:\n    if i == k:\n      return True\n  return False",
    "  if test_tup.include?(k)\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  for i in test_tup:\n    if i == k:\n      return True\n  return False",
    "    for i in test_tup:\n        if i == k:\n            return True\n    return False",
    "    for i in test_tup:\n        if i == k:\n            return True\n    return False",
    "  for i in test_tup\n    if i == k\n      return True\n    end\n  end\n  return False\nend",
    "  for i in test_tup:\n    if i == k:\n      return True\n  return False",
    "  for i in test_tup:\n    if i == k:\n      return True\n  return False",
    "    for i in test_tup:\n        if i == k:\n            return True\n    return False",
    "  for i in test_tup:\n    if i == k:\n      return True\n  return False",
    "    if test_tup.include?(k)\n        return true\n    else\n        return false\n    end\nend",
    "    for i in test_tup:\n        if i == k:\n            return True\n    return False",
    "    for i in test_tup:\n        if i == k:\n            return True\n    return False",
    "    if test_tup.count(k) > 0:\n        return True\n    else:\n        return False",
    "    for i in test_tup:\n        if i == k:\n            return True\n    return False",
    "    for i in test_tup:\n        if i == k:\n            return True\n    return False",
    "    for i in test_tup:\n        if i == k:\n            return True\n    return False",
    "    if test_tup.count(k) > 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")",
    "  test_tup.each do |i|\n    if i == k\n      return true\n    end\n  end\n  return false\nend",
    "    for i in test_tup:\n        if i == k:\n            return True\n    return False"
  ]
}