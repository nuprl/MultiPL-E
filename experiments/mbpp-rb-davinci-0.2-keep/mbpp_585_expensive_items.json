{
  "name": "mbpp_585_expensive_items",
  "language": "rb",
  "prompt": "# Write a function to find the n most expensive items in a given dataset.\ndef expensive_items(items, n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_expensive_items\n    candidate = method(:expensive_items)\n    assert_equal([{\"name\" => \"Item-2\", \"price\" => 555.22}], candidate.call([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}], 1))\n    assert_equal([{\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-1\", \"price\" => 101.1}], candidate.call([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-3\", \"price\" => 45.09}], 2))\n    assert_equal([{\"name\" => \"Item-2\", \"price\" => 555.22}], candidate.call([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-3\", \"price\" => 45.09}, {\"name\" => \"Item-4\", \"price\" => 22.75}], 1))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  items.sort_by { |item| item[:price] }.reverse.take(n)\nend",
    "  items.sort_by { |item| item[:price] }.reverse.take(n)\nend",
    "  items.sort_by { |item| item[:price] }.reverse.take(n)\nend",
    "  # sort the array in descending order by price\n  # return the first n items in the sorted array\n  items.sort_by { |item| item[:price] }.reverse.first(n)\nend",
    "  items.sort_by { |item| item[:price] }.reverse.first(n)\nend",
    "  items.sort_by { |item| item[:price] }.reverse[0...n]\nend",
    "  items.sort_by { |item| item[:price] }.reverse.take(n)\nend",
    "  # Sort the array in descending order and return the first n items\n  items.sort_by { |item| item[:price] }.reverse.take(n)\nend",
    "  items.sort_by { |item| item[:price] }.reverse.first(n)\nend",
    "  items.sort_by { |item| item[:price] }.reverse.take(n)\nend",
    "  items.sort_by { |item| item[:price] }.reverse.take(n)\nend",
    "  # Sort the items by price in descending order\n  sorted_items = items.sort_by { |item| item[:price] }.reverse\n  # Return the first n items\n  sorted_items.slice(0, n)\nend",
    "  items.sort_by { |item| item[:price] }.reverse.take(n)\nend",
    "  items.sort_by { |item| item[:price] }.reverse.take(n)\nend",
    "  items.sort_by { |item| item[:price] }.reverse.take(n)\nend",
    "  # Sort the items by price in descending order.\n  sorted_items = items.sort_by { |item| item[:price] }.reverse\n  # Return the first n items.\n  sorted_items[0...n]\nend",
    "  items.sort_by { |item| item[:price] }.reverse.take(n)\nend",
    "  items.sort_by {|item| item[:price]}.reverse.first(n)\nend",
    "  items.sort_by { |item| item[:price] }.reverse.take(n)\nend",
    "  items.sort_by { |item| item[:price] }.reverse.take(n)\nend"
  ]
}