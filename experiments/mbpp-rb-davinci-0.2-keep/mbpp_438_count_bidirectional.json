{
  "name": "mbpp_438_count_bidirectional",
  "language": "rb",
  "prompt": "# Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_bidirectional\n    candidate = method(:count_bidirectional)\n    assert_equal(3, candidate.call([[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]]))\n    assert_equal(2, candidate.call([[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]]))\n    assert_equal(4, candidate.call([[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # Write your code here\nend",
    "  count = 0\n  test_list.each do |tuple|\n    if test_list.include?(tuple.reverse)\n      count += 1\n    end\n  end\n  count\nend",
    "  count = 0\n  test_list.each do |tuple|\n    if test_list.include?(tuple.reverse)\n      count += 1\n    end\n  end\n  count\nend",
    "  count = 0\n  test_list.each do |tuple|\n    count += 1 if test_list.include?(tuple.reverse)\n  end\n  count\nend",
    "  count = 0\n  test_list.each do |tuple|\n    count += 1 if test_list.include?(tuple.reverse)\n  end\n  count\nend",
    "  count = 0\n  test_list.each do |tuple|\n    count += 1 if test_list.include?(tuple.reverse)\n  end\n  count\nend",
    "  count = 0\n  test_list.each do |tuple|\n    if test_list.include?(tuple.reverse)\n      count += 1\n    end\n  end\n  count\nend",
    "  # Your code here\nend",
    "  count = 0\n  test_list.each do |tuple|\n    if test_list.include?(tuple.reverse)\n      count += 1\n    end\n  end\n  count\nend",
    "  # Your code here\nend",
    "  count = 0\n  test_list.each do |tuple|\n    count += 1 if test_list.include?(tuple.reverse)\n  end\n  count\nend",
    "  count = 0\n  test_list.each do |tuple|\n    if test_list.include?(tuple.reverse)\n      count += 1\n    end\n  end\n  count\nend",
    "  count = 0\n  test_list.each do |tuple|\n    count += 1 if test_list.include?(tuple.reverse)\n  end\n  count\nend",
    "  count = 0\n  test_list.each do |x|\n    test_list.each do |y|\n      if x[0] == y[1] && x[1] == y[0]\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  test_list.each do |tuple|\n    if test_list.include?(tuple.reverse)\n      count += 1\n    end\n  end\n  count\nend",
    "  # Write your code here.\nend",
    "  count = 0\n  test_list.each do |x|\n    test_list.each do |y|\n      if x == y.reverse\n        count += 1\n      end\n    end\n  end\n  count / 2\nend",
    "  count = 0\n  test_list.each_with_index do |tuple, index|\n    test_list.each_with_index do |tuple2, index2|\n      if index2 > index\n        if tuple[0] == tuple2[1] && tuple[1] == tuple2[0]\n          count += 1\n        end\n      end\n    end\n  end\n  count\nend",
    "  # Your code here\nend",
    "  count = 0\n  test_list.each do |tuple|\n    count += 1 if test_list.include?(tuple.reverse)\n  end\n  count\nend"
  ]
}