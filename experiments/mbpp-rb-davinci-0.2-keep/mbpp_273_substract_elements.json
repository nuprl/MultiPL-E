{
  "name": "mbpp_273_substract_elements",
  "language": "rb",
  "prompt": "# Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\ndef substract_elements(test_tup1, test_tup2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend",
    "  # Write your code here\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend",
    "  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend",
    "  test_tup1.zip(test_tup2).map{|x, y| x - y}\nend",
    "  test_tup1.zip(test_tup2).map {|x, y| x - y}\nend",
    "  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend",
    "  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend",
    "  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element - test_tup2[index]\n  end\n  result\nend",
    "  # Write your code here\n  result = []\n  test_tup1.each_with_index do |value, index|\n    result << value - test_tup2[index]\n  end\n  result\nend",
    "  new_tup = []\n  test_tup1.each_with_index do |num, index|\n    new_tup << num - test_tup2[index]\n  end\n  new_tup\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend",
    "  # Write your code here\n  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend",
    "  new_tup = []\n  test_tup1.each_with_index do |value, index|\n    new_tup << value - test_tup2[index]\n  end\n  new_tup\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x - y }\nend"
  ]
}