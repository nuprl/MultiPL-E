{
  "name": "mbpp_773_occurance_substring",
  "language": "rb",
  "prompt": "# Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\ndef occurance_substring(text, pattern)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_occurance_substring\n    candidate = method(:occurance_substring)\n    assert_equal([\"python\", 0, 6], candidate.call(\"python programming, python language\", \"python\"))\n    assert_equal([\"programming\", 7, 18], candidate.call(\"python programming,programming language\", \"programming\"))\n    assert_equal([\"language\", 31, 39], candidate.call(\"python programming,programming language\", \"language\"))\n    assert_equal(nil, candidate.call(\"c++ programming, c++ language\", \"python\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if text.length < pattern.length\n  return nil if text.length == pattern.length && text != pattern\n  return nil if text.length == pattern.length && text == pattern\n  return nil if text.length > pattern.length && text.include?(pattern) == false",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if text.length < pattern.length",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if text.length < pattern.length",
    "  if text.include?(pattern)\n    puts \"The pattern #{pattern} occurs in the string #{text} at position #{text.index(pattern)}\"\n  else\n    puts \"The pattern #{pattern} does not occur in the string #{text}\"\n  end\nend",
    "  text.scan(/#{pattern}/).size\nend",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if pattern.length > text.length\n  return nil if text.count(pattern) == 0",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if text.length < pattern.length",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if text.length < pattern.length\n  return nil if text.length == pattern.length && text != pattern\n  return nil if text.length == pattern.length && text == pattern\n  return nil if text.length > pattern.length && text.include?(pattern) == false\n  return nil if text.length > pattern.length && text.include?(pattern) == true",
    "  if text.include?(pattern)\n    return text.index(pattern)\n  else\n    return nil\n  end\nend",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if pattern.length > text.length\n  return nil if text.length > 100_000\n  return nil if pattern.length > 100_000",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if text.length < pattern.length\n  return nil if text.length == pattern.length && text != pattern\n  return nil if text.length == pattern.length && text == pattern",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if text.length < pattern.length\n  return nil if text.length == pattern.length && text != pattern\n  return nil if text.length == pattern.length && text == pattern\n  return nil if text.length > pattern.length && text.include?(pattern) == false\n  return nil if text.length > pattern.length && text.include?(pattern) == true\n  return nil if text.length > pattern.length && text.include?(pattern) == true\n  return nil if text.length > pattern.length && text.include?(pattern) == true\n  return nil if text.length > pattern.length && text.include?(pattern) == true\n  return nil if text.length > pattern.length && text.include?(pattern) == true\n  return nil if text.length > pattern.length && text.include?(pattern) == true\n  return nil if text.length > pattern.length && text.include?(pattern) == true\n  return nil if text.length > pattern.length && text.include?(pattern) == true\n  return nil if text.length > pattern.length && text.include?(pattern) == true\n  return nil if text.length > pattern.length && text.include?(pattern) == true\n  return nil if text.length > pattern.length && text.include?(pattern) == true\n  return nil if text.length > pattern.length && text.include?(pattern) == true\n  return nil if text.length > pattern.length && text.include?(pattern) == true\n  return nil if text.length > pattern.length && text.include?(pattern) == true\n  return nil if text.length > pattern.length && text.include?(pattern) == true\n  return nil if text.length > pattern.length && text.include?(pattern) == true\n  return nil if text.length > pattern.length && text.include?(pattern) == true\n  return nil if text.length > pattern.length && text.include?(pattern) == true\n  return nil if text.length > pattern.length && text.include?(pattern) == true",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if pattern.length > text.length\n  return nil if text.length == pattern.length && text != pattern",
    "  text.scan(/#{pattern}/).size\nend",
    "  if text.include?(pattern)\n    return text.index(pattern)\n  else\n    return nil\n  end\nend",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if text.length < pattern.length\n  return nil if text.length == pattern.length && text != pattern\n  return nil if text.length == pattern.length && text == pattern\n  return nil if text.length > pattern.length && text.include?(pattern) == false",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.size < pattern.size\n  return nil if pattern.size == 0\n  return nil if text.size == 0",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?",
    "  return nil if text.nil? || pattern.nil?\n  return nil if text.empty? || pattern.empty?\n  return nil if text.length < pattern.length\n  return nil if text.length == pattern.length && text != pattern",
    "  if text.include?(pattern)\n    puts \"The pattern #{pattern} is found in the text #{text} at position #{text.index(pattern)}\"\n  else\n    puts \"The pattern #{pattern} is not found in the text #{text}\"\n  end\nend"
  ]
}