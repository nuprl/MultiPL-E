{
  "name": "mbpp_747_lcs_of_three",
  "language": "rb",
  "prompt": "# Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\ndef lcs_of_three(x, y, z)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_lcs_of_three\n    candidate = method(:lcs_of_three)\n    assert_equal(2, candidate.call(\"AGGT12\", \"12TXAYB\", \"12XBA\"))\n    assert_equal(5, candidate.call(\"Reels\", \"Reelsfor\", \"ReelsforReels\"))\n    assert_equal(3, candidate.call(\"abcd1e2\", \"bc12ea\", \"bd1ea\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) } }\n  (0..m).each do |i|\n    (0..n).each do |j|\n      (0..o).each do |k|\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  (1..m).each do |i|\n    (1..n).each do |j|\n      (1..o).each do |k|\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }",
    "  m = x.length\n  n = y.length\n  o = z.length\n  dp = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  (1..m).each do |i|\n    (1..n).each do |j|\n      (1..o).each do |k|\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n        else\n          dp[i][j][k] = [dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  dp[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  lcs_of_two(x, lcs_of_two(y, z))\nend",
    "  return 0 if x.nil? || y.nil? || z.nil?\n  return lcs_of_two(x, y) if z.empty?\n  return lcs_of_two(x, z) if y.empty?\n  return lcs_of_two(y, z) if x.empty?",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  lcs_of_two(x, lcs_of_two(y, z))\nend",
    "  m = x.length\n  n = y.length\n  o = z.length",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return lcs_of_two(x, y) if z.empty?\n  return lcs_of_two(x, z) if y.empty?\n  return lcs_of_two(y, z) if x.empty?",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  return lcs[m][n][o]\nend",
    "  return 0 if x.nil? || y.nil? || z.nil?\n  return lcs_of_two(x, y) if z.empty?\n  return lcs_of_two(x, z) if y.empty?\n  return lcs_of_two(y, z) if x.empty?\n  return 1 + lcs_of_three(x[1..-1], y[1..-1], z[1..-1]) if x[0] == y[0] && y[0] == z[0]\n  return [lcs_of_three(x, y[1..-1], z), lcs_of_three(x[1..-1], y, z), lcs_of_three(x, y, z[1..-1])].max\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  lcs_of_two(x, lcs_of_two(y, z))\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return lcs_of_three(x[0...-1], y, z) if x[-1] != y[-1] && x[-1] != z[-1]\n  return lcs_of_three(x[0...-1], y[0...-1], z[0...-1]) + 1 if x[-1] == y[-1] && x[-1] == z[-1]\n  [lcs_of_three(x[0...-1], y, z), lcs_of_three(x, y[0...-1], z), lcs_of_three(x, y, z[0...-1])].max\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return lcs_of_three(x[0...-1], y, z) if x[-1] != y[-1] && x[-1] != z[-1]\n  return lcs_of_three(x[0...-1], y[0...-1], z[0...-1]) + 1 if x[-1] == y[-1] && x[-1] == z[-1]\n  [lcs_of_three(x[0...-1], y, z), lcs_of_three(x, y[0...-1], z), lcs_of_three(x, y, z[0...-1])].max\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return lcs_of_three(x[0...-1], y, z) if x[-1] != y[-1] && x[-1] != z[-1]\n  return lcs_of_three(x[0...-1], y[0...-1], z[0...-1]) + 1 if x[-1] == y[-1] && x[-1] == z[-1]\n  return [lcs_of_three(x[0...-1], y, z), lcs_of_three(x, y[0...-1], z), lcs_of_three(x, y, z[0...-1])].max\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return lcs_of_three(x[0...-1], y, z) if x[-1] != y[-1] && x[-1] != z[-1]\n  return lcs_of_three(x[0...-1], y[0...-1], z[0...-1]) + 1 if x[-1] == y[-1] && y[-1] == z[-1]\n  return [lcs_of_three(x[0...-1], y, z), lcs_of_three(x, y[0...-1], z), lcs_of_three(x, y, z[0...-1])].max\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.length == 0 || y.length == 0 || z.length == 0\n  return lcs_of_three(x[0...-1], y, z) if x[-1] != y[-1] && x[-1] != z[-1]\n  return 1 + lcs_of_three(x[0...-1], y[0...-1], z[0...-1]) if x[-1] == y[-1] && x[-1] == z[-1]\n  return [lcs_of_three(x[0...-1], y, z), lcs_of_three(x, y[0...-1], z), lcs_of_three(x, y, z[0...-1])].max\nend",
    "  return 0 if x.nil? || y.nil? || z.nil?\n  return lcs_of_two(x, y) if z.empty?\n  return lcs_of_two(x, z) if y.empty?\n  return lcs_of_two(y, z) if x.empty?",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  (1..m).each do |i|\n    (1..n).each do |j|\n      (1..o).each do |k|\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  dp = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n        else\n          dp[i][j][k] = [dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  dp[m][n][o]\nend",
    "  return 0 if x.nil? || y.nil? || z.nil?\n  return lcs_of_two(x, y) if z.empty?\n  return lcs_of_two(x, z) if y.empty?\n  return lcs_of_two(y, z) if x.empty?",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m, n, o = x.length, y.length, z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1, 0) } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  lcs_of_two(lcs_of_two(x, y), z)\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  lcs_of_two(lcs_of_two(x, y), z)\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.nil? || y.nil? || z.nil?\n  return lcs_of_two(x, y) if z.empty?\n  return lcs_of_two(x, z) if y.empty?\n  return lcs_of_two(y, z) if x.empty?",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return lcs_of_three(x[0..-2], y, z) if x[-1] != y[-1] && x[-1] != z[-1]\n  return lcs_of_three(x[0..-2], y[0..-2], z[0..-2]) + 1 if x[-1] == y[-1] && x[-1] == z[-1]\n  [lcs_of_three(x[0..-2], y, z), lcs_of_three(x, y[0..-2], z), lcs_of_three(x, y, z[0..-2])].max\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  lcs_of_two(lcs_of_two(x, y), z)\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) } }\n  (0..m).each do |i|\n    (0..n).each do |j|\n      (0..o).each do |k|\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  lcs_of_two(lcs_of_two(x, y), z)\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return lcs_of_three(x[0..-2], y, z) if x[-1] != y[-1] && x[-1] != z[-1]\n  return lcs_of_three(x[0..-2], y[0..-2], z[0..-2]) + 1 if x[-1] == y[-1] && x[-1] == z[-1]\n  [lcs_of_three(x[0..-2], y, z), lcs_of_three(x, y[0..-2], z), lcs_of_three(x, y, z[0..-2])].max\nend",
    "  lcs_of_two(x, lcs_of_two(y, z))\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.length == 0 || y.length == 0 || z.length == 0\n  return 1 + lcs_of_three(x[1..-1], y[1..-1], z[1..-1]) if x[0] == y[0] && y[0] == z[0]\n  [lcs_of_three(x[1..-1], y, z), lcs_of_three(x, y[1..-1], z), lcs_of_three(x, y, z[1..-1])].max\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  if x[-1] == y[-1] && x[-1] == z[-1]\n    return 1 + lcs_of_three(x[0..-2], y[0..-2], z[0..-2])\n  else\n    return [lcs_of_three(x[0..-2], y, z), lcs_of_three(x, y[0..-2], z), lcs_of_three(x, y, z[0..-2])].max\n  end\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  (1..m).each do |i|\n    (1..n).each do |j|\n      (1..o).each do |k|\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.length == 0 || y.length == 0 || z.length == 0\n  return lcs_of_three(x, y, z[0...-1]) if z[-1] != x[-1] && z[-1] != y[-1]\n  return [lcs_of_three(x[0...-1], y, z), lcs_of_three(x, y[0...-1], z), lcs_of_three(x, y, z[0...-1])].max + 1 if z[-1] == x[-1] && z[-1] == y[-1]\n  return [lcs_of_three(x[0...-1], y, z), lcs_of_three(x, y, z[0...-1])].max + 1 if z[-1] == x[-1]\n  return [lcs_of_three(x, y[0...-1], z), lcs_of_three(x, y, z[0...-1])].max + 1 if z[-1] == y[-1]\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return lcs_of_three(x[0..-2], y, z) if x[-1] != y[-1] && x[-1] != z[-1]\n  return lcs_of_three(x[0..-2], y[0..-2], z[0..-2]) + 1 if x[-1] == y[-1] && x[-1] == z[-1]\n  [lcs_of_three(x[0..-2], y, z), lcs_of_three(x, y[0..-2], z), lcs_of_three(x, y, z[0..-2])].max\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return lcs_of_three(x[0..-2], y, z) if x[-1] != y[-1] && x[-1] != z[-1]\n  return lcs_of_three(x[0..-2], y[0..-2], z[0..-2]) + 1 if x[-1] == y[-1] && x[-1] == z[-1]\n  [lcs_of_three(x[0..-2], y, z), lcs_of_three(x, y[0..-2], z), lcs_of_three(x, y, z[0..-2])].max\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return 1 + lcs_of_three(x[0..-2], y[0..-2], z[0..-2]) if x[-1] == y[-1] && y[-1] == z[-1]\n  [lcs_of_three(x, y, z[0..-2]), lcs_of_three(x, y[0..-2], z), lcs_of_three(x[0..-2], y, z)].max\nend",
    "  m = x.size\n  n = y.size\n  o = z.size\n  lcs = Array.new(m + 1) { Array.new(n + 1) { Array.new(o + 1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1]\n          lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1\n        else\n          lcs[i][j][k] = [lcs[i - 1][j][k], lcs[i][j - 1][k], lcs[i][j][k - 1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return lcs_of_three(x[0...-1], y, z) if x[-1] != y[-1] && x[-1] != z[-1]\n  return [lcs_of_three(x[0...-1], y, z), lcs_of_three(x, y[0...-1], z), lcs_of_three(x, y, z[0...-1])].max + 1\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return lcs_of_three(x[0..-2], y, z) if x[-1] != y[-1] && x[-1] != z[-1]\n  return lcs_of_three(x[0..-2], y[0..-2], z[0..-2]) + 1 if x[-1] == y[-1] && x[-1] == z[-1]\n  [lcs_of_three(x[0..-2], y, z), lcs_of_three(x, y[0..-2], z), lcs_of_three(x, y, z[0..-2])].max\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  (1..m).each do |i|\n    (1..n).each do |j|\n      (1..o).each do |k|\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  return lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return 1 + lcs_of_three(x[1..-1], y[1..-1], z[1..-1]) if x[0] == y[0] && y[0] == z[0]\n  [lcs_of_three(x, y[1..-1], z), lcs_of_three(x[1..-1], y, z), lcs_of_three(x, y, z[1..-1])].max\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs_matrix = Array.new(m+1) { Array.new(n+1) { Array.new(o+1, 0) } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs_matrix[i][j][k] = lcs_matrix[i-1][j-1][k-1] + 1\n        else\n          lcs_matrix[i][j][k] = [lcs_matrix[i-1][j][k], lcs_matrix[i][j-1][k], lcs_matrix[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs_matrix[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) {0} } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  lcs_of_two(x, lcs_of_two(y, z))\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return lcs_of_three(x[0..-2], y, z) if x[-1] != y[-1] && x[-1] != z[-1]\n  return lcs_of_three(x[0..-2], y[0..-2], z[0..-2]) + 1 if x[-1] == y[-1] && x[-1] == z[-1]\n  [lcs_of_three(x[0..-2], y, z), lcs_of_three(x, y[0..-2], z), lcs_of_three(x, y, z[0..-2])].max\nend",
    "  return 0 if x.nil? || y.nil? || z.nil?\n  return lcs_of_two(x, y) if z.empty?\n  return lcs_of_two(x, z) if y.empty?\n  return lcs_of_two(y, z) if x.empty?",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }",
    "  return 0 if x.length == 0 || y.length == 0 || z.length == 0\n  return lcs_of_three(x, y, z[0..-2]) if z[-1] == x[-1] && z[-1] != y[-1]\n  return lcs_of_three(x, y[0..-2], z) if z[-1] != x[-1] && z[-1] == y[-1]\n  return [lcs_of_three(x, y[0..-2], z), lcs_of_three(x[0..-2], y, z), lcs_of_three(x[0..-2], y[0..-2], z)].max + 1 if z[-1] == x[-1] && z[-1] == y[-1]\n  return [lcs_of_three(x, y[0..-2], z), lcs_of_three(x[0..-2], y, z), lcs_of_three(x[0..-2], y[0..-2], z)].max\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return lcs_of_three(x[0...-1], y, z) if x[-1] != y[-1] && x[-1] != z[-1]\n  return lcs_of_three(x[0...-1], y[0...-1], z[0...-1]) + 1 if x[-1] == y[-1] && x[-1] == z[-1]\n  [lcs_of_three(x[0...-1], y, z), lcs_of_three(x, y[0...-1], z), lcs_of_three(x, y, z[0...-1])].max\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.length == 0 || y.length == 0 || z.length == 0\n  return lcs_of_three(x[0..-2], y, z) if x[-1] != y[-1] && x[-1] != z[-1]\n  return lcs_of_three(x[0..-2], y[0..-2], z[0..-2]) + 1 if x[-1] == y[-1] && x[-1] == z[-1]\n  return [lcs_of_three(x[0..-2], y, z), lcs_of_three(x, y[0..-2], z), lcs_of_three(x, y, z[0..-2])].max\nend",
    "  return 0 if x.nil? || y.nil? || z.nil?\n  return lcs_of_two(x, y) if z.empty?\n  return lcs_of_two(x, z) if y.empty?\n  return lcs_of_two(y, z) if x.empty?",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  return lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return 1 + lcs_of_three(x[1..-1], y[1..-1], z[1..-1]) if x[0] == y[0] && y[0] == z[0]\n  [lcs_of_three(x, y[1..-1], z[1..-1]),\n   lcs_of_three(x[1..-1], y, z[1..-1]),\n   lcs_of_three(x[1..-1], y[1..-1], z)].max\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.length == 0 || y.length == 0 || z.length == 0\n  return lcs_of_three(x, y, z[0..-2]) if z[-1] == x[-1] && z[-1] == y[-1]\n  [lcs_of_three(x, y, z[0..-2]), lcs_of_three(x[0..-2], y, z), lcs_of_three(x[0..-2], y[0..-2], z)].max + 1\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.length == 0 || y.length == 0 || z.length == 0\n  return lcs_of_three(x[0...-1], y, z) if x[-1] != y[-1] && x[-1] != z[-1]\n  return lcs_of_three(x[0...-1], y[0...-1], z[0...-1]) + 1 if x[-1] == y[-1] && x[-1] == z[-1]\n  return [lcs_of_three(x, y[0...-1], z), lcs_of_three(x[0...-1], y, z), lcs_of_three(x[0...-1], y[0...-1], z)].max\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return 1 + lcs_of_three(x[0..-2], y[0..-2], z[0..-2]) if x[-1] == y[-1] && y[-1] == z[-1]\n  [lcs_of_three(x, y, z[0..-2]), lcs_of_three(x, y[0..-2], z), lcs_of_three(x[0..-2], y, z)].max\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }",
    "  return 0 if x.nil? || y.nil? || z.nil?\n  return lcs_of_two(x, y) if z.empty?\n  return lcs_of_two(x, z) if y.empty?\n  return lcs_of_two(y, z) if x.empty?",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.length == 0 || y.length == 0 || z.length == 0\n  return lcs_of_three(x[0..-2], y, z) if x[-1] != y[-1] && x[-1] != z[-1]\n  return lcs_of_three(x[0..-2], y[0..-2], z[0..-2]) + 1 if x[-1] == y[-1] && x[-1] == z[-1]\n  return [lcs_of_three(x[0..-2], y, z), lcs_of_three(x, y[0..-2], z), lcs_of_three(x, y, z[0..-2])].max\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length",
    "  return 0 if x.nil? || y.nil? || z.nil?\n  return lcs_of_two(x, y) if z.empty?\n  return lcs_of_two(x, z) if y.empty?\n  return lcs_of_two(y, z) if x.empty?",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  (1..m).each do |i|\n    (1..n).each do |j|\n      (1..o).each do |k|\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs_matrix = Array.new(m+1) { Array.new(n+1) { Array.new(o+1, 0) } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs_matrix[i][j][k] = lcs_matrix[i-1][j-1][k-1] + 1\n        else\n          lcs_matrix[i][j][k] = [lcs_matrix[i-1][j][k], lcs_matrix[i][j-1][k], lcs_matrix[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs_matrix[m][n][o]\nend",
    "  # create a matrix of size m x n x o\n  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m) { Array.new(n) { Array.new(o) } }",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.nil? || y.nil? || z.nil?\n  return lcs_of_two(x, y) if z.empty?\n  return lcs_of_two(x, z) if y.empty?\n  return lcs_of_two(y, z) if x.empty?",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  return lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  lcs_of_two(lcs_of_two(x, y), z)\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.length == 0 || y.length == 0 || z.length == 0\n  return lcs_of_three(x.slice(0, x.length - 1), y, z) if x[x.length - 1] != y[y.length - 1] && x[x.length - 1] != z[z.length - 1]\n  return 1 + lcs_of_three(x.slice(0, x.length - 1), y.slice(0, y.length - 1), z.slice(0, z.length - 1)) if x[x.length - 1] == y[y.length - 1] && x[x.length - 1] == z[z.length - 1]\n  [lcs_of_three(x.slice(0, x.length - 1), y, z), lcs_of_three(x, y.slice(0, y.length - 1), z), lcs_of_three(x, y, z.slice(0, z.length - 1))].max\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return lcs_of_three(x[0...-1], y, z) if x[-1] != y[-1] && x[-1] != z[-1]\n  return lcs_of_three(x[0...-1], y[0...-1], z[0...-1]) + 1 if x[-1] == y[-1] && x[-1] == z[-1]\n  [lcs_of_three(x, y[0...-1], z), lcs_of_three(x[0...-1], y, z), lcs_of_three(x, y, z[0...-1])].max\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m + 1) { Array.new(n + 1) { Array.new(o + 1) } }",
    "  return 0 if x.nil? || y.nil? || z.nil?\n  return lcs_of_three(x, y, z[0..-2]) if z.length == 1\n  return lcs_of_three(x, y[0..-2], z) if y.length == 1\n  return lcs_of_three(x[0..-2], y, z) if x.length == 1\n  return 1 + lcs_of_three(x[0..-2], y[0..-2], z[0..-2]) if x[-1] == y[-1] && y[-1] == z[-1]\n  [lcs_of_three(x, y[0..-2], z), lcs_of_three(x[0..-2], y, z), lcs_of_three(x[0..-2], y[0..-2], z)].max\nend",
    "  return lcs(x, lcs(y, z))\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && y[j-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.length == 0 || y.length == 0 || z.length == 0\n  return lcs_of_three(x[0...-1], y, z) if x[-1] != y[-1] && x[-1] != z[-1]\n  return lcs_of_three(x[0...-1], y[0...-1], z[0...-1]) + 1 if x[-1] == y[-1] && x[-1] == z[-1]\n  [lcs_of_three(x, y[0...-1], z), lcs_of_three(x[0...-1], y, z), lcs_of_three(x, y, z[0...-1])].max\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return lcs_of_three(x, y, z[0...-1]) if z[-1] != x[-1] && z[-1] != y[-1]\n  return [lcs_of_three(x, y, z[0...-1]) + 1, lcs_of_three(x[0...-1], y, z), lcs_of_three(x, y[0...-1], z)].max\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 1..m\n    for j in 1..n\n      for k in 1..o\n        if x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend",
    "  return 0 if x.empty? || y.empty? || z.empty?",
    "  return 0 if x.empty? || y.empty? || z.empty?\n  return lcs_of_three(x[0..-2], y, z) if x[-1] != y[-1] && x[-1] != z[-1]\n  return lcs_of_three(x[0..-2], y[0..-2], z[0..-2]) + 1 if x[-1] == y[-1] && x[-1] == z[-1]\n  [lcs_of_three(x[0..-2], y, z), lcs_of_three(x, y[0..-2], z), lcs_of_three(x, y, z[0..-2])].max\nend",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }",
    "  m = x.length\n  n = y.length\n  o = z.length\n  lcs = Array.new(m+1) { Array.new(n+1) { Array.new(o+1) { 0 } } }\n  for i in 0..m\n    for j in 0..n\n      for k in 0..o\n        if i == 0 || j == 0 || k == 0\n          lcs[i][j][k] = 0\n        elsif x[i-1] == y[j-1] && x[i-1] == z[k-1]\n          lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n        else\n          lcs[i][j][k] = [lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]].max\n        end\n      end\n    end\n  end\n  lcs[m][n][o]\nend"
  ]
}