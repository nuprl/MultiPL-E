{
  "name": "mbpp_80_tetrahedral_number",
  "language": "rb",
  "prompt": "# Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_tetrahedral_number\n    candidate = method(:tetrahedral_number)\n    assert_equal(35, candidate.call(5))\n    assert_equal(56, candidate.call(6))\n    assert_equal(84, candidate.call(7))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  (n * (n + 1) * (n + 2)) / 6\nend",
    "  n * (n + 1) * (n + 2) / 6\nend",
    "  n * (n + 1) * (n + 2) / 6\nend",
    "  (n * (n + 1) * (n + 2)) / 6\nend",
    "  n * (n + 1) * (n + 2) / 6\nend",
    "  (n * (n + 1) * (n + 2)) / 6\nend",
    "  n * (n + 1) * (n + 2) / 6\nend",
    "  (n * (n + 1) * (n + 2)) / 6\nend",
    "  n * (n + 1) * (n + 2) / 6\nend",
    "  (n * (n + 1) * (n + 2)) / 6\nend",
    "  (n * (n + 1) * (n + 2)) / 6\nend",
    "  n * (n + 1) * (n + 2) / 6\nend",
    "  n*(n+1)*(n+2)/6\nend",
    "  (n * (n + 1) * (n + 2)) / 6\nend",
    "  n * (n + 1) * (n + 2) / 6\nend",
    "  (n * (n + 1) * (n + 2)) / 6\nend",
    "  (n * (n + 1) * (n + 2)) / 6\nend",
    "  n * (n + 1) * (n + 2) / 6\nend",
    "  n * (n + 1) * (n + 2) / 6\nend",
    "  (n * (n + 1) * (n + 2)) / 6\nend"
  ]
}