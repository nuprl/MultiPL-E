{
  "name": "mbpp_460_Extract",
  "language": "rb",
  "prompt": "# Write a python function to get the first element of each sublist.\ndef Extract(lst)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Extract\n    candidate = method(:Extract)\n    assert_equal([1, 3, 6], candidate.call([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))\n    assert_equal([1, 4], candidate.call([[1, 2, 3], [4, 5]]))\n    assert_equal([9, 1], candidate.call([[9, 8, 1], [1, 2]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    return list(map(lambda x: x[0], lst))",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend",
    "    return lst.map {|i| i[0]}\nend",
    "    return lst.map { |x| x[0] }\nend",
    "    return lst.map { |x| x[0] }\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    new_list = []\n    lst.each do |i|\n        new_list.push(i[0])\n    end\n    return new_list\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    lst.map{|x| x[0]}\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    lst.map { |x| x[0] }\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    lst.map { |i| i[0] }\nend",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return [lst[0]] + Extract(lst[1..-1]) if lst.size > 0\n    []\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    lst.map { |x| x[0] }\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return lst.map {|sublist| sublist[0]}\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    lst.map {|x| x[0]}\nend",
    "    lst.map {|x| x[0]}\nend",
    "    lst.map {|x| x[0]}\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return lst.map { |sub| sub[0] }\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    lst.map {|x| x[0]}\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return lst.map { |i| i[0] }\nend",
    "    return lst.map {|i| i[0]}\nend",
    "    lst.map {|x| x[0]}\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return lst.map{|i| i[0]}\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    return [lst[0]] + Extract(lst[1..-1]) if lst.size > 0\n    []\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return lst.map { |x| x[0] }\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    lst.map { |sublist| sublist[0] }\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    lst.map { |sub| sub[0] }\nend",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend",
    "    return lst.map { |x| x[0] }\nend",
    "    return lst.map {|i| i[0]}\nend",
    "    lst.map {|i| i[0]}\nend",
    "    lst.map {|x| x[0]}\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    return lst.map { |x| x[0] }\nend",
    "    lst.map { |x| x[0] }\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    lst.map { |x| x[0] }\nend",
    "    lst.map{|x| x[0]}\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    lst.map { |i| i[0] }\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    lst.map { |sub_lst| sub_lst[0] }\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    lst.map {|i| i[0]}\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    lst.map {|x| x[0]}\nend",
    "    lst.map { |x| x[0] }\nend",
    "    return lst.map { |x| x[0] }\nend",
    "    for i in 0...lst.length\n        return lst[i][0]\n    end\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    lst.map { |x| x[0] }\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    for i in lst\n        return i[0]\n    end\nend\nExtract([[1,2,3],[4,5,6],[7,8,9]])",
    "    return lst.map { |x| x[0] }\nend",
    "    lst.map {|x| x[0]}\nend",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    lst.map { |x| x[0] }\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    return lst.map { |x| x[0] }\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    lst.map{|x| x[0]}\nend",
    "    return lst.map { |x| x[0] }\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    lst.map {|x| x[0]}\nend",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    lst.map {|i| i[0]}\nend",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend",
    "    return lst.map{|i| i[0]}\nend",
    "    lst.map {|x| x[0]}\nend",
    "    lst.map {|x| x[0]}\nend",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    lst.map {|x| x[0]}\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend",
    "    lst.map {|x| x[0]}\nend",
    "    return lst.map { |x| x[0] }\nend",
    "    lst.map {|x| x[0]}\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    lst.map { |x| x[0] }\nend",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    lst.map { |x| x[0] }\nend",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend",
    "    lst.map { |x| x[0] }\nend",
    "    lst.map {|x| x[0]}\nend",
    "    lst.map { |x| x[0] }\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    lst.map {|x| x[0]}\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    for i in lst\n        return i[0]\n    end\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    lst.map { |x| x[0] }\nend",
    "    return lst.map { |x| x[0] }\nend",
    "    return [i[0] for i in lst]",
    "    for i in lst\n        return i[0]\n    end\nend",
    "    lst.map { |x| x[0] }\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    lst.map { |x| x[0] }\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    new_lst = []\n    lst.each do |sub_lst|\n        new_lst.push(sub_lst[0])\n    end\n    return new_lst\nend",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend\nExtract([[1,2,3],[4,5,6],[7,8,9]])",
    "    lst.map { |sub| sub[0] }\nend",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend",
    "    lst.map{|i| i[0]}\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    return [lst[0]] + Extract(lst[1..-1]) if lst.size > 0\n    []\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    return lst.map{|i| i[0]}\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    for i in lst\n        return i[0]\n    end\nend",
    "    return lst.map { |x| x[0] }\nend",
    "    lst.map { |sub_list| sub_list[0] }\nend",
    "    lst.map { |x| x[0] }\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    lst.map { |sub| sub[0] }\nend",
    "    return lst.map { |x| x[0] }\nend",
    "    lst.map { |x| x[0] }\nend",
    "    return lst.map { |sub| sub[0] }\nend",
    "    return lst.map{|x| x[0]}\nend",
    "    lst.map{|x| x[0]}\nend",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    lst.map {|x| x[0]}\nend",
    "    return lst.map {|x| x[0]}\nend",
    "    lst.map {|x| x[0]}\nend",
    "    lst.map{|i| i[0]}\nend",
    "    return [lst[0][0],lst[1][0],lst[2][0]]\nend",
    "    return [lst[0][0], lst[1][0], lst[2][0]]\nend",
    "    lst.map { |x| x[0] }\nend",
    "    lst.map { |x| x[0] }\nend",
    "    lst.map {|x| x[0]}\nend",
    "    lst.map {|x| x[0]}\nend"
  ]
}