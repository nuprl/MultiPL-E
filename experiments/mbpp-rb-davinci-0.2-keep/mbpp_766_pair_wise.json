{
  "name": "mbpp_766_pair_wise",
  "language": "rb",
  "prompt": "# Write a function to return a list of all pairs of consecutive items in a given list.\ndef pair_wise(l1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pair_wise\n    candidate = method(:pair_wise)\n    assert_equal([[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]], candidate.call([1, 1, 2, 3, 3, 4, 4, 5]))\n    assert_equal([[1, 5], [5, 7], [7, 9], [9, 10]], candidate.call([1, 5, 7, 9, 10]))\n    assert_equal([[5, 1], [1, 9], [9, 7], [7, 10]], candidate.call([5, 1, 9, 7, 10]))\n    assert_equal([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  l1.each_cons(2).to_a\nend",
    "  l2 = []\n  l1.each_with_index do |item, index|\n    if index < l1.length - 1\n      l2 << [item, l1[index + 1]]\n    end\n  end\n  l2\nend",
    "  l1.each_cons(2).to_a\nend",
    "  l1.each_cons(2).to_a\nend",
    "  l1.each_cons(2).to_a\nend",
    "  l1.each_cons(2).to_a\nend",
    "  l1.each_cons(2).to_a\nend",
    "  l1.each_cons(2).to_a\nend",
    "  result = []\n  l1.each_with_index do |item, index|\n    if index < l1.length - 1\n      result << [item, l1[index + 1]]\n    end\n  end\n  result\nend",
    "  l1.each_cons(2).to_a\nend",
    "  l1.each_cons(2).to_a\nend",
    "  l1.each_cons(2).to_a\nend",
    "  l1.each_cons(2).to_a\nend",
    "  l1.each_cons(2).to_a\nend",
    "  l1.each_cons(2).to_a\nend",
    "  l1.each_cons(2).to_a\nend",
    "  l1.each_cons(2).to_a\nend",
    "  l1.each_cons(2).to_a\nend",
    "  l1.each_cons(2).to_a\nend",
    "  l1.each_cons(2).to_a\nend"
  ]
}