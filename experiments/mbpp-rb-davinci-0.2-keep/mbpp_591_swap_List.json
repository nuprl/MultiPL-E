{
  "name": "mbpp_591_swap_List",
  "language": "rb",
  "prompt": "# Write a python function to interchange the first and last elements in a list.\ndef swap_List(newlist)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_swap_List\n    candidate = method(:swap_List)\n    assert_equal([24, 35, 9, 56, 12], candidate.call([12, 35, 9, 56, 24]))\n    assert_equal([3, 2, 1], candidate.call([1, 2, 3]))\n    assert_equal([6, 5, 4], candidate.call([4, 5, 6]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    newlist[0], newlist[-1] = newlist[-1], newlist[0]\n    return newlist",
    "    newlist[0],newlist[-1] = newlist[-1],newlist[0]\n    return newlist\nend",
    "    newlist[0], newlist[-1] = newlist[-1], newlist[0]\n    return newlist\nend",
    "  newlist[0], newlist[-1] = newlist[-1], newlist[0]\n  return newlist\nend",
    "    newlist[0], newlist[-1] = newlist[-1], newlist[0]\n    return newlist\nend",
    "    newlist[0], newlist[-1] = newlist[-1], newlist[0]\n    return newlist\nend",
    "  newlist[0], newlist[-1] = newlist[-1], newlist[0]\n  return newlist\nend",
    "    newlist[0],newlist[-1] = newlist[-1],newlist[0]\n    return newlist\nend",
    "  newlist[0], newlist[-1] = newlist[-1], newlist[0]\n  return newlist\nend",
    "    newlist[0], newlist[-1] = newlist[-1], newlist[0]\n    return newlist\nend",
    "  newlist[0], newlist[-1] = newlist[-1], newlist[0]\n  return newlist\nend",
    "    newlist[0], newlist[-1] = newlist[-1], newlist[0]\n    return newlist\nend",
    "    newlist[0], newlist[-1] = newlist[-1], newlist[0]\n    return newlist",
    "    newlist[0], newlist[-1] = newlist[-1], newlist[0]\n    return newlist",
    "    newlist[0], newlist[-1] = newlist[-1], newlist[0]\n    return newlist",
    "  newlist[0], newlist[-1] = newlist[-1], newlist[0]\n  return newlist\nend",
    "    newlist[0], newlist[-1] = newlist[-1], newlist[0]\n    return newlist\nend",
    "  newlist[0], newlist[-1] = newlist[-1], newlist[0]\n  return newlist\nend",
    "    newlist[0],newlist[-1] = newlist[-1],newlist[0]\n    return newlist",
    "    first = newlist[0]\n    last = newlist[-1]\n    newlist[0] = last\n    newlist[-1] = first\n    return newlist\nend"
  ]
}