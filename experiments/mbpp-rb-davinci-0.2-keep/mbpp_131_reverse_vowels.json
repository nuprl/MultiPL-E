{
  "name": "mbpp_131_reverse_vowels",
  "language": "rb",
  "prompt": "# Write a python function to reverse only the vowels of a given string (where y is not a vowel).\ndef reverse_vowels(str1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_reverse_vowels\n    candidate = method(:reverse_vowels)\n    assert_equal(\"Python\", candidate.call(\"Python\"))\n    assert_equal(\"ASU\", candidate.call(\"USA\"))\n    assert_equal(\"ab\", candidate.call(\"ab\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/)\n  str1.gsub(/[aeiou]/, '*')\n  str1.gsub(/\\*/, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  str1.gsub(/[aeiou]/i) { |match| match.reverse }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i]) && vowels.include?(str1[j])\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i])\n      j -= 1\n    elsif vowels.include?(str1[j])\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "    str1.reverse.gsub(/[aeiou]/, 'a' => 'u', 'e' => 'o', 'i' => 'e', 'o' => 'i', 'u' => 'a')\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend"
  ]
}