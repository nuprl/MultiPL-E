{
  "name": "mbpp_131_reverse_vowels",
  "language": "rb",
  "prompt": "# Write a python function to reverse only the vowels of a given string (where y is not a vowel).\ndef reverse_vowels(str1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_reverse_vowels\n    candidate = method(:reverse_vowels)\n    assert_equal(\"Python\", candidate.call(\"Python\"))\n    assert_equal(\"ASU\", candidate.call(\"USA\"))\n    assert_equal(\"ab\", candidate.call(\"ab\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/)\n  str1.gsub(/[aeiou]/, '*')\n  str1.gsub(/\\*/, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  str1.gsub(/[aeiou]/i) { |match| match.reverse }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i]) && vowels.include?(str1[j])\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i])\n      j -= 1\n    elsif vowels.include?(str1[j])\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "    str1.reverse.gsub(/[aeiou]/, 'a' => 'u', 'e' => 'o', 'i' => 'e', 'o' => 'i', 'u' => 'a')\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '#')\n        .tr('#', vowels.reverse.join)\nend",
    "  str1.gsub(/[aeiou]/i) { |match| match.reverse }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  str1.gsub(/[aeiou]/i) { |match| match.reverse }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.each_with_index.map do |char, index|\n    vowels.include?(char) ? str1[-index - 1] : char\n  end.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  str1.reverse!\n  str1.gsub!(/[aeiou]/, 'a' => 'u', 'e' => 'o', 'i' => 'a', 'o' => 'e', 'u' => 'i')\n  str1\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  str_array = str1.split(\"\")\n  i = 0\n  j = str_array.length - 1\n  while i < j\n    if vowels.include?(str_array[i].downcase) && vowels.include?(str_array[j].downcase)\n      str_array[i], str_array[j] = str_array[j], str_array[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str_array[i].downcase)\n      j -= 1\n    elsif vowels.include?(str_array[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str_array.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.each_char.with_index do |char, index|\n    if vowels.include?(char)\n      str1[index] = str1[-index]\n    end\n  end\n  str1\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/)\n  str1.gsub(/[aeiou]/) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '*')\n    .tr('*', vowels.reverse.join)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '*')\n    .tr('*', vowels.reverse.join)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, \"\") + vowels.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '#')\n  str1.gsub!(/[aeiou]/i, '#')\n  str1.gsub!(/#/, vowels.pop)\n  str1\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '*')\n  str1.gsub!(/[aeiou]/i, '*')\n  str1.gsub!('*', vowels.pop)\n  str1\nend",
    "  vowels = str1.scan(/[aeiou]/)\n  str1.gsub(/[aeiou]/, '*')\n    .tr('*', vowels.reverse.join)\nend",
    "    vowels = \"aeiouAEIOU\"\n    str1.chars.select{|x| vowels.include?(x)}.reverse.join\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '*')\n  .gsub(/\\*/) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '*')\n    .tr('*', vowels.reverse.join)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i]) && vowels.include?(str1[j])\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i])\n      j -= 1\n    elsif vowels.include?(str1[j])\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = \"aeiou\"\n  str1.each_char.with_index do |char, index|\n    if vowels.include?(char)\n      str1[index] = str1[str1.length - index - 1]\n    end\n  end\n  str1\nend",
    "  vowels = \"aeiou\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = ['a', 'e', 'i', 'o', 'u']\n  str1.chars.each_with_index.map do |char, index|\n    vowels.include?(char.downcase) ? str1[-index - 1] : char\n  end.join\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '#')\n       .tr('#', '*')\n       .tr('aeiouAEIOU', vowels.reverse.join)\n       .tr('*', '#')\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '*')\n    .tr('*', vowels.reverse.join)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '*')\n    .tr('*', vowels.reverse.join)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '*')\n       .tr('*', vowels.reverse.join)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.map do |char|\n    vowels.include?(char.downcase) ? char.reverse : char\n  end.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = ['a', 'e', 'i', 'o', 'u']\n  str1.chars.each_with_index do |char, index|\n    if vowels.include?(char.downcase)\n      str1[index] = str1[str1.length - index - 1]\n    end\n  end\n  str1\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '*')\n    .tr('*', vowels.reverse.join)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, \"\") + vowels.reverse.join\nend",
    "  str1.reverse!\n  str1.gsub!(/[aeiou]/, 'a' => 'u', 'e' => 'o', 'i' => 'e', 'o' => 'i', 'u' => 'a')\n  str1\nend",
    "  vowels = []\n  str1.each_char do |char|\n    vowels << char if char.match(/[aeiou]/i)\n  end\n  str1.each_char.with_index do |char, index|\n    if char.match(/[aeiou]/i)\n      str1[index] = vowels.pop\n    end\n  end\n  str1\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  str1_array = str1.split(\"\")\n  str1_array.each_with_index do |char, index|\n    if vowels.include?(char)\n      str1_array[index] = str1_array[-index-1]\n    end\n  end\n  str1_array.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '').chars.map { |c| vowels.pop || c }.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '#')\n    .tr('#', vowels.reverse.join)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  str1.gsub(/[aeiou]/i, str1.scan(/[aeiou]/i).reverse.shift)\nend",
    "  vowels = []\n  str1.each_char do |char|\n    vowels << char if char =~ /[aeiou]/i\n  end\n  str1.each_char.with_index do |char, index|\n    str1[index] = vowels.pop if char =~ /[aeiou]/i\n  end\n  str1\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '#')\n       .tr('#', 'aeiou')\n       .tr('aeiou', vowels.reverse.join)\nend",
    "  vowels = \"aeiou\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '*')\n       .tr('*', vowels.reverse.join)\nend",
    "\tvowels = ['a','e','i','o','u']\n\tstr1 = str1.split('')\n\tvowels_index = []\n\tstr1.each_with_index do |char,index|\n\t\tif vowels.include? char\n\t\t\tvowels_index << index\n\t\tend\n\tend\n\tvowels_index.each_with_index do |vowel_index,index|\n\t\tstr1[vowel_index] = str1[vowels_index[vowels_index.length-1-index]]\n\tend\n\tstr1.join('')\nend",
    "  str1.gsub(/[aeiou]/i) { |match| match.reverse }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = []\n  str1.each_char do |char|\n    vowels << char if char =~ /[aeiou]/i\n  end\n  str1.each_char.with_index do |char, index|\n    str1[index] = vowels.pop if char =~ /[aeiou]/i\n  end\n  str1\nend",
    "  str1.gsub(/[aeiou]/i) { |m| m.reverse }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '#')\n       .tr('#', 'aeiou')\n       .tr('aeiou', vowels.reverse.join)\nend",
    "    vowels = \"aeiou\"\n    str1.chars.map { |char| vowels.include?(char.downcase) ? char.reverse : char }.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '*')\n      .tr('*', vowels.reverse.join)\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |c| vowels.include?(c) }.reverse.join\nend",
    "  vowels = \"aeiou\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "\tvowels = \"aeiouAEIOU\"\n\tstr1 = str1.split(\"\")\n\tvowels_pos = []\n\tstr1.each_with_index do |char, index|\n\t\tif vowels.include?(char)\n\t\t\tvowels_pos.push(index)\n\t\tend\n\tend\n\tvowels_pos.each_with_index do |vowel_pos, index|\n\t\tif index < vowels_pos.length/2\n\t\t\tstr1[vowel_pos], str1[vowels_pos[-index-1]] = str1[vowels_pos[-index-1]], str1[vowel_pos]\n\t\tend\n\tend\n\tstr1.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '#')\n      .tr('#', 'aeiou')\n      .tr('AEIOU', vowels.reverse.join)\nend",
    "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  str1 = str1.split(\"\")\n  str1.each_with_index do |char, index|\n    if vowels.include?(char.downcase)\n      str1[index] = str1[-index-1]\n      str1[-index-1] = char\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '#')\n    .tr('#', vowels.reverse.join)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '*')\n    .tr('*', vowels.reverse.join)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '#')\n    .tr('#', vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '#')\n       .tr('#', 'aeiou')\n       .tr('aeiou', vowels.reverse.join)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '#')\n       .tr('#', vowels.reverse.join)\nend",
    "  str1.gsub(/[aeiou]/i) { |match| match.reverse }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '#')\n    .tr('#', vowels.pop)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '*')\n      .tr('*', vowels.reverse.join)\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.each_with_index.inject(\"\") do |result, (char, index)|\n    if vowels.include?(char)\n      result.prepend(char)\n    else\n      result << char\n    end\n  end\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = 'aeiouAEIOU'\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend"
  ]
}