{
  "name": "mbpp_59_is_octagonal",
  "language": "rb",
  "prompt": "# Write a function to find the nth octagonal number.\ndef is_octagonal(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_octagonal\n    candidate = method(:is_octagonal)\n    assert_equal(65, candidate.call(5))\n    assert_equal(280, candidate.call(10))\n    assert_equal(645, candidate.call(15))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  octagonal_number = (Math.sqrt(8 * n + 1) + 1) / 3\n  octagonal_number == octagonal_number.to_i\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  x = (Math.sqrt(1 + 24 * n) + 1) / 6\n  x == x.to_i\nend",
    "  n = n.to_f\n  return ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  n = n.to_f\n  return (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  n = n.to_f\n  return (((1 + Math.sqrt(1 + 24 * n)) / 6) % 1).zero?\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  a = (Math.sqrt(24 * n + 1) + 1) / 6\n  a.to_i == a\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 == 9\n  return false if n % 10 == 8\n  return false if n % 10 == 7\n  return false if n % 10 == 6\n  return false if n % 10 == 5\n  return false if n % 10 == 4\n  return false if n % 10 == 3\n  return false if n % 10 == 2\n  return false if n % 10 == 1\n  return true\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  return false if n <= 0\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 9\n  return false if n % 9 != 0\n  return true if n == 64\n  return false if n % 64 != 0\n  return true if n == 625\n  return false if n % 625 != 0\n  return true if n == 7776\n  return false if n % 7776 != 0\n  return true if n == 117649\n  return false if n % 117649 != 0\n  return true if n == 2097152\n  return false if n % 2097152 != 0\n  return true if n == 43046721\n  return false if n % 43046721 != 0\n  return true if n == 100000000\n  return false if n % 100000000 != 0\n  return true if n == 285311670611\n  return false if n % 285311670611 != 0\n  return true if n == 8916100448256\n  return false if n % 8916100448256 != 0\n  return true if n == 302875106592253\n  return false if n % 302875106592253 != 0\n  return true if n == 11112006825558016\n  return false if n % 11112006825558016 != 0\n  return true if n == 437893890380859375\n  return false if n % 437893890380859375 != 0\n  return true if n == 18446744073709551616\n  return false if n % 18446744073709551616 != 0\n  return true if n == 827240261886336764177\n  return false if n % 827240261886336764177 != 0\n  return true if n == 39346408075296537575424\n  return false if n % 39346408075296537575424 != 0\n  return true if n == 191561942608236107294793378\n  return false if n % 191561942608236107294793378 != 0\n  return true if n == 96845441572216891613585500225\n  return false if n % 968454415722168916135855",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n == 40\n  return false if n % 100 != 0\n  return true if n == 400\n  return false if n % 1000 != 0\n  return true if n == 4000\n  return false if n % 10000 != 0\n  return true if n == 40000\n  return false if n % 100000 != 0\n  return true if n == 400000\n  return false if n % 1000000 != 0\n  return true if n == 4000000\n  return false if n % 10000000 != 0\n  return true if n == 40000000\n  return false if n % 100000000 != 0\n  return true if n == 400000000\n  return false if n % 1000000000 != 0\n  return true if n == 4000000000\n  return false if n % 10000000000 != 0\n  return true if n == 40000000000\n  return false if n % 100000000000 != 0\n  return true if n == 400000000000\n  return false if n % 1000000000000 != 0\n  return true if n == 4000000000000\n  return false if n % 10000000000000 != 0\n  return true if n == 40000000000000\n  return false if n % 100000000000000 != 0\n  return true if n == 400000000000000\n  return false if n % 1000000000000000 != 0\n  return true if n == 4000000000000000\n  return false if n % 10000000000000000 != 0\n  return true if n == 40000000000000000\n  return false if n % 100000000000000000 != 0\n  return true if n == 400000000000000000\n  return false if n % 1000000000000000000 != 0\n  return true if n == 4000000000000000000\n  return false if n % 10000000000000000000 != 0\n  return true if n == 40000000000000000000\n  return false if n % 100000000000000000000 != 0\n  return true if n == 400000000000000000000\n  return false if n % 1000000000000000000000 != 0\n  return true if n == 4000000000000000000000\n  return false if n % 10000000000000000000000 != 0\n  return true if n == 40000000000000000000000\n  return false if n % 100000000000000000000000 != 0\n  return true if n == 400000000000000000000000\n  return false if n % 1000000000000000000000000 != 0\n  return",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n.to_i == n\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  (1..Float::INFINITY).each do |i|\n    if i * (3 * i - 2) == n\n      return true\n    elsif i * (3 * i - 2) > n\n      return false\n    end\n  end\nend",
    "  x = (Math.sqrt(24 * n + 1) + 1) / 6\n  x == x.to_i\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  root = (Math.sqrt(1 + 24 * n) + 1) / 6\n  root == root.to_i\nend",
    "  a = (Math.sqrt(24 * n + 1) + 1) / 6\n  a == a.to_i\nend",
    "  return false if n < 0\n  root = (Math.sqrt(1 + 24 * n) + 1) / 6\n  root == root.to_i\nend",
    "  nth_octagonal = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth_octagonal == nth_octagonal.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  n = n.to_f\n  root = (1 + Math.sqrt(1 + 24 * n)) / 6\n  root == root.to_i\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  root = (1 + Math.sqrt(1 + 24 * n)) / 6\n  root == root.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  return false if n <= 0\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 9\n  return false if n % 9 != 0\n  return true if n == 64\n  return false if n % 64 != 0\n  return true if n == 729\n  return false if n % 729 != 0\n  return true if n == 4096\n  return false if n % 4096 != 0\n  return true if n == 15625\n  return false if n % 15625 != 0\n  return true if n == 46656\n  return false if n % 46656 != 0\n  return true if n == 117649\n  return false if n % 117649 != 0\n  return true if n == 262144\n  return false if n % 262144 != 0\n  return true if n == 531441\n  return false if n % 531441 != 0\n  return true if n == 1000000\n  return false if n % 1000000 != 0\n  return true if n == 1771561\n  return false if n % 1771561 != 0\n  return true if n == 2985984\n  return false if n % 2985984 != 0\n  return true if n == 4826809\n  return false if n % 4826809 != 0\n  return true if n == 7529536\n  return false if n % 7529536 != 0\n  return true if n == 11390625\n  return false if n % 11390625 != 0\n  return true if n == 16777216\n  return false if n % 16777216 != 0\n  return true if n == 24137569\n  return false if n % 24137569 != 0\n  return true if n == 34012224\n  return false if n % 34012224 != 0\n  return true if n == 47045881\n  return false if n % 47045881 != 0\n  return true if n == 64000000\n  return false if n % 64000000 != 0\n  return true if n == 85766121\n  return false if n % 85766121 != 0\n  return true if n == 113379904\n  return false if n % 113379904 != 0\n  return true if n == 148035889\n",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  return false if n <= 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  return false if n < 1\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  i = 1\n  while i < n\n    i += 1\n    if n == i * (3 * i - 2)\n      return true\n    end\n  end\n  return false\nend",
    "  return false if n < 1\n  n = Math.sqrt(2 * n + 1.0 / 4) - 1.0 / 2\n  n == n.to_i\nend",
    "  root = (1 + Math.sqrt(1 + 24 * n)) / 6\n  root == root.to_i\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth.to_i == nth\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  root = (1 + Math.sqrt(1 + 24 * n)) / 6\n  root == root.to_i\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  return false if n < 0\n  root = (Math.sqrt(1 + 24 * n) + 1) / 6\n  root == root.to_i\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  n = n.to_f\n  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  a = (Math.sqrt(1 + 24 * n) + 1) / 6\n  a == a.to_i\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n == 1\n  return true if n == 2\n  return false if n == 3\n  return true if n == 5\n  return false if n == 6\n  return true if n == 7\n  return false if n == 8\n  return true if n == 10\n  return false if n == 11\n  return true if n == 12\n  return false if n == 13\n  return true if n == 15\n  return false if n == 16\n  return true if n == 17\n  return false if n == 18\n  return true if n == 20\n  return false if n == 21\n  return true if n == 22\n  return false if n == 23\n  return true if n == 25\n  return false if n == 26\n  return true if n == 27\n  return false if n == 28\n  return true if n == 30\n  return false if n == 31\n  return true if n == 32\n  return false if n == 33\n  return true if n == 35\n  return false if n == 36\n  return true if n == 37\n  return false if n == 38\n  return true if n == 40\n  return false if n == 41\n  return true if n == 42\n  return false if n == 43\n  return true if n == 45\n  return false if n == 46\n  return true if n == 47\n  return false if n == 48\n  return true if n == 50\n  return false if n == 51\n  return true if n == 52\n  return false if n == 53\n  return true if n == 55\n  return false if n == 56\n  return true if n == 57\n  return false if n == 58\n  return true if n == 60\n  return false if n == 61\n  return true if n == 62\n  return false if n == 63\n  return true if n == 65\n  return false if n == 66\n  return true if n == 67\n  return false if n == 68\n  return true if n == 70\n  return false if n == 71\n  return true if n == 72\n  return false if n == 73\n  return true if n == 75\n  return false if n == 76\n  return true if n == 77",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n == 40\n  return false if n == 50\n  return true if n == 70\n  return false if n == 80\n  return true if n == 100\n  return false if n == 110\n  return true if n == 130\n  return false if n == 140\n  return true if n == 160\n  return false if n == 170\n  return true if n == 190\n  return false if n == 200\n  return true if n == 220\n  return false if n == 230\n  return true if n == 250\n  return false if n == 260\n  return true if n == 280\n  return false if n == 290\n  return true if n == 310\n  return false if n == 320\n  return true if n == 340\n  return false if n == 350\n  return true if n == 370\n  return false if n == 380\n  return true if n == 400\n  return false if n == 410\n  return true if n == 430\n  return false if n == 440\n  return true if n == 460\n  return false if n == 470\n  return true if n == 490\n  return false if n == 500\n  return true if n == 520\n  return false if n == 530\n  return true if n == 550\n  return false if n == 560\n  return true if n == 580\n  return false if n == 590\n  return true if n == 610\n  return false if n == 620\n  return true if n == 640\n  return false if n == 650\n  return true if n == 670\n  return false if n == 680\n  return true if n == 700\n  return false if n == 710\n  return true if n == 730\n  return false if n == 740\n  return true if n == 760\n  return false if n == 770\n  return true if n == 790\n  return false if n == 800\n  return true if n == 820\n  return false if n == 830\n  return true if n == 850\n  return false if n == 860\n  return true if n == 880\n  return false if n == 890\n  return true if n == 910\n  return false",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  a = (1 + Math.sqrt(1 + 24 * n)) / 6\n  a == a.to_i\nend",
    "  n = n.to_f\n  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  ((1 + Math.sqrt(1 + 12 * n)) / 6) % 1 == 0\nend",
    "  return false if n <= 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n.to_i == n\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth % 1 == 0\nend",
    "  octagonal_number = (Math.sqrt(24 * n + 1) + 1) / 6\n  octagonal_number.to_i == octagonal_number\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n == 10\n  return false if n % 100 != 0\n  return true if n == 100\n  return false if n % 1000 != 0\n  return true if n == 1000\n  return false if n % 10000 != 0\n  return true if n == 10000\n  return false if n % 100000 != 0\n  return true if n == 100000\n  return false if n % 1000000 != 0\n  return true if n == 1000000\n  return false if n % 10000000 != 0\n  return true if n == 10000000\n  return false if n % 100000000 != 0\n  return true if n == 100000000\n  return false if n % 1000000000 != 0\n  return true if n == 1000000000\n  return false if n % 10000000000 != 0\n  return true if n == 10000000000\n  return false if n % 100000000000 != 0\n  return true if n == 100000000000\n  return false if n % 1000000000000 != 0\n  return true if n == 1000000000000\n  return false if n % 10000000000000 != 0\n  return true if n == 10000000000000\n  return false if n % 100000000000000 != 0\n  return true if n == 100000000000000\n  return false if n % 1000000000000000 != 0\n  return true if n == 1000000000000000\n  return false if n % 10000000000000000 != 0\n  return true if n == 10000000000000000\n  return false if n % 100000000000000000 != 0\n  return true if n == 100000000000000000\n  return false if n % 1000000000000000000 != 0\n  return true if n == 1000000000000000000\n  return false if n % 10000000000000000000 != 0\n  return true if n == 10000000000000000000\n  return false if n % 100000000000000000000 != 0\n  return true if n == 100000000000000000000\n  return false if n % 1000000000000000000000 != 0\n  return true if n == 1000000000000000000000\n  return false if n % 10000000000000000000000 != 0\n  return true if n == 10000000000000000000000\n  return false if n % 100000000000000000000000 != 0\n  return true if n == 100000000000000000000000\n  return false if n % 1000000000000000000000000 != 0\n  return true if n",
    "  return false if n < 0\n  root = (Math.sqrt(1 + 24 * n) + 1) / 6\n  root == root.to_i\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  return false if n < 1\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  return false if n < 0\n  root = (Math.sqrt(1 + 24 * n) + 1) / 6\n  root == root.to_i\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  return false if n == 0\n  return true if n == 1\n  return false if n == 2",
    "  return false if n < 0\n  root = (Math.sqrt(1 + 24 * n) + 1) / 6\n  root == root.to_i\nend",
    "  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n == 1\n  return true if n == 2\n  return false if n == 3\n  return true if n == 5\n  return false if n == 6\n  return true if n == 7\n  return false if n == 8\n  return true if n == 10\n  return false if n == 11\n  return true if n == 12\n  return false if n == 13\n  return true if n == 15\n  return false if n == 16\n  return true if n == 17\n  return false if n == 18\n  return true if n == 20\n  return false if n == 21\n  return true if n == 22\n  return false if n == 23\n  return true if n == 25\n  return false if n == 26\n  return true if n == 27\n  return false if n == 28\n  return true if n == 30\n  return false if n == 31\n  return true if n == 32\n  return false if n == 33\n  return true if n == 35\n  return false if n == 36\n  return true if n == 37\n  return false if n == 38\n  return true if n == 40\n  return false if n == 41\n  return true if n == 42\n  return false if n == 43\n  return true if n == 45\n  return false if n == 46\n  return true if n == 47\n  return false if n == 48\n  return true if n == 50\n  return false if n == 51\n  return true if n == 52\n  return false if n == 53\n  return true if n == 55\n  return false if n == 56\n  return true if n == 57\n  return false if n == 58\n  return true if n == 60\n  return false if n == 61\n  return true if n == 62\n  return false if n == 63\n  return true if n == 65\n  return false if n == 66\n  return true if n == 67\n  return false if n == 68\n  return true if n == 70\n  return false if n == 71\n  return true if n == 72\n  return false if n == 73\n  return true if n == 75\n  return false if n == 76\n  return true if n == 77",
    "  (1 + Math.sqrt(1 + 24 * n)) / 6 % 1 == 0\nend",
    "  n = n.to_f\n  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  n = (Math.sqrt(24*n+1)+1)/6\n  n.to_i == n\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root.to_i == root\nend",
    "  root = (1 + Math.sqrt(1 + 24 * n)) / 6\n  root == root.to_i\nend",
    "  ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  root = Math.sqrt(1 + 24 * n)\n  return false if root != root.to_i\n  (1 + root) % 6 == 0\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  n = n.to_f\n  ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  root = (Math.sqrt(1 + 24 * n) + 1) / 6\n  root == root.to_i\nend",
    "  return false if n < 0\n  nth_root = Math.sqrt(n)\n  nth_root == nth_root.to_i\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n.to_s.length > 10\n  return false if n.to_s.length < 6\n  return false if n.to_s[0] != '1'\n  return false if n.to_s[-1] != '9'\n  return false if n.to_s[-2] != '8'\n  return false if n.to_s[-3] != '7'\n  return false if n.to_s[-4] != '6'\n  return false if n.to_s[-5] != '5'\n  return false if n.to_s[-6] != '4'\n  return false if n.to_s[-7] != '3'\n  return false if n.to_s[-8] != '2'\n  return true\nend",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 9\n  return false if n % 64 != 9\n  return true if n == 65\n  return false if n % 512 != 65\n  return true if n == 577\n  return false if n % 4096 != 577\n  return true if n == 4481\n  return false if n % 32768 != 4481\n  return true if n == 35809\n  return false if n % 262144 != 35809\n  return true if n == 284481\n  return false if n % 2097152 != 284481\n  return true if n == 2284657\n  return false if n % 16777216 != 2284657\n  return true if n == 18454929\n  return false if n % 134217728 != 18454929\n  return true if n == 153377601\n  return false if n % 1073741824 != 153377601\n  return true if n == 1288490189\n  return false if n % 8589934592 != 1288490189\n  return true if n == 10995116277\n  return false if n % 68719476736 != 10995116277\n  return true if n == 94143178827\n  return false if n % 549755813888 != 94143178827\n  return true if n == 803181019057\n  return false if n % 4398046511104 != 803181019057\n  return true if n == 6871947673599\n  return false if n % 35184372088832 != 6871947673599\n  return true if n == 59029581035831\n  return false if n % 281474976710656 != 59029581035831\n  return true if n == 507060240091289\n  return false if n % 2251799813685248 != 507060240091289\n  return true if n == 439804651110581\n  return false if n % 18014398509481984 != 439804651110581\n  return true if n == 3814697265625001\n  return false if n %",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  n = n.to_f\n  return ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  # n = (3 * x**2 - 2 * x) / 2\n  # 3 * x**2 - 2 * x - 2 * n = 0\n  # x = (2 + sqrt(4 + 12 * n)) / 6\n  # x = (2 - sqrt(4 + 12 * n)) / 6\n  # x = (2 + sqrt(4 + 12 * n)) / 6\n  # x = (2 - sqrt(4 + 12 * n)) / 6\n  # x = (2 + sqrt(4 + 12 * n)) / 6\n  # x = (2 - sqrt(4 + 12 * n)) / 6\n  # x = (2 + sqrt(4 + 12 * n)) / 6\n  # x = (2 - sqrt(4 + 12 * n)) / 6\n  # x = (2 + sqrt(4 + 12 * n)) / 6\n  # x = (2 - sqrt(4 + 12 * n)) / 6\n  # x = (2 + sqrt(4 + 12 * n)) / 6\n  # x = (2 - sqrt(4 + 12 * n)) / 6\n  # x = (2 + sqrt(4 + 12 * n)) / 6\n  # x = (2 - sqrt(4 + 12 * n)) / 6\n  # x = (2 + sqrt(4 + 12 * n)) / 6\n  # x = (2 - sqrt(4 + 12 * n)) / 6\n  # x = (2 + sqrt(4 + 12 * n)) / 6\n  # x = (2 - sqrt(4 + 12 * n)) / 6\n  # x = (2 + sqrt(4 + 12 * n)) / 6\n  # x = (2 - sqrt(4 + 12 * n)) / 6\n  # x = (2 + sqrt(4 + 12 * n)) / 6\n  # x = (2 - sqrt(4 + 12 * n)) / 6\n  # x = (2 + sqrt(4 + 12 * n)) / 6\n  # x = (2 - sqrt(4 + 12 * n)) / 6\n  # x = (2 + sqrt(4 + 12 * n)) / 6\n",
    "  return false if n <= 0\n  r = Math.sqrt(n * 2)\n  return r == r.to_i\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  (Math.sqrt(24 * n + 1) + 1) % 6 == 0\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 == 0\n  return true if n % 10 == 1\n  return false if n % 10 == 2\n  return true if n % 10 == 5\n  return false if n % 10 == 6\n  return true if n % 10 == 7\n  return false if n % 10 == 8\n  return true if n % 10 == 9\n  return false\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  n = n.to_f\n  a = (Math.sqrt(1 + 24 * n) + 1) / 6\n  a == a.to_i\nend",
    "  return false if n < 0\n  return false if n == 0\n  return true if n == 1\n  return false if n == 2\n  return true if n == 3\n  return false if n == 4\n  return true if n == 5\n  return false if n == 6\n  return true if n == 7\n  return false if n == 8\n  return true if n == 9\n  return false if n == 10\n  return true if n == 11\n  return false if n == 12\n  return true if n == 13\n  return false if n == 14\n  return true if n == 15\n  return false if n == 16\n  return true if n == 17\n  return false if n == 18\n  return true if n == 19\n  return false if n == 20\n  return true if n == 21\n  return false if n == 22\n  return true if n == 23\n  return false if n == 24\n  return true if n == 25\n  return false if n == 26\n  return true if n == 27\n  return false if n == 28\n  return true if n == 29\n  return false if n == 30\n  return true if n == 31\n  return false if n == 32\n  return true if n == 33\n  return false if n == 34\n  return true if n == 35\n  return false if n == 36\n  return true if n == 37\n  return false if n == 38\n  return true if n == 39\n  return false if n == 40\n  return true if n == 41\n  return false if n == 42\n  return true if n == 43\n  return false if n == 44\n  return true if n == 45\n  return false if n == 46\n  return true if n == 47\n  return false if n == 48\n  return true if n == 49\n  return false if n == 50\n  return true if n == 51\n  return false if n == 52\n  return true if n == 53\n  return false if n == 54\n  return true if n == 55\n  return false if n == 56\n  return true if n == 57\n  return false if n == 58\n  return true if n == 59\n  return false if n == 60\n  return true if n == 61\n  return false if n == 62",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root.to_i == root\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  (1..Float::INFINITY).each do |i|\n    return true if n == i * (3 * i - 2)\n    return false if i * (3 * i - 2) > n\n  end\nend",
    "  n = n.to_f\n  return ((Math.sqrt(24*n+1)+1)/6) % 1 == 0\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  (1..Float::INFINITY).each do |i|\n    return true if n == i * (3 * i - 2)\n    return false if n < i * (3 * i - 2)\n  end\nend",
    "  ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  n = n.to_f\n  return ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  ((Math.sqrt(24*n+1)+1)/6) % 1 == 0\nend",
    "  return false if n < 0\n  return false if n == 0\n  return true if n == 1\n  return false if n == 2\n  return true if n == 3\n  return false if n == 4\n  return true if n == 5\n  return false if n == 6\n  return true if n == 7\n  return false if n == 8\n  return true if n == 9\n  return false if n == 10\n  return true if n == 11\n  return false if n == 12\n  return true if n == 13\n  return false if n == 14\n  return true if n == 15\n  return false if n == 16\n  return true if n == 17\n  return false if n == 18\n  return true if n == 19\n  return false if n == 20\n  return true if n == 21\n  return false if n == 22\n  return true if n == 23\n  return false if n == 24\n  return true if n == 25\n  return false if n == 26\n  return true if n == 27\n  return false if n == 28\n  return true if n == 29\n  return false if n == 30\n  return true if n == 31\n  return false if n == 32\n  return true if n == 33\n  return false if n == 34\n  return true if n == 35\n  return false if n == 36\n  return true if n == 37\n  return false if n == 38\n  return true if n == 39\n  return false if n == 40\n  return true if n == 41\n  return false if n == 42\n  return true if n == 43\n  return false if n == 44\n  return true if n == 45\n  return false if n == 46\n  return true if n == 47\n  return false if n == 48\n  return true if n == 49\n  return false if n == 50\n  return true if n == 51\n  return false if n == 52\n  return true if n == 53\n  return false if n == 54\n  return true if n == 55\n  return false if n == 56\n  return true if n == 57\n  return false if n == 58\n  return true if n == 59\n  return false if n == 60\n  return true if n == 61\n  return false if n == 62",
    "  n = (Math.sqrt(1 + 24 * n) + 1) / 6\n  n.to_i == n\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth.to_i == nth\nend",
    "  (Math.sqrt(24 * n + 1) + 1) % 6 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 3 != 1\n  return true if n % 3 == 1\nend",
    "  root = (Math.sqrt(1 + 24 * n) + 1) / 6\n  root == root.to_i\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return false if n <= 0\n  return true if n == 1\n  return false if n % 8 != 1\n  return true if n == 9\n  return false if n % 9 != 0\n  return true if n == 64\n  return false if n % 64 != 0\n  return true if n == 625\n  return false if n % 625 != 0\n  return true if n == 7776\n  return false if n % 7776 != 0\n  return true if n == 117649\n  return false if n % 117649 != 0\n  return true if n == 2097152\n  return false if n % 2097152 != 0\n  return true if n == 43046721\n  return false if n % 43046721 != 0\n  return true if n == 100000000\n  return false if n % 100000000 != 0\n  return true if n == 285311670611\n  return false if n % 285311670611 != 0\n  return true if n == 8916100448256\n  return false if n % 8916100448256 != 0\n  return true if n == 302875106592253\n  return false if n % 302875106592253 != 0\n  return true if n == 11112006825558016\n  return false if n % 11112006825558016 != 0\n  return true if n == 437893890380859375\n  return false if n % 437893890380859375 != 0\n  return true if n == 18446744073709551616\n  return false if n % 18446744073709551616 != 0\n  return true if n == 827240261886336764177\n  return false if n % 827240261886336764177 != 0\n  return true if n == 39346408075296537575424\n  return false if n % 39346408075296537575424 != 0\n  return true if n == 1915619426082361072947933\n  return false if n % 1915619426082361072947933 != 0\n  return true if n == 96845441572298368029702528\n  return false if n % 96845441572298368029702528 != 0",
    "  return false if n < 0\n  r = Math.sqrt(n)\n  return false if r % 1 != 0\n  r % 6 == 5\nend",
    "  root = (1 + Math.sqrt(1 + 24 * n)) / 6\n  root == root.to_i\nend",
    "  return false if n < 1\n  root = (Math.sqrt(24*n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  return ((Math.sqrt(24*n+1)+1)/6).to_i == ((Math.sqrt(24*n+1)+1)/6)\nend",
    "  return false if n < 1\n  a = (Math.sqrt(24 * n + 1) + 1) / 6\n  a == a.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  (1..Float::INFINITY).each do |i|\n    return true if n == i * (3 * i - 2)\n    return false if n < i * (3 * i - 2)\n  end\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  n = n.to_f\n  ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 8 != 0\n  return true if n % 8 == 0\n  return false\nend",
    "  n = n.to_f\n  ((Math.sqrt(24 * n + 1) + 1) / 6).to_i == ((Math.sqrt(24 * n + 1) + 1) / 6)\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return true if (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\n  false\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 == 0\n  return true if n % 10 == 1\n  return false if n % 10 == 2\n  return true if n % 10 == 3\n  return false if n % 10 == 4\n  return true if n % 10 == 5\n  return false if n % 10 == 6\n  return true if n % 10 == 7\n  return false if n % 10 == 8\n  return true if n % 10 == 9\nend",
    "  (1..Float::INFINITY).each do |i|\n    return true if n == i * (3 * i - 2)\n    return false if n < i * (3 * i - 2)\n  end\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n.to_i == n\nend",
    "  (1..Float::INFINITY).each do |i|\n    return true if n == i * (3 * i - 2)\n    return false if n < i * (3 * i - 2)\n  end\nend",
    "  return ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n == 10\n  return false if n % 100 != 0\n  return true if n == 100\n  return false if n % 1000 != 0\n  return true if n == 1000\n  return false if n % 10000 != 0\n  return true if n == 10000\n  return false if n % 100000 != 0\n  return true if n == 100000\n  return false if n % 1000000 != 0\n  return true if n == 1000000\n  return false if n % 10000000 != 0\n  return true if n == 10000000\n  return false if n % 100000000 != 0\n  return true if n == 100000000\n  return false if n % 1000000000 != 0\n  return true if n == 1000000000\n  return false if n % 10000000000 != 0\n  return true if n == 10000000000\n  return false if n % 100000000000 != 0\n  return true if n == 100000000000\n  return false if n % 1000000000000 != 0\n  return true if n == 1000000000000\n  return false if n % 10000000000000 != 0\n  return true if n == 10000000000000\n  return false if n % 100000000000000 != 0\n  return true if n == 100000000000000\n  return false if n % 1000000000000000 != 0\n  return true if n == 1000000000000000\n  return false if n % 10000000000000000 != 0\n  return true if n == 10000000000000000\n  return false if n % 100000000000000000 != 0\n  return true if n == 100000000000000000\n  return false if n % 1000000000000000000 != 0\n  return true if n == 1000000000000000000\n  return false if n % 10000000000000000000 != 0\n  return true if n == 10000000000000000000\n  return false if n % 100000000000000000000 != 0\n  return true if n == 100000000000000000000\n  return false if n % 1000000000000000000000 != 0\n  return true if n == 1000000000000000000000\n  return false if n % 10000000000000000000000 != 0\n  return true if n == 10000000000000000000000\n  return false if n % 100000000000000000000000 != 0\n  return true if n == 100000000000000000000000\n  return false if n % 1000000000000000000000000 != 0\n  return true if n",
    "  n = n.to_f\n  return ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend"
  ]
}