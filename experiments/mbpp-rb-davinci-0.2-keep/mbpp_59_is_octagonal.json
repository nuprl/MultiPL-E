{
  "name": "mbpp_59_is_octagonal",
  "language": "rb",
  "prompt": "# Write a function to find the nth octagonal number.\ndef is_octagonal(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_octagonal\n    candidate = method(:is_octagonal)\n    assert_equal(65, candidate.call(5))\n    assert_equal(280, candidate.call(10))\n    assert_equal(645, candidate.call(15))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  octagonal_number = (Math.sqrt(8 * n + 1) + 1) / 3\n  octagonal_number == octagonal_number.to_i\nend",
    "  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  x = (Math.sqrt(1 + 24 * n) + 1) / 6\n  x == x.to_i\nend",
    "  n = n.to_f\n  return ((1 + Math.sqrt(1 + 24 * n)) / 6) % 1 == 0\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  n = n.to_f\n  return (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  nth = (Math.sqrt(24 * n + 1) + 1) / 6\n  nth == nth.to_i\nend",
    "  return false if n < 0\n  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  root = (Math.sqrt(24 * n + 1) + 1) / 6\n  root == root.to_i\nend",
    "  n = n.to_f\n  return (((1 + Math.sqrt(1 + 24 * n)) / 6) % 1).zero?\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 24 * n) + 1) / 6) % 1 == 0\nend",
    "  a = (Math.sqrt(24 * n + 1) + 1) / 6\n  a.to_i == a\nend",
    "  n = (Math.sqrt(24 * n + 1) + 1) / 6\n  n == n.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 == 9\n  return false if n % 10 == 8\n  return false if n % 10 == 7\n  return false if n % 10 == 6\n  return false if n % 10 == 5\n  return false if n % 10 == 4\n  return false if n % 10 == 3\n  return false if n % 10 == 2\n  return false if n % 10 == 1\n  return true\nend",
    "  nth = (Math.sqrt(1 + 24 * n) + 1) / 6\n  nth == nth.to_i\nend",
    "  ((Math.sqrt(24 * n + 1) + 1) / 6) % 1 == 0\nend"
  ]
}