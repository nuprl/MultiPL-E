{
  "name": "mbpp_390_add_string",
  "language": "rb",
  "prompt": "# Write a function to apply a given format string to all of the elements in a list.\ndef add_string(list_, string)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_string\n    candidate = method(:add_string)\n    assert_equal([\"temp1\", \"temp2\", \"temp3\", \"temp4\"], candidate.call([1, 2, 3, 4], \"temp{0}\"))\n    assert_equal([\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"], candidate.call([\"a\", \"b\", \"c\", \"d\"], \"python{0}\"))\n    assert_equal([\"string5\", \"string6\", \"string7\", \"string8\"], candidate.call([5, 6, 7, 8], \"string{0}\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  list_.map { |x| x + string }\nend",
    "  list_.map { |e| string + e.to_s }\nend",
    "  list_.map { |item| item.to_s + string }\nend",
    "  list_.map { |e| e.to_s + string }\nend",
    "  list_.map { |e| e.to_s + string }\nend",
    "  list_.map { |e| e.to_s + string }\nend",
    "  list_.map { |x| string + x.to_s }\nend",
    "  list_.map { |x| string % x }\nend",
    "  list_.map { |element| string + element.to_s }\nend",
    "  list_.map { |x| x.to_s + string }\nend",
    "  list_.map { |e| string + e.to_s }\nend",
    "  list_.map { |x| string + x.to_s }\nend",
    "  list_.map { |x| \"#{string}#{x}\" }\nend",
    "  list_.map { |item| item.to_s + string }\nend",
    "  list_.map { |x| string + x.to_s }\nend",
    "  list_.map { |e| string % e }\nend",
    "  list_.map { |elem| string + elem.to_s }\nend",
    "  list_.map { |x| string + x.to_s }\nend",
    "  list_.map { |item| item.to_s + string }\nend",
    "  list_.map { |x| string + x.to_s }\nend"
  ]
}