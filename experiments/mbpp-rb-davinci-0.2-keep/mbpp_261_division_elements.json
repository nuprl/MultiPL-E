{
  "name": "mbpp_261_division_elements",
  "language": "rb",
  "prompt": "# Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\ndef division_elements(test_tup1, test_tup2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_division_elements\n    candidate = method(:division_elements)\n    assert_equal([2, 2, 2, 3], candidate.call([10, 4, 6, 9], [5, 2, 3, 3]))\n    assert_equal([2, 2, 2, 4], candidate.call([12, 6, 8, 16], [6, 3, 4, 4]))\n    assert_equal([4, 2, 6, 2], candidate.call([20, 14, 36, 18], [5, 7, 6, 9]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x.to_f / y.to_f }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map {|x, y| x / y}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x.to_f / y.to_f }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element / test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x.to_f / y.to_f }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x.to_f / y.to_f }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |a, b| a / b }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  # Write your code here\n  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x.to_f / y }\nend",
    "  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element / test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  # Write your code here\n  result = []\n  test_tup1.each_with_index do |value, index|\n    result << value / test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  # Write your code here\n  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x.to_f / y.to_f }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x.to_f / y.to_f }\nend",
    "  test_tup1.zip(test_tup2).map {|x, y| x / y}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x.to_f / y.to_f }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x.to_f / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x.to_f / y.to_f }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x.to_f / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map {|x, y| x.to_f / y.to_f}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  result = []\n  test_tup1.each_with_index do |num, index|\n    result << num / test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  # Write your code here\n  test_tup1.zip(test_tup2).map {|x, y| x.to_f / y.to_f}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x.to_f / y }\nend",
    "  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element / test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  result = []\n  test_tup1.each_with_index do |num, index|\n    result << num / test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  # Write your code here\n  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  result = []\n  test_tup1.each_with_index do |num, index|\n    result << num / test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element / test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  # Write your code here\n  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x.to_f / y }\nend",
    "  test_tup1.zip(test_tup2).map { |a, b| a / b }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map {|x, y| x / y}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map {|x, y| x / y}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  result = []\n  test_tup1.each_with_index do |element, index|\n    result << element / test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map {|x, y| x.to_f / y.to_f}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  result = []\n  test_tup1.each_with_index do |e, i|\n    result << e / test_tup2[i]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |num, index|\n    result << num / test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |a, b| a.to_f / b }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x.to_f / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x / y }\nend"
  ]
}