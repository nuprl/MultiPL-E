{
  "name": "mbpp_809_check_smaller",
  "language": "rb",
  "prompt": "# Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef check_smaller(test_tup1, test_tup2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_smaller\n    candidate = method(:check_smaller)\n    assert_equal(false, candidate.call([1, 2, 3], [2, 3, 4]))\n    assert_equal(true, candidate.call([4, 5, 6], [3, 4, 5]))\n    assert_equal(true, candidate.call([11, 12, 13], [10, 11, 12]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  for i in 0...test_tup1.length\n    if test_tup1[i] < test_tup2[i]\n      return true\n    end\n  end\n  return false\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).map{|x,y| x < y}\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.length == test_tup2.length\n    for i in 0..test_tup1.length-1\n      if test_tup1[i] > test_tup2[i]\n        return true\n      else\n        return false\n      end\n    end\n  else\n    return false\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.length != test_tup2.length\n    return false\n  end\n  for i in 0..test_tup1.length-1\n    if test_tup1[i] <= test_tup2[i]\n      return false\n    end\n  end\n  return true\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.length == test_tup2.length\n    for i in 0...test_tup1.length\n      if test_tup1[i] < test_tup2[i]\n        puts \"#{test_tup2[i]} is smaller than #{test_tup1[i]}\"\n      else\n        puts \"#{test_tup2[i]} is not smaller than #{test_tup1[i]}\"\n      end\n    end\n  else\n    puts \"Tuples are not of same length\"\n  end\nend",
    "  if test_tup1.length != test_tup2.length\n    return false\n  end\n  for i in 0..test_tup1.length-1\n    if test_tup1[i] <= test_tup2[i]\n      return false\n    end\n  end\n  return true\nend",
    "  test_tup1.zip(test_tup2).each do |x, y|\n    if x > y\n      return true\n    else\n      return false\n    end\n  end\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x < y }\nend",
    "  test_tup1.zip(test_tup2).map { |x,y| x < y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).map{|x,y| x < y}\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.size != test_tup2.size\n    puts \"Tuples are not of same size\"\n    return\n  end\n  for i in 0..test_tup1.size-1\n    if test_tup1[i] < test_tup2[i]\n      puts \"True\"\n    else\n      puts \"False\"\n    end\n  end\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y }\nend",
    "  if test_tup1.size == test_tup2.size\n    for i in 0...test_tup1.size\n      if test_tup1[i] > test_tup2[i]\n        puts \"#{test_tup2[i]} is smaller than #{test_tup1[i]}\"\n      else\n        puts \"#{test_tup2[i]} is not smaller than #{test_tup1[i]}\"\n      end\n    end\n  else\n    puts \"Tuples are not of same size\"\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |a, b| a > b }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.length == test_tup2.length\n    test_tup1.each_with_index do |value, index|\n      if value > test_tup2[index]\n        puts \"True\"\n      else\n        puts \"False\"\n      end\n    end\n  else\n    puts \"False\"\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.length == test_tup2.length\n    for i in 0..test_tup1.length-1\n      if test_tup1[i] > test_tup2[i]\n        puts \"#{test_tup2[i]} is smaller than #{test_tup1[i]}\"\n      else\n        puts \"#{test_tup2[i]} is not smaller than #{test_tup1[i]}\"\n      end\n    end\n  else\n    puts \"Tuples are not of same length\"\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y }.all?\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.size != test_tup2.size\n    return false\n  end\n  for i in 0..test_tup1.size-1\n    if test_tup1[i] <= test_tup2[i]\n      return false\n    end\n  end\n  return true\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  for i in 0..test_tup1.length-1\n    if test_tup1[i] < test_tup2[i]\n      puts \"True\"\n    else\n      puts \"False\"\n    end\n  end\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y }\nend",
    "  if test_tup1.size != test_tup2.size\n    puts \"Tuples are not of same size\"\n  else\n    for i in 0..test_tup1.size-1\n      if test_tup1[i] < test_tup2[i]\n        puts \"True\"\n      else\n        puts \"False\"\n      end\n    end\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.length == test_tup2.length\n    for i in 0..test_tup1.length-1\n      if test_tup1[i] < test_tup2[i]\n        return true\n      else\n        return false\n      end\n    end\n  else\n    return false\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.size == test_tup2.size\n    for i in 0..test_tup1.size-1\n      if test_tup1[i] < test_tup2[i]\n        return true\n      else\n        return false\n      end\n    end\n  else\n    return false\n  end\nend",
    "  test_tup1.zip(test_tup2).each do |x, y|\n    if x > y\n      puts \"#{y} is smaller than #{x}\"\n    else\n      puts \"#{y} is not smaller than #{x}\"\n    end\n  end\nend",
    "  if test_tup1.length != test_tup2.length\n    return false\n  end\n  for i in 0..test_tup1.length-1\n    if test_tup1[i] < test_tup2[i]\n      return false\n    end\n  end\n  return true\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).map { |a, b| a > b }\nend",
    "  if test_tup1.length != test_tup2.length\n    puts \"The tuples are not of the same length\"\n  else\n    for i in 0..test_tup1.length-1\n      if test_tup1[i] < test_tup2[i]\n        puts \"The element #{test_tup2[i]} in the second tuple is smaller than the element #{test_tup1[i]} in the first tuple\"\n      else\n        puts \"The element #{test_tup2[i]} in the second tuple is not smaller than the element #{test_tup1[i]} in the first tuple\"\n      end\n    end\n  end\nend",
    "  result = []\n  test_tup1.each_with_index do |value, index|\n    if value > test_tup2[index]\n      result << true\n    else\n      result << false\n    end\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x < y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  for i in 0...test_tup1.length\n    if test_tup1[i] < test_tup2[i]\n      return true\n    else\n      return false\n    end\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  for i in 0..test_tup1.length\n    if test_tup1[i] < test_tup2[i]\n      puts \"True\"\n    else\n      puts \"False\"\n    end\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |a, b| a > b }\nend",
    "  if test_tup1.size == test_tup2.size\n    for i in 0...test_tup1.size\n      if test_tup1[i] < test_tup2[i]\n        puts \"Element #{test_tup1[i]} is smaller than #{test_tup2[i]}\"\n      else\n        puts \"Element #{test_tup1[i]} is not smaller than #{test_tup2[i]}\"\n      end\n    end\n  else\n    puts \"Tuples are not of same size\"\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.length != test_tup2.length\n    puts \"The two tuples are not of same length\"\n  else\n    for i in 0..test_tup1.length-1\n      if test_tup1[i] < test_tup2[i]\n        puts \"#{test_tup2[i]} is smaller than #{test_tup1[i]}\"\n      else\n        puts \"#{test_tup1[i]} is smaller than #{test_tup2[i]}\"\n      end\n    end\n  end\nend",
    "  test_tup1.zip(test_tup2).all? {|x,y| x > y}\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.length == test_tup2.length\n    for i in 0..test_tup1.length\n      if test_tup1[i] > test_tup2[i]\n        puts \"Element #{test_tup1[i]} is greater than #{test_tup2[i]}\"\n      else\n        puts \"Element #{test_tup1[i]} is smaller than #{test_tup2[i]}\"\n      end\n    end\n  else\n    puts \"Tuples are not of same length\"\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  for i in 0..test_tup1.length\n    if test_tup1[i] > test_tup2[i]\n      return false\n    end\n  end\n  return true\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.length == test_tup2.length\n    test_tup1.each_with_index do |value, index|\n      if value > test_tup2[index]\n        puts \"Element #{value} at index #{index} is greater than #{test_tup2[index]}\"\n      else\n        puts \"Element #{value} at index #{index} is smaller than #{test_tup2[index]}\"\n      end\n    end\n  else\n    puts \"Tuples are not of same length\"\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.size == test_tup2.size\n    test_tup1.zip(test_tup2).each do |x, y|\n      if x < y\n        puts \"#{x} is smaller than #{y}\"\n      else\n        puts \"#{x} is not smaller than #{y}\"\n      end\n    end\n  else\n    puts \"Tuples are not of same size\"\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? {|x, y| x > y}\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  for i in 0..test_tup1.length-1\n    if test_tup1[i] < test_tup2[i]\n      return false\n    end\n  end\n  return true\nend",
    "  if test_tup1.length == test_tup2.length\n    for i in 0..test_tup1.length-1\n      if test_tup1[i] > test_tup2[i]\n        puts \"True\"\n      else\n        puts \"False\"\n      end\n    end\n  else\n    puts \"Tuples are not of same length\"\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y }.all?\nend",
    "  if test_tup1.length == test_tup2.length\n    test_tup1.each_with_index do |val, index|\n      if val > test_tup2[index]\n        puts \"#{test_tup2[index]} is smaller than #{val}\"\n      else\n        puts \"#{test_tup2[index]} is not smaller than #{val}\"\n      end\n    end\n  else\n    puts \"Tuples are not of same length\"\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  for i in 0..test_tup1.length-1\n    if test_tup1[i] < test_tup2[i]\n      puts \"#{test_tup2[i]} is smaller than #{test_tup1[i]}\"\n    else\n      puts \"#{test_tup1[i]} is smaller than #{test_tup2[i]}\"\n    end\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? {|x,y| x > y}\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.length != test_tup2.length\n    return false\n  end\n  for i in 0..test_tup1.length-1\n    if test_tup1[i] <= test_tup2[i]\n      return false\n    end\n  end\n  return true\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? {|x,y| x > y}\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.size == test_tup2.size\n    for i in 0...test_tup1.size\n      if test_tup1[i] < test_tup2[i]\n        puts \"#{test_tup2[i]} is smaller than #{test_tup1[i]}\"\n      else\n        puts \"#{test_tup2[i]} is not smaller than #{test_tup1[i]}\"\n      end\n    end\n  else\n    puts \"Tuples are of different size\"\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  # Write your code here\n  if test_tup1.size != test_tup2.size\n    return false\n  end\n  for i in 0..test_tup1.size-1\n    if test_tup1[i] <= test_tup2[i]\n      return false\n    end\n  end\n  return true\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| y < x }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y }.all?\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y }\nend",
    "  for i in 0...test_tup1.length\n    if test_tup1[i] < test_tup2[i]\n      puts \"True\"\n    else\n      puts \"False\"\n    end\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.length != test_tup2.length\n    return false\n  end\n  for i in 0...test_tup1.length\n    if test_tup1[i] <= test_tup2[i]\n      return false\n    end\n  end\n  return true\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  for i in 0..test_tup1.length-1\n    if test_tup1[i] < test_tup2[i]\n      puts \"True\"\n    else\n      puts \"False\"\n    end\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.length != test_tup2.length\n    puts \"Tuples are not of same length\"\n  else\n    test_tup1.each_with_index do |val, index|\n      if val > test_tup2[index]\n        puts \"Element at index #{index} of first tuple is greater than element at index #{index} of second tuple\"\n      end\n    end\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.length != test_tup2.length\n    return false\n  end\n  for i in 0..test_tup1.length-1\n    if test_tup1[i] <= test_tup2[i]\n      return false\n    end\n  end\n  return true\nend",
    "  for i in 0..test_tup1.length-1\n    if test_tup1[i] < test_tup2[i]\n      puts \"Element #{test_tup2[i]} is smaller than #{test_tup1[i]}\"\n    else\n      puts \"Element #{test_tup2[i]} is not smaller than #{test_tup1[i]}\"\n    end\n  end\nend",
    "  test_tup1.zip(test_tup2).all? {|x,y| x > y}\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y }.all?\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? {|x,y| x > y}\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).each { |x, y| puts \"#{x} is smaller than #{y}\" if x < y }\nend",
    "  if test_tup1.length != test_tup2.length\n    puts \"The two tuples are not of same length\"\n  else\n    for i in 0...test_tup1.length\n      if test_tup1[i] < test_tup2[i]\n        puts \"The element #{test_tup2[i]} in the second tuple is smaller than #{test_tup1[i]} in the first tuple\"\n      else\n        puts \"The element #{test_tup2[i]} in the second tuple is not smaller than #{test_tup1[i]} in the first tuple\"\n      end\n    end\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.size == test_tup2.size\n    test_tup1.zip(test_tup2).all? { |x, y| x > y }\n  else\n    puts \"Tuples are not of same size\"\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).map {|x,y| x > y}\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.size == test_tup2.size\n    for i in 0..test_tup1.size-1\n      if test_tup1[i] > test_tup2[i]\n        return true\n      else\n        return false\n      end\n    end\n  else\n    return false\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.size == test_tup2.size\n    test_tup1.zip(test_tup2).map { |x, y| x < y }\n  else\n    puts \"Tuples are not of same size\"\n  end\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all?{|x,y| x > y}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y }.all?\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  test_tup1.zip(test_tup2).all? { |x, y| x > y }\nend",
    "  if test_tup1.length == test_tup2.length\n    for i in 0..test_tup1.length-1\n      if test_tup1[i] < test_tup2[i]\n        puts \"#{test_tup1[i]} is smaller than #{test_tup2[i]}\"\n      else\n        puts \"#{test_tup1[i]} is not smaller than #{test_tup2[i]}\"\n      end\n    end\n  else\n    puts \"Tuples are not of same length\"\n  end\nend",
    "  if test_tup1.size != test_tup2.size\n    puts \"Tuples are not of same size\"\n    return\n  end\n  for i in 0..test_tup1.size-1\n    if test_tup1[i] < test_tup2[i]\n      puts \"Element #{i+1} of tuple 1 is smaller than element #{i+1} of tuple 2\"\n    else\n      puts \"Element #{i+1} of tuple 1 is not smaller than element #{i+1} of tuple 2\"\n    end\n  end\nend"
  ]
}