{
  "name": "mbpp_430_parabola_directrix",
  "language": "rb",
  "prompt": "# Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parabola_directrix\n    candidate = method(:parabola_directrix)\n    assert_equal(-198, candidate.call(5, 3, 2))\n    assert_equal(-2336, candidate.call(9, 8, 4))\n    assert_equal(-130, candidate.call(2, 4, 6))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  -b / (2 * a)\nend",
    "  -(b**2 - 4*a*c)/(4*a)\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -(b.to_f / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b**2 - 4*a*c) / (4*a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -(c - b**2 / (4 * a)) / a\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b**2 - 4*a*c) / (4*a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b**2 - 4*a*c)/(4*a)\nend",
    "  # y = -(a/b)x - (c/b)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b",
    "  -c / b\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -(b**2 - 4*a*c)/(4*a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  # TODO: Return the directrix of a parabola defined by the equation:\n  # y = ax^2 + bx + c\n  return (-b / (2 * a))\nend",
    "  -(b**2 - 4*a*c)/(4*a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -c / b\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b**2 - 4*a*c) / (4*a)\nend",
    "  -(b**2 - 4*a*c)/(4*a)\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b**2 - 4*a*c)/(4*a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b**2 - 4*a*c)/(4*a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b.to_f / (2 * a))\nend",
    "  -(b**2 - 4 * a * c) / (4 * a)\nend",
    "  -(b**2 - 4*a*c)/(4*a)\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  # Write your code here.\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -(b**2 - 4*a*c) / (4*a)\nend",
    "  -(b.to_f / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b**2 - 4*a*c) / (4*a)\nend",
    "  -(b**2 - 4*a*c) / (4*a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  return -b / (2 * a)\nend",
    "  -(b**2 - 4*a*c) / (4*a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -(b**2 - 4*a*c) / (4*a)\nend",
    "  -(b**2 - 4*a*c) / (4*a)\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  # TODO: return the directrix\n  -c/b\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b**2 - 4*a*c) / (4*a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  return -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b**2 - 4*a*c)/(4*a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -(b**2 - 4*a*c)/(4*a)\nend",
    "  -(b.to_f / (2 * a))\nend",
    "  # Your code here\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  return -b / (2 * a)\nend",
    "  -(b**2 - 4*a*c)/(4*a)\nend",
    "  -(b**2 - 4*a*c)/(4*a)\nend",
    "  -(b**2 - 4*a*c)/(4*a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -(b**2 - 4*a*c) / (4*a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b**2 - 4*a*c) / (4*a)\nend",
    "  -b / (2 * a)\nend",
    "  # y = -(a/b)x - (c/b)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)(y - (c/b))\n  # x = -(b/a)(y + (c/b))\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b/a)y - (c/a)\n  # x = -(b",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b**2 - 4*a*c)/(4*a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b**2 - 4*a*c)/(4*a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b/(2*a)\nend",
    "  -(b**2 - 4*a*c) / (4*a)\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -(c - b**2 / (4 * a)) / a\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -(b**2 - 4*a*c)/(4*a)\nend",
    "  -b / (2 * a)\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -(b.to_f / (2 * a))\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -b / (2 * a)\nend",
    "  -(b / (2 * a))\nend",
    "  -(c - b**2 / (4 * a)) / a\nend",
    "  -(b.to_f / (2 * a))\nend",
    "  -(b / (2 * a))\nend"
  ]
}