{
  "name": "mbpp_745_divisible_by_digits",
  "language": "rb",
  "prompt": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpm8pgk3ii\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpm8pgk3ii.rb:3:in `%'\n/tmp/tmpm8pgk3ii.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:3:in `all?'\n/tmp/tmpm8pgk3ii.rb:3:in `block in divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:3:in `each'\n/tmp/tmpm8pgk3ii.rb:3:in `select'\n/tmp/tmpm8pgk3ii.rb:3:in `divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:9:in `call'\n/tmp/tmpm8pgk3ii.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001192426 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n838.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select {|num| num.to_s.chars.map(&:to_i).all? {|digit| num % digit == 0}}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp24ue_8nj\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp24ue_8nj.rb:3:in `%'\n/tmp/tmp24ue_8nj.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp24ue_8nj.rb:3:in `all?'\n/tmp/tmp24ue_8nj.rb:3:in `block in divisible_by_digits'\n/tmp/tmp24ue_8nj.rb:3:in `each'\n/tmp/tmp24ue_8nj.rb:3:in `select'\n/tmp/tmp24ue_8nj.rb:3:in `divisible_by_digits'\n/tmp/tmp24ue_8nj.rb:9:in `call'\n/tmp/tmp24ue_8nj.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001175033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n851.04 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| (num.to_s.split('').map(&:to_i).inject(:*) || 1) % num == 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpxmy97s0z\nStarted\nF\n===============================================================================\nFailure: test_divisible_by_digits(TestHumanEval)\n/tmp/tmpxmy97s0z.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n<[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]> expected but was\n<[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20]>\n\ndiff:\n? [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n?                              0    0        \n?                              ?  - ????????        \n===============================================================================\n\nFinished in 0.025501336 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n39.21 tests/s, 39.21 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| (num.to_s.split('').map(&:to_i) - [0]).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpm6uumweg\nStarted\nF\n===============================================================================\nFailure: test_divisible_by_digits(TestHumanEval)\n/tmp/tmpm6uumweg.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n<[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]> expected but was\n<[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]>\n\ndiff:\n? [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]\n===============================================================================\n\nFinished in 0.014077527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n71.04 tests/s, 71.04 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpm8pgk3ii\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpm8pgk3ii.rb:3:in `%'\n/tmp/tmpm8pgk3ii.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:3:in `all?'\n/tmp/tmpm8pgk3ii.rb:3:in `block in divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:3:in `each'\n/tmp/tmpm8pgk3ii.rb:3:in `select'\n/tmp/tmpm8pgk3ii.rb:3:in `divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:9:in `call'\n/tmp/tmpm8pgk3ii.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001192426 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n838.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp1vfsiv9c\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp1vfsiv9c.rb:3:in `%'\n/tmp/tmp1vfsiv9c.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `all?'\n/tmp/tmp1vfsiv9c.rb:3:in `block in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `each'\n/tmp/tmp1vfsiv9c.rb:3:in `select'\n/tmp/tmp1vfsiv9c.rb:3:in `divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:9:in `call'\n/tmp/tmp1vfsiv9c.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001157558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n863.89 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |d| num % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmp317ga5un\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp317ga5un.rb:3:in `%'\n/tmp/tmp317ga5un.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp317ga5un.rb:3:in `all?'\n/tmp/tmp317ga5un.rb:3:in `block in divisible_by_digits'\n/tmp/tmp317ga5un.rb:3:in `each'\n/tmp/tmp317ga5un.rb:3:in `select'\n/tmp/tmp317ga5un.rb:3:in `divisible_by_digits'\n/tmp/tmp317ga5un.rb:9:in `call'\n/tmp/tmp317ga5un.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001235104 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n809.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| (num.to_s.chars.map(&:to_i) - num.to_s.chars.map { |digit| num % digit.to_i }).empty? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmp_6ygw6md\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp_6ygw6md.rb:3:in `%'\n/tmp/tmp_6ygw6md.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp_6ygw6md.rb:3:in `map'\n/tmp/tmp_6ygw6md.rb:3:in `block in divisible_by_digits'\n/tmp/tmp_6ygw6md.rb:3:in `each'\n/tmp/tmp_6ygw6md.rb:3:in `select'\n/tmp/tmp_6ygw6md.rb:3:in `divisible_by_digits'\n/tmp/tmp_6ygw6md.rb:9:in `call'\n/tmp/tmp_6ygw6md.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001220467 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n819.36 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select {|num| num.digits.all? {|digit| num % digit == 0}}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmpoiqx3dmh\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoiqx3dmh.rb:3:in `%'\n/tmp/tmpoiqx3dmh.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoiqx3dmh.rb:3:in `all?'\n/tmp/tmpoiqx3dmh.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoiqx3dmh.rb:3:in `each'\n/tmp/tmpoiqx3dmh.rb:3:in `select'\n/tmp/tmpoiqx3dmh.rb:3:in `divisible_by_digits'\n/tmp/tmpoiqx3dmh.rb:9:in `call'\n/tmp/tmpoiqx3dmh.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001151203 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n868.66 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.split('').map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmp48964uqo\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp48964uqo.rb:3:in `%'\n/tmp/tmp48964uqo.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp48964uqo.rb:3:in `all?'\n/tmp/tmp48964uqo.rb:3:in `block in divisible_by_digits'\n/tmp/tmp48964uqo.rb:3:in `each'\n/tmp/tmp48964uqo.rb:3:in `select'\n/tmp/tmp48964uqo.rb:3:in `divisible_by_digits'\n/tmp/tmp48964uqo.rb:9:in `call'\n/tmp/tmp48964uqo.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00193192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n517.62 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num % num.to_s.split('').map(&:to_i).inject(:*) == 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmppq2repub\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmppq2repub.rb:3:in `%'\n/tmp/tmppq2repub.rb:3:in `block in divisible_by_digits'\n/tmp/tmppq2repub.rb:3:in `each'\n/tmp/tmppq2repub.rb:3:in `select'\n/tmp/tmppq2repub.rb:3:in `divisible_by_digits'\n/tmp/tmppq2repub.rb:9:in `call'\n/tmp/tmppq2repub.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001137023 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n879.49 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp1vfsiv9c\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp1vfsiv9c.rb:3:in `%'\n/tmp/tmp1vfsiv9c.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `all?'\n/tmp/tmp1vfsiv9c.rb:3:in `block in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `each'\n/tmp/tmp1vfsiv9c.rb:3:in `select'\n/tmp/tmp1vfsiv9c.rb:3:in `divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:9:in `call'\n/tmp/tmp1vfsiv9c.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001157558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n863.89 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.all? { |c| n % c.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmph4mgqxcb\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmph4mgqxcb.rb:3:in `%'\n/tmp/tmph4mgqxcb.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmph4mgqxcb.rb:3:in `all?'\n/tmp/tmph4mgqxcb.rb:3:in `block in divisible_by_digits'\n/tmp/tmph4mgqxcb.rb:3:in `each'\n/tmp/tmph4mgqxcb.rb:3:in `select'\n/tmp/tmph4mgqxcb.rb:3:in `divisible_by_digits'\n/tmp/tmph4mgqxcb.rb:9:in `call'\n/tmp/tmph4mgqxcb.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001196079 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n836.07 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp1vfsiv9c\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp1vfsiv9c.rb:3:in `%'\n/tmp/tmp1vfsiv9c.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `all?'\n/tmp/tmp1vfsiv9c.rb:3:in `block in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `each'\n/tmp/tmp1vfsiv9c.rb:3:in `select'\n/tmp/tmp1vfsiv9c.rb:3:in `divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:9:in `call'\n/tmp/tmp1vfsiv9c.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001157558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n863.89 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |x| x.to_s.split('').map(&:to_i).all? { |y| x % y == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmpn3vaipju\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpn3vaipju.rb:3:in `%'\n/tmp/tmpn3vaipju.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpn3vaipju.rb:3:in `all?'\n/tmp/tmpn3vaipju.rb:3:in `block in divisible_by_digits'\n/tmp/tmpn3vaipju.rb:3:in `each'\n/tmp/tmpn3vaipju.rb:3:in `select'\n/tmp/tmpn3vaipju.rb:3:in `divisible_by_digits'\n/tmp/tmpn3vaipju.rb:9:in `call'\n/tmp/tmpn3vaipju.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001169459 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n855.10 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| (n.to_s.chars.map(&:to_i) - [0]).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmpxymqhtti\nStarted\nF\n===============================================================================\nFailure: test_divisible_by_digits(TestHumanEval)\n/tmp/tmpxymqhtti.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n<[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]> expected but was\n<[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]>\n\ndiff:\n? [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]\n===============================================================================\n\nFinished in 0.014142937 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.71 tests/s, 70.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpm8pgk3ii\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpm8pgk3ii.rb:3:in `%'\n/tmp/tmpm8pgk3ii.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:3:in `all?'\n/tmp/tmpm8pgk3ii.rb:3:in `block in divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:3:in `each'\n/tmp/tmpm8pgk3ii.rb:3:in `select'\n/tmp/tmpm8pgk3ii.rb:3:in `divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:9:in `call'\n/tmp/tmpm8pgk3ii.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001192426 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n838.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num % num.to_s.split('').map(&:to_i).inject(:*) == 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmppq2repub\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmppq2repub.rb:3:in `%'\n/tmp/tmppq2repub.rb:3:in `block in divisible_by_digits'\n/tmp/tmppq2repub.rb:3:in `each'\n/tmp/tmppq2repub.rb:3:in `select'\n/tmp/tmppq2repub.rb:3:in `divisible_by_digits'\n/tmp/tmppq2repub.rb:9:in `call'\n/tmp/tmppq2repub.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001137023 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n879.49 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.digits.all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmpao4uj94_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpao4uj94_.rb:3:in `%'\n/tmp/tmpao4uj94_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpao4uj94_.rb:3:in `all?'\n/tmp/tmpao4uj94_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpao4uj94_.rb:3:in `each'\n/tmp/tmpao4uj94_.rb:3:in `select'\n/tmp/tmpao4uj94_.rb:3:in `divisible_by_digits'\n/tmp/tmpao4uj94_.rb:9:in `call'\n/tmp/tmpao4uj94_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001190866 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n839.73 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.digits.all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmpao4uj94_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpao4uj94_.rb:3:in `%'\n/tmp/tmpao4uj94_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpao4uj94_.rb:3:in `all?'\n/tmp/tmpao4uj94_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpao4uj94_.rb:3:in `each'\n/tmp/tmpao4uj94_.rb:3:in `select'\n/tmp/tmpao4uj94_.rb:3:in `divisible_by_digits'\n/tmp/tmpao4uj94_.rb:9:in `call'\n/tmp/tmpao4uj94_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001190866 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n839.73 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.split('').map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmp48964uqo\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp48964uqo.rb:3:in `%'\n/tmp/tmp48964uqo.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp48964uqo.rb:3:in `all?'\n/tmp/tmp48964uqo.rb:3:in `block in divisible_by_digits'\n/tmp/tmp48964uqo.rb:3:in `each'\n/tmp/tmp48964uqo.rb:3:in `select'\n/tmp/tmp48964uqo.rb:3:in `divisible_by_digits'\n/tmp/tmp48964uqo.rb:9:in `call'\n/tmp/tmp48964uqo.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00193192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n517.62 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select {|num| num.to_s.split('').map(&:to_i).all? {|digit| num % digit == 0}}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmp2u00n1l5\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp2u00n1l5.rb:3:in `%'\n/tmp/tmp2u00n1l5.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp2u00n1l5.rb:3:in `all?'\n/tmp/tmp2u00n1l5.rb:3:in `block in divisible_by_digits'\n/tmp/tmp2u00n1l5.rb:3:in `each'\n/tmp/tmp2u00n1l5.rb:3:in `select'\n/tmp/tmp2u00n1l5.rb:3:in `divisible_by_digits'\n/tmp/tmp2u00n1l5.rb:9:in `call'\n/tmp/tmp2u00n1l5.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001219009 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n820.34 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| (num.to_s.split('').map(&:to_i) - num.to_s.split('').map { |digit| num % digit.to_i }).empty? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmpox8wd45u\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpox8wd45u.rb:3:in `%'\n/tmp/tmpox8wd45u.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpox8wd45u.rb:3:in `map'\n/tmp/tmpox8wd45u.rb:3:in `block in divisible_by_digits'\n/tmp/tmpox8wd45u.rb:3:in `each'\n/tmp/tmpox8wd45u.rb:3:in `select'\n/tmp/tmpox8wd45u.rb:3:in `divisible_by_digits'\n/tmp/tmpox8wd45u.rb:9:in `call'\n/tmp/tmpox8wd45u.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001197246 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n835.25 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split(\"\").all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmpwg67qsf6\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpwg67qsf6.rb:3:in `%'\n/tmp/tmpwg67qsf6.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpwg67qsf6.rb:3:in `all?'\n/tmp/tmpwg67qsf6.rb:3:in `block in divisible_by_digits'\n/tmp/tmpwg67qsf6.rb:3:in `each'\n/tmp/tmpwg67qsf6.rb:3:in `select'\n/tmp/tmpwg67qsf6.rb:3:in `divisible_by_digits'\n/tmp/tmpwg67qsf6.rb:9:in `call'\n/tmp/tmpwg67qsf6.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001275259 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n784.15 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.digits.all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmpao4uj94_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpao4uj94_.rb:3:in `%'\n/tmp/tmpao4uj94_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpao4uj94_.rb:3:in `all?'\n/tmp/tmpao4uj94_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpao4uj94_.rb:3:in `each'\n/tmp/tmpao4uj94_.rb:3:in `select'\n/tmp/tmpao4uj94_.rb:3:in `divisible_by_digits'\n/tmp/tmpao4uj94_.rb:9:in `call'\n/tmp/tmpao4uj94_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001190866 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n839.73 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.digits.all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmpao4uj94_\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpao4uj94_.rb:3:in `%'\n/tmp/tmpao4uj94_.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpao4uj94_.rb:3:in `all?'\n/tmp/tmpao4uj94_.rb:3:in `block in divisible_by_digits'\n/tmp/tmpao4uj94_.rb:3:in `each'\n/tmp/tmpao4uj94_.rb:3:in `select'\n/tmp/tmpao4uj94_.rb:3:in `divisible_by_digits'\n/tmp/tmpao4uj94_.rb:9:in `call'\n/tmp/tmpao4uj94_.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001190866 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n839.73 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.split('').map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmp48964uqo\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp48964uqo.rb:3:in `%'\n/tmp/tmp48964uqo.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp48964uqo.rb:3:in `all?'\n/tmp/tmp48964uqo.rb:3:in `block in divisible_by_digits'\n/tmp/tmp48964uqo.rb:3:in `each'\n/tmp/tmp48964uqo.rb:3:in `select'\n/tmp/tmp48964uqo.rb:3:in `divisible_by_digits'\n/tmp/tmp48964uqo.rb:9:in `call'\n/tmp/tmp48964uqo.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00193192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n517.62 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp1vfsiv9c\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp1vfsiv9c.rb:3:in `%'\n/tmp/tmp1vfsiv9c.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `all?'\n/tmp/tmp1vfsiv9c.rb:3:in `block in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `each'\n/tmp/tmp1vfsiv9c.rb:3:in `select'\n/tmp/tmp1vfsiv9c.rb:3:in `divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:9:in `call'\n/tmp/tmp1vfsiv9c.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001157558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n863.89 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpm8pgk3ii\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpm8pgk3ii.rb:3:in `%'\n/tmp/tmpm8pgk3ii.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:3:in `all?'\n/tmp/tmpm8pgk3ii.rb:3:in `block in divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:3:in `each'\n/tmp/tmpm8pgk3ii.rb:3:in `select'\n/tmp/tmpm8pgk3ii.rb:3:in `divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:9:in `call'\n/tmp/tmpm8pgk3ii.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001192426 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n838.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp1vfsiv9c\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp1vfsiv9c.rb:3:in `%'\n/tmp/tmp1vfsiv9c.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `all?'\n/tmp/tmp1vfsiv9c.rb:3:in `block in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `each'\n/tmp/tmp1vfsiv9c.rb:3:in `select'\n/tmp/tmp1vfsiv9c.rb:3:in `divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:9:in `call'\n/tmp/tmp1vfsiv9c.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001157558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n863.89 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpm8pgk3ii\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpm8pgk3ii.rb:3:in `%'\n/tmp/tmpm8pgk3ii.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:3:in `all?'\n/tmp/tmpm8pgk3ii.rb:3:in `block in divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:3:in `each'\n/tmp/tmpm8pgk3ii.rb:3:in `select'\n/tmp/tmpm8pgk3ii.rb:3:in `divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:9:in `call'\n/tmp/tmpm8pgk3ii.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001192426 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n838.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpm8pgk3ii\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpm8pgk3ii.rb:3:in `%'\n/tmp/tmpm8pgk3ii.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:3:in `all?'\n/tmp/tmpm8pgk3ii.rb:3:in `block in divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:3:in `each'\n/tmp/tmpm8pgk3ii.rb:3:in `select'\n/tmp/tmpm8pgk3ii.rb:3:in `divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:9:in `call'\n/tmp/tmpm8pgk3ii.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001192426 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n838.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select {|num| num.to_s.chars.map(&:to_i).all? {|digit| num % digit == 0}}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp24ue_8nj\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp24ue_8nj.rb:3:in `%'\n/tmp/tmp24ue_8nj.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp24ue_8nj.rb:3:in `all?'\n/tmp/tmp24ue_8nj.rb:3:in `block in divisible_by_digits'\n/tmp/tmp24ue_8nj.rb:3:in `each'\n/tmp/tmp24ue_8nj.rb:3:in `select'\n/tmp/tmp24ue_8nj.rb:3:in `divisible_by_digits'\n/tmp/tmp24ue_8nj.rb:9:in `call'\n/tmp/tmp24ue_8nj.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001175033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n851.04 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpm8pgk3ii\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpm8pgk3ii.rb:3:in `%'\n/tmp/tmpm8pgk3ii.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:3:in `all?'\n/tmp/tmpm8pgk3ii.rb:3:in `block in divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:3:in `each'\n/tmp/tmpm8pgk3ii.rb:3:in `select'\n/tmp/tmpm8pgk3ii.rb:3:in `divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:9:in `call'\n/tmp/tmpm8pgk3ii.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001192426 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n838.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp1vfsiv9c\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp1vfsiv9c.rb:3:in `%'\n/tmp/tmp1vfsiv9c.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `all?'\n/tmp/tmp1vfsiv9c.rb:3:in `block in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `each'\n/tmp/tmp1vfsiv9c.rb:3:in `select'\n/tmp/tmp1vfsiv9c.rb:3:in `divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:9:in `call'\n/tmp/tmp1vfsiv9c.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001157558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n863.89 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpm8pgk3ii\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpm8pgk3ii.rb:3:in `%'\n/tmp/tmpm8pgk3ii.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:3:in `all?'\n/tmp/tmpm8pgk3ii.rb:3:in `block in divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:3:in `each'\n/tmp/tmpm8pgk3ii.rb:3:in `select'\n/tmp/tmpm8pgk3ii.rb:3:in `divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:9:in `call'\n/tmp/tmpm8pgk3ii.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001192426 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n838.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select {|n| n.to_s.chars.all? {|d| n % d.to_i == 0}}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmpotgiuzrs\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpotgiuzrs.rb:3:in `%'\n/tmp/tmpotgiuzrs.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpotgiuzrs.rb:3:in `all?'\n/tmp/tmpotgiuzrs.rb:3:in `block in divisible_by_digits'\n/tmp/tmpotgiuzrs.rb:3:in `each'\n/tmp/tmpotgiuzrs.rb:3:in `select'\n/tmp/tmpotgiuzrs.rb:3:in `divisible_by_digits'\n/tmp/tmpotgiuzrs.rb:9:in `call'\n/tmp/tmpotgiuzrs.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001167403 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n856.60 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.split('').map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmp48964uqo\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp48964uqo.rb:3:in `%'\n/tmp/tmp48964uqo.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp48964uqo.rb:3:in `all?'\n/tmp/tmp48964uqo.rb:3:in `block in divisible_by_digits'\n/tmp/tmp48964uqo.rb:3:in `each'\n/tmp/tmp48964uqo.rb:3:in `select'\n/tmp/tmp48964uqo.rb:3:in `divisible_by_digits'\n/tmp/tmp48964uqo.rb:9:in `call'\n/tmp/tmp48964uqo.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00193192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n517.62 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp1vfsiv9c\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp1vfsiv9c.rb:3:in `%'\n/tmp/tmp1vfsiv9c.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `all?'\n/tmp/tmp1vfsiv9c.rb:3:in `block in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `each'\n/tmp/tmp1vfsiv9c.rb:3:in `select'\n/tmp/tmp1vfsiv9c.rb:3:in `divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:9:in `call'\n/tmp/tmp1vfsiv9c.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001157558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n863.89 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpm8pgk3ii\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpm8pgk3ii.rb:3:in `%'\n/tmp/tmpm8pgk3ii.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:3:in `all?'\n/tmp/tmpm8pgk3ii.rb:3:in `block in divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:3:in `each'\n/tmp/tmpm8pgk3ii.rb:3:in `select'\n/tmp/tmpm8pgk3ii.rb:3:in `divisible_by_digits'\n/tmp/tmpm8pgk3ii.rb:9:in `call'\n/tmp/tmpm8pgk3ii.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001192426 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n838.63 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp1vfsiv9c\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp1vfsiv9c.rb:3:in `%'\n/tmp/tmp1vfsiv9c.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `all?'\n/tmp/tmp1vfsiv9c.rb:3:in `block in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `each'\n/tmp/tmp1vfsiv9c.rb:3:in `select'\n/tmp/tmp1vfsiv9c.rb:3:in `divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:9:in `call'\n/tmp/tmp1vfsiv9c.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001157558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n863.89 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| (num.to_s.chars.map(&:to_i) - [0]).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmp8bvx4xd6\nStarted\nF\n===============================================================================\nFailure: test_divisible_by_digits(TestHumanEval)\n/tmp/tmp8bvx4xd6.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n<[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]> expected but was\n<[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]>\n\ndiff:\n? [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]\n===============================================================================\n\nFinished in 0.023665399 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n42.26 tests/s, 42.26 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpoc26uore\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpoc26uore.rb:3:in `%'\n/tmp/tmpoc26uore.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `all?'\n/tmp/tmpoc26uore.rb:3:in `block in divisible_by_digits'\n/tmp/tmpoc26uore.rb:3:in `each'\n/tmp/tmpoc26uore.rb:3:in `select'\n/tmp/tmpoc26uore.rb:3:in `divisible_by_digits'\n/tmp/tmpoc26uore.rb:9:in `call'\n/tmp/tmpoc26uore.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001184806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n844.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.chars.all? { |d| n % d.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmpq1oetgvp\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpq1oetgvp.rb:3:in `%'\n/tmp/tmpq1oetgvp.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpq1oetgvp.rb:3:in `all?'\n/tmp/tmpq1oetgvp.rb:3:in `block in divisible_by_digits'\n/tmp/tmpq1oetgvp.rb:3:in `each'\n/tmp/tmpq1oetgvp.rb:3:in `select'\n/tmp/tmpq1oetgvp.rb:3:in `divisible_by_digits'\n/tmp/tmpq1oetgvp.rb:9:in `call'\n/tmp/tmpq1oetgvp.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001219053 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n820.31 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num % num.to_s.split('').map(&:to_i).inject(:*) == 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmppq2repub\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmppq2repub.rb:3:in `%'\n/tmp/tmppq2repub.rb:3:in `block in divisible_by_digits'\n/tmp/tmppq2repub.rb:3:in `each'\n/tmp/tmppq2repub.rb:3:in `select'\n/tmp/tmppq2repub.rb:3:in `divisible_by_digits'\n/tmp/tmppq2repub.rb:9:in `call'\n/tmp/tmppq2repub.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001137023 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n879.49 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select {|n| n.to_s.chars.map(&:to_i).all? {|d| n % d == 0}}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmp19baa1f3\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp19baa1f3.rb:3:in `%'\n/tmp/tmp19baa1f3.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp19baa1f3.rb:3:in `all?'\n/tmp/tmp19baa1f3.rb:3:in `block in divisible_by_digits'\n/tmp/tmp19baa1f3.rb:3:in `each'\n/tmp/tmp19baa1f3.rb:3:in `select'\n/tmp/tmp19baa1f3.rb:3:in `divisible_by_digits'\n/tmp/tmp19baa1f3.rb:9:in `call'\n/tmp/tmp19baa1f3.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001227973 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n814.35 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp1vfsiv9c\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp1vfsiv9c.rb:3:in `%'\n/tmp/tmp1vfsiv9c.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `all?'\n/tmp/tmp1vfsiv9c.rb:3:in `block in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `each'\n/tmp/tmp1vfsiv9c.rb:3:in `select'\n/tmp/tmp1vfsiv9c.rb:3:in `divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:9:in `call'\n/tmp/tmp1vfsiv9c.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001157558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n863.89 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.split('').map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmp48964uqo\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp48964uqo.rb:3:in `%'\n/tmp/tmp48964uqo.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp48964uqo.rb:3:in `all?'\n/tmp/tmp48964uqo.rb:3:in `block in divisible_by_digits'\n/tmp/tmp48964uqo.rb:3:in `each'\n/tmp/tmp48964uqo.rb:3:in `select'\n/tmp/tmp48964uqo.rb:3:in `divisible_by_digits'\n/tmp/tmp48964uqo.rb:9:in `call'\n/tmp/tmp48964uqo.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00193192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n517.62 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select {|num| num.to_s.chars.map(&:to_i).all? {|digit| num % digit == 0}}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp24ue_8nj\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp24ue_8nj.rb:3:in `%'\n/tmp/tmp24ue_8nj.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp24ue_8nj.rb:3:in `all?'\n/tmp/tmp24ue_8nj.rb:3:in `block in divisible_by_digits'\n/tmp/tmp24ue_8nj.rb:3:in `each'\n/tmp/tmp24ue_8nj.rb:3:in `select'\n/tmp/tmp24ue_8nj.rb:3:in `divisible_by_digits'\n/tmp/tmp24ue_8nj.rb:9:in `call'\n/tmp/tmp24ue_8nj.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001175033 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n851.04 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.split('').map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmp48964uqo\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp48964uqo.rb:3:in `%'\n/tmp/tmp48964uqo.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp48964uqo.rb:3:in `all?'\n/tmp/tmp48964uqo.rb:3:in `block in divisible_by_digits'\n/tmp/tmp48964uqo.rb:3:in `each'\n/tmp/tmp48964uqo.rb:3:in `select'\n/tmp/tmp48964uqo.rb:3:in `divisible_by_digits'\n/tmp/tmp48964uqo.rb:9:in `call'\n/tmp/tmp48964uqo.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00193192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n517.62 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |n| n.to_s.split('').map(&:to_i).all? { |d| n % d == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1666122600,
      "stdout": "Loaded suite /tmp/tmp48964uqo\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp48964uqo.rb:3:in `%'\n/tmp/tmp48964uqo.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp48964uqo.rb:3:in `all?'\n/tmp/tmp48964uqo.rb:3:in `block in divisible_by_digits'\n/tmp/tmp48964uqo.rb:3:in `each'\n/tmp/tmp48964uqo.rb:3:in `select'\n/tmp/tmp48964uqo.rb:3:in `divisible_by_digits'\n/tmp/tmp48964uqo.rb:9:in `call'\n/tmp/tmp48964uqo.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00193192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n517.62 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.split('').map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpzgxt4egu\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpzgxt4egu.rb:3:in `%'\n/tmp/tmpzgxt4egu.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `all?'\n/tmp/tmpzgxt4egu.rb:3:in `block in divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:3:in `each'\n/tmp/tmpzgxt4egu.rb:3:in `select'\n/tmp/tmpzgxt4egu.rb:3:in `divisible_by_digits'\n/tmp/tmpzgxt4egu.rb:9:in `call'\n/tmp/tmpzgxt4egu.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001164814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n858.51 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.map(&:to_i).all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpke7l7yx4\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpke7l7yx4.rb:3:in `%'\n/tmp/tmpke7l7yx4.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `all?'\n/tmp/tmpke7l7yx4.rb:3:in `block in divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:3:in `each'\n/tmp/tmpke7l7yx4.rb:3:in `select'\n/tmp/tmpke7l7yx4.rb:3:in `divisible_by_digits'\n/tmp/tmpke7l7yx4.rb:9:in `call'\n/tmp/tmpke7l7yx4.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001173547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n852.12 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.digits.all? { |digit| num % digit == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmpl0j2ac3i\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmpl0j2ac3i.rb:3:in `%'\n/tmp/tmpl0j2ac3i.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `all?'\n/tmp/tmpl0j2ac3i.rb:3:in `block in divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:3:in `each'\n/tmp/tmpl0j2ac3i.rb:3:in `select'\n/tmp/tmpl0j2ac3i.rb:3:in `divisible_by_digits'\n/tmp/tmpl0j2ac3i.rb:9:in `call'\n/tmp/tmpl0j2ac3i.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.00124124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n805.65 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n  (startnum..endnum).select { |num| num.to_s.chars.all? { |digit| num % digit.to_i == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n",
      "timestamp": 1665509857,
      "stdout": "Loaded suite /tmp/tmp1vfsiv9c\nStarted\nE\n===============================================================================\nError: test_divisible_by_digits(TestHumanEval): ZeroDivisionError: divided by 0\n/tmp/tmp1vfsiv9c.rb:3:in `%'\n/tmp/tmp1vfsiv9c.rb:3:in `block (2 levels) in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `all?'\n/tmp/tmp1vfsiv9c.rb:3:in `block in divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:3:in `each'\n/tmp/tmp1vfsiv9c.rb:3:in `select'\n/tmp/tmp1vfsiv9c.rb:3:in `divisible_by_digits'\n/tmp/tmp1vfsiv9c.rb:9:in `call'\n/tmp/tmp1vfsiv9c.rb:9:in `test_divisible_by_digits'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_divisible_by_digits\n      8:     candidate = method(:divisible_by_digits)\n  =>  9:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n     10:     assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n     11:     assert_equal([22, 24], candidate.call(20, 25))\n     12:   end\n===============================================================================\n\nFinished in 0.001157558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n863.89 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}