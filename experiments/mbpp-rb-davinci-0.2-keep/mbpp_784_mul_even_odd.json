{
  "name": "mbpp_784_mul_even_odd",
  "language": "rb",
  "prompt": "# Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mul_even_odd\n    candidate = method(:mul_even_odd)\n    assert_equal(4, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(2, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(10, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  even = list1.select{|x| x%2==0}\n  odd = list1.select{|x| x%2!=0}\n  puts \"Product of first even and odd number of a given list is #{even[0]*odd[0]}\"\nend\nmul_even_odd([1,2,3,4,5,6,7,8,9,10])",
    "  list1.each do |i|\n    if i % 2 == 0\n      puts i\n      break\n    end\n  end\n  list1.reverse.each do |i|\n    if i % 2 != 0\n      puts i\n      break\n    end\n  end\nend\nmul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
    "  even_num = list1.select { |num| num.even? }\n  odd_num = list1.select { |num| num.odd? }\n  even_num[0] * odd_num[0]\nend",
    "  list1.each_with_index do |x,i|\n    if x%2==0\n      puts \"product of first even and odd number is #{x*list1[i+1]}\"\n      break\n    end\n  end\nend\nmul_even_odd([1,2,3,4,5,6,7,8,9,10])",
    "  even = list1.select(&:even?)\n  odd = list1.select(&:odd?)\n  even.first * odd.first\nend",
    "  even = list1.select(&:even?)\n  odd = list1.select(&:odd?)\n  even[0] * odd[0]\nend",
    "  even_odd_list = list1.partition(&:even?)\n  even_odd_list[0][0] * even_odd_list[1][0]\nend",
    "  list1.each do |i|\n    if i%2==0\n      puts i*list1[i+1]\n      break\n    end\n  end\nend\nmul_even_odd([1,2,3,4,5,6,7,8,9,10])",
    "  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even[0] * odd[0]\nend",
    "  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even[0] * odd[0]\nend",
    "  even = list1.select(&:even?)\n  odd = list1.select(&:odd?)\n  even[0] * odd[0]\nend",
    "  even_num = list1.select { |num| num.even? }\n  odd_num = list1.select { |num| num.odd? }\n  even_num.first * odd_num.first\nend",
    "  even_num = list1.select(&:even?)\n  odd_num = list1.select(&:odd?)\n  even_num[0] * odd_num[0]\nend",
    "  even_num = list1.select { |num| num.even? }\n  odd_num = list1.select { |num| num.odd? }\n  even_num.first * odd_num.first\nend",
    "  list1.each_with_index do |num, index|\n    if num % 2 == 0\n      puts num * list1[index + 1]\n      break\n    end\n  end\nend",
    "  list1.each do |i|\n    if i%2==0\n      puts i\n      break\n    end\n  end\n  list1.each do |i|\n    if i%2!=0\n      puts i\n      break\n    end\n  end\nend\nmul_even_odd([1,2,3,4,5,6,7,8,9,10])",
    "  even_odd_list = list1.select { |num| num.even? || num.odd? }\n  even_odd_list[0] * even_odd_list[1]\nend",
    "  even = list1.select{|x| x%2==0}\n  odd = list1.select{|x| x%2!=0}\n  puts \"Product of first even and odd number of a given list is #{even[0]*odd[0]}\"\nend\nmul_even_odd([1,2,3,4,5,6,7,8,9,10])",
    "  even = list1.select{|x| x%2==0}\n  odd = list1.select{|x| x%2!=0}\n  return even[0]*odd[0]\nend",
    "  even_num = list1.select { |num| num.even? }\n  odd_num = list1.select { |num| num.odd? }\n  even_num.first * odd_num.first\nend"
  ]
}