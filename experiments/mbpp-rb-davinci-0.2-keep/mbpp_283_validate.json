{
  "name": "mbpp_283_validate",
  "language": "rb",
  "prompt": "# Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "  n = n.to_s.split('')\n  n.each do |i|\n    if n.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "    n = n.to_s.split(\"\")\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "\tn = n.to_s.split(\"\").map(&:to_i)\n\tn.each do |i|\n\t\tif n.count(i) > i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n = n.to_s.split('')\n  n.each do |i|\n    if n.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s\n    n.each_char do |c|\n        if n.count(c) > c.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.uniq.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "\tn = n.to_s.split('')\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    n = n.to_s.split(\"\")\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s\n    freq = Hash.new(0)\n    n.each_char { |c| freq[c] += 1 }\n    freq.each do |k, v|\n        if v > k.to_i\n            return False\n        end\n    end\n    return True\nend"
  ]
}