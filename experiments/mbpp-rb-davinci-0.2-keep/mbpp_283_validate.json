{
  "name": "mbpp_283_validate",
  "language": "rb",
  "prompt": "# Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "  n = n.to_s.split('')\n  n.each do |i|\n    if n.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "    n = n.to_s.split(\"\")\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "\tn = n.to_s.split(\"\").map(&:to_i)\n\tn.each do |i|\n\t\tif n.count(i) > i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n = n.to_s.split('')\n  n.each do |i|\n    if n.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s\n    n.each_char do |c|\n        if n.count(c) > c.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.uniq.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "\tn = n.to_s.split('')\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    n = n.to_s.split(\"\")\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s\n    freq = Hash.new(0)\n    n.each_char { |c| freq[c] += 1 }\n    freq.each do |k, v|\n        if v > k.to_i\n            return False\n        end\n    end\n    return True\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend\nvalidate(1232)",
    "    n.to_s.split('').map(&:to_i).each do |i|\n        return false if n.to_s.count(i.to_s) > i\n    end\n    true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "\tn = n.to_s.split(\"\")\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "\tn = n.to_s.split('')\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "\ta=n.to_s.split('')\n\tb=a.uniq\n\tc=b.map{|x| a.count(x)}\n\td=b.zip(c).to_h\n\td.each do |k,v|\n\t\tif v<=k.to_i\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\nend",
    "    n = n.to_s.split(\"\")\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "\t# Write your code here\n\tn = n.to_s\n\tn.each_char do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.each_with_object(Hash.new(0)) { |c, h| h[c] += 1 }.values.all? { |v| v <= n.to_s.chars.count(v.to_s) }\nend",
    "\tn = n.to_s.split('')\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "\tn = n.to_s.split(\"\")\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split(\"\")\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "\tn = n.to_s\n\tn.each_char do |c|\n\t\tif n.count(c) > c.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    n = n.to_s\n    n.each_char do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('').map(&:to_i)\n    n.each do |i|\n        if n.count(i) > i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.chars.count(digit.to_s) > digit\n  end\n  true\nend",
    "    n.to_s.chars.map(&:to_i).each do |i|\n        return false if n.to_s.count(i.to_s) > i\n    end\n    true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return False\n        end\n    end\n    return True\nend",
    "  n.to_s.split(\"\").each do |i|\n    if n.to_s.count(i) > i.to_i\n      return False\n    end\n  end\n  return True\nend",
    "    n.to_s.chars.each do |i|\n        if n.to_s.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "    n = n.to_s.split('').map(&:to_i)\n    n.each do |i|\n        if n.count(i) > i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.chars\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "\tn = n.to_s.split('')\n\tn.each do |x|\n\t\tif n.count(x) > x.to_i\n\t\t\treturn False\n\t\tend\n\tend\n\treturn True\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('').map(&:to_i)\n    n.each do |i|\n        if n.count(i) > i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.each_with_object(Hash.new(0)) { |c, h| h[c] += 1 }.values.all? { |v| v <= n.to_s.chars.count(v.to_s) }\nend",
    "\tn = n.to_s.split('')\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  n.to_s.chars.each do |i|\n    return false if n.to_s.count(i) > i.to_i\n  end\n  true\nend",
    "    n = n.to_s.split('').map(&:to_i)\n    n.each do |i|\n        if n.count(i) > i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "\tn = n.to_s.split('')\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n = n.to_s.split('')\n  n.each do |i|\n    if n.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend",
    "  n.to_s.chars.each do |i|\n    return false if n.to_s.count(i) > i.to_i\n  end\n  true\nend",
    "\tn = n.to_s.split('').map(&:to_i)\n\tn.each do |i|\n\t\tif n.count(i) > i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    freq = Hash.new(0)\n    n.to_s.each_char { |c| freq[c] += 1 }\n    freq.each do |k, v|\n        if v > k.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "\tn = n.to_s\n\tn = n.split(\"\")\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.each do |i|\n    return false if n.to_s.count(i) > i.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "\tn = n.to_s\n\tn.each_char do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    n = n.to_s\n    n = n.split('')\n    n = n.map(&:to_i)\n    n = n.sort\n    n = n.uniq\n    n.each do |i|\n        if n.count(i) > i\n            return False\n        end\n    end\n    return True\nend",
    "    n = n.to_s.split(\"\")\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.each do |x|\n    if n.to_s.count(x) > x.to_i\n      return False\n    end\n  end\n  return True\nend",
    "  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n = n.to_s.split('')\n  n.each do |i|\n    if n.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend",
    "  n.to_s.split('').map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "    n = n.to_s.split(\"\").map(&:to_i)\n    n.each do |i|\n        if n.count(i) > i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "\tn = n.to_s.split('')\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.split('').map(&:to_i).each do |n|\n    return false if n.to_s.count(n.to_s) > n\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "    n = n.to_s.chars.map(&:to_i)\n    n.each do |i|\n        if n.count(i) > i\n            return false\n        end\n    end\n    return true\nend",
    "\tn = n.to_s\n\tn = n.split(\"\")\n\tn = n.map(&:to_i)\n\tn = n.sort\n\tn = n.uniq\n\tn = n.map { |x| n.count(x) }\n\tn = n.sort\n\tn = n.reverse\n\tif n == n.sort\n\t\treturn True\n\telse\n\t\treturn False\n\tend\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "\tn=n.to_s\n\tl=n.length\n\tfor i in 0..l-1\n\t\tcount=0\n\t\tfor j in 0..l-1\n\t\t\tif n[i]==n[j]\n\t\t\t\tcount+=1\n\t\t\tend\n\t\tend\n\t\tif count>n[i].to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nputs validate(1223)\nputs validate(1234)\nputs validate(1233)\nputs validate(1222)\nputs validate(12222)\nputs validate(122222)\nputs validate(1222222)\nputs validate(12222222)\nputs validate(122222222)\nputs validate(1222222222)\nputs validate(12222222222)\nputs validate(122222222222)\nputs validate(1222222222222)\nputs validate(12222222222222)\nputs validate(122222222222222)\nputs validate(1222222222222222)\nputs validate(12222222222222222)\nputs validate(122222222222222222)\nputs validate(1222222222222222222)\nputs validate(12222222222222222222)\nputs validate(122222222222222222222)\nputs validate(1222222222222222222222)\nputs validate(12222222222222222222222)\nputs validate(122222222222222222222222)\nputs validate(1222222222222222222222222)\nputs validate(12222222222222222222222222)\nputs validate(122222222222222222222222222)\nputs validate(1222222222222222222222222222)\nputs validate(12222222222222222222222222222)\nputs validate(12222222222222222222222222",
    "    n = n.to_s.split(\"\")\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.each do |i|\n    return false if n.to_s.count(i) > i.to_i\n  end\n  true\nend",
    "  n.to_s.chars.group_by(&:to_i).all? { |k, v| v.size <= k }\nend",
    "\tn = n.to_s.split('')\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn False\n\t\tend\n\tend\n\treturn True\nend",
    "    n = n.to_s\n    n.each_char do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "\t# Write your code here\n\tn=n.to_s\n\tn=n.split(\"\")\n\tn=n.map(&:to_i)\n\tn.each do |i|\n\t\tif n.count(i)>i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  n = n.to_s.split('')\n  n.each do |i|\n    if n.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "\tn = n.to_s\n\tn = n.split(\"\")\n\tn = n.map(&:to_i)\n\tn = n.sort\n\tn = n.uniq\n\tn.each do |i|\n\t\tif n.count(i) > i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "\tn = n.to_s.split('')\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  n.to_s.split('').each do |i|\n    return false if n.to_s.count(i) > i.to_i\n  end\n  true\nend",
    "  n.to_s.chars.group_by(&:to_i).all? { |k, v| v.size <= k }\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n=n.to_s\n    n=n.split(\"\")\n    n.each do |i|\n        if n.count(i)>i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "\tn = n.to_s.split('')\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.digits.each do |digit|\n    return false if n.digits.count(digit) > digit\n  end\n  true\nend",
    "    n = n.to_s.split('')\n    n = n.map(&:to_i)\n    n = n.sort\n    n = n.reverse\n    n = n.uniq\n    n = n.map {|x| x * x}\n    n = n.sum\n    return n\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split(\"\")\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return False\n        end\n    end\n    return True\nend",
    "  n.to_s.chars.each do |i|\n    return false if n.to_s.count(i) > i.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s\n    n.each_char do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.each do |digit|\n    return false if n.to_s.count(digit) > digit.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "    n.to_s.split('').map(&:to_i).each do |digit|\n        if n.to_s.count(digit.to_s) > digit\n            return False\n        end\n    end\n    return True\nend",
    "  n.to_s.chars.each_with_object(Hash.new(0)) { |c, h| h[c] += 1 }.each do |k, v|\n    return false if v > k.to_i\n  end\n  true\nend",
    "    n = n.to_s\n    n.each_char do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n = n.to_s\n  n.each_char do |c|\n    if n.count(c) > c.to_i\n      return false\n    end\n  end\n  return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.each do |i|\n    return false if n.to_s.count(i) > i.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "\tn = n.to_s.split('')\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "\tn = n.to_s.split('')\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "\tn = n.to_s.split('').map(&:to_i)\n\tn.each do |i|\n\t\tif n.count(i) > i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "\tn=n.to_s\n\tn=n.split(\"\")\n\tfor i in 0..n.length-1\n\t\tcount=0\n\t\tfor j in 0..n.length-1\n\t\t\tif n[i]==n[j]\n\t\t\t\tcount+=1\n\t\t\tend\n\t\tend\n\t\tif count>n[i].to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "\t# Write your code here\n\tn = n.to_s\n\tcount = Hash.new(0)\n\tn.each_char do |i|\n\t\tcount[i.to_i] += 1\n\tend\n\tcount.each do |k,v|\n\t\tif k < v\n\t\t\treturn False\n\t\tend\n\tend\n\treturn True\nend",
    "  n.to_s.chars.group_by(&:to_i).all? { |k, v| v.size <= k }\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "\tn = n.to_s.split('')\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  n.to_s.chars.map(&:to_i).each { |x| return false if n.to_s.count(x.to_s) > x }\n  true\nend",
    "    n = n.to_s\n    n = n.split(\"\")\n    n = n.map(&:to_i)\n    n = n.sort\n    n = n.uniq\n    n.each do |i|\n        if n.count(i) > i\n            return False\n        end\n    end\n    return True\nend",
    "    n = n.to_s.split('').map(&:to_i)\n    n.each do |i|\n        if n.count(i) > i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s\n    n = n.split(\"\")\n    n = n.map(&:to_i)\n    n = n.sort\n    n = n.uniq\n    n.each do |i|\n        if n.count(i) <= i\n            return True\n        else\n            return False\n        end\n    end\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "\tn = n.to_s.split('')\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    n = n.to_s\n    n.each_char do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "\tn.to_s.chars.map(&:to_i).each do |i|\n\t\tif n.to_s.count(i.to_s) > i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  a = n.to_s.split('')\n  a.each do |i|\n    if a.count(i) > i.to_i\n      return false\n    end\n  end\n  return true\nend",
    "    n = n.to_s.split(\"\")\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s\n    n = n.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "\tn = n.to_s.split('')\n\tn = n.map(&:to_i)\n\tn.each do |i|\n\t\tif n.count(i) > i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  n.to_s.chars.map(&:to_i).each do |i|\n    return false if n.to_s.count(i.to_s) > i\n  end\n  true\nend",
    "\tn = n.to_s\n\tn = n.split(\"\")\n\tn = n.map(&:to_i)\n\tn = n.sort\n\tn = n.uniq\n\tfor i in 0...n.length\n\t\tif n[i] == n.count(n[i])\n\t\t\treturn True\n\t\telse\n\t\t\treturn False\n\t\tend\n\tend\nend",
    "    n = n.to_s\n    n = n.split('')\n    n = n.map(&:to_i)\n    n = n.sort\n    n = n.uniq\n    n.each do |i|\n        if n.count(i) > i\n            return False\n        end\n    end\n    return True\nend",
    "    n = n.to_s.split(\"\")\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "\tx = n.to_s.split('')\n\tx.each do |i|\n\t\tif x.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  n.to_s.chars.each do |i|\n    return false if n.to_s.count(i) > i.to_i\n  end\n  true\nend",
    "  n.to_s.chars.map(&:to_i).each do |digit|\n    return false if n.to_s.count(digit.to_s) > digit\n  end\n  true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return False\n        end\n    end\n    return True\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "\tn = n.to_s.split('')\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.digits.each { |d| return false if n.digits.count(d) > d }\n  true\nend",
    "    n = n.to_s.split(\"\")\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return False\n        end\n    end\n    return True\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n.to_s.chars.map(&:to_i).each do |digit|\n        return false if n.to_s.count(digit.to_s) > digit\n    end\n    true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "  n.to_s.split('').map(&:to_i).each do |x|\n    return false if n.to_s.count(x.to_s) > x\n  end\n  true\nend",
    "    n = n.to_s\n    n.each_char do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split(\"\")\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "\tn = n.to_s.split('')\n\tn.each do |i|\n\t\tif n.count(i) > i.to_i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    n = n.to_s\n    n.each_char do |c|\n        if n.count(c) > c.to_i\n            return false\n        end\n    end\n    return true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend",
    "\tn = n.to_s.split('').map(&:to_i)\n\tn.each do |i|\n\t\tif n.count(i) > i\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    n = n.to_s.split('')\n    n.each do |i|\n        if n.count(i) > i.to_i\n            return false\n        end\n    end\n    return true\nend"
  ]
}