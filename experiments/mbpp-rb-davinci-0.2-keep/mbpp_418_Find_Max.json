{
  "name": "mbpp_418_Find_Max",
  "language": "rb",
  "prompt": "# Write a python function to find the element of a list having maximum length.\ndef Find_Max(lst)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Find_Max\n    candidate = method(:Find_Max)\n    assert_equal([\"A\", \"B\", \"C\"], candidate.call([[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]]))\n    assert_equal([1, 2, 3], candidate.call([[1], [1, 2], [1, 2, 3]]))\n    assert_equal([1, 5, 6, 1], candidate.call([[1, 1], [1, 2, 3], [1, 5, 6, 1]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    max = lst[0]\n    for i in lst\n        if i.length > max.length\n            max = i\n        end\n    end\n    return max\nend",
    "    max = lst[0]\n    for i in lst\n        if i.length > max.length\n            max = i\n        end\n    end\n    return max\nend",
    "    max = lst[0]\n    for i in lst\n        if max.length < i.length\n            max = i\n        end\n    end\n    return max\nend",
    "    max = lst[0]\n    for i in lst\n        if i.length > max.length\n            max = i\n        end\n    end\n    return max\nend",
    "  max = lst[0]\n  for i in lst\n    if i.length > max.length\n      max = i\n    end\n  end\n  return max\nend",
    "    max = lst[0]\n    for i in lst\n        if i.length > max.length\n            max = i\n        end\n    end\n    return max\nend",
    "    max = lst[0]\n    for i in lst\n        if i.length > max.length\n            max = i\n        end\n    end\n    return max\nend",
    "    max = lst[0]\n    for i in lst\n        if i.length > max.length\n            max = i\n        end\n    end\n    return max\nend",
    "    max = lst[0]\n    for i in lst\n        if i.length > max.length\n            max = i\n        end\n    end\n    return max\nend",
    "    max = lst[0]\n    for i in lst\n        if i.length > max.length\n            max = i\n        end\n    end\n    return max\nend",
    "    max = lst[0]\n    for i in lst\n        if i.length > max.length\n            max = i\n        end\n    end\n    return max\nend",
    "    max = lst[0]\n    for i in lst\n        if i.length > max.length\n            max = i\n        end\n    end\n    return max\nend",
    "    max_len = 0\n    max_ele = 0\n    for i in lst\n        if i.length > max_len\n            max_len = i.length\n            max_ele = i\n        end\n    end\n    return max_ele\nend",
    "    max = lst[0]\n    for i in lst\n        if i.length > max.length\n            max = i\n        end\n    end\n    return max\nend",
    "    max = lst[0]\n    for i in lst\n        if i.length > max.length\n            max = i\n        end\n    end\n    return max\nend",
    "    max = lst[0]\n    for i in lst\n        if i.length > max.length\n            max = i\n        end\n    end\n    return max\nend",
    "    max = lst[0]\n    for i in lst\n        if i.length > max.length\n            max = i\n        end\n    end\n    return max\nend",
    "    max = lst[0]\n    for i in lst\n        if i.length > max.length\n            max = i\n        end\n    end\n    return max\nend",
    "    max = lst[0]\n    for i in lst\n        if max.length < i.length\n            max = i\n        end\n    end\n    return max\nend",
    "    max = lst[0]\n    for i in lst\n        if i.length > max.length\n            max = i\n        end\n    end\n    return max\nend"
  ]
}