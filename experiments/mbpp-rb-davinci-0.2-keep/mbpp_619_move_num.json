{
  "name": "mbpp_619_move_num",
  "language": "rb",
  "prompt": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  num_arr = []\n  str_arr = []\n  test_str.split('').each do |char|\n    if char.to_i.to_s == char\n      num_arr << char\n    else\n      str_arr << char\n    end\n  end\n  str_arr.join + num_arr.join\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/\\d+/, '') + test_str.scan(/\\d+/).join\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend",
    "  test_str.gsub(/[a-zA-Z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/\\d/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.scan(/[a-zA-Z]+|\\d+/).map{|x| x[/\\d+/] ? x.to_i : x}.sort_by{|x| x.is_a?(Integer) ? 1 : 0}.join\nend",
    "  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  # write your code here\n  test_str.gsub(/[a-zA-Z]/, ' ').split.join(' ') + test_str.gsub(/[0-9]/, ' ').split.join(' ')\nend",
    "  # code goes here\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend",
    "  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/i, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[^a-zA-Z]/, '').concat(test_str.gsub(/[a-zA-Z]/, ''))\nend",
    "  test_str.chars.partition { |x| x =~ /[a-z]/ }.flatten.join\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-zA-Z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend",
    "  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.chars.partition { |c| c =~ /[a-z]/ }.flatten.join\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, ' ').squeeze(' ') + test_str.gsub(/[0-9]/, ' ').squeeze(' ')\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  nums = test_str.scan(/\\d+/)\n  letters = test_str.scan(/\\D+/)\n  letters.join + nums.join\nend",
    "  test_str.gsub(/[a-zA-Z]+/, '') + test_str.gsub(/[0-9]+/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  num_arr = []\n  str_arr = []\n  test_str.split('').each do |x|\n    if x =~ /\\d/\n      num_arr << x\n    else\n      str_arr << x\n    end\n  end\n  str_arr.join + num_arr.join\nend",
    "  test_str.scan(/\\D/).join + test_str.scan(/\\d/).join\nend",
    "  test_str.gsub(/[a-z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/\\d+/, '') + test_str.scan(/\\d+/).join\nend",
    "  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend",
    "  test_str.gsub(/[^a-z]/i, '') + test_str.gsub(/[a-z]/i, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend",
    "  test_str.gsub(/[a-zA-Z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/i, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  nums = []\n  test_str.each_char do |char|\n    if char =~ /\\d/\n      nums << char\n    end\n  end\n  test_str.delete!(\"0-9\")\n  test_str << nums.join\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/\\d/, ''))\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend",
    "  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend",
    "  test_str.split('').sort_by { |x| x.match(/\\d/) ? 0 : 1 }.join\nend",
    "  test_str.gsub(/[a-z]/i, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/\\d+/, '') + test_str.scan(/\\d+/).join\nend",
    "  test_str.gsub(/\\d+/, '') + test_str.scan(/\\d+/).join\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]+/, '') + test_str.gsub(/[0-9]+/, '')\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[^0-9]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/\\d+/, '') + test_str.scan(/\\d+/).join\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/\\d/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/\\d+/, '') + test_str.gsub(/\\D+/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-zA-Z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend",
    "  test_str.scan(/[a-zA-Z]+/).join + test_str.scan(/\\d+/).join\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/i, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/i, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  return test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/i, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/\\d+/, '') + test_str.scan(/\\d+/).join\nend",
    "  # split the string into an array\n  # iterate through the array\n  # if the element is a number, move it to the end of the array\n  # join the array back into a string\n  test_arr = test_str.split('')\n  test_arr.each_with_index do |char, index|\n    if char.to_i.to_s == char\n      test_arr.delete_at(index)\n      test_arr.push(char)\n    end\n  end\n  test_arr.join('')\nend",
    "  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.split('').sort_by {|x| x.match(/\\d/) ? 0 : 1}.join\nend",
    "  test_str.gsub(/[a-zA-Z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/, '').split('').join + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-zA-Z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/\\d+/, '') + test_str.scan(/\\d+/).join\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend",
    "  test_str.gsub(/[a-zA-Z]/, '').concat(test_str.gsub(/[^a-zA-Z]/, ''))\nend",
    "  num = test_str.scan(/\\d+/)\n  alpha = test_str.scan(/[a-zA-Z]+/)\n  alpha.join + num.join\nend",
    "  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  num_arr = []\n  test_str.each_char do |char|\n    if char.to_i.to_s == char\n      num_arr << char\n    end\n  end\n  test_str.delete!('0123456789')\n  test_str << num_arr.join\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-zA-Z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[^0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.delete('^0-9').concat(test_str.delete('0-9'))\nend",
    "  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-zA-Z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.chars.partition { |x| x =~ /[a-zA-Z]/ }.flatten.join\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/\\d/, \"\"))\nend",
    "  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend",
    "  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend"
  ]
}