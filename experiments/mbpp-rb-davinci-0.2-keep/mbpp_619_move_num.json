{
  "name": "mbpp_619_move_num",
  "language": "rb",
  "prompt": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  num_arr = []\n  str_arr = []\n  test_str.split('').each do |char|\n    if char.to_i.to_s == char\n      num_arr << char\n    else\n      str_arr << char\n    end\n  end\n  str_arr.join + num_arr.join\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/\\d+/, '') + test_str.scan(/\\d+/).join\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend",
    "  test_str.gsub(/[a-zA-Z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend",
    "  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/\\d/, \"\"))\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend",
    "  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend"
  ]
}