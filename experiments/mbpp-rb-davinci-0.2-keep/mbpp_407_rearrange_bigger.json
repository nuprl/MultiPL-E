{
  "name": "mbpp_407_rearrange_bigger",
  "language": "rb",
  "prompt": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  n = n.to_s.split('')\n  n.each_with_index do |num, idx|\n    if idx < n.length - 1\n      if n[idx].to_i > n[idx + 1].to_i\n        n[idx], n[idx + 1] = n[idx + 1], n[idx]\n        break\n      end\n    end\n  end\n  n.join('').to_i\nend",
    "  n = n.to_s.split('').map(&:to_i)\n  (n.size - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  # n = n.to_s.split('').map(&:to_i)\n  # n.permutation.to_a.map(&:join).map(&:to_i).select { |num| num > n }.min\n  n.to_s.chars.sort.reverse.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  i = n_arr.length - 1\n  while i > 0\n    if n_arr[i] > n_arr[i-1]\n      n_arr[i], n_arr[i-1] = n_arr[i-1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  return -1 if n.to_s.size == 1\n  n = n.to_s.split('').map(&:to_i)\n  i = n.size - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  # convert to string, split into array of chars, sort in descending order, join and convert back to integer\n  n.to_s.chars.sort.reverse.join.to_i\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, the number is already the biggest possible\n  return -1 if i == -1\n  # find the smallest digit to the right of the pivot that is bigger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # convert back to integer and return\n  digits.join.to_i\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j >= 0\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, index|\n    if n[index + 1] && num < n[index + 1]\n      n[index], n[index + 1] = n[index + 1], n[index]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && n_arr[i+1].to_i > num.to_i\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend",
    "  # Convert the number to an array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # Find the first digit that is smaller than the digit to its right\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      # Find the smallest digit to the right of the pivot that is greater than the pivot\n      swap_index = i + 1\n      (i + 1).upto(digits.length - 1) do |j|\n        swap_index = j if digits[j] > digits[i] && digits[j] < digits[swap_index]\n      end\n      # Swap the pivot with the smallest digit to its right that is greater than the pivot\n      digits[i], digits[swap_index] = digits[swap_index], digits[i]\n      # Reverse the digits to the right of the pivot\n      digits[i + 1..-1] = digits[i + 1..-1].reverse\n      # Return the number\n      return digits.join.to_i\n    end\n  end\n  # Return -1 if no bigger number exists\n  -1\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # convert back to integer and return\n  digits.join.to_i\nend",
    "  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i-1]\n      n[i], n[i-1] = n[i-1], n[i]\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  # if i is at the end of the array, then there is no bigger number\n  return -1 if i == digits.length - 1\n  # find the smallest digit to the right of i that is larger than digits[i]\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap digits[i] and digits[j]\n  digits[i], digits[j] = digits[j], digits[i]\n  # sort the digits to the right of i\n  digits[i + 1..-1] = digits[i + 1..-1].sort\n  # return the number\n  digits.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i + 1] && n_arr[i + 1].to_i > num.to_i\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend",
    "  # find the first digit that is not in descending order\n  # find the next largest digit to the right of that digit\n  # swap the two digits\n  # sort the digits to the right of the swapped digits\n  # join the digits together\n  # return the number\n  digits = n.to_s.split('').map(&:to_i)\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  if i == digits.length - 1\n    return -1\n  end\n  j = i + 1\n  while j < digits.length\n    if digits[j] <= digits[i]\n      break\n    end\n    j += 1\n  end\n  j -= 1\n  digits[i], digits[j] = digits[j], digits[i]\n  digits[i + 1..-1] = digits[i + 1..-1].sort\n  digits.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    n_arr.each_with_index do |num2, j|\n      if num2 > num && j > i\n        n_arr[i], n_arr[j] = n_arr[j], n_arr[i]\n        return n_arr.join.to_i\n      end\n    end\n  end\n  -1\nend",
    "  # convert to string\n  # split into array\n  # sort array\n  # join array\n  # convert to integer\n  n.to_s.split('').sort.join.to_i\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && num < n[i+1]\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of i that is larger than digits[i]\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the two digits\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of i\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join('').to_i\nend",
    "  n = n.to_s.split('')\n  (n.length - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0 && n[i] <= n[i-1]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = n.length - 1\n  while n[j] <= n[i-1]\n    j -= 1\n  end\n  n[i-1], n[j] = n[j], n[i-1]\n  n[i..-1] = n[i..-1].reverse\n  n.join.to_i\nend",
    "  # get all permutations of the digits\n  permutations = n.to_s.split('').permutation.map(&:join).map(&:to_i)\n  # find the next biggest number\n  permutations.sort.reverse.find { |p| p > n }\nend",
    "  n = n.to_s.split(\"\").map(&:to_i)\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i-1]\n      n[i], n[i-1] = n[i-1], n[i]\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  n_str = n.to_s\n  n_str.split('').permutation.map(&:join).map(&:to_i).select { |num| num > n }.min\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index < n_array.length - 1\n      if n_array[index].to_i > n_array[index + 1].to_i\n        n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n        return n_array.join('').to_i\n      end\n    end\n  end\n  -1\nend",
    "  return -1 if n.to_s.size == 1\n  digits = n.to_s.split('')\n  i = digits.size - 1\n  while i > 0\n    if digits[i] > digits[i - 1]\n      digits[i], digits[i - 1] = digits[i - 1], digits[i]\n      return digits.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend",
    "  # find the first digit from the right that is smaller than the digit to its right\n  # find the smallest digit to the right of the pivot that is bigger than the pivot\n  # swap the pivot with the smallest digit\n  # sort the digits to the right of the pivot in ascending order\n  # join the digits to form the number\n  digits = n.to_s.split('')\n  pivot = digits.length - 2\n  while pivot >= 0\n    if digits[pivot] < digits[pivot + 1]\n      swap = pivot + 1\n      (pivot + 1..digits.length - 1).each do |i|\n        swap = i if digits[i] < digits[swap] && digits[i] > digits[pivot]\n      end\n      digits[pivot], digits[swap] = digits[swap], digits[pivot]\n      digits[pivot + 1..-1] = digits[pivot + 1..-1].sort\n      return digits.join.to_i\n    end\n    pivot -= 1\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |digit, index|\n    if index < n_array.length - 1\n      if digit.to_i < n_array[index + 1].to_i\n        n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n        return n_array.join.to_i\n      end\n    end\n  end\n  return -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, index|\n    if index == n_arr.length - 1\n      return -1\n    elsif num < n_arr[index + 1]\n      n_arr[index], n_arr[index + 1] = n_arr[index + 1], n_arr[index]\n      return n_arr.join('').to_i\n    end\n  end\nend",
    "  digits = n.to_s.split('')\n  digits.each_with_index do |digit, i|\n    if digits[i + 1] && digits[i + 1] > digit\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend",
    "  # get all permutations of the digits\n  # sort them\n  # find the next biggest number\n  # return it\n  # if there is no next biggest number, return -1\n  perms = n.to_s.split('').permutation.to_a.map { |perm| perm.join('').to_i }.sort\n  perms.each_with_index do |perm, i|\n    return perms[i + 1] if perm == n\n  end\n  -1\nend",
    "  n = n.to_s.split('')\n  return -1 if n.sort.join == n.join\n  (n.length - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend",
    "  return -1 if n.to_s.size == 1\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.size - 1\n  while i > 0\n    if digits[i] > digits[i - 1]\n      digits[i], digits[i - 1] = digits[i - 1], digits[i]\n      return digits.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  index = digits.each_with_index.find { |d, i| d < digits[i + 1] }[1]\n  # find the smallest digit to the right of the index that is larger than the digit at the index\n  swap_index = digits[index + 1..-1].each_with_index.find { |d, i| d > digits[index] }[1] + index + 1\n  # swap the digits\n  digits[index], digits[swap_index] = digits[swap_index], digits[index]\n  # sort the digits to the right of the index\n  digits[index + 1..-1] = digits[index + 1..-1].sort\n  # convert to integer\n  digits.join('').to_i\nend",
    "  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join.to_i\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i + 1] && n[i + 1] > num\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join('').to_i\n    end\n  end\n  -1\nend",
    "  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join('').to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif n_array[index] < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend",
    "  n = n.to_s.split('')\n  (n.length - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.permutation.to_a.map(&:join).map(&:to_i).sort.reverse.each do |i|\n    return i if i > n\n  end\n  -1\nend",
    "  # convert to string\n  # split into array of chars\n  # sort array\n  # join array\n  # convert to int\n  n.to_s.chars.sort.join.to_i\nend",
    "  digits = n.to_s.split('').map(&:to_i)\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i + 1] && n_arr[i + 1].to_i > num.to_i\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend",
    "  n = n.to_s.split('').map(&:to_i)\n  return -1 if n.size == 1\n  i = n.size - 1\n  while i > 0 && n[i] <= n[i - 1]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = n.size - 1\n  while n[j] <= n[i - 1]\n    j -= 1\n  end\n  n[i - 1], n[j] = n[j], n[i - 1]\n  n[i..-1] = n[i..-1].reverse\n  n.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join('').to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.permutation.to_a.map(&:join).map(&:to_i).sort.reverse.each do |num|\n    return num if num > n\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i < n_arr.length - 1\n      if n_arr[i].to_i < n_arr[i + 1].to_i\n        n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n        return n_arr.join('').to_i\n      end\n    end\n  end\n  -1\nend",
    "  # convert number to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit from the right that is smaller than the one to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  return -1 if i == -1\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend",
    "  # Get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # Find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # If no such digit exists, the number is the largest possible\n  return -1 if i < 0\n  # Find the smallest digit to the right of i that is larger than digits[i]\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # Swap the two digits\n  digits[i], digits[j] = digits[j], digits[i]\n  # Reverse the digits to the right of i\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # Return the number\n  digits.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, index|\n    if n_arr[index + 1] && n_arr[index + 1] > num\n      n_arr[index], n_arr[index + 1] = n_arr[index + 1], n_arr[index]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend",
    "  # convert to string, split into array, sort, join, convert to int\n  n.to_s.split('').sort.join.to_i\nend",
    "  # Convert the number to an array of digits\n  digits = n.to_s.split(\"\")\n  # Find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # If no such digit exists, the number is already the biggest possible\n  return -1 if i < 0\n  # Find the smallest digit to the right of the pivot that is bigger than the pivot\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # Swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # Reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # Return the number as an integer\n  digits.join(\"\").to_i\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is less than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)",
    "  # convert to string\n  n = n.to_s\n  # split string into array of chars\n  n = n.split('')\n  # find the first digit that is smaller than the digit to its right\n  n.each_with_index do |digit, index|\n    if digit < n[index+1]\n      # swap the two digits\n      n[index], n[index+1] = n[index+1], n[index]\n      # return the number\n      return n.join('').to_i\n    end\n  end\n  # if no such digit exists, return -1\n  return -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && n_arr[i+1].to_i > num.to_i\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, index|\n    if n[index + 1] && n[index + 1].to_i > num.to_i\n      n[index], n[index + 1] = n[index + 1], n[index]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  # convert to string\n  # split into array\n  # sort array\n  # join array\n  # convert to integer\n  n.to_s.split('').sort.join.to_i\nend",
    "  # Get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # Find the first number that is smaller than the number to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # If we found such a number, swap it with the smallest number to its right that is bigger than it\n  if i >= 0\n    j = digits.length - 1\n    while j >= 0 && digits[j] <= digits[i]\n      j -= 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n  end\n  # Reverse the numbers to the right of the number we swapped\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # Return the number\n  digits.join.to_i\nend",
    "  return -1 if n.to_s.split('').uniq.length == 1\n  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0 && n[i] <= n[i - 1]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = n.length - 1\n  while n[j] <= n[i - 1]\n    j -= 1\n  end\n  n[i - 1], n[j] = n[j], n[i - 1]\n  n[i..-1] = n[i..-1].reverse\n  n.join.to_i\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  # if there is no such digit, then the number is the largest possible\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i+1]\n      break\n    end\n    i -= 1\n  end\n  # if the number is the largest possible, return -1\n  if i < 0\n    return -1\n  end\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot that is larger than the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  digits = n.to_s.split('')\n  digits.each_with_index do |digit, index|\n    next if index == 0\n    if digit > digits[index - 1]\n      digits[index], digits[index - 1] = digits[index - 1], digits[index]\n      return digits.join.to_i\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i < n_arr.length - 1\n      if num < n_arr[i + 1]\n        n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n        return n_arr.join('').to_i\n      end\n    end\n  end\n  -1\nend",
    "  # convert to string\n  # split string into array\n  # sort array\n  # join array\n  # convert to integer\n  n.to_s.split('').sort.join.to_i\nend",
    "  n = n.to_s.split('')\n  (n.length - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  digits = n.to_s.split('')\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend",
    "  # if n is a single digit, there is no bigger number\n  return nil if n < 10\n  # convert n to an array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit after it\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  # if no such digit exists, there is no bigger number\n  return nil if i == digits.length - 1\n  # find the smallest digit that is bigger than the digit at i\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap the digits at i and j\n  digits[i], digits[j] = digits[j], digits[i]\n  # sort the digits after i\n  digits[i + 1..-1].sort!\n  # convert the array of digits back to an integer\n  digits.join.to_i\nend",
    "  n = n.to_s.split('').map(&:to_i)\n  (n.length - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  # find the first digit that is smaller than the digit to its right\n  # find the smallest digit to the right of that digit that is larger than it\n  # swap those digits\n  # reverse the digits to the right of the swapped digits\n  n_arr = n.to_s.split('')\n  i = n_arr.length - 2\n  while i >= 0\n    if n_arr[i] < n_arr[i + 1]\n      break\n    end\n    i -= 1\n  end\n  return -1 if i < 0\n  j = n_arr.length - 1\n  while j > i\n    if n_arr[j] > n_arr[i]\n      break\n    end\n    j -= 1\n  end\n  n_arr[i], n_arr[j] = n_arr[j], n_arr[i]\n  n_arr[i + 1..-1] = n_arr[i + 1..-1].reverse\n  n_arr.join('').to_i\nend",
    "  digits = n.to_s.split('')\n  return -1 if digits.length == 1\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      (digits.length - 1).downto(i + 1) do |j|\n        if digits[j] > digits[i]\n          digits[i], digits[j] = digits[j], digits[i]\n          digits[i + 1..-1] = digits[i + 1..-1].sort\n          return digits.join('').to_i\n        end\n      end\n    end\n  end\n  -1\nend",
    "  # convert number to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i == digits.length - 1\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  # split the number into an array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the digit found above\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the two digits\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the digit found above\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join('').to_i\nend",
    "  n = n.to_s.split('').map(&:to_i)\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  # get all permutations of the digits\n  digits = n.to_s.split('')\n  permutations = digits.permutation.to_a\n  # sort the permutations\n  permutations.sort!\n  # find the index of the given number\n  index = permutations.index(digits)\n  # return the next bigger number\n  return permutations[index + 1].join.to_i\nend",
    "  n_array = n.to_s.split(\"\").map(&:to_i)\n  n_array.permutation.to_a.map {|a| a.join.to_i}.sort.each do |num|\n    return num if num > n\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, idx|\n    if n_array[idx + 1] && n_array[idx + 1].to_i > num.to_i\n      n_array[idx], n_array[idx + 1] = n_array[idx + 1], n_array[idx]\n      return n_array.join('').to_i\n    end\n  end\n  -1\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i == digits.length - 1\n  # find the smallest digit to the right of the digit found above that is greater than the digit found above\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap the two digits\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the digit found above\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  n = n.to_s.split('')\n  n.permutation.to_a.map { |x| x.join.to_i }.sort.reverse.each do |x|\n    return x if x > n.join.to_i\n  end\n  -1\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of i that is greater than digits[i]\n  j = digits.length - 1\n  while digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap digits[i] and digits[j]\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of i\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  digits = n.to_s.split('')\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    n.each_with_index do |num2, i2|\n      if num.to_i > num2.to_i && i2 > i\n        n[i], n[i2] = n[i2], n[i]\n        return n.join.to_i\n      end\n    end\n  end\n  -1\nend",
    "  digits = n.to_s.split('')\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join('').to_i\n    end\n  end\n  -1\nend",
    "  # split the number into an array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, the number is already the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # join the digits back into a number\n  digits.join.to_i\nend",
    "  # return -1 if n.to_s.size == 1\n  # return -1 if n.to_s.chars.sort.join.to_i == n\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join",
    "  return -1 if n.to_s.size == 1\n  arr = n.to_s.split('')\n  i = arr.size - 1\n  while i > 0 && arr[i - 1] >= arr[i]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = arr.size - 1\n  while arr[j] <= arr[i - 1]\n    j -= 1\n  end\n  arr[i - 1], arr[j] = arr[j], arr[i - 1]\n  arr[i..-1] = arr[i..-1].reverse\n  arr.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, index|\n    next if index == 0\n    if num > n_arr[index - 1]\n      n_arr[index - 1], n_arr[index] = n_arr[index], n_arr[index - 1]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if num.to_i > n[i+1].to_i\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join('').to_i\n    end\n  end\n  return -1\nend",
    "  return -1 if n.to_s.size == 1\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.size - 1\n  while i > 0\n    if digits[i] > digits[i - 1]\n      digits[i], digits[i - 1] = digits[i - 1], digits[i]\n      return digits.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  digits = n.to_s.split('')\n  digits.permutation.to_a.map { |a| a.join('').to_i }.sort.reverse.select { |x| x > n }.first\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i+1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  if i < 0\n    return -1\n  end\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  n_str = n.to_s\n  n_str_arr = n_str.split('')\n  n_str_arr.sort!\n  n_str_arr.reverse!\n  n_str_arr.join.to_i\nend",
    "  n_array = n.to_s.split('')\n  n_array.permutation.to_a.map { |a| a.join('').to_i }.sort.reverse.each do |i|\n    return i if i > n\n  end\n  -1\nend",
    "  num_array = n.to_s.split('')\n  num_array.each_with_index do |num, index|\n    if index == num_array.length - 1\n      return -1\n    elsif num_array[index] < num_array[index + 1]\n      num_array[index], num_array[index + 1] = num_array[index + 1], num_array[index]\n      return num_array.join('').to_i\n    end\n  end\nend",
    "  n = n.to_s.split('').map(&:to_i)\n  return -1 if n.length == 1\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # get the index of the first digit that is smaller than the digit to its right\n  index = digits.each_with_index.find { |d, i| d < digits[i + 1] }[1]\n  # get the index of the smallest digit that is bigger than the digit at the index\n  # found above\n  swap_index = digits[index + 1..-1].each_with_index.find { |d, i| d > digits[index] }[1] + index + 1\n  # swap the digits at the two indexes\n  digits[index], digits[swap_index] = digits[swap_index], digits[index]\n  # sort the digits after the index\n  digits[index + 1..-1] = digits[index + 1..-1].sort\n  # join the digits and convert to integer\n  digits.join.to_i\nend",
    "  # find the first digit that is smaller than the digit to its right\n  # find the smallest digit to the right of that digit that is larger than it\n  # swap those digits\n  # sort the digits to the right of the swapped digits\n  # return the number\n  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i-1]\n      break\n    end\n    i -= 1\n  end\n  if i > 0\n    j = i\n    while j < n.length\n      if n[j] < n[i-1]\n        break\n      end\n      j += 1\n    end\n    n[i-1], n[j-1] = n[j-1], n[i-1]\n    n[i..-1] = n[i..-1].sort\n  end\n  n.join('').to_i\nend",
    "  n_array = n.to_s.split('')\n  n_array.permutation.to_a.map { |x| x.join('').to_i }.select { |x| x > n }.min\nend",
    "  digits = n.to_s.split('').map(&:to_i)\n  return -1 if digits.length == 1\n  return -1 if digits.sort.reverse == digits",
    "  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the next digit\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i == digits.length - 1\n  # find the smallest digit that is larger than the digit at i\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap the digits at i and j\n  digits[i], digits[j] = digits[j], digits[i]\n  # sort the digits after i\n  digits[i + 1..-1] = digits[i + 1..-1].sort\n  # join the digits and convert to integer\n  digits.join.to_i\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && n[i+1].to_i > num.to_i\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # convert to integer and return\n  digits.join.to_i\nend",
    "  # find the first digit that is smaller than the digit to its right\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  # swap the pivot with the smallest digit to the right\n  # sort the digits to the right of the pivot in ascending order\n  # join the digits and return the number\n  digits = n.to_s.split('')\n  pivot = digits.length - 2\n  while pivot >= 0\n    if digits[pivot] < digits[pivot + 1]\n      break\n    else\n      pivot -= 1\n    end\n  end\n  return -1 if pivot == -1\n  swap_index = pivot + 1\n  (pivot + 1...digits.length).each do |i|\n    if digits[i] > digits[pivot] && digits[i] < digits[swap_index]\n      swap_index = i\n    end\n  end\n  digits[pivot], digits[swap_index] = digits[swap_index], digits[pivot]\n  digits[pivot + 1..-1] = digits[pivot + 1..-1].sort\n  digits.join.to_i\nend",
    "  # get the digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the next\n  i = 0\n  while i < digits.length - 1\n    break if digits[i] < digits[i+1]\n    i += 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i == digits.length - 1\n  # find the smallest digit to the right of the pivot that is bigger than the pivot\n  j = i + 1\n  while j < digits.length\n    break if digits[i] < digits[j]\n    j += 1\n  end\n  # swap the pivot with the smallest digit to the right\n  digits[i], digits[j] = digits[j], digits[i]\n  # sort the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].sort\n  # return the new number\n  digits.join.to_i\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  if i < 0\n    return -1\n  end\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot that is larger than the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && n[i+1].to_i > num.to_i\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  digits = n.to_s.split('')\n  i = digits.length - 1\n  while i > 0 && digits[i - 1] >= digits[i]\n    i -= 1\n  end\n  return -1 if i <= 0\n  j = digits.length - 1\n  while digits[j] <= digits[i - 1]\n    j -= 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  digits[i..-1] = digits[i..-1].reverse\n  digits.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && num < n_arr[i+1]\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend",
    "  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr_sorted = n_arr.sort\n  n_arr_sorted_reverse = n_arr_sorted.reverse\n  n_arr_sorted_reverse_str = n_arr_sorted_reverse.join('')\n  n_arr_sorted_reverse_int = n_arr_sorted_reverse_str.to_i\n  if n_arr_sorted_reverse_int > n\n    return n_arr_sorted_reverse_int\n  else\n    return -1\n  end\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first number that is smaller than the number to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if there is no such number, return -1\n  return -1 if i < 0\n  # find the smallest number to the right of the number found above that is greater than it\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the two numbers\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the numbers to the right of the number found above\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  return -1 if n.to_s.chars.sort == n.to_s.chars.sort.reverse\n  n.to_s.chars.sort.reverse.join.to_i\nend",
    "  n_arr = n.to_s.split(\"\")\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && n_arr[i+1].to_i > num.to_i\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join(\"\").to_i\n    end\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index < n_array.length - 1\n      if num < n_array[index + 1]\n        n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n        return n_array.join('').to_i\n      end\n    end\n  end\n  -1\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, index|\n    if n[index + 1] && num < n[index + 1]\n      n[index], n[index + 1] = n[index + 1], n[index]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |n, i|\n    if n_array[i + 1] && n_array[i + 1].to_i > n.to_i\n      n_array[i], n_array[i + 1] = n_array[i + 1], n_array[i]\n      return n_array.join('').to_i\n    end\n  end\n  -1\nend",
    "  # split the number into an array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  if i < 0\n    return -1\n  end\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend",
    "  n_array = n.to_s.split('')\n  n_array.permutation.map(&:join).map(&:to_i).sort.reverse.each do |num|\n    return num if num > n\n  end\n  -1\nend",
    "  n = n.to_s.split('').map(&:to_i)\n  return -1 if n == n.sort.reverse\n  (n.size - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      (n.size - 1).downto(i + 1) do |j|\n        if n[j] > n[i]\n          n[i], n[j] = n[j], n[i]\n          n[i + 1..-1] = n[i + 1..-1].sort\n          return n.join.to_i\n        end\n      end\n    end\n  end\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, index|\n    if index == n_arr.length - 1\n      return -1\n    elsif num < n_arr[index + 1]\n      n_arr[index], n_arr[index + 1] = n_arr[index + 1], n_arr[index]\n      return n_arr.join('').to_i\n    end\n  end\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |digit, index|\n    if index == n_array.length - 1\n      return -1\n    elsif digit < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join.to_i\n    end\n  end\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, i|\n    if n_array[i + 1] && n_array[i + 1].to_i > num.to_i\n      n_array[i], n_array[i + 1] = n_array[i + 1], n_array[i]\n      return n_array.join('').to_i\n    end\n  end\n  -1\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  index = digits.each_with_index.find { |digit, i| digit < digits[i + 1] }[1]\n  # find the smallest digit to the right of the digit that is bigger than it\n  swap_index = digits[index + 1..-1].each_with_index.find { |digit, i| digit > digits[index] }[1] + index + 1\n  # swap the two digits\n  digits[index], digits[swap_index] = digits[swap_index], digits[index]\n  # reverse the digits to the right of the swapped digit\n  digits[index + 1..-1] = digits[index + 1..-1].reverse\n  # convert to integer\n  digits.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, index|\n    if n_arr[index + 1] && n_arr[index + 1].to_i > num.to_i\n      n_arr[index], n_arr[index + 1] = n_arr[index + 1], n_arr[index]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the one to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i == -1\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend",
    "  # get all permutations of the digits\n  # select the permutations that are bigger than the original number\n  # return the smallest of those permutations\n  # if there are no permutations that are bigger than the original number, return -1\n  digits = n.to_s.split('')\n  permutations = digits.permutation.to_a\n  bigger_permutations = permutations.select { |permutation| permutation.join.to_i > n }\n  bigger_permutations.empty? ? -1 : bigger_permutations.min.join.to_i\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, index|\n    if n[index + 1] && n[index + 1].to_i > num.to_i\n      n[index], n[index + 1] = n[index + 1], n[index]\n      return n.join('').to_i\n    end\n  end\n  -1\nend",
    "  # convert number to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend",
    "  n = n.to_s.chars.map(&:to_i)\n  i = n.length - 1\n  while i > 0 && n[i - 1] >= n[i]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = n.length - 1\n  while n[j] <= n[i - 1]\n    j -= 1\n  end\n  n[i - 1], n[j] = n[j], n[i - 1]\n  n[i..-1] = n[i..-1].reverse\n  n.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, index|\n    if index == n_arr.length - 1\n      return -1\n    elsif num < n_arr[index + 1]\n      n_arr[index], n_arr[index + 1] = n_arr[index + 1], n_arr[index]\n      return n_arr.join('').to_i\n    end\n  end\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if n_array[index + 1] && n_array[index + 1].to_i > num.to_i\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\n  -1\nend",
    "  # convert to string, split into array, sort, join, convert to int\n  n.to_s.split('').sort.join.to_i\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |n, i|\n    if n_array[i+1] && n_array[i+1].to_i > n.to_i\n      n_array[i], n_array[i+1] = n_array[i+1], n_array[i]\n      return n_array.join.to_i\n    end\n  end\n  -1\nend",
    "  # convert to string, split into array, sort in descending order, join\n  n.to_s.split('').sort.reverse.join.to_i\nend",
    "  n = n.to_s.split('')\n  n.permutation.to_a.map { |x| x.join('').to_i }.sort.reverse.each { |x| return x if x > n.join('').to_i }\n  -1\nend",
    "  return -1 if n.to_s.size == 1\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.size - 1\n  while i > 0 && digits[i - 1] >= digits[i]\n    i -= 1\n  end\n  return -1 if i <= 0\n  j = digits.size - 1\n  while digits[j] <= digits[i - 1]\n    j -= 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  digits[i..-1] = digits[i..-1].reverse\n  digits.join('').to_i\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif n_array[index] < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend",
    "  # get all permutations of the digits\n  permutations = n.to_s.split('').permutation.to_a\n  # sort the permutations\n  sorted_permutations = permutations.map { |permutation| permutation.join.to_i }.sort\n  # find the index of the given number in the sorted permutations\n  index = sorted_permutations.index(n)\n  # return the next number in the sorted permutations\n  sorted_permutations[index + 1]\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num.to_i < n_array[index + 1].to_i\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.permutation.to_a.map(&:join).map(&:to_i).sort.reverse.each do |num|\n    return num if num > n\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, i|\n    if i == n_array.length - 1\n      return -1\n    elsif n_array[i + 1].to_i > num.to_i\n      n_array[i], n_array[i + 1] = n_array[i + 1], n_array[i]\n      return n_array.join('').to_i\n    end\n  end\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && n_arr[i+1].to_i > num.to_i\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.permutation.to_a.map { |arr| arr.join.to_i }.sort.reverse.each do |num|\n    return num if num > n\n  end\n  -1\nend",
    "  digits = n.to_s.split('')\n  (digits.length - 2).downto(0).each do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend",
    "  # find the first digit that can be swapped with a larger digit to its right\n  # swap the digits\n  # sort the digits to the right of the swapped digits\n  # return the new number\n  # if no digit can be swapped, return -1\n  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      n[i..-1] = n[i..-1].sort\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  n_array = n.to_s.split('')\n  n_array.permutation.to_a.map(&:join).map(&:to_i).sort.reverse.each do |num|\n    return num if num > n\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i + 1] && n_arr[i + 1].to_i > num.to_i\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend",
    "  # convert to string, split into array, sort, join, convert to int\n  n.to_s.split('').sort.reverse.join.to_i\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend",
    "  # convert to string\n  # split into array\n  # sort array\n  # join array\n  # convert to integer\n  n.to_s.split('').sort.join.to_i\nend",
    "  # Find the first digit that is smaller than the digit to its right\n  # Swap the digits\n  # Sort the digits to the right of the swapped digit\n  # Return the number\n  n_array = n.to_s.split('')\n  i = n_array.length - 1\n  while i > 0\n    if n_array[i] > n_array[i - 1]\n      n_array[i], n_array[i - 1] = n_array[i - 1], n_array[i]\n      n_array[i..-1] = n_array[i..-1].sort\n      return n_array.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    n_arr.each_with_index do |num2, j|\n      if num2 > num && j > i\n        n_arr[i], n_arr[j] = n_arr[j], n_arr[i]\n        return n_arr.join.to_i\n      end\n    end\n  end\n  -1\nend",
    "  # Find the first digit that is smaller than the digit to its right\n  # Find the next biggest digit to the right of the digit found in step 1\n  # Swap the digits found in steps 1 and 2\n  # Sort the digits to the right of the digit found in step 1\n  # Return the number\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      swap_index = i + 1\n      (i + 1...digits.length).each do |j|\n        swap_index = j if digits[j] > digits[i] && digits[j] < digits[swap_index]\n      end\n      digits[i], digits[swap_index] = digits[swap_index], digits[i]\n      digits[i + 1..-1] = digits[i + 1..-1].sort\n      return digits.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |digit, index|\n    if n[index + 1] && digit < n[index + 1]\n      n[index], n[index + 1] = n[index + 1], n[index]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i == n_arr.length - 1\n      return -1\n    elsif num < n_arr[i + 1]\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\nend",
    "  # find the first digit that is smaller than the digit to its right\n  # find the smallest digit to the right of that digit that is bigger than it\n  # swap those digits\n  # sort the digits to the right of the swapped digits\n  # join the digits and return the number\n  digits = n.to_s.split('')\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  return -1 if i < 0\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  digits[i + 1..-1] = digits[i + 1..-1].sort\n  digits.join.to_i\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # get the index of the first digit that is smaller than the digit to its right\n  index = digits.each_with_index.find { |digit, i| digit < digits[i + 1] }[1]\n  # get the index of the smallest digit that is bigger than the digit at the index\n  index2 = digits[index + 1..-1].each_with_index.find { |digit, i| digit > digits[index] }[1] + index + 1\n  # swap the digits at the two indexes\n  digits[index], digits[index2] = digits[index2], digits[index]\n  # sort the digits after the index\n  digits[index + 1..-1] = digits[index + 1..-1].sort\n  # join the digits and convert to integer\n  digits.join.to_i\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('')\n  # get the length of the digits\n  length = digits.length\n  # get the last index of the digits\n  last_index = length - 1\n  # get the last digit of the number\n  last_digit = digits[last_index].to_i\n  # get the second to last digit of the number\n  second_to_last_digit = digits[last_index - 1].to_i\n  # get the third to last digit of the number\n  third_to_last_digit = digits[last_index - 2].to_i\n  # get the fourth to last digit of the number\n  fourth_to_last_digit = digits[last_index - 3].to_i\n  # get the fifth to last digit of the number\n  fifth_to_last_digit = digits[last_index - 4].to_i\n  # get the sixth to last digit of the number\n  sixth_to_last_digit = digits[last_index - 5].to_i\n  # get the seventh to last digit of the number\n  seventh_to_last_digit = digits[last_index - 6].to_i\n  # get the eighth to last digit of the number\n  eighth_to_last_digit = digits[last_index - 7].to_i\n  # get the ninth to last digit of the number\n  ninth_to_last_digit = digits[last_index - 8].to_i\n  # get the tenth to last digit of the number\n  tenth_to_last_digit = digits[last_index - 9].to_i\n  # get the eleventh to last digit of the number\n  eleventh_to_last_digit = digits[last_index - 10].to_i\n  # get the twelfth to last digit of the number\n  twelfth_to_last_digit = digits[last_index - 11].to_i\n  # get the thirteenth to last digit of the number\n  thirteenth_to_last_digit = digits[last_index - 12].to_i\n  # get the fourteenth to last digit of the number\n  fourteenth_to_last_digit = digits",
    "  n_array = n.to_s.split(\"\")\n  n_array.each_with_index do |num, index|\n    if index == 0\n      next\n    elsif num.to_i > n_array[index - 1].to_i\n      n_array[index - 1], n_array[index] = n_array[index], n_array[index - 1]\n      break\n    end\n  end\n  n_array.join(\"\").to_i\nend",
    "  arr = n.to_s.split('')\n  arr.permutation.to_a.map(&:join).map(&:to_i).sort.select { |num| num > n }.first\nend",
    "  # find the first digit from the right that is smaller than the digit to its right\n  # find the smallest digit to the right of the digit found in the previous step that is greater than the digit found in the previous step\n  # swap the digits found in the previous two steps\n  # sort the digits to the right of the digit found in the first step in ascending order\n  # return the number\n  digits = n.to_s.chars.map(&:to_i)\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  return -1 if i < 0\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  digits[i + 1..-1] = digits[i + 1..-1].sort\n  digits.join.to_i\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if i < n.length - 1\n      if num < n[i + 1]\n        n[i], n[i + 1] = n[i + 1], n[i]\n        return n.join.to_i\n      end\n    end\n  end\n  -1\nend",
    "  # convert to string\n  # split into array\n  # sort array\n  # join array\n  # convert to int\n  n.to_s.split('').sort.join.to_i\nend",
    "  n.to_s.chars.permutation.map(&:join).map(&:to_i).sort.reverse.find { |x| x > n }\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, idx|\n    if idx == n_arr.length - 1\n      return -1\n    elsif num < n_arr[idx + 1]\n      n_arr[idx], n_arr[idx + 1] = n_arr[idx + 1], n_arr[idx]\n      return n_arr.join('').to_i\n    end\n  end\nend",
    "  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend",
    "  n_array = n.to_s.split('')\n  n_array.each_with_index do |n, i|\n    n_array.each_with_index do |m, j|\n      if n.to_i > m.to_i && i < j\n        n_array[i], n_array[j] = n_array[j], n_array[i]\n        return n_array.join('').to_i\n      end\n    end\n  end\n  -1\nend",
    "  # create an array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, the number is already the biggest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, index|\n    if index == n_arr.length - 1\n      return -1\n    elsif n_arr[index] < n_arr[index + 1]\n      n_arr[index], n_arr[index + 1] = n_arr[index + 1], n_arr[index]\n      return n_arr.join('').to_i\n    end\n  end\nend",
    "  # convert to array\n  # sort array\n  # join array\n  # convert to integer\n  # return integer\n  n.to_s.chars.sort.join.to_i\nend",
    "  # return -1 if n.to_s.size == 1\n  # return -1 if n.to_s.chars.sort.join.to_i == n\n  # n.to_s.chars.sort.reverse.join.to_i\n  return -1 if n.to_s.size == 1\n  return -1 if n.to_s.chars.sort.join.to_i == n\n  n.to_s.chars.sort.reverse.join.to_i\nend",
    "  # get all permutations of the digits\n  perms = n.to_s.split('').permutation.to_a.map(&:join).map(&:to_i)\n  # sort the permutations\n  perms.sort!\n  # find the index of the given number\n  index = perms.index(n)\n  # return the next number\n  perms[index + 1]\nend",
    "  n_arr = n.to_s.split(\"\")\n  n_arr.permutation.to_a.map {|x| x.join(\"\").to_i}.sort.reverse.each do |x|\n    return x if x > n\n  end\nend",
    "  return -1 if n.to_s.size == 1\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.size - 1\n  while i > 0 && digits[i - 1] >= digits[i]\n    i -= 1\n  end\n  return -1 if i <= 0\n  j = digits.size - 1\n  while digits[j] <= digits[i - 1]\n    j -= 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  digits[i..-1] = digits[i..-1].reverse\n  digits.join.to_i\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the number\n  digits.join('').to_i\nend",
    "  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join('').to_i\nend",
    "  n = n.to_s.split('').map(&:to_i)\n  return -1 if n.size == 1\n  i = n.size - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend",
    "  # find the first digit that is smaller than the one to its right\n  # find the smallest digit to the right of the one found in the previous step that is bigger than it\n  # swap the two digits\n  # sort the digits to the right of the swapped digits in ascending order\n  # return the new number\n  n = n.to_s.split('')\n  (n.length - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      min_index = i + 1\n      (i + 1).upto(n.length - 1) do |j|\n        min_index = j if n[j] < n[min_index] && n[j] > n[i]\n      end\n      n[i], n[min_index] = n[min_index], n[i]\n      n[i + 1..-1] = n[i + 1..-1].sort\n      return n.join('').to_i\n    end\n  end\n  -1\nend",
    "  return -1 if n.to_s.size == 1\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, index|\n    next if index == 0\n    if num.to_i > n_arr[index - 1].to_i\n      n_arr[index], n_arr[index - 1] = n_arr[index - 1], n_arr[index]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend",
    "  # find the first digit that is smaller than the digit to its right\n  # find the smallest digit to the right of the digit found in the previous step that is larger than the digit found in the previous step\n  # swap the digits found in the previous two steps\n  # sort the digits to the right of the digit found in the first step in ascending order\n  # join the digits and convert to an integer\n  n.to_s.chars.each_with_index do |digit, index|\n    next if index == n.to_s.length - 1\n    if digit < n.to_s[index + 1]\n      digit_to_swap = n.to_s[index + 1..-1].chars.min\n      index_to_swap = n.to_s[index + 1..-1].chars.index(digit_to_swap)\n      n.to_s[index], n.to_s[index + index_to_swap + 1] = n.to_s[index + index_to_swap + 1], n.to_s[index]\n      n.to_s[index + 1..-1] = n.to_s[index + 1..-1].chars.sort.join\n      return n.to_s.to_i\n    end\n  end\n  -1\nend",
    "  # find the first digit that is smaller than the digit to its right\n  # find the smallest digit to the right of the first digit that is larger than the first digit\n  # swap the first digit and the smallest digit\n  # sort the digits to the right of the first digit in ascending order\n  # return the new number\n  n_array = n.to_s.split('')\n  first_digit = nil\n  n_array.each_with_index do |digit, i|\n    if i < n_array.length - 1 && digit < n_array[i + 1]\n      first_digit = i\n      break\n    end\n  end\n  return -1 if first_digit.nil?\n  smallest_digit = nil\n  n_array[first_digit + 1..-1].each_with_index do |digit, i|\n    if smallest_digit.nil? || digit < n_array[smallest_digit]\n      smallest_digit = first_digit + i + 1\n    end\n  end\n  n_array[first_digit], n_array[smallest_digit] = n_array[smallest_digit], n_array[first_digit]\n  n_array[first_digit + 1..-1] = n_array[first_digit + 1..-1].sort\n  n_array.join.to_i\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join('').to_i\nend",
    "  n.to_s.split('').permutation.map(&:join).map(&:to_i).select { |num| num > n }.min\nend",
    "  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && n[i+1].to_i > num.to_i\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i == n_arr.length - 1\n      return -1\n    elsif n_arr[i] < n_arr[i + 1]\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\nend",
    "  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to the right of it\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  return -1 if i == -1\n  # find the smallest digit to the right of the digit found above that is larger than it\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the two digits\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the digit found above\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  n = n.to_s.split('')\n  (n.length - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend",
    "  digits = n.to_s.split('')\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend",
    "  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && num < n_arr[i+1]\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend",
    "  digits = n.to_s.split('')\n  digits.each_with_index do |digit, index|\n    next_index = index + 1\n    next_digit = digits[next_index]\n    if next_digit && next_digit > digit\n      digits[index] = next_digit\n      digits[next_index] = digit\n      break\n    end\n  end\n  digits.join.to_i\nend",
    "  # Create an array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # Find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # If there is no such digit, return -1\n  return -1 if i < 0\n  # Find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # Swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # Reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # Return the new number\n  digits.join.to_i\nend",
    "  # convert number to array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  # if no such digit exists, return -1\n  i = digits.length - 1\n  while i > 0\n    if digits[i] > digits[i - 1]\n      break\n    end\n    i -= 1\n  end\n  return -1 if i == 0\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  # swap the pivot with this digit\n  j = digits.length - 1\n  while j >= i\n    if digits[j] > digits[i - 1]\n      digits[i - 1], digits[j] = digits[j], digits[i - 1]\n      break\n    end\n    j -= 1\n  end\n  # reverse the digits to the right of the pivot\n  digits[i..-1] = digits[i..-1].reverse\n  # return the number\n  digits.join.to_i\nend",
    "  # get all permutations of the digits\n  permutations = n.to_s.chars.permutation.to_a.map { |arr| arr.join.to_i }\n  # sort the permutations\n  permutations.sort!\n  # find the index of the given number\n  index = permutations.index(n)\n  # return the next number in the array\n  permutations[index + 1]\nend",
    "  # find the first digit that is smaller than the one on its right\n  # find the smallest digit that is bigger than the one on its left\n  # swap the two digits\n  # sort the digits to the right of the swapped digits\n  # return the number\n  n_arr = n.to_s.split(\"\")\n  i = n_arr.length - 1\n  while i > 0\n    if n_arr[i] > n_arr[i - 1]\n      break\n    end\n    i -= 1\n  end\n  return -1 if i == 0\n  j = n_arr.length - 1\n  while j > i\n    if n_arr[j] > n_arr[i - 1]\n      break\n    end\n    j -= 1\n  end\n  n_arr[i - 1], n_arr[j] = n_arr[j], n_arr[i - 1]\n  n_arr[i..-1] = n_arr[i..-1].sort\n  n_arr.join(\"\").to_i\nend"
  ]
}