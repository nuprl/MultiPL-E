{
  "name": "mbpp_125_find_length",
  "language": "rb",
  "prompt": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpqk_1rc6r\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpqk_1rc6r.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006017511 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n166.18 tests/s, 166.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp0lspd8kp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp0lspd8kp.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006082041 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.42 tests/s, 164.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    diff = (count_zero - count_one).abs\n    max_diff = diff if diff > max_diff\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpzf1qmzbz\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpzf1qmzbz.rb:21:in `test_find_length'\n     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_find_length\n     20:     candidate = method(:find_length)\n  => 21:     assert_equal(6, candidate.call(\"11000010001\"))\n     22:     assert_equal(1, candidate.call(\"10111\"))\n     23:     assert_equal(2, candidate.call(\"11011101100101\"))\n     24:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.005811927 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n172.06 tests/s, 172.06 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpqk_1rc6r\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpqk_1rc6r.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006017511 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n166.18 tests/s, 166.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n    if count_one > count_zero\n      count_one = 0\n      count_zero = 0\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphli21czg\nStarted\n.\nFinished in 0.000368196 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2715.94 tests/s, 8147.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n      current_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpu3f8ndk7\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpu3f8ndk7.rb:27:in `test_find_length'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_find_length\n     26:     candidate = method(:find_length)\n  => 27:     assert_equal(6, candidate.call(\"11000010001\"))\n     28:     assert_equal(1, candidate.call(\"10111\"))\n     29:     assert_equal(2, candidate.call(\"11011101100101\"))\n     30:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.012663057 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n78.97 tests/s, 78.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = [max_length, count].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp_mz5_1s0\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_mz5_1s0.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006179401 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n161.83 tests/s, 161.83 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpi0q9864i\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpi0q9864i.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.005556308 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n179.98 tests/s, 179.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = [max_length, count].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_v44u3f1\nStarted\n.\nFinished in 0.000404195 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2474.05 tests/s, 7422.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  string.split(\"\").map {|x| x.to_i}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpaw3czfjc\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpaw3czfjc.rb:9:in `test_find_length'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_find_length\n      8:     candidate = method(:find_length)\n  =>  9:     assert_equal(6, candidate.call(\"11000010001\"))\n     10:     assert_equal(1, candidate.call(\"10111\"))\n     11:     assert_equal(2, candidate.call(\"11011101100101\"))\n     12:   end\n<6> expected but was\n<[1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1]>\n===============================================================================\n\nFinished in 0.007645299 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.80 tests/s, 130.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, count_0 - count_1].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpekrszatp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpekrszatp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007019664 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.46 tests/s, 142.46 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmprn6auwe4\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmprn6auwe4.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007306034 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.87 tests/s, 136.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    max_diff = count if count > max_diff\n    count = 0 if count < 0\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmp3sn418lt\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp3sn418lt.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007087782 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.09 tests/s, 141.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_len = 0\n  n = string.length\n  for i in 0..n-1\n    count_zero = 0\n    count_one = 0\n    for j in i..n-1\n      if string[j] == '0'\n        count_zero += 1\n      else\n        count_one += 1\n      end\n      if count_zero == count_one\n        max_len = [max_len, j-i+1].max\n      end\n    end\n  end\n  max_len\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpf0j0op9p\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpf0j0op9p.rb:25:in `test_find_length'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_find_length\n     24:     candidate = method(:find_length)\n  => 25:     assert_equal(6, candidate.call(\"11000010001\"))\n     26:     assert_equal(1, candidate.call(\"10111\"))\n     27:     assert_equal(2, candidate.call(\"11011101100101\"))\n     28:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006919723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.51 tests/s, 144.51 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero + count_one].max\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp19c9c66v\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp19c9c66v.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.013441626 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.40 tests/s, 74.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count == 0\n      max_length = [max_length, string.index(char)].max\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpitdbi6k8\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpitdbi6k8.rb:21:in `test_find_length'\n     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_find_length\n     20:     candidate = method(:find_length)\n  => 21:     assert_equal(6, candidate.call(\"11000010001\"))\n     22:     assert_equal(1, candidate.call(\"10111\"))\n     23:     assert_equal(2, candidate.call(\"11011101100101\"))\n     24:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.011434053 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n87.46 tests/s, 87.46 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count.abs if count.abs > max_length\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpgje53d8k\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpgje53d8k.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.0074437 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.34 tests/s, 134.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_len = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    max_len = count if count > max_len\n    count = 0 if count < 0\n  end\n  max_len\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpk2qoe3rj\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpk2qoe3rj.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007411808 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.92 tests/s, 134.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n      current_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpu3f8ndk7\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpu3f8ndk7.rb:27:in `test_find_length'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_find_length\n     26:     candidate = method(:find_length)\n  => 27:     assert_equal(6, candidate.call(\"11000010001\"))\n     28:     assert_equal(1, candidate.call(\"10111\"))\n     29:     assert_equal(2, candidate.call(\"11011101100101\"))\n     30:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.012663057 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n78.97 tests/s, 78.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpm4namif6\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpm4namif6.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.014173507 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.55 tests/s, 70.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_of_0 = 0\n  count_of_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_of_0 += 1\n    else\n      count_of_1 += 1\n    end\n    max_diff = (count_of_0 - count_of_1).abs if (count_of_0 - count_of_1).abs > max_diff\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpg8nety7e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpg8nety7e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006089423 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.22 tests/s, 164.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmprn6auwe4\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmprn6auwe4.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007306034 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.87 tests/s, 136.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmprn6auwe4\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmprn6auwe4.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007306034 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.87 tests/s, 136.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmprn6auwe4\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmprn6auwe4.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007306034 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.87 tests/s, 136.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  string.split('').map { |char| char == '0' ? -1 : 1 }.reduce([0, 0]) do |(max, sum), num|\n    [max, sum + num].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpypgn5_61\nStarted\nE\n===============================================================================\nError: test_find_length(TestHumanEval):\n  NoMethodError: undefined method `+' for nil:NilClass\n  \n      [max, sum + num].max\n                ^\n/tmp/tmpypgn5_61.rb:4:in `block in find_length'\n/tmp/tmpypgn5_61.rb:3:in `each'\n/tmp/tmpypgn5_61.rb:3:in `reduce'\n/tmp/tmpypgn5_61.rb:3:in `find_length'\n/tmp/tmpypgn5_61.rb:11:in `call'\n/tmp/tmpypgn5_61.rb:11:in `test_find_length'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_find_length\n     10:     candidate = method(:find_length)\n  => 11:     assert_equal(6, candidate.call(\"11000010001\"))\n     12:     assert_equal(1, candidate.call(\"10111\"))\n     13:     assert_equal(2, candidate.call(\"11011101100101\"))\n     14:   end\n===============================================================================\n\nFinished in 0.001944912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n514.16 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "/tmp/tmpnezjvmdg.rb:8: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpnezjvmdg.rb:15: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_one = 0\n  count_zero = 0\n  string.each_char do |char|\n    if char == '1'\n      count_one += 1\n    else\n      count_zero += 1\n    end\n    current_length += 1\n    if count_one == count_zero\n      max_length = current_length if current_length > max_length\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpuhvgb8ru\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpuhvgb8ru.rb:24:in `test_find_length'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_find_length\n     23:     candidate = method(:find_length)\n  => 24:     assert_equal(6, candidate.call(\"11000010001\"))\n     25:     assert_equal(1, candidate.call(\"10111\"))\n     26:     assert_equal(2, candidate.call(\"11011101100101\"))\n     27:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006923249 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.44 tests/s, 144.44 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpslx81l8y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpslx81l8y.rb:24:in `test_find_length'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_find_length\n     23:     candidate = method(:find_length)\n  => 24:     assert_equal(6, candidate.call(\"11000010001\"))\n     25:     assert_equal(1, candidate.call(\"10111\"))\n     26:     assert_equal(2, candidate.call(\"11011101100101\"))\n     27:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007554691 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.37 tests/s, 132.37 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_length = [max_length, i+1].max\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpsl1a6hy9\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpsl1a6hy9.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.010315565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n96.94 tests/s, 96.94 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    current_length += 1\n    if count_0 == count_1\n      max_length = [max_length, current_length].max\n      current_length = 0\n      count_0 = 0\n      count_1 = 0\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpj0tegqgh\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpj0tegqgh.rb:27:in `test_find_length'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_find_length\n     26:     candidate = method(:find_length)\n  => 27:     assert_equal(6, candidate.call(\"11000010001\"))\n     28:     assert_equal(1, candidate.call(\"10111\"))\n     29:     assert_equal(2, candidate.call(\"11011101100101\"))\n     30:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006987388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.11 tests/s, 143.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  arr = string.split('')\n  max = 0\n  arr.each_with_index do |char, index|\n    if char == '1'\n      arr[index] = '0'\n    else\n      arr[index] = '1'\n    end\n    max = [max, arr.join('').split('0').map(&:length).max].max\n    arr[index] = char\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpyoarw758\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpyoarw758.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<3>\n===============================================================================\n\nFinished in 0.006834029 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.33 tests/s, 146.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphfj31aoy\nStarted\n.\nFinished in 0.000705806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1416.82 tests/s, 4250.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == \"0\"\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero*2].max\n    end\n  end\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == \"0\"\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one + 1\n      max_length = [max_length, count_one*2+1].max\n    end\n  end\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == \"0\"\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_one == count_zero + 1\n      max_length = [max_length, count_zero*2+1].max\n    end\n  end\n  return max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmp4_pzu10_\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp4_pzu10_.rb:46:in `test_find_length'\n     43: class TestHumanEval < Test::Unit::TestCase\n     44:   def test_find_length\n     45:     candidate = method(:find_length)\n  => 46:     assert_equal(6, candidate.call(\"11000010001\"))\n     47:     assert_equal(1, candidate.call(\"10111\"))\n     48:     assert_equal(2, candidate.call(\"11011101100101\"))\n     49:   end\n<6> expected but was\n<7>\n===============================================================================\n\nFinished in 0.007413369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.89 tests/s, 134.89 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  n = string.length\n  for i in 0..n-1\n    count_zero = 0\n    count_one = 0\n    for j in i..n-1\n      if string[j] == '0'\n        count_zero += 1\n      else\n        count_one += 1\n      end\n      max_diff = [max_diff, (count_zero - count_one).abs].max\n    end\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpkh97_kwb\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpkh97_kwb.rb:24:in `test_find_length'\n     21:   def test_find_length\n     22:     candidate = method(:find_length)\n     23:     assert_equal(6, candidate.call(\"11000010001\"))\n  => 24:     assert_equal(1, candidate.call(\"10111\"))\n     25:     assert_equal(2, candidate.call(\"11011101100101\"))\n     26:   end\n     27: end\n<1> expected but was\n<3>\n===============================================================================\n\nFinished in 0.006980429 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.26 tests/s, 286.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  string.split(\"\").map { |x| x.to_i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmp8a4snd1g\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp8a4snd1g.rb:9:in `test_find_length'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_find_length\n      8:     candidate = method(:find_length)\n  =>  9:     assert_equal(6, candidate.call(\"11000010001\"))\n     10:     assert_equal(1, candidate.call(\"10111\"))\n     11:     assert_equal(2, candidate.call(\"11011101100101\"))\n     12:   end\n<6> expected but was\n<[1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1]>\n===============================================================================\n\nFinished in 0.007607726 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.45 tests/s, 131.45 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_1 = 0\n  count_0 = 0\n  string.each_char do |char|\n    if char == '1'\n      count_1 += 1\n    else\n      count_0 += 1\n    end\n    max_diff = [max_diff, (count_1 - count_0).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp6tdkw59w\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp6tdkw59w.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007654581 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.64 tests/s, 130.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "/tmp/tmpm10a0q48.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpm10a0q48.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = [max_length, count].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_v44u3f1\nStarted\n.\nFinished in 0.000404195 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2474.05 tests/s, 7422.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  return 0 if string.length == 1\n  max_diff = 0\n  (0...string.length).each do |i|\n    (i+1...string.length).each do |j|\n      sub_string = string[i..j]\n      max_diff = [max_diff, (sub_string.count('0') - sub_string.count('1')).abs].max\n    end\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpbh7sjz6t\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpbh7sjz6t.rb:18:in `test_find_length'\n     15:   def test_find_length\n     16:     candidate = method(:find_length)\n     17:     assert_equal(6, candidate.call(\"11000010001\"))\n  => 18:     assert_equal(1, candidate.call(\"10111\"))\n     19:     assert_equal(2, candidate.call(\"11011101100101\"))\n     20:   end\n     21: end\n<1> expected but was\n<3>\n===============================================================================\n\nFinished in 0.007486855 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.57 tests/s, 267.13 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = [max_length, count].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_v44u3f1\nStarted\n.\nFinished in 0.000404195 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2474.05 tests/s, 7422.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_diff = count if count > max_diff\n    count = 0 if count < 0\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpunld4pyx\nStarted\n.\nFinished in 0.00047476 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2106.33 tests/s, 6318.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == \"1\"\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpazh4wogm\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpazh4wogm.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007132707 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.20 tests/s, 140.20 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    diff = (count_0 - count_1).abs\n    max_diff = diff if diff > max_diff\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp8ts_f4tj\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp8ts_f4tj.rb:21:in `test_find_length'\n     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_find_length\n     20:     candidate = method(:find_length)\n  => 21:     assert_equal(6, candidate.call(\"11000010001\"))\n     22:     assert_equal(1, candidate.call(\"10111\"))\n     23:     assert_equal(2, candidate.call(\"11011101100101\"))\n     24:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007423389 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.71 tests/s, 134.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpi0q9864i\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpi0q9864i.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.005556308 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n179.98 tests/s, 179.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmprn6auwe4\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmprn6auwe4.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007306034 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.87 tests/s, 136.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpqk_1rc6r\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpqk_1rc6r.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006017511 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n166.18 tests/s, 166.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpqk_1rc6r\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpqk_1rc6r.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006017511 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n166.18 tests/s, 166.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_len = 0\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == \"0\"\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_len = [max_len, i+1].max\n    end\n  end\n  return max_len\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpwiy6quvv\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpwiy6quvv.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.009949506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n100.51 tests/s, 100.51 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = [max_length, count].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp_mz5_1s0\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_mz5_1s0.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006179401 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n161.83 tests/s, 161.83 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmp16jfql5v\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp16jfql5v.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.00694081 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.08 tests/s, 144.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpslx81l8y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpslx81l8y.rb:24:in `test_find_length'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_find_length\n     23:     candidate = method(:find_length)\n  => 24:     assert_equal(6, candidate.call(\"11000010001\"))\n     25:     assert_equal(1, candidate.call(\"10111\"))\n     26:     assert_equal(2, candidate.call(\"11011101100101\"))\n     27:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007554691 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.37 tests/s, 132.37 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "/tmp/tmpbhmhzc08.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpbhmhzc08.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmprn6auwe4\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmprn6auwe4.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007306034 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.87 tests/s, 136.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpm4namif6\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpm4namif6.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.014173507 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.55 tests/s, 70.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero + count_one].max\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp19c9c66v\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp19c9c66v.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.013441626 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.40 tests/s, 74.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpslx81l8y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpslx81l8y.rb:24:in `test_find_length'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_find_length\n     23:     candidate = method(:find_length)\n  => 24:     assert_equal(6, candidate.call(\"11000010001\"))\n     25:     assert_equal(1, candidate.call(\"10111\"))\n     26:     assert_equal(2, candidate.call(\"11011101100101\"))\n     27:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007554691 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.37 tests/s, 132.37 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpqk_1rc6r\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpqk_1rc6r.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006017511 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n166.18 tests/s, 166.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_1 = 0\n  count_0 = 0\n  string.each_char do |char|\n    if char == '1'\n      count_1 += 1\n    else\n      count_0 += 1\n    end\n    max_diff = (count_1 - count_0).abs if (count_1 - count_0).abs > max_diff\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpal16qk3b\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpal16qk3b.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007126005 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.33 tests/s, 140.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = [max_length, count].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_v44u3f1\nStarted\n.\nFinished in 0.000404195 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2474.05 tests/s, 7422.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n      current_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpu3f8ndk7\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpu3f8ndk7.rb:27:in `test_find_length'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_find_length\n     26:     candidate = method(:find_length)\n  => 27:     assert_equal(6, candidate.call(\"11000010001\"))\n     28:     assert_equal(1, candidate.call(\"10111\"))\n     29:     assert_equal(2, candidate.call(\"11011101100101\"))\n     30:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.012663057 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n78.97 tests/s, 78.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmp16jfql5v\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp16jfql5v.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.00694081 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.08 tests/s, 144.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero + count_one].max\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp19c9c66v\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp19c9c66v.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.013441626 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.40 tests/s, 74.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpqk_1rc6r\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpqk_1rc6r.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006017511 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n166.18 tests/s, 166.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n      current_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpu3f8ndk7\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpu3f8ndk7.rb:27:in `test_find_length'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_find_length\n     26:     candidate = method(:find_length)\n  => 27:     assert_equal(6, candidate.call(\"11000010001\"))\n     28:     assert_equal(1, candidate.call(\"10111\"))\n     29:     assert_equal(2, candidate.call(\"11011101100101\"))\n     30:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.012663057 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n78.97 tests/s, 78.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  i = 0\n  while i < string.length\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_diff = [max_diff, count_zero].max\n    end\n    i += 1\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmp9u4ak7h5\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp9u4ak7h5.rb:24:in `test_find_length'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_find_length\n     23:     candidate = method(:find_length)\n  => 24:     assert_equal(6, candidate.call(\"11000010001\"))\n     25:     assert_equal(1, candidate.call(\"10111\"))\n     26:     assert_equal(2, candidate.call(\"11011101100101\"))\n     27:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007080972 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.22 tests/s, 141.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpqk_1rc6r\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpqk_1rc6r.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006017511 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n166.18 tests/s, 166.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_length = [max_length, count_0 + count_1].max\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpkoozuyzv\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpkoozuyzv.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006703698 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.17 tests/s, 149.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  count = 0\n  max = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max = count if count > max\n    count = 0 if count < 0\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk2ta0k2o\nStarted\n.\nFinished in 0.000413028 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2421.14 tests/s, 7263.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmp16jfql5v\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp16jfql5v.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.00694081 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.08 tests/s, 144.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_len = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_len = [max_len, count_zero*2].max\n    end\n  end\n  count_zero = 0\n  count_one = 0\n  string.reverse.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_len = [max_len, count_zero*2].max\n    end\n  end\n  max_len\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpwgwv52xf\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpwgwv52xf.rb:34:in `test_find_length'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:   def test_find_length\n     33:     candidate = method(:find_length)\n  => 34:     assert_equal(6, candidate.call(\"11000010001\"))\n     35:     assert_equal(1, candidate.call(\"10111\"))\n     36:     assert_equal(2, candidate.call(\"11011101100101\"))\n     37:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006118614 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n163.44 tests/s, 163.44 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_len = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_len = [max_len, count.abs].max\n  end\n  max_len\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpzi1s_f4_\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpzi1s_f4_.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006062368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.95 tests/s, 164.95 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "/tmp/tmpnezjvmdg.rb:8: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpnezjvmdg.rb:15: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpslx81l8y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpslx81l8y.rb:24:in `test_find_length'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_find_length\n     23:     candidate = method(:find_length)\n  => 24:     assert_equal(6, candidate.call(\"11000010001\"))\n     25:     assert_equal(1, candidate.call(\"10111\"))\n     26:     assert_equal(2, candidate.call(\"11011101100101\"))\n     27:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007554691 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.37 tests/s, 132.37 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, count_0 - count_1].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpekrszatp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpekrszatp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007019664 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.46 tests/s, 142.46 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == \"1\"\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpskchgwmq\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpskchgwmq.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006060077 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n165.01 tests/s, 165.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero + count_one].max\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp19c9c66v\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp19c9c66v.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.013441626 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.40 tests/s, 74.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero*2].max\n    end\n  end\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero*2].max\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmp5ktd44db\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp5ktd44db.rb:34:in `test_find_length'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:   def test_find_length\n     33:     candidate = method(:find_length)\n  => 34:     assert_equal(6, candidate.call(\"11000010001\"))\n     35:     assert_equal(1, candidate.call(\"10111\"))\n     36:     assert_equal(2, candidate.call(\"11011101100101\"))\n     37:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006158878 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n162.37 tests/s, 162.37 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  (0...string.length).each do |i|\n    if string[i] == \"0\"\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph7zaz0mw\nStarted\n.\nFinished in 0.000389807 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2565.37 tests/s, 7696.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpi0q9864i\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpi0q9864i.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.005556308 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n179.98 tests/s, 179.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "/tmp/tmpsb4fp654.rb:12: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpsb4fp654.rb:19: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp0lspd8kp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp0lspd8kp.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006082041 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.42 tests/s, 164.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmp16jfql5v\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp16jfql5v.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.00694081 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.08 tests/s, 144.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpi0q9864i\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpi0q9864i.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.005556308 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n179.98 tests/s, 179.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  arr = []\n  (0..string.length).each do |i|\n    (i..string.length).each do |j|\n      arr << string[i..j]\n    end\n  end\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmp9cmvsr4z\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp9cmvsr4z.rb:15:in `test_find_length'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_length\n     14:     candidate = method(:find_length)\n  => 15:     assert_equal(6, candidate.call(\"11000010001\"))\n     16:     assert_equal(1, candidate.call(\"10111\"))\n     17:     assert_equal(2, candidate.call(\"11011101100101\"))\n     18:   end\n<6> expected but was\n<[\"1\",\n \"11\",\n \"110\",\n \"1100\",\n \"11000\",\n \"110000\",\n \"1100001\",\n \"11000010\",\n \"110000100\",\n \"1100001000\",\n \"11000010001\",\n \"11000010001\",\n \"1\",\n \"10\",\n \"100\",\n \"1000\",\n \"10000\",\n \"100001\",\n \"1000010\",\n \"10000100\",\n \"100001000\",\n \"1000010001\",\n \"1000010001\",\n \"0\",\n \"00\",\n \"000\",\n \"0000\",\n \"00001\",\n \"000010\",\n \"0000100\",\n \"00001000\",\n \"000010001\",\n \"000010001\",\n \"0\",\n \"00\",\n \"000\",\n \"0001\",\n \"00010\",\n \"000100\",\n \"0001000\",\n \"00010001\",\n \"00010001\",\n \"0\",\n \"00\",\n \"001\",\n \"0010\",\n \"00100\",\n \"001000\",\n \"0010001\",\n \"0010001\",\n \"0\",\n \"01\",\n \"010\",\n \"0100\",\n \"01000\",\n \"010001\",\n \"010001\",\n \"1\",\n \"10\",\n \"100\",\n \"1000\",\n \"10001\",\n \"10001\",\n \"0\",\n \"00\",\n \"000\",\n \"0001\",\n \"0001\",\n \"0\",\n \"00\",\n \"001\",\n \"001\",\n \"0\",\n \"01\",\n \"01\",\n \"1\",\n \"1\",\n \"\"]>\n\ndiff:\n? 6    \n? [\"1\",\n? ?\n+  \"11\",\n+  \"110\",\n+  \"1100\",\n+  \"11000\",\n+  \"110000\",\n+  \"1100001\",\n+  \"11000010\",\n+  \"110000100\",\n+  \"1100001000\",\n+  \"11000010001\",\n+  \"11000010001\",\n+  \"1\",\n+  \"10\",\n+  \"100\",\n+  \"1000\",\n+  \"10000\",\n+  \"100001\",\n+  \"1000010\",\n+  \"10000100\",\n+  \"100001000\",\n+  \"1000010001\",\n+  \"1000010001\",\n+  \"0\",\n+  \"00\",\n+  \"000\",\n+  \"0000\",\n+  \"00001\",\n+  \"000010\",\n+  \"0000100\",\n+  \"00001000\",\n+  \"000010001\",\n+  \"000010001\",\n+  \"0\",\n+  \"00\",\n+  \"000\",\n+  \"0001\",\n+  \"00010\",\n+  \"000100\",\n+  \"0001000\",\n+  \"00010001\",\n+  \"00010001\",\n+  \"0\",\n+  \"00\",\n+  \"001\",\n+  \"0010\",\n+  \"00100\",\n+  \"001000\",\n+  \"0010001\",\n+  \"0010001\",\n+  \"0\",\n+  \"01\",\n+  \"010\",\n+  \"0100\",\n+  \"01000\",\n+  \"010001\",\n+  \"010001\",\n+  \"1\",\n+  \"10\",\n+  \"100\",\n+  \"1000",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_length = [max_length, count_0 + count_1].max\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpkoozuyzv\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpkoozuyzv.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006703698 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.17 tests/s, 149.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmprn6auwe4\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmprn6auwe4.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007306034 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.87 tests/s, 136.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_length = [max_length, count_0 + count_1].max\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmp0s6ngsxv\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp0s6ngsxv.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006218164 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n160.82 tests/s, 160.82 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmp0xtkp0dd\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp0xtkp0dd.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.005841445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n171.19 tests/s, 171.19 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmpzj72pdtp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpzj72pdtp.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006169705 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n162.08 tests/s, 162.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max = count if count > max\n    count = 0 if count < 0\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpykcww04p\nStarted\n.\nFinished in 0.000421747 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2371.09 tests/s, 7113.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_one - count_zero].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmp0dy931fi\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp0dy931fi.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006118014 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n163.45 tests/s, 163.45 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmp16jfql5v\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp16jfql5v.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.00694081 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.08 tests/s, 144.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpqk_1rc6r\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpqk_1rc6r.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006017511 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n166.18 tests/s, 166.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_count = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_count = [max_count, count.abs].max\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122959,
      "stdout": "Loaded suite /tmp/tmp2xynotw0\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp2xynotw0.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006138323 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n162.91 tests/s, 162.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp0lspd8kp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp0lspd8kp.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006082041 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.42 tests/s, 164.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  for i in 0..string.length-1\n    for j in i+1..string.length\n      sub_string = string[i..j]\n      diff = (sub_string.count('0') - sub_string.count('1')).abs\n      max_diff = diff if diff > max_diff\n    end\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpp_2n1cg6\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpp_2n1cg6.rb:18:in `test_find_length'\n     15:   def test_find_length\n     16:     candidate = method(:find_length)\n     17:     assert_equal(6, candidate.call(\"11000010001\"))\n  => 18:     assert_equal(1, candidate.call(\"10111\"))\n     19:     assert_equal(2, candidate.call(\"11011101100101\"))\n     20:   end\n     21: end\n<1> expected but was\n<3>\n===============================================================================\n\nFinished in 0.007516749 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.04 tests/s, 266.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}