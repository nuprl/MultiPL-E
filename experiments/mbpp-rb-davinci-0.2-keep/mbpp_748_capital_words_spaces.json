{
  "name": "mbpp_748_capital_words_spaces",
  "language": "rb",
  "prompt": "# Write a function to put spaces between words starting with capital letters in a given string.\ndef capital_words_spaces(str1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_capital_words_spaces\n    candidate = method(:capital_words_spaces)\n    assert_equal(\"Python\", candidate.call(\"Python\"))\n    assert_equal(\"Python Programming Examples\", candidate.call(\"PythonProgrammingExamples\"))\n    assert_equal(\"Get Ready To Be Coding Freak\", candidate.call(\"GetReadyToBeCodingFreak\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.scan(/\\b[A-Z]\\w+\\b/).join(\" \")\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map {|i| i.capitalize}.join(\" \")\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map { |word| word.capitalize }.join(\" \")\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/\\b[A-Z]/) { |s| \"#{s} \" }\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map { |word| word.capitalize }.join(\" \")\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map {|x| x =~ /^[A-Z]/ ? x = \" #{x}\" : x}.join\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/(\\p{Lu})(\\p{Ll}+)/, '\\1 \\2')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map { |x| x =~ /^[A-Z]/ ? x = \" #{x}\" : x }.join\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/(\\p{Lu})/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map {|word| word.capitalize}.join(\" \")\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.scan(/[A-Z][a-z]+/).join(\" \")\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1').strip\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.split(/(?=[A-Z])/).join(\" \")\nend",
    "  str1.split(\"\").map { |x| x =~ /[A-Z]/ ? x = \" \" + x : x }.join(\"\").strip\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1').strip\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/(\\p{Lu})/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map {|x| x.capitalize}.join(\" \")\nend",
    "  str1.scan(/[A-Z][a-z]+/).join(' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/(\\p{Lu})(\\p{Ll}+)/, '\\1 \\2')\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/\\B[A-Z]/, ' \\0')\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map{|i| i.capitalize}.join(' ')\nend\nputs capital_words_spaces(\"ThisIsAString\")",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/(\\p{Lu})/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/(\\p{Lu})(\\p{Ll}+)/, '\\1 \\2')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.scan(/\\b[A-Z]\\w+\\b/).join(' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1').strip\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/(?<=[A-Z])(?=[A-Z][a-z])/, ' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.split.map { |word| word.capitalize }.join(' ')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1').strip\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/(\\p{Lu})(\\p{Ll}+)/, '\\1 \\2')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend",
    "  str1.gsub(/([A-Z])/, ' \\1')\nend"
  ]
}