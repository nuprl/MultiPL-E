{
  "name": "mbpp_728_sum_list",
  "language": "rb",
  "prompt": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, index|\n    sum << num + lst2[index]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbguj58ea\nStarted\n.\nFinished in 0.000352625 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2835.87 tests/s, 8507.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, i|\n    sum << num + lst2[i]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb8no7vve\nStarted\n.\nFinished in 0.000332807 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3004.74 tests/s, 9014.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum_lst = []\n  lst1.each_with_index do |num, i|\n    sum_lst << num + lst2[i]\n  end\n  sum_lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_s94lo0d\nStarted\n.\nFinished in 0.000401446 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.00 tests/s, 7472.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |x, i|\n    sum << x + lst2[i]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1hnd8hpi\nStarted\n.\nFinished in 0.000332494 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3007.57 tests/s, 9022.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, idx|\n    sum << num + lst2[idx]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx_j9ueb3\nStarted\n.\nFinished in 0.000389824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2565.26 tests/s, 7695.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map{|x,y| x + y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcndwmmor\nStarted\n.\nFinished in 0.000389931 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2564.56 tests/s, 7693.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum_lst = []\n  lst1.each_with_index do |num, idx|\n    sum_lst << num + lst2[idx]\n  end\n  sum_lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe33e97ih\nStarted\n.\nFinished in 0.00039919 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2505.07 tests/s, 7515.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |arr| arr.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps8sso64w\nStarted\n.\nFinished in 0.000612735 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1632.03 tests/s, 4896.08 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x,y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu9e57x5l\nStarted\n.\nFinished in 0.000389547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2567.08 tests/s, 7701.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, i|\n    sum << num + lst2[i]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb8no7vve\nStarted\n.\nFinished in 0.000332807 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3004.74 tests/s, 9014.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x,y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu9e57x5l\nStarted\n.\nFinished in 0.000389547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2567.08 tests/s, 7701.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map {|x, y| x + y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn7lziji0\nStarted\n.\nFinished in 0.000385465 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2594.27 tests/s, 7782.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  result = []\n  lst1.each_with_index do |num, index|\n    result << num + lst2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpklb8vtju\nStarted\n.\nFinished in 0.000409739 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2440.58 tests/s, 7321.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x,y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu9e57x5l\nStarted\n.\nFinished in 0.000389547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2567.08 tests/s, 7701.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, idx|\n    sum << num + lst2[idx]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx_j9ueb3\nStarted\n.\nFinished in 0.000389824 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2565.26 tests/s, 7695.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x| x.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkhh8ai78\nStarted\n.\nFinished in 0.000391349 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2555.26 tests/s, 7665.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x,y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu9e57x5l\nStarted\n.\nFinished in 0.000389547 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2567.08 tests/s, 7701.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  new_list = []\n  lst1.each_with_index do |num, index|\n    new_list << num + lst2[index]\n  end\n  new_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvqi016cj\nStarted\n.\nFinished in 0.000389231 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2569.17 tests/s, 7707.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  result = []\n  lst1.each_with_index do |num, i|\n    result << num + lst2[i]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyews_rph\nStarted\n.\nFinished in 0.000409617 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2441.30 tests/s, 7323.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map {|x, y| x + y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn7lziji0\nStarted\n.\nFinished in 0.000385465 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2594.27 tests/s, 7782.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, index|\n    sum << num + lst2[index]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbguj58ea\nStarted\n.\nFinished in 0.000352625 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2835.87 tests/s, 8507.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, index|\n    sum << num + lst2[index]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbguj58ea\nStarted\n.\nFinished in 0.000352625 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2835.87 tests/s, 8507.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map {|x,y| x+y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi162ttq8\nStarted\n.\nFinished in 0.000401012 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2493.69 tests/s, 7481.07 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  result = []\n  lst1.each_with_index do |num, index|\n    result << num + lst2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpklb8vtju\nStarted\n.\nFinished in 0.000409739 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2440.58 tests/s, 7321.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |arr| arr.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps8sso64w\nStarted\n.\nFinished in 0.000612735 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1632.03 tests/s, 4896.08 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, index|\n    sum << num + lst2[index]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbguj58ea\nStarted\n.\nFinished in 0.000352625 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2835.87 tests/s, 8507.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  result = []\n  lst1.each_with_index do |num, i|\n    result << num + lst2[i]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyews_rph\nStarted\n.\nFinished in 0.000409617 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2441.30 tests/s, 7323.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map {|x, y| x + y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn7lziji0\nStarted\n.\nFinished in 0.000385465 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2594.27 tests/s, 7782.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n\tlst1.zip(lst2).map {|x,y| x + y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxdhw2oe0\nStarted\n.\nFinished in 0.000388429 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.47 tests/s, 7723.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, index|\n    sum << num + lst2[index]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbguj58ea\nStarted\n.\nFinished in 0.000352625 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2835.87 tests/s, 8507.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |pair| pair.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpt8000q2k\nStarted\n.\nFinished in 0.000438289 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2281.60 tests/s, 6844.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum_lst = []\n  lst1.each_with_index do |num, i|\n    sum_lst << num + lst2[i]\n  end\n  sum_lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_s94lo0d\nStarted\n.\nFinished in 0.000401446 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.00 tests/s, 7472.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  result = []\n  lst1.each_with_index do |item, index|\n    result << item + lst2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv95o18zs\nStarted\n.\nFinished in 0.000353659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2827.58 tests/s, 8482.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, i|\n    sum << num + lst2[i]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb8no7vve\nStarted\n.\nFinished in 0.000332807 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3004.74 tests/s, 9014.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |pair| pair.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpt8000q2k\nStarted\n.\nFinished in 0.000438289 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2281.60 tests/s, 6844.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  sum = []\n  lst1.each_with_index do |num, i|\n    sum << num + lst2[i]\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb8no7vve\nStarted\n.\nFinished in 0.000332807 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n3004.74 tests/s, 9014.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |a, b| a + b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9idrwu4g\nStarted\n.\nFinished in 0.000381565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2620.79 tests/s, 7862.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n  lst1.zip(lst2).map { |x, y| x + y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ayvh1i3\nStarted\n.\nFinished in 0.000380217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2630.08 tests/s, 7890.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}