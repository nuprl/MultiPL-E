{
  "name": "mbpp_736_left_insertion",
  "language": "rb",
  "prompt": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef left_insertion(a, x)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  return 0 if a.empty?\n  return 0 if a[0] >= x\n  return a.length if a[-1] < x\n  low = 0\n  high = a.length - 1\n  while low < high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      return mid\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  i = 0\n  while i < a.length\n    if a[i] > x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if a.empty? || x < a[0]\n  return a.length if x > a[-1]\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      while a[mid] == x\n        mid -= 1\n      end\n      return mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend",
    "  l = 0\n  r = a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      return mid\n    end\n  end\n  return low\nend",
    "  return 0 if a.empty? || x < a.first\n  return a.length if x > a.last\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  return 0 if a.empty? || a.first > x\n  return a.size if a.last < x",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x <= a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  return 0 if x < a[0]\n  return a.length if x > a[-1]\n  l = 0\n  r = a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if x < a[0]\n  return a.length if x > a[-1]\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  a.bsearch_index { |el| el >= x }\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] >= x\n      r = m - 1\n    else\n      l = m + 1\n    end\n  end\n  l\nend",
    "  return 0 if a.empty? || x < a.first\n  return a.length if x > a.last\n  low = 0\n  high = a.length - 1\n  while low < high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  i = 0\n  while i < a.length\n    if a[i] < x\n      i += 1\n    else\n      return i\n    end\n  end\n  return i\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  i = 0\n  while i < a.length\n    if a[i] >= x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if a.empty? || x < a.first\n  return a.length if x > a.last\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      right = mid - 1\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  return 0 if a.empty? || x < a[0]\n  return a.length if x > a[-1]\n  left, right = 0, a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      return mid\n    end\n  end\n  return left\nend",
    "  return 0 if x < a[0]\n  return a.length if x > a[-1]\n  low = 0\n  high = a.length - 1\n  while low < high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid\n    end\n  end\n  low\nend",
    "  return 0 if a.empty? || a.first > x\n  return a.size if a.last < x",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  return 0 if a.empty? || a[0] >= x\n  return a.size if a[-1] < x\n  l, r = 0, a.size - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if a.empty? || a[0] >= x\n  return a.length if a[-1] < x\n  l, r = 0, a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  a.bsearch_index { |y| y >= x }\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if a[0] > x\n  return a.length if a[-1] < x\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if a.empty? || x < a.first\n  return a.size if x > a.last\n  low = 0\n  high = a.size - 1\n  while low < high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  # return the index of the first element in a that is greater than x\n  # if no such element exists, return the length of a\n  a.each_with_index do |e, i|\n    return i if e > x\n  end\n  a.length\nend",
    "  i = 0\n  while i < a.length\n    if a[i] > x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  return 0 if a.empty? || x < a.first\n  return a.length if x > a.last\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  return 0 if x < a[0]\n  return a.length if x > a[-1]\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    elsif x > a[mid]\n      low = mid + 1\n    else\n      return mid\n    end\n  end\n  return low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if a.empty? || x < a.first\n  return a.length if x > a.last\n  lo = 0\n  hi = a.length - 1\n  while lo <= hi\n    mid = lo + (hi - lo) / 2\n    if x > a[mid]\n      lo = mid + 1\n    else\n      hi = mid - 1\n    end\n  end\n  lo\nend",
    "  i = 0\n  while i < a.length\n    if a[i] >= x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  # find the index of the first element in a greater than x\n  # if x is greater than all elements in a, return the length of a\n  # if x is less than all elements in a, return 0\n  # if x is equal to an element in a, return the index of that element\n  # if x is between two elements in a, return the index of the left element\n  # if x is equal to the left element in a, return the index of that element\n  # if x is equal to the right element in a, return the index of that element\n  # if x is between two elements in a, return the index of the left element\n  # if x is equal to the left element in a, return the index of that element\n  # if x is equal to the right element in a, return the index of that element\n  # if x is between two elements in a, return the index of the left element\n  # if x is equal to the left element in a, return the index of that element\n  # if x is equal to the right element in a, return the index of that element\n  # if x is between two elements in a, return the index of the left element\n  # if x is equal to the left element in a, return the index of that element\n  # if x is equal to the right element in a, return the index of that element\n  # if x is between two elements in a, return the index of the left element\n  # if x is equal to the left element in a, return the index of that element\n  # if x is equal to the right element in a, return the index of that element\n  # if x is between two elements in a, return the index of the left element\n  # if x is equal to the left element in a, return the index of that element\n  # if x is equal to the right element in a, return the index of that element\n  # if x is between two elements in a, return the index of the left element\n  # if x is equal to the left element in a, return the index of that element\n  # if x is equal to the right element in a, return the index of that element\n  # if x is between two elements in a, return the index of the left element\n  # if x is equal to the left element in a",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  i = 0\n  while i < a.length\n    if a[i] >= x\n      return i\n    end\n    i += 1\n  end\n  return a.length\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  a.bsearch_index { |y| y >= x } || a.size\nend",
    "  return 0 if a.empty? || x < a.first\n  return a.size if x > a.last\n  l, r = 0, a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      return m\n    elsif a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      return m\n    elsif a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend",
    "  # find the index of the first element in the array which is greater than x\n  # if no such element exists, return the length of the array\n  a.each_with_index do |e, i|\n    return i if e > x\n  end\n  a.length\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  a.bsearch_index {|el| el >= x}\nend",
    "  return 0 if a.empty? || x < a.first\n  return a.length if x > a.last\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  a.bsearch_index { |y| y >= x }\nend",
    "  return 0 if x < a[0]\n  return a.length if x > a[-1]\n  i = 0\n  j = a.length - 1\n  while i < j\n    m = (i + j) / 2\n    if a[m] < x\n      i = m + 1\n    else\n      j = m\n    end\n  end\n  i\nend",
    "  return 0 if a.empty? || x <= a[0]\n  return a.length if x > a[-1]\n  low = 0\n  high = a.length - 1\n  while low < high\n    mid = low + (high - low) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend",
    "  i = 0\n  while i < a.length\n    if a[i] >= x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] >= x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  return 0 if a.empty? || a.first > x\n  return a.size if a.last < x",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  i = 0\n  while i < a.length\n    if a[i] >= x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  a.each_with_index do |e, i|\n    return i if e >= x\n  end\n  a.length\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      return mid\n    end\n  end\n  return low\nend",
    "  # return index of leftmost insertion point for x in a\n  # assume a is sorted\n  # if x is in a, return index of leftmost occurrence of x\n  # if x is not in a, return index of leftmost insertion point for x\n  # if x is less than all elements of a, return 0\n  # if x is greater than all elements of a, return len(a)\n  lo = 0\n  hi = a.length\n  while lo < hi\n    mid = (lo + hi) / 2\n    if a[mid] < x\n      lo = mid + 1\n    else\n      hi = mid\n    end\n  end\n  lo\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        right = mid - 1\n      end\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  i = 0\n  while i < a.length\n    if a[i] >= x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if a.empty? || a[0] >= x",
    "  l = 0\n  r = a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  a.bsearch_index { |y| y >= x }\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      return mid\n    end\n  end\n  return low\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if x > a[mid]\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  return 0 if x < a[0]\n  return a.length if x > a[-1]\n  l = 0\n  r = a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if x < a[0]\n  return a.length if x > a[-1]\n  low = 0\n  high = a.length - 1\n  while low < high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  return 0 if a.empty? || x < a.first\n  return a.size if x > a.last\n  l, r = 0, a.size - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      return mid\n    end\n  end\n  low\nend",
    "  i = 0\n  while i < a.length\n    if a[i] >= x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  # return the index of the first element in the array that is greater than x\n  # if all elements are less than x, return the length of the array\n  # if the array is empty, return 0\n  return 0 if a.empty?\n  return a.length if a.all? { |e| e < x }\n  a.each_with_index do |e, i|\n    return i if e > x\n  end\nend",
    "  l = 0\n  r = a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  a.bsearch_index { |e| e >= x }\nend",
    "  if a.empty?\n    return 0\n  end\n  if a.length == 1\n    if a[0] >= x\n      return 0\n    else\n      return 1\n    end\n  end\n  mid = a.length / 2\n  if a[mid] == x\n    return mid\n  elsif a[mid] > x\n    return left_insertion(a[0..mid-1], x)\n  else\n    return mid + 1 + left_insertion(a[mid+1..-1], x)\n  end\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if a.empty? || x < a.first\n  return a.length if x > a.last\n  l = 0\n  r = a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if x < a[mid]\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if x <= a[mid]\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  i = 0\n  while i < a.length\n    if a[i] >= x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  a.each_with_index do |e, i|\n    if e > x\n      return i\n    end\n  end\n  return a.length\nend",
    "  return 0 if a.empty? || a[0] > x\n  return a.size if a[-1] < x\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if a.empty? || x < a[0]\n  return a.size if x > a[-1]\n  l, r = 0, a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      return m\n    elsif a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend",
    "  i = 0\n  while i < a.length\n    if a[i] > x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  # if x is less than the first element, return 0\n  return 0 if x < a[0]\n  # if x is greater than the last element, return the length of the array\n  return a.length if x > a[-1]\n  # otherwise, do a binary search\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      return mid\n    end\n  end\n  return low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  a.bsearch_index { |el| el >= x }\nend",
    "  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.size - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  i = 0\n  while i < a.length\n    if a[i] >= x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  a.bsearch_index { |y| y >= x }\nend",
    "  a.bsearch_index { |y| y >= x }\nend",
    "  i = 0\n  while i < a.length\n    if a[i] < x\n      i += 1\n    else\n      return i\n    end\n  end\n  return i\nend",
    "  return 0 if a.empty? || x < a[0]\n  return a.length if x > a[-1]\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  a.bsearch_index { |y| y >= x }\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if a.empty? || x < a.first\n  return a.size if x > a.last\n  low = 0\n  high = a.size - 1\n  while low < high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      return mid\n    end\n  end\n  return low\nend",
    "  a.bsearch_index { |y| y >= x }\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    elsif x > a[mid]\n      low = mid + 1\n    else\n      return mid\n    end\n  end\n  return low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  i = 0\n  while i < a.length\n    if a[i] >= x\n      return i\n    end\n    i += 1\n  end\n  return a.length\nend",
    "  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  i = 0\n  while i < a.length\n    if a[i] >= x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if a.empty? || a[0] >= x\n  return a.length if a[-1] < x\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  i = 0\n  while i < a.length\n    if a[i] >= x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend"
  ]
}