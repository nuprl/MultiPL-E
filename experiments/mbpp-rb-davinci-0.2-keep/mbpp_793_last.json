{
  "name": "mbpp_793_last",
  "language": "rb",
  "prompt": "# Write a python function to find the last position of an element in a sorted array.\ndef last(arr, x)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_last\n    candidate = method(:last)\n    assert_equal(0, candidate.call([1, 2, 3], 1))\n    assert_equal(2, candidate.call([1, 1, 1, 2, 3, 4], 1))\n    assert_equal(3, candidate.call([2, 3, 2, 3, 6, 8, 9], 3))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  arr.each_with_index do |a, i|\n    if a == x\n      return i\n    end\n  end\nend",
    "  arr.index(x)\nend",
    "  arr.index(x)\nend",
    "  arr.rindex(x)\nend",
    "  arr.index(x)\nend",
    "  i = 0\n  while i < arr.length\n    if arr[i] == x\n      return i\n    end\n    i += 1\n  end\n  return -1\nend",
    "  arr.index(x)\nend",
    "  arr.rindex(x)\nend",
    "  return -1 if arr.empty?\n  return arr.length - 1 if arr[arr.length - 1] == x\n  last(arr[0...arr.length - 1], x)\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\nend",
    "  arr.index(x)\nend",
    "  arr.rindex(x)\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\n  return -1\nend",
    "  arr.rindex(x)\nend",
    "  arr.rindex(x)\nend",
    "  arr.index(x)\nend",
    "  if arr.include?(x)\n    arr.rindex(x)\n  else\n    -1\n  end\nend",
    "  arr.index(x)\nend",
    "  arr.index(x)\nend",
    "  arr.each_with_index do |a, i|\n    if a == x\n      return i\n    end\n  end\nend",
    "  i = 0\n  while i < arr.length\n    if arr[i] == x\n      return i\n    end\n    i += 1\n  end\n  return -1\nend",
    "  arr.each_with_index do |e, i|\n    if e == x\n      return i\n    end\n  end\nend",
    "  return arr.rindex(x)\nend",
    "  arr.each_with_index do |e, i|\n    if e == x\n      return i\n    end\n  end\n  return -1\nend",
    "  return arr.index(x) if arr.index(x) == arr.length - 1\n  return last(arr[arr.index(x) + 1..-1], x)\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\nend",
    "  arr.index(x)\nend",
    "  arr.index(x)\nend",
    "  arr.each_with_index do |i, index|\n    if i == x\n      return index\n    end\n  end\nend",
    "  arr.each_with_index do |e, i|\n    if e == x\n      return i\n    end\n  end\n  return -1\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\nend",
    "  arr.rindex(x)\nend",
    "  return arr.rindex(x)\nend",
    "  if arr.include?(x)\n    arr.rindex(x)\n  else\n    -1\n  end\nend",
    "  return -1 if arr.empty?\n  return arr.length - 1 if arr.last == x\n  return -1 if arr.last < x\n  return -1 if arr.first > x\n  return 0 if arr.first == x\n  mid = arr.length / 2\n  if arr[mid] == x\n    return mid if arr[mid + 1] != x\n    return last(arr[mid + 1..-1], x)\n  elsif arr[mid] > x\n    return last(arr[0..mid - 1], x)\n  else\n    return last(arr[mid + 1..-1], x)\n  end\nend",
    "  arr.index(x)\nend",
    "  arr.index(x)\nend",
    "  arr.rindex(x)\nend",
    "  return arr.rindex(x)\nend",
    "  arr.rindex(x)\nend",
    "  arr.each_with_index do |e, i|\n    return i if e == x && arr[i + 1] != x\n  end\nend",
    "  arr.each_with_index do |n, i|\n    if n == x\n      return i\n    end\n  end\nend",
    "  arr.index(x)\nend",
    "  return -1 if arr.empty?\n  return arr.length - 1 if arr[0] == x && arr[-1] == x\n  return -1 if arr[0] > x || arr[-1] < x",
    "  i = arr.length - 1\n  while i >= 0\n    if arr[i] == x\n      return i\n    end\n    i -= 1\n  end\n  return -1\nend",
    "  arr.rindex(x)\nend",
    "  n = arr.length\n  l = 0\n  r = n - 1\n  while l <= r\n    mid = (l + r) / 2\n    if arr[mid] == x\n      if mid == n - 1 || arr[mid + 1] != x\n        return mid\n      else\n        l = mid + 1\n      end\n    elsif arr[mid] < x\n      l = mid + 1\n    else\n      r = mid - 1\n    end\n  end\n  return -1\nend",
    "  arr.each_with_index do |val, index|\n    return index if val == x\n  end\nend",
    "  arr.index(x)\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\nend",
    "  arr.rindex(x)\nend",
    "  arr.index(x)\nend",
    "  arr.each_with_index do |a, i|\n    return i if a == x\n  end\nend",
    "  arr.each_with_index do |item, index|\n    return index if item == x\n  end\nend",
    "  arr.index(x)\nend",
    "  arr.rindex(x)\nend",
    "  arr.each_with_index do |a, i|\n    if a == x\n      return i\n    end\n  end\nend",
    "  if arr.include?(x)\n    arr.reverse.index(x)\n  else\n    return -1\n  end\nend",
    "  arr.index(x)\nend",
    "  arr.index(x)\nend",
    "  arr.index(x)\nend",
    "  return arr.rindex(x)\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\n  return -1\nend",
    "  i = 0\n  while i < arr.length\n    if arr[i] == x\n      return i\n    end\n    i += 1\n  end\n  return -1\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\nend",
    "  arr.each_with_index { |e, i| return i if e == x }\nend",
    "  arr.index(x)\nend",
    "  arr.rindex(x)\nend",
    "  arr.rindex(x)\nend",
    "  arr.each_with_index do |value, index|\n    if value == x\n      return index\n    end\n  end\n  return -1\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\nend",
    "  i = arr.length - 1\n  while i >= 0\n    if arr[i] == x\n      return i\n    end\n    i -= 1\n  end\n  return -1\nend",
    "  arr.index(x)\nend",
    "  arr.rindex(x)\nend",
    "  arr.index(x)\nend",
    "  arr.index(x)\nend",
    "  arr.each_with_index do |e, i|\n    if e == x\n      return i\n    end\n  end\n  return -1\nend",
    "  arr.each_with_index do |i, index|\n    if i == x\n      return index\n    end\n  end\nend",
    "  if arr.include?(x)\n    arr.reverse.index(x)\n  else\n    -1\n  end\nend",
    "  arr.each_with_index do |i, index|\n    if i == x\n      return index\n    end\n  end\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\nend",
    "  return -1 if arr.empty?\n  return arr.length - 1 if arr.last == x\n  arr.each_with_index do |e, i|\n    return i if e == x && arr[i + 1] != x\n  end\nend",
    "  if arr.include?(x)\n    arr.reverse.index(x)\n  else\n    -1\n  end\nend",
    "  arr.index(x)\nend",
    "  arr.index(x)\nend",
    "  if arr.include?(x)\n    arr.rindex(x)\n  else\n    -1\n  end\nend",
    "  arr.index(x)\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\nend",
    "  arr.each_with_index do |i, index|\n    if i == x\n      return index\n    end\n  end\nend",
    "  arr.index(x)\nend",
    "  arr.index(x)\nend",
    "  arr.each_with_index do |a, i|\n    if a == x\n      return i\n    end\n  end\n  return -1\nend",
    "  arr.rindex(x)\nend",
    "  i = 0\n  while i < arr.length\n    if arr[i] == x\n      return i\n    end\n    i += 1\n  end\n  return -1\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\n  return -1\nend",
    "  arr.each_with_index do |e, i|\n    return i if e == x && arr[i + 1] != x\n  end\nend",
    "  return arr.length - 1 if arr[arr.length - 1] == x\n  return -1 if arr[0] > x\n  return -1 if arr[arr.length - 1] < x\n  mid = arr.length / 2\n  if arr[mid] == x\n    return mid if arr[mid + 1] != x\n    return last(arr[mid + 1..-1], x)\n  elsif arr[mid] > x\n    return last(arr[0..mid - 1], x)\n  else\n    return last(arr[mid + 1..-1], x)\n  end\nend",
    "  arr.reverse.index(x)\nend",
    "  arr.rindex(x)\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\n  return -1\nend",
    "  arr.reverse.index(x)\nend",
    "  arr.index(x)\nend",
    "  if arr.include?(x)\n    arr.rindex(x)\n  else\n    -1\n  end\nend",
    "  return arr.index(x) if arr.index(x) == arr.length - 1\n  return arr.index(x) if arr[arr.index(x) + 1] != x\n  last(arr[arr.index(x) + 1..-1], x)\nend",
    "  return arr.length - 1 if arr[arr.length - 1] == x\n  return -1 if arr[0] > x\n  return -1 if arr[arr.length - 1] < x\n  return last(arr[1..-1], x)\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\nend",
    "  if arr.include?(x)\n    arr.rindex(x)\n  else\n    puts \"Element not found\"\n  end\nend",
    "  arr.rindex(x)\nend",
    "  arr.index(x)\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\n  return -1\nend",
    "  if arr.include?(x)\n    arr.reverse.index(x)\n  else\n    -1\n  end\nend",
    "  arr.index(x)\nend",
    "  arr.rindex(x)\nend",
    "  arr.each_with_index do |a, i|\n    if a == x\n      return i\n    end\n  end\nend",
    "  arr.index(x)\nend",
    "  arr.each_with_index do |a, i|\n    if a == x\n      return i\n    end\n  end\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\nend",
    "  arr.rindex(x)\nend",
    "  arr.rindex(x)\nend",
    "  arr.index(x)\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\nend",
    "  arr.each_with_index do |a, i|\n    if a == x\n      return i\n    end\n  end\nend",
    "  arr.index(x)\nend",
    "  arr.rindex(x)\nend",
    "  arr.each_with_index do |e, i|\n    if e == x\n      return i\n    end\n  end\n  return -1\nend",
    "  arr.index(x)\nend",
    "  arr.index(x)\nend",
    "  if arr.include?(x)\n    arr.reverse.index(x)\n  else\n    -1\n  end\nend",
    "  arr.each_with_index do |i, index|\n    if i == x\n      puts index\n    end\n  end\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\n  return -1\nend",
    "  arr.each_with_index do |e, i|\n    return i if e == x && arr[i+1] != x\n  end\nend",
    "  arr.each_with_index do |element, index|\n    if element == x\n      return index\n    end\n  end\nend",
    "  arr.each_with_index do |e, i|\n    return i if e == x && arr[i + 1] != x\n  end\nend",
    "  arr.rindex(x)\nend",
    "  arr.each_with_index do |e, i|\n    return i if e == x && arr[i+1] != x\n  end\nend",
    "  if arr.include?(x)\n    arr.rindex(x)\n  else\n    -1\n  end\nend",
    "  arr.index(x)\nend",
    "  arr.rindex(x)\nend",
    "  return -1 if arr.empty?\n  return arr.length - 1 if arr.last == x\n  return -1 if arr.last < x\n  return -1 if arr.first > x\n  return 0 if arr.first == x\n  mid = arr.length / 2\n  if arr[mid] == x\n    return mid if arr[mid + 1] != x\n    return last(arr[mid + 1..-1], x)\n  elsif arr[mid] > x\n    return last(arr[0..mid - 1], x)\n  else\n    return last(arr[mid + 1..-1], x)\n  end\nend",
    "  arr.index(x)\nend",
    "  arr.each_with_index do |a, i|\n    if a == x\n      return i\n    end\n  end\nend",
    "  if arr.include?(x)\n    arr.rindex(x)\n  else\n    -1\n  end\nend",
    "  if arr.include?(x)\n    arr.rindex(x)\n  else\n    -1\n  end\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\n  -1\nend",
    "  arr.index(x)\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\nend",
    "  arr.rindex(x)\nend",
    "  arr.each_with_index do |i, index|\n    if i == x\n      return index\n    end\n  end\nend",
    "  return arr.rindex(x)\nend",
    "  i = arr.length - 1\n  while i >= 0\n    if arr[i] == x\n      return i\n    end\n    i -= 1\n  end\n  return -1\nend",
    "  arr.index(x)\nend",
    "  arr.rindex(x)\nend",
    "  arr.rindex(x)\nend",
    "  return arr.rindex(x)\nend",
    "  arr.each_with_index do |a, i|\n    if a == x\n      return i\n    end\n  end\n  return -1\nend",
    "  arr.index(x)\nend",
    "  i = 0\n  while i < arr.length\n    if arr[i] == x\n      return i\n    end\n    i += 1\n  end\n  return -1\nend",
    "  arr.rindex(x)\nend",
    "  arr.index(x)\nend",
    "  return -1 if arr.empty?\n  return arr.length - 1 if arr[0] == x && arr[-1] == x\n  return -1 if arr[0] > x || arr[-1] < x\n  return binary_search(arr, x, 0, arr.length - 1)\nend",
    "  n = arr.length\n  i = 0\n  j = n-1\n  while(i<=j)\n    mid = (i+j)/2\n    if(arr[mid] == x && (mid == n-1 || arr[mid+1] > x))\n      return mid\n    elsif(arr[mid] <= x)\n      i = mid+1\n    else\n      j = mid-1\n    end\n  end\n  return -1\nend",
    "  i = arr.length - 1\n  while i >= 0\n    if arr[i] == x\n      return i\n    end\n    i -= 1\n  end\n  return -1\nend",
    "  arr.rindex(x)\nend",
    "  arr.each_with_index do |e, i|\n    if e == x\n      return i\n    end\n  end\n  return -1\nend",
    "  if arr.include?(x)\n    arr.rindex(x)\n  else\n    -1\n  end\nend",
    "  arr.rindex(x)\nend",
    "  arr.each_with_index do |e, i|\n    if e == x\n      return i\n    end\n  end\n  return -1\nend",
    "  if arr.include?(x)\n    arr.rindex(x)\n  else\n    -1\n  end\nend",
    "  arr.rindex(x)\nend",
    "  arr.each_with_index do |e, i|\n    return i if e == x && arr[i + 1] != x\n  end\nend",
    "  if arr.include?(x)\n    arr.rindex(x)\n  else\n    -1\n  end\nend",
    "  for i in 0...arr.length\n    if arr[i] == x\n      return i\n    end\n  end\n  return -1\nend",
    "  arr.rindex(x)\nend",
    "  if arr.include?(x)\n    arr.rindex(x)\n  else\n    -1\n  end\nend",
    "  arr.each_with_index do |item, index|\n    return index if item == x && arr[index + 1] != x\n  end\nend",
    "  arr.reverse.index(x)\nend",
    "  arr.each_with_index do |e, i|\n    return i if e == x && arr[i + 1] != x\n  end\nend",
    "  arr.rindex(x)\nend",
    "  arr.each_with_index do |element, index|\n    if element == x\n      return index\n    end\n  end\nend",
    "  arr.each_with_index do |a, i|\n    if a == x\n      return i\n    end\n  end\nend",
    "  arr.each_with_index do |item, index|\n    return index if item == x && arr[index + 1] != x\n  end\nend",
    "  arr.index(x)\nend",
    "  arr.each_with_index do |i, j|\n    if i == x\n      return j\n    end\n  end\nend",
    "  arr.each_with_index do |i, index|\n    if i == x\n      return index\n    end\n  end\nend",
    "  arr.index(x)\nend",
    "  arr.rindex(x)\nend",
    "  arr.each_with_index do |e, i|\n    if e == x\n      return i\n    end\n  end\n  return -1\nend",
    "  if arr.include?(x)\n    arr.rindex(x)\n  else\n    -1\n  end\nend",
    "  i = 0\n  j = arr.length - 1\n  while i <= j\n    mid = (i + j) / 2\n    if arr[mid] == x && (arr[mid + 1] != x || mid == arr.length - 1)\n      return mid\n    elsif arr[mid] <= x\n      i = mid + 1\n    else\n      j = mid - 1\n    end\n  end\n  return -1\nend",
    "  if arr.include?(x)\n    arr.rindex(x)\n  else\n    -1\n  end\nend",
    "  return -1 if arr.empty?\n  return arr.length - 1 if arr[0] == x && arr[-1] == x\n  return -1 if arr[0] > x || arr[-1] < x\n  mid = arr.length / 2\n  if arr[mid] == x\n    if arr[mid + 1] == x\n      last(arr[mid + 1..-1], x) + mid + 1\n    else\n      mid\n    end\n  elsif arr[mid] > x\n    last(arr[0..mid - 1], x)\n  else\n    last(arr[mid + 1..-1], x) + mid + 1\n  end\nend",
    "  arr.index(x)\nend",
    "  arr.each_with_index do |item, index|\n    if item == x\n      return index\n    end\n  end\n  return -1\nend",
    "  arr.each_with_index do |e, i|\n    if e == x\n      return i\n    end\n  end\n  return -1\nend",
    "  arr.rindex(x)\nend",
    "  arr.index(x)\nend",
    "  arr.index(x)\nend",
    "  arr.rindex(x)\nend"
  ]
}