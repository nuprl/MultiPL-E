{
  "name": "mbpp_739_find_Index",
  "language": "rb",
  "prompt": "# Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\ndef find_Index(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_Index\n    candidate = method(:find_Index)\n    assert_equal(4, candidate.call(2))\n    assert_equal(14, candidate.call(3))\n    assert_equal(45, candidate.call(4))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i * (i + 1) / 2).to_i + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while(true)\n    if(triangular_number(i).to_s.length == n)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      break\n    end\n    i += 1\n  end\n  return i\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 >= 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1) / 2).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1) / 2).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1) / 2).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while (n > 0)\n    n -= Math.log10(i).floor + 1\n    i += 1\n  end\n  return i - 2\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while j.to_s.length < n\n    i += 1\n    j += i\n  end\n  return i\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1)/2).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (n * (n + 1) / 2).to_s.length == n\n      return i\n    end\n    i += 1\n    n += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while i.to_s.length < n\n    i = i + j\n    j += 1\n  end\n  return j\nend\nputs find_Index(3)\nputs find_Index(4)\nputs find_Index(5)",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i*(i+1)/2).to_i + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "    i = 1\n    while true\n        if (i * (i + 1) / 2).to_s.length == n\n            return i\n        end\n        i += 1\n    end\nend\nputs find_Index(3)",
    "  i=1\n  while true\n    if (i*(i+1)/2).to_s.length == n\n      return i\n    end\n    i+=1\n  end\nend\nputs find_Index(3)",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1)/2).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i * (i + 1) / 2).to_i + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while i.to_s.length < n\n    j += 1\n    i += j\n  end\n  puts i\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i * (i + 1) / 2).floor + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    x = (i*(i+1))/2\n    if x.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1) / 2).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1) / 2).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend\nputs find_Index(3)\nputs find_Index(4)",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 >= 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if triangular_number(i).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i=1\n  while true\n    if (i*(i+1))/2 >= 10**(n-1)\n      return i\n    end\n    i+=1\n  end\nend",
    "  if n == 1\n    return 1\n  end\n  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend\nputs find_Index(3)\nputs find_Index(4)\nputs find_Index(5)\nputs find_Index(6)\nputs find_Index(7)\nputs find_Index(8)\nputs find_Index(9)\nputs find_Index(10)\nputs find_Index(11)\nputs find_Index(12)\nputs find_Index(13)\nputs find_Index(14)\nputs find_Index(15)\nputs find_Index(16)\nputs find_Index(17)\nputs find_Index(18)\nputs find_Index(19)\nputs find_Index(20)\nputs find_Index(21)\nputs find_Index(22)\nputs find_Index(23)\nputs find_Index(24)\nputs find_Index(25)\nputs find_Index(26)\nputs find_Index(27)\nputs find_Index(28)\nputs find_Index(29)\nputs find_Index(30)\nputs find_Index(31)\nputs find_Index(32)\nputs find_Index(33)\nputs find_Index(34)\nputs find_Index(35)\nputs find_Index(36)\nputs find_Index(37)\nputs find_Index(38)\nputs find_Index(39)\nputs find_Index(40)\nputs find_Index(41)\nputs find_Index(42)\nputs find_Index(43)\nputs find_Index(44)\nputs find_Index(45)\nputs find_Index(46)\nputs find_Index(47)\nputs find_Index(48)\nputs find_Index(49)\nputs find_Index(50)\nputs find_Index(51)\nputs find_Index",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i*(i+1))/2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while(j.to_s.length < n)\n    i += 1\n    j += i\n  end\n  return i\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri_num = (i * (i + 1)) / 2\n    if tri_num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i*(i+1)/2).floor + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i * (i + 1) / 2).floor + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    num = (i * (i + 1)) / 2\n    if num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (triangular_number(i)).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri_num = (i * (i + 1)) / 2\n    if tri_num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  # Write your code here\n  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while(true)\n    if(j.to_s.length == n)\n      return i\n    end\n    i += 1\n    j += i\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1) / 2).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "    i = 1\n    while true\n        if n == Math.log10(i*(i+1)/2).floor + 1\n            return i\n        end\n        i += 1\n    end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 >= 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i=1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i+=1\n  end\nend",
    "    i = 1\n    while true\n        t = (i*(i+1))/2\n        if t.to_s.length == n\n            return i\n        end\n        i += 1\n    end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while true\n    if (j.to_s.length == n)\n      return i\n    end\n    i += 1\n    j += i\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      break\n    end\n    i += 1\n  end\n  return i\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      break\n    end\n    i += 1\n  end\n  return i\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 >= 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri_num = (i * (i + 1)) / 2\n    if tri_num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1) / 2).to_s.length >= n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "    i=1\n    j=1\n    while(j.to_s.length<n)\n        i+=1\n        j+=i\n    end\n    return i\nend\nputs find_Index(2)\nputs find_Index(3)\nputs find_Index(4)\nputs find_Index(5)\nputs find_Index(6)\nputs find_Index(7)\nputs find_Index(8)\nputs find_Index(9)\nputs find_Index(10)\nputs find_Index(11)\nputs find_Index(12)\nputs find_Index(13)\nputs find_Index(14)\nputs find_Index(15)\nputs find_Index(16)\nputs find_Index(17)\nputs find_Index(18)\nputs find_Index(19)\nputs find_Index(20)\nputs find_Index(21)\nputs find_Index(22)\nputs find_Index(23)\nputs find_Index(24)\nputs find_Index(25)\nputs find_Index(26)\nputs find_Index(27)\nputs find_Index(28)\nputs find_Index(29)\nputs find_Index(30)\nputs find_Index(31)\nputs find_Index(32)\nputs find_Index(33)\nputs find_Index(34)\nputs find_Index(35)\nputs find_Index(36)\nputs find_Index(37)\nputs find_Index(38)\nputs find_Index(39)\nputs find_Index(40)\nputs find_Index(41)\nputs find_Index(42)\nputs find_Index(43)\nputs find_Index(44)\nputs find_Index(45)\nputs find_Index(46)\nputs find_Index(47)\nputs find_Index(48)\nputs find_Index(49)\nputs find_Index(50)\nputs find_Index(51)\nputs find_Index(52)\nputs find_Index(53)\n",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while(i.to_s.length < n)\n    i = i + j\n    j = j + 1\n  end\n  return j\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      break\n    end\n    i += 1\n  end\n  return i\nend",
    "  i = 1\n  j = 1\n  while true\n    if n == j.to_s.length\n      return i\n    end\n    i += 1\n    j += i\n  end\nend",
    "  i=1\n  while true\n    if (i*(i+1))/2 >= 10**(n-1)\n      return i\n    end\n    i+=1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "    i = 1\n    while true\n        if (i * (i + 1) / 2).to_s.length == n\n            return i\n        end\n        i += 1\n    end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 >= 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1) / 2).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = (i * (i + 1)) / 2\n\t\tif triangle.to_s.length == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while(j.to_s.length < n)\n    i += 1\n    j += i\n  end\n  return i\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    num = (i * (i + 1)) / 2\n    if num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i*(i+1)/2).floor + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i * (i + 1) / 2).floor + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while j.to_s.length < n\n    i += 1\n    j += i\n  end\n  return i\nend\nputs find_Index(3)\nputs find_Index(4)\nputs find_Index(5)",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "    i = 1\n    while true\n        if (n * (n + 1) / 2).to_s.length == n\n            return i\n        end\n        i += 1\n        n += 1\n    end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    num = (i * (i + 1)) / 2\n    if num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i * (i + 1) / 2).to_i + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1) / 2).to_s.length >= n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while(true)\n    if(j.to_s.length == n)\n      return i\n    end\n    i += 1\n    j += i\n  end\nend\nputs find_Index(3)",
    "  i = 1\n  while true\n    if n == (i * (i + 1)) / 2\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2.to_f.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while n > 0\n    n -= Math.log10(i).to_i + 1\n    i += 1\n  end\n  return i - 1\nend",
    "  i = 1\n  while true\n    if (n * (n + 1) / 2).to_s.length == n\n      return i\n    end\n    i += 1\n    n += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i*(i+1)/2).floor + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10**(n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1) / 2).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (n * (n + 1) / 2).to_s.length == n\n      return i\n    end\n    i += 1\n    n += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while true\n    if (j.to_s.length == n)\n      return i\n    end\n    i += 1\n    j += i\n  end\nend",
    "  i = 1\n  while (n > 0)\n    n -= Math.log10(i).floor + 1\n    i += 1\n  end\n  return i - 2\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1)/2).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 >= 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri_num = (i * (i + 1)) / 2\n    if tri_num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while (i*(i+1)/2).to_s.length < n\n    i += 1\n  end\n  return i\nend\nputs find_Index(3)",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1)/2).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i*(i+1)/2).floor + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while j.to_s.length < n\n    j = (i * (i + 1)) / 2\n    i += 1\n  end\n  return i - 1\nend",
    "  i = 1\n  while true\n    if (i * (i + 1) / 2).to_s.length >= n\n      return i\n    end\n    i += 1\n  end\nend\nputs find_Index(3)\nputs find_Index(4)\nputs find_Index(5)\nputs find_Index(6)\nputs find_Index(7)\nputs find_Index(8)",
    "  i = 1\n  while true\n    if (i * (i + 1) / 2).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  if n == 1\n    return 1\n  end\n  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while i.to_s.length < n\n    j += 1\n    i += j\n  end\n  return j\nend\nputs find_Index(3)",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i * (i + 1) / 2).floor + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i=1\n  while true\n    if (i*(i+1))/2.to_s.length==n\n      return i\n    end\n    i+=1\n  end\nend\nputs find_Index(3)",
    "  i = 1\n  while n > 0\n    n -= Math.log10(i).floor + 1\n    i += 1\n  end\n  i - 2\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2 > 10**(n-1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  j = 1\n  while true\n    if j.to_s.length == n\n      return i\n    end\n    i += 1\n    j += i\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1) / 2).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    t = (i*(i+1))/2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  t = 0\n  while t.to_s.length < n\n    t = t + i\n    i = i + 1\n  end\n  return i - 1\nend",
    "  i = 1\n  j = 1\n  while i.to_s.length < n\n    i = i + j\n    j = j + 1\n  end\n  return j\nend\nputs find_Index(3)",
    "    i = 1\n    j = 1\n    while i.to_s.length < n\n        j += 1\n        i += j\n    end\n    return j\nend",
    "  i = 1\n  while true\n    if (i * (i + 1) / 2).to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i*(i+1)/2).to_i + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2.to_f.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    num = (i * (i + 1)) / 2\n    if num.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    triangle = (i * (i + 1)) / 2\n    if triangle.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i*(i+1))/2.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (n * (n + 1) / 2).to_s.length == n\n      return i\n    end\n    i += 1\n    n += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 >= 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == (i * (i + 1)) / 2\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (i * (i + 1)) / 2 > 10 ** (n - 1)\n      return i\n    end\n    i += 1\n  end\nend",
    "    i=1\n    while true\n        if (i*(i+1))/2.to_f.to_s.length == n\n            return i\n        end\n        i+=1\n    end\nend\nputs find_Index(3)\nputs find_Index(4)\nputs find_Index(5)\nputs find_Index(6)",
    "  i = 1\n  while true\n    t = (i * (i + 1)) / 2\n    if t.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    tri = (i * (i + 1)) / 2\n    if tri.to_s.length == n\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if n == Math.log10(i*(i+1)/2).to_i + 1\n      return i\n    end\n    i += 1\n  end\nend",
    "  i = 1\n  while true\n    if (n*(n+1))/2.to_s.length == n\n      return i\n    end\n    i += 1\n    n += 1\n  end\nend"
  ]
}