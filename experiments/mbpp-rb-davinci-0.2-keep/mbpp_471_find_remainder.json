{
  "name": "mbpp_471_find_remainder",
  "language": "rb",
  "prompt": "# Write a python function to find the product of the array multiplication modulo n.\ndef find_remainder(arr, n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_remainder\n    candidate = method(:find_remainder)\n    assert_equal(9, candidate.call([100, 10, 5, 25, 35, 14], 11))\n    assert_equal(0, candidate.call([1, 1, 1], 1))\n    assert_equal(0, candidate.call([1, 2, 1], 2))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  arr.inject(1) {|product, num| (product * num) % n}\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  # Write your code here\n  if arr.length == 0\n    return 0\n  end\n  product = 1\n  arr.each do |val|\n    product = (product * val) % n\n  end\n  product\nend",
    "  # Write your code here\n  arr.inject(1) { |product, x| (product * x) % n }\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  product = 1\n  for i in 0...arr.length\n    product = product * arr[i]\n  end\n  return product % n\nend",
    "  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product = (product * i) % n\n  end\n  product\nend",
    "  arr.inject(1) { |product, num| product * num % n }\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product = product * num\n  end\n  return product % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product = (product * i) % n\n  end\n  return product\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product = product * i\n  end\n  product % n\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product = (product * i) % n\n  end\n  product\nend",
    "  # Write your code here\n  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product = (product * i) % n\n  end\n  return product\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product = product * i\n  end\n  product % n\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  # Write your code here\n  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  arr.inject(1) { |product, x| product * x } % n\nend",
    "  # Write your code here\n  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product = (product * i) % n\n  end\n  product\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  arr.inject(:*) % n\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*) % n\nend",
    "  arr.inject(1) { |product, num| (product * num) % n }\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product *= num\n  end\n  product % n\nend",
    "  product = 1\n  arr.each do |num|\n    product *= num\n  end\n  product % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  product = 1\n  arr.each do |num|\n    product *= num\n  end\n  product % n\nend",
    "  # Write your code here\n  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  arr.inject(:*) % n\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product = product * num\n  end\n  return product % n\nend",
    "  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  arr.inject(1) { |product, num| product * num % n }\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |element|\n    product = (product * element) % n\n  end\n  return product\nend",
    "  product = 1\n  arr.each do |i|\n    product *= i\n  end\n  product % n\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |item|\n    product = (product * item) % n\n  end\n  product\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  # Write your code here\n  arr.inject(:*)%n\nend",
    "  arr.inject(:*) % n\nend",
    "  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  arr.inject(:*) % n\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  arr.inject(1) { |product, num| product * num } % n\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |a|\n    product = (product * a) % n\n  end\n  product\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product = product * i\n  end\n  return product % n\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  arr.inject(:*) % n\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  arr.inject(1) { |product, x| (product * x) % n }\nend",
    "  arr.inject(:*) % n\nend",
    "  arr.inject(:*) % n\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |a|\n    product = (product * a) % n\n  end\n  product\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  # Write your code here\n  arr.inject(1) { |product, x| (product * x) % n }\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(1) { |product, num| product * num } % n\nend",
    "  # Write your code here\n  arr.inject(1) { |product, x| product * x % n }\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  arr.inject(:*) % n\nend",
    "  return arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product = (product * i) % n\n  end\n  product\nend",
    "  # Write your code here\n  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |a|\n    product = (product * a) % n\n  end\n  product\nend",
    "  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product = (product * i) % n\n  end\n  product\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product *= i\n  end\n  product % n\nend",
    "  arr.inject(:*) % n\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product *= num\n  end\n  product % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product = (product * i) % n\n  end\n  product\nend",
    "  arr.inject(:*) % n\nend",
    "  arr.inject(:*) % n\nend",
    "  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  # Write your code here\n  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |a|\n    product = (product * a) % n\n  end\n  product\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  # Write your code here\n  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*) % n\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product = product * i\n  end\n  return product % n\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*) % n\nend",
    "  arr.inject(:*) % n\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  # Write your code here\n  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product *= num\n  end\n  product % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |a|\n    product *= a\n  end\n  product % n\nend",
    "  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  arr.inject(:*).remainder(n)\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product *= i\n  end\n  product % n\nend",
    "  arr.inject(:*) % n\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  arr.inject(1) { |product, i| (product * i) % n }\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  prod = 1\n  arr.each do |num|\n    prod = (prod * num) % n\n  end\n  prod\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |x|\n    product = (product * x) % n\n  end\n  return product\nend",
    "  # Write your code here\n  product = 1\n  for i in 0...arr.length\n    product = (product * arr[i]) % n\n  end\n  return product\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product = (product * i) % n\n  end\n  product\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product = (product * i) % n\n  end\n  product\nend",
    "  arr.inject(1) { |product, num| (product * num) % n }\nend",
    "  # Write your code here\n  arr.inject(1) { |product, x| (product * x) % n }\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product *= num\n  end\n  product % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product = (product * i) % n\n  end\n  product\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |element|\n    product *= element\n  end\n  product % n\nend",
    "  # Write your code here\n  # To print results to the standard output you can use print\n  # Example: print \"Hello world!\"\n  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(1) { |product, num| (product * num) % n }\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product = product * num\n  end\n  return product % n\nend",
    "  arr.inject(1) { |product, num| (product * num) % n }\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  arr.inject(1) { |product, num| product * num } % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  arr.inject(1) { |product, num| (product * num) % n }\nend",
    "  # Write your code here\n  prod = 1\n  arr.each do |i|\n    prod = prod * i\n  end\n  prod % n\nend",
    "  arr.inject(:*).to_i % n\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product = (product * i) % n\n  end\n  product\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  arr.inject(1) { |product, x| (product * x) % n }\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |i|\n    product = (product * i) % n\n  end\n  product\nend",
    "  product = 1\n  arr.each do |num|\n    product *= num\n  end\n  product % n\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  arr.inject(:*) % n\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  arr.inject(:*) % n\nend",
    "  arr.inject(:*).modulo(n)\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  arr.inject(:*) % n\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend",
    "  # Write your code here\n  product = 1\n  arr.each do |num|\n    product = (product * num) % n\n  end\n  product\nend",
    "  # Write your code here\n  arr.inject(:*) % n\nend"
  ]
}