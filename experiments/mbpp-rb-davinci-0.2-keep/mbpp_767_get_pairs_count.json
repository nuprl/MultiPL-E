{
  "name": "mbpp_767_get_pairs_count",
  "language": "rb",
  "prompt": "# Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef get_pairs_count(arr, sum)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_pairs_count\n    candidate = method(:get_pairs_count)\n    assert_equal(6, candidate.call([1, 1, 1, 1], 2))\n    assert_equal(3, candidate.call([1, 5, 7, -1, 5], 6))\n    assert_equal(1, candidate.call([1, -2, 3], 1))\n    assert_equal(1, candidate.call([-1, -2, 3], -3))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  count = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      if arr[i] + arr[j] == sum\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      if arr[i] + arr[j] == sum\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  # Write your code here\n  arr.combination(2).to_a.count { |x| x.sum == sum }\nend",
    "  count = 0\n  arr.each_with_index do |num, index|\n    arr.each_with_index do |num2, index2|\n      if index2 > index\n        count += 1 if num + num2 == sum\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      if arr[i] + arr[j] == sum\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  arr.each do |i|\n    arr.each do |j|\n      if i + j == sum\n        count += 1\n      end\n    end\n  end\n  count / 2\nend",
    "  count = 0\n  arr.each_with_index do |x, i|\n    arr.each_with_index do |y, j|\n      if i != j && x + y == sum\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  arr.each_with_index do |num, index|\n    arr.each_with_index do |num2, index2|\n      if index2 > index && num + num2 == sum\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0...arr.length\n    for j in i+1...arr.length\n      if arr[i] + arr[j] == sum\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      if arr[i] + arr[j] == sum\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  arr.each_with_index do |num1, index1|\n    arr.each_with_index do |num2, index2|\n      if num1 + num2 == sum && index1 < index2\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  arr.each_with_index do |num, index|\n    arr[index+1..-1].each do |num2|\n      count += 1 if num + num2 == sum\n    end\n  end\n  count\nend",
    "  count = 0\n  arr.each_with_index do |num, index|\n    arr[index+1..-1].each do |num2|\n      count += 1 if num + num2 == sum\n    end\n  end\n  count\nend",
    "  count = 0\n  arr.each_with_index do |num1, i|\n    arr.each_with_index do |num2, j|\n      if i < j && num1 + num2 == sum\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  arr.each do |i|\n    arr.each do |j|\n      if i + j == sum\n        count += 1\n      end\n    end\n  end\n  return count / 2\nend",
    "  count = 0\n  arr.each_with_index do |num1, index1|\n    arr.each_with_index do |num2, index2|\n      if index2 > index1\n        count += 1 if num1 + num2 == sum\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      if arr[i] + arr[j] == sum\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  arr.each_with_index do |num1, index1|\n    arr.each_with_index do |num2, index2|\n      if index2 > index1\n        if num1 + num2 == sum\n          count += 1\n        end\n      end\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    for j in i+1..arr.length-1\n      if arr[i] + arr[j] == sum\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  # Write your code here\n  count = 0\n  arr.each do |i|\n    arr.each do |j|\n      if i + j == sum\n        count += 1\n      end\n    end\n  end\n  count / 2\nend"
  ]
}