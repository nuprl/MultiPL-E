{
  "name": "mbpp_779_unique_sublists",
  "language": "rb",
  "prompt": "# Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\ndef unique_sublists(list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_779_unique_sublists.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_sublists\n    candidate = method(:unique_sublists)\n    assert_equal({[1, 3] => 2, [5, 7] => 2, [13, 15, 17] => 1, [9, 11] => 1}, candidate.call([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]))\n    assert_equal({[\"green\", \"orange\"] => 2, [\"black\"] => 1, [\"white\"] => 1}, candidate.call([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]))\n    assert_equal({[1, 2] => 1, [3, 4] => 1, [4, 5] => 1, [6, 7] => 1}, candidate.call([[1, 2], [3, 4], [4, 5], [6, 7]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  list1.map { |x| x.to_s }.uniq.map { |x| x.to_i }.sort\nend",
    "  list1.map{|x| x.to_s}.uniq.map{|x| x.to_i}.each_with_object(Hash.new(0)){|x, h| h[x] += 1}\nend",
    "  list1.map {|x| x.to_s}.uniq.map {|x| x.to_i}.each_with_object(Hash.new(0)) {|x, h| h[x] += 1}\nend",
    "  list1.map{|x| x.to_s}.uniq.map{|x| x.to_i}.each_with_object(Hash.new(0)) {|x, h| h[x] += 1}\nend",
    "  list1.map { |x| x.to_s }.uniq.map { |x| x.to_i }.sort\nend",
    "  list1.map! { |x| x.to_s }\n  list1.map! { |x| x.gsub(/\\s+/, \"\") }\n  list1.map! { |x| x.gsub(/\\[|\\]/, \"\") }\n  list1.map! { |x| x.split(\",\") }\n  list1.map! { |x| x.sort }\n  list1.map! { |x| x.join(\",\") }\n  list1.map! { |x| x.to_sym }\n  list1.uniq!\n  list1.map! { |x| x.to_s }\n  list1.map! { |x| x.gsub(/\\s+/, \"\") }\n  list1.map! { |x| x.gsub(/\\[|\\]/, \"\") }\n  list1.map! { |x| x.split(\",\") }\n  list1.map! { |x| x.sort }\n  list1.map! { |x| x.join(\",\") }\n  list1.map! { |x| x.to_sym }\n  list1.map! { |x| x.to_s }\n  list1.map! { |x| x.gsub(/\\s+/, \"\") }\n  list1.map! { |x| x.gsub(/\\[|\\]/, \"\") }\n  list1.map! { |x| x.split(\",\") }\n  list1.map! { |x| x.sort }\n  list1.map! { |x| x.join(\",\") }\n  list1.map! { |x| x.to_sym }\n  list1.map! { |x| x.to_s }\n  list1.map! { |x| x.gsub(/\\s+/, \"\") }\n  list1.map! { |x| x.gsub(/\\[|\\]/, \"\") }\n  list1.map! { |x| x.split(\",\") }\n  list1.map! { |x| x.sort",
    "  list1.map { |x| x.to_s }.uniq.map { |x| x.to_i }.sort\nend",
    "  list1.map { |x| x.to_s }.uniq.map { |x| x.to_i }.sort\nend",
    "  list1.map { |x| x.to_s }.uniq.map { |x| x.to_i }.sort\nend",
    "  list1.map {|x| x.to_s}.uniq.map {|x| x.to_i}.sort.map {|x| x.to_s}.map {|x| x.to_i}\nend",
    "  list1.map{|x| x.to_s}.uniq.map{|x| x.to_i}.each_with_object(Hash.new(0)){|x, h| h[x] += 1}\nend",
    "  dict = {}\n  list1.each do |item|\n    if dict.has_key?(item.to_s)\n      dict[item.to_s] += 1\n    else\n      dict[item.to_s] = 1\n    end\n  end\n  dict\nend",
    "  list1.map{|x| x.to_s}.uniq.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_i}.map{|x| x.to_s}.map{|x| x.to_",
    "  list1.map { |x| x.to_s }.uniq.map { |x| x.to_i }.sort\nend",
    "  list1.map! {|x| x.to_s}\n  list1.each_with_object(Hash.new(0)) {|x, h| h[x] += 1}\nend",
    "  list1.map{|x| x.to_s}.uniq.map{|x| x.to_i}.each_with_object(Hash.new(0)) { |word,counts| counts[word] += 1 }\nend",
    "  list1.map { |e| e.to_s }.uniq.map { |e| e.to_i }\nend",
    "  list1.map { |x| x.to_s }.uniq.map { |x| x.to_i }.sort\nend",
    "  list1.map {|x| x.to_s}.uniq.map {|x| x.to_i}.each_with_object(Hash.new(0)) {|x, h| h[x] += 1}\nend",
    "  list1.map! {|x| x.to_s}\n  list1.map! {|x| x.split(',')}\n  list1.map! {|x| x.map! {|y| y.to_i}}\n  list1.map! {|x| x.sort}\n  list1.map! {|x| x.to_s}\n  list1.map! {|x| x.gsub(/\\s+/, \"\")}\n  list1.map! {|x| x.gsub(/\\[|\\]/, \"\")}\n  list1.map! {|x| x.gsub(/\\,/, \"\")}\n  list1.map! {|x| x.to_i}\n  list1.map! {|x| x.to_s(2)}\n  list1.map! {|x| x.to_i(2)}\n  list1.map! {|x| x.to_s(16)}\n  list1.map! {|x| x.to_i(16)}\n  list1.map! {|x| x.to_s(8)}\n  list1.map! {|x| x.to_i(8)}\n  list1.map! {|x| x.to_s(2)}\n  list1.map! {|x| x.to_i(2)}\n  list1.map! {|x| x.to_s(16)}\n  list1.map! {|x| x.to_i(16)}\n  list1.map! {|x| x.to_s(8)}\n  list1.map! {|x| x.to_i(8)}\n  list1.map! {|x| x.to_s(2)}\n  list1.map! {|x| x.to_i(2)}\n  list1.map! {|x| x.to_s(16)}\n  list1.map! {|x| x.to_i(16)}\n  list1.map! {|x| x.to_s(8)}\n  list1.map!"
  ]
}