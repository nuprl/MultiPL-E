{
  "name": "mbpp_3_is_not_prime",
  "language": "rb",
  "prompt": "# Write a python function to identify non-prime numbers.\ndef is_not_prime(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_not_prime\n    candidate = method(:is_not_prime)\n    assert_equal(false, candidate.call(2))\n    assert_equal(true, candidate.call(10))\n    assert_equal(true, candidate.call(35))\n    assert_equal(false, candidate.call(37))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  if n <= 1\n    return true\n  end\n  for i in 2..n-1\n    if n % i == 0\n      return true\n    end\n  end\n  return false\nend",
    "  if n <= 1\n    return true\n  end\n  for i in 2..n-1\n    if n % i == 0\n      return true\n    end\n  end\n  return false\nend",
    "  for i in 2..n-1\n    if n % i == 0\n      return true\n    end\n  end\n  return false\nend",
    "  if n <= 1\n    return true\n  end\n  for i in 2..(n - 1)\n    if (n % i) == 0\n      return true\n    end\n  end\n  return false\nend",
    "  for i in 2..n-1\n    if n % i == 0\n      return true\n    end\n  end\n  return false\nend",
    "  if n <= 1\n    return true\n  end\n  for i in 2..(n-1)\n    if n % i == 0\n      return true\n    end\n  end\n  return false\nend",
    "  for i in 2..n-1\n    if n % i == 0\n      return true\n    end\n  end\n  return false\nend",
    "  return true if n < 2\n  (2..Math.sqrt(n)).each do |i|\n    return true if n % i == 0\n  end\n  false\nend",
    "  if n == 1\n    return true\n  end\n  (2..n/2).each do |i|\n    if n % i == 0\n      return true\n    end\n  end\n  return false\nend",
    "  if n <= 1\n    return true\n  end\n  for i in 2..(n-1)\n    if n % i == 0\n      return true\n    end\n  end\n  return false\nend",
    "  (2..n/2).each do |i|\n    if n % i == 0\n      return true\n    end\n  end\n  return false\nend",
    "  for i in 2..n-1\n    if n % i == 0\n      return true\n    end\n  end\n  return false\nend",
    "  if n == 1\n    return true\n  end\n  for i in 2..(n-1)\n    if n % i == 0\n      return true\n    end\n  end\n  return false\nend",
    "  (2..n/2).each do |i|\n    if n % i == 0\n      return true\n    end\n  end\n  return false\nend",
    "  for i in 2..n-1\n    if n % i == 0\n      return true\n    end\n  end\n  return false\nend",
    "  for i in 2..n-1\n    if n%i == 0\n      return true\n    end\n  end\n  return false\nend",
    "  if n <= 1\n    return true\n  end\n  for i in 2..(n - 1)\n    if (n % i) == 0\n      return true\n    end\n  end\n  return false\nend",
    "  if n < 2\n    return true\n  end\n  for i in 2..n-1\n    if n % i == 0\n      return true\n    end\n  end\n  return false\nend",
    "  for i in 2..n-1\n    if n % i == 0\n      return true\n    end\n  end\n  return false\nend",
    "  if n <= 1\n    return true\n  end\n  for i in 2..(n-1)\n    if n % i == 0\n      return true\n    end\n  end\n  return false\nend"
  ]
}