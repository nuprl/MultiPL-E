{
  "name": "mbpp_83_get_Char",
  "language": "rb",
  "prompt": "# Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\ndef get_Char(strr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_Char\n    candidate = method(:get_Char)\n    assert_equal(\"f\", candidate.call(\"abc\"))\n    assert_equal(\"t\", candidate.call(\"gfg\"))\n    assert_equal(\"c\", candidate.call(\"ab\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  strr.split('').map{|x| x.ord}.sum % 26\nend",
    "  sum = 0\n  strr.each_char do |char|\n    sum += char.ord\n  end\n  return (sum % 26 + 97).chr\nend",
    "  sum = 0\n  strr.each_byte do |c|\n    sum += c\n  end\n  sum = sum % 26\n  return (sum + 65).chr\nend",
    "  sum = 0\n  strr.each_char do |c|\n    sum += c.ord\n  end\n  puts \"The character is #{(sum % 26 + 65).chr}\"\nend",
    "  sum = 0\n  strr.each_char do |c|\n    sum += c.ord\n  end\n  return (sum % 26 + 97).chr\nend",
    "  sum = 0\n  strr.each_byte do |c|\n    sum += c\n  end\n  return (sum % 26 + 97).chr\nend\nputs get_Char(\"abc\")\nputs get_Char(\"abcd\")\nputs get_Char(\"ab\")",
    "  sum = 0\n  strr.each_char {|c| sum += c.ord}\n  return (sum % 26 + 65).chr\nend",
    "  sum = 0\n  strr.each_byte do |c|\n    sum += c\n  end\n  puts sum % 26\nend",
    "  sum = 0\n  strr.each_byte do |c|\n    sum += c\n  end\n  return (sum % 26 + 65).chr\nend",
    "  sum = 0\n  strr.each_byte do |i|\n    sum += i\n  end\n  return (sum % 26 + 65).chr\nend\nputs get_Char(\"ABC\")\nputs get_Char(\"Z\")\nputs get_Char(\"AA\")",
    "    sum = 0\n    strr.each_char do |c|\n        sum += c.ord\n    end\n    return (sum % 26 + 65).chr\nend",
    "  strr.each_byte.map { |x| x - 96 }.sum % 26 + 96\nend",
    "  sum = 0\n  strr.each_char do |i|\n    sum += i.ord\n  end\n  return (sum % 26 + 65).chr\nend",
    "  sum = 0\n  strr.each_char do |i|\n    sum += i.ord\n  end\n  return (sum % 26 + 97).chr\nend",
    "  strr.chars.map { |c| c.ord }.sum % 26\nend",
    "  sum = 0\n  strr.each_byte do |c|\n    sum += c\n  end\n  puts sum % 26\nend\nget_Char(\"abc\")",
    "  sum=0\n  strr.each_byte do |i|\n    sum+=i\n  end\n  return (sum%26+97).chr\nend\nputs get_Char(\"abc\")\nputs get_Char(\"abcd\")\nputs get_Char(\"abcde\")\nputs get_Char(\"abcdef\")\nputs get_Char(\"abcdefg\")\nputs get_Char(\"abcdefgh\")\nputs get_Char(\"abcdefghi\")\nputs get_Char(\"abcdefghij\")\nputs get_Char(\"abcdefghijk\")\nputs get_Char(\"abcdefghijkl\")\nputs get_Char(\"abcdefghijklm\")\nputs get_Char(\"abcdefghijklmn\")\nputs get_Char(\"abcdefghijklmno\")\nputs get_Char(\"abcdefghijklmnop\")\nputs get_Char(\"abcdefghijklmnopq\")\nputs get_Char(\"abcdefghijklmnopqr\")\nputs get_Char(\"abcdefghijklmnopqrs\")\nputs get_Char(\"abcdefghijklmnopqrst\")\nputs get_Char(\"abcdefghijklmnopqrstu\")\nputs get_Char(\"abcdefghijklmnopqrstuv\")\nputs get_Char(\"abcdefghijklmnopqrstuvw\")\nputs get_Char(\"abcdefghijklmnopqrstuvwx\")\nputs get_Char(\"abcdefghijklmnopqrstuvwxy\")\nputs get_Char(\"abcdefghijklmnopqrstuvwxyz\")",
    "  strr.chars.map { |c| c.ord }.sum % 26\nend",
    "  sum = 0\n  strr.each_byte do |i|\n    sum += i\n  end\n  puts \"The character made by adding the ASCII value of all the characters of the given string modulo 26 is #{(sum % 26).chr}\"\nend",
    "  sum = 0\n  strr.each_byte do |i|\n    sum += i\n  end\n  return (sum % 26 + 65).chr\nend"
  ]
}