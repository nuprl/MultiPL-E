{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "rb",
  "prompt": "# Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sub_array_sum_repeated\n    candidate = method(:max_sub_array_sum_repeated)\n    assert_equal(30, candidate.call([10, 20, -30, -1], 4, 3))\n    assert_equal(59, candidate.call([-1, 10, 20], 3, 2))\n    assert_equal(-1, candidate.call([-1, -2, -3], 3, 3))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  max_sum = 0\n  for i in 0...n\n    sum = 0\n    for j in 0...n\n      sum += a[(i + j) % n]\n    end\n    max_sum = [max_sum, sum].max\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0...n\n    max_sum += a[i]\n  end\n  max_sum *= k\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = [max_sum, curr_sum].max\n  for i in 0...n\n    curr_sum = curr_sum - a[i] + a[i - n]\n    max_sum = [max_sum, curr_sum].max\n  end\n  return max_sum\nend",
    "  max_so_far = 0\n  max_ending_here = 0\n  for i in 0...n\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n  end\n  max_wrap = 0\n  for i in 0...n\n    max_wrap += a[i]\n    a[i] = -a[i]\n  end\n  max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n  return [max_so_far, max_wrap].max\nend",
    "  max_sum = 0\n  for i in 0...n\n    max_sum += a[i]\n  end\n  max_sum *= k\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = [max_sum, curr_sum].max\n  for i in 0...n\n    curr_sum -= a[i]\n    curr_sum += a[i] * k\n    max_sum = [max_sum, curr_sum].max\n  end\n  return max_sum\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0...n\n    curr_sum = curr_sum + (k - 1) * a[i]\n    max_sum = [max_sum, curr_sum].max\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..k-1\n      curr_sum += a[i]\n    end\n    max_sum = [max_sum, curr_sum].max\n  end\n  return max_sum\nend",
    "  max_sum = -Float::INFINITY\n  for i in 0..(k-1)\n    curr_sum = 0\n    for j in 0..(n-1)\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    sum = 0\n    for j in 0..n-1\n      sum += a[j]\n      max_sum = [max_sum, sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = curr_sum - a[i] + a[i]*k\n    max_sum = [max_sum, curr_sum].max\n  end\n  max_sum\nend",
    "  max_sum = 0\n  for i in 0...n\n    max_sum += a[i]\n  end\n  max_sum *= k\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = [max_sum, curr_sum].max\n  for i in 0...n\n    curr_sum -= a[i]\n  end\n  max_sum = [max_sum, curr_sum].max\n  return max_sum\nend",
    "  max_sum = -Float::INFINITY\n  for i in 0..(n - 1)\n    curr_sum = 0\n    for j in 0..(n - 1)\n      curr_sum += a[(i + j) % n]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0...n\n    curr_sum = curr_sum - a[i] + a[i] * k\n    max_sum = [max_sum, curr_sum].max\n  end\n  return max_sum\nend",
    "  max_sum = -Float::INFINITY\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      curr_sum += a[j] * (k-1)\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  max_sum_so_far = curr_sum\n  for i in 0...n\n    curr_sum = curr_sum - a[i] + a[i] * k\n    max_sum_so_far = [max_sum_so_far, curr_sum].max\n    max_sum = [max_sum, max_sum_so_far].max\n  end\n  return max_sum\nend",
    "  max_sum = 0\n  for i in 0...n\n    max_sum += a[i]\n  end\n  max_sum *= k\n  curr_sum = 0\n  for i in 0...n\n    curr_sum += a[i]\n  end\n  max_sum = [max_sum, curr_sum].max\n  for i in 0...n\n    curr_sum = curr_sum - a[i] + a[i - n]\n    max_sum = [max_sum, curr_sum].max\n  end\n  max_sum\nend",
    "  max_sum = 0\n  curr_sum = 0\n  for i in 0..n-1\n    curr_sum += a[i]\n  end\n  max_sum = curr_sum\n  for i in 0..n-2\n    curr_sum = curr_sum - a[i] + a[i+n]\n    max_sum = [max_sum, curr_sum].max\n  end\n  return max_sum * k\nend",
    "  max_sum = 0\n  for i in 0..n-1\n    curr_sum = 0\n    for j in 0..n-1\n      curr_sum += a[j]\n      max_sum = [max_sum, curr_sum].max\n    end\n  end\n  max_sum * k\nend"
  ]
}