{
  "name": "mbpp_463_max_subarray_product",
  "language": "rb",
  "prompt": "# Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_subarray_product\n    candidate = method(:max_subarray_product)\n    assert_equal(112, candidate.call([1, -2, -3, 0, 7, -8, -2]))\n    assert_equal(180, candidate.call([6, -3, -10, 0, 2]))\n    assert_equal(80, candidate.call([-2, -40, 0, -2, -3]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  max_product = arr.first\n  current_max = arr.first\n  current_min = arr.first",
    "  max_ending_here = 1\n  min_ending_here = 1\n  max_so_far = 1",
    "  max_so_far = 1\n  min_so_far = 1\n  max_product = 1\n  for i in 0..arr.length-1\n    if arr[i] > 0\n      max_so_far = max_so_far * arr[i]\n      min_so_far = [min_so_far * arr[i], 1].min\n    elsif arr[i] == 0\n      max_so_far = 1\n      min_so_far = 1\n    else\n      temp = max_so_far\n      max_so_far = [min_so_far * arr[i], 1].max\n      min_so_far = temp * arr[i]\n    end\n    if max_so_far > max_product\n      max_product = max_so_far\n    end\n  end\n  return max_product\nend",
    "  max_product = arr[0]\n  min_product = arr[0]\n  result = arr[0]\n  for i in 1...arr.length\n    if arr[i] < 0\n      temp = max_product\n      max_product = min_product\n      min_product = temp\n    end\n    max_product = [arr[i], max_product * arr[i]].max\n    min_product = [arr[i], min_product * arr[i]].min\n    result = [result, max_product].max\n  end\n  result\nend",
    "  max_product = arr[0]\n  current_max = arr[0]\n  current_min = arr[0]",
    "  max_product = arr[0]\n  current_max = arr[0]\n  current_min = arr[0]\n  (1...arr.length).each do |i|\n    current_max, current_min = [arr[i], current_max * arr[i], current_min * arr[i]].max(2), [arr[i], current_max * arr[i], current_min * arr[i]].min(2)\n    max_product = [max_product, current_max].max\n  end\n  max_product\nend",
    "  max_so_far = 1\n  min_so_far = 1\n  max_ending_here = 1",
    "  max_product = arr[0]\n  min_product = arr[0]\n  max_so_far = arr[0]",
    "  max_ending_here = 1\n  min_ending_here = 1\n  max_so_far = 1",
    "  max_product = arr[0]\n  min_product = arr[0]\n  max_so_far = arr[0]",
    "  max_ending_here = 1\n  min_ending_here = 1\n  max_so_far = 1",
    "  max_product = arr[0]\n  current_max = arr[0]\n  current_min = arr[0]",
    "  max_product = arr[0]\n  min_product = arr[0]\n  max_so_far = arr[0]",
    "  return nil if arr.empty?\n  max_product = arr[0]\n  current_max = arr[0]\n  current_min = arr[0]",
    "  max_ending_here = 1\n  min_ending_here = 1\n  max_so_far = 1\n  for i in 0...arr.length\n    if arr[i] > 0\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = [min_ending_here * arr[i], 1].min\n    elsif arr[i] == 0\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      temp = max_ending_here\n      max_ending_here = [min_ending_here * arr[i], 1].max\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here\n      max_so_far = max_ending_here\n    end\n  end\n  max_so_far\nend",
    "  max_product = arr[0]\n  current_product = arr[0]\n  current_min = arr[0]\n  current_max = arr[0]\n  arr[1..-1].each do |num|\n    current_min, current_max = [current_min * num, current_max * num, num].minmax\n    current_product = current_max\n    max_product = [max_product, current_product].max\n  end\n  max_product\nend",
    "  max_ending_here = 1\n  min_ending_here = 1\n  max_so_far = 1",
    "  max_product = arr[0]\n  min_product = arr[0]\n  max_so_far = arr[0]",
    "  return arr.max if arr.all? { |el| el > 0 }\n  return arr.min if arr.all? { |el| el < 0 }",
    "  max_product = arr[0]\n  current_max = arr[0]\n  current_min = arr[0]"
  ]
}