{
  "name": "mbpp_730_consecutive_duplicates",
  "language": "rb",
  "prompt": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  new_list = []\n  nums.each do |num|\n    if new_list.last != num\n      new_list << num\n    end\n  end\n  new_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3sbbtk3k\nStarted\n.\nFinished in 0.000555882 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1798.94 tests/s, 7195.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbn3gaeon\nStarted\n.\nFinished in 0.000443322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2255.70 tests/s, 9022.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk_while { |i, j| i == j }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnxxokn5x\nStarted\n.\nFinished in 0.000457771 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2184.50 tests/s, 8737.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, i|\n    new_nums << num if num != nums[i + 1]\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5fzhsvp1\nStarted\n.\nFinished in 0.000437227 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2287.14 tests/s, 9148.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk(&:itself).map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxz1g3mli\nStarted\n.\nFinished in 0.000479872 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2083.89 tests/s, 8335.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, index|\n    if index == 0\n      new_nums << num\n    elsif num != nums[index - 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3eqeylwq\nStarted\n.\nFinished in 0.000438659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2279.68 tests/s, 9118.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbn3gaeon\nStarted\n.\nFinished in 0.000443322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2255.70 tests/s, 9022.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk(&:itself).map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxz1g3mli\nStarted\n.\nFinished in 0.000479872 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2083.89 tests/s, 8335.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.each_with_object([]) do |num, result|\n    result << num unless result.last == num\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplntrz70z\nStarted\n.\nFinished in 0.000437838 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2283.95 tests/s, 9135.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk {|n| n}.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy_wf_2k1\nStarted\n.\nFinished in 0.000457128 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2187.57 tests/s, 8750.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.each_with_object([]) do |num, result|\n    result << num unless result.last == num\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplntrz70z\nStarted\n.\nFinished in 0.000437838 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2283.95 tests/s, 9135.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbn3gaeon\nStarted\n.\nFinished in 0.000443322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2255.70 tests/s, 9022.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.each_with_object([]) do |num, result|\n    result << num unless result.last == num\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplntrz70z\nStarted\n.\nFinished in 0.000437838 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2283.95 tests/s, 9135.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each_with_index do |num, index|\n    result << num if num != nums[index + 1]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyk1su6eq\nStarted\n.\nFinished in 0.000455263 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2196.53 tests/s, 8786.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.each_with_object([]) do |num, result|\n    result << num unless result.last == num\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplntrz70z\nStarted\n.\nFinished in 0.000437838 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2283.95 tests/s, 9135.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map { |n, a| a.first }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpg9b5hmkq\nStarted\n.\nFinished in 0.000478332 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2090.60 tests/s, 8362.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbn3gaeon\nStarted\n.\nFinished in 0.000443322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2255.70 tests/s, 9022.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk(&:itself).map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxz1g3mli\nStarted\n.\nFinished in 0.000479872 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2083.89 tests/s, 8335.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.each_with_object([]) do |num, result|\n    result << num unless result.last == num\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplntrz70z\nStarted\n.\nFinished in 0.000437838 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2283.95 tests/s, 9135.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  new_list = []\n  nums.each do |num|\n    new_list << num unless new_list.last == num\n  end\n  new_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1cyucvbl\nStarted\n.\nFinished in 0.000410734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2434.67 tests/s, 9738.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk(&:itself).map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxz1g3mli\nStarted\n.\nFinished in 0.000479872 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2083.89 tests/s, 8335.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.each_with_object([]) do |num, arr|\n    arr << num unless arr.last == num\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuz0149dn\nStarted\n.\nFinished in 0.000436803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2289.36 tests/s, 9157.45 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk{|x| x}.map{|x,y| x}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9_960e7f\nStarted\n.\nFinished in 0.000467119 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2140.78 tests/s, 8563.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbn3gaeon\nStarted\n.\nFinished in 0.000443322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2255.70 tests/s, 9022.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk{|n| n}.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvtqbwb9_\nStarted\n.\nFinished in 0.000484229 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2065.14 tests/s, 8260.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |x| x }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp852lmnoa\nStarted\n.\nFinished in 0.000477538 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.07 tests/s, 8376.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.each_with_object([]) do |num, result|\n    result << num unless result.last == num\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplntrz70z\nStarted\n.\nFinished in 0.000437838 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2283.95 tests/s, 9135.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, i|\n    if num != nums[i + 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph9b42wdl\nStarted\n.\nFinished in 0.000446238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2240.96 tests/s, 8963.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.each_with_object([]) do |num, arr|\n    arr << num unless arr.last == num\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuz0149dn\nStarted\n.\nFinished in 0.000436803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2289.36 tests/s, 9157.45 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbn3gaeon\nStarted\n.\nFinished in 0.000443322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2255.70 tests/s, 9022.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each_with_index do |num, index|\n    if index == 0\n      new_nums << num\n    elsif num != nums[index - 1]\n      new_nums << num\n    end\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3eqeylwq\nStarted\n.\nFinished in 0.000438659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2279.68 tests/s, 9118.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk(&:itself).map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxz1g3mli\nStarted\n.\nFinished in 0.000479872 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2083.89 tests/s, 8335.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  new_nums = []\n  nums.each do |num|\n    new_nums << num unless new_nums.last == num\n  end\n  new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxx_w1ren\nStarted\n.\nFinished in 0.000436512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.89 tests/s, 9163.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  result = []\n  nums.each do |num|\n    result << num unless result.last == num\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbn3gaeon\nStarted\n.\nFinished in 0.000443322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2255.70 tests/s, 9022.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk{|x| x}.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpaogd6k57\nStarted\n.\nFinished in 0.000464188 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2154.30 tests/s, 8617.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.each_with_object([]) do |num, new_list|\n    new_list << num unless new_list.last == num\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu630nxmd\nStarted\n.\nFinished in 0.000462087 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2164.09 tests/s, 8656.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  new_list = []\n  nums.each_with_index do |num, index|\n    if index == 0\n      new_list << num\n    elsif num != nums[index - 1]\n      new_list << num\n    end\n  end\n  new_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpg3_ersee\nStarted\n.\nFinished in 0.000429048 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2330.74 tests/s, 9322.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.inject([]) { |acc, n| acc.last == n ? acc : acc << n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps3p97w2x\nStarted\n.\nFinished in 0.000511421 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1955.34 tests/s, 7821.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.inject([]) { |result, num| result.last == num ? result : result << num }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8fzwzs7j\nStarted\n.\nFinished in 0.000438186 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2282.14 tests/s, 9128.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk(&:itself).map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxz1g3mli\nStarted\n.\nFinished in 0.000479872 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2083.89 tests/s, 8335.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk{|n| n}.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvtqbwb9_\nStarted\n.\nFinished in 0.000484229 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2065.14 tests/s, 8260.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  nums.chunk { |n| n }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1665510280,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0k8adh8\nStarted\n.\nFinished in 0.000477436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2094.52 tests/s, 8378.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n  (0...nums.length).each do |i|\n    if nums[i] == nums[i + 1]\n      nums.delete_at(i)\n    end\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
      "timestamp": 1666123632,
      "stdout": "Loaded suite /tmp/tmpf5h6r1ui\nStarted\nF\n===============================================================================\nFailure: test_consecutive_duplicates(TestHumanEval)\n/tmp/tmpf5h6r1ui.rb:14:in `test_consecutive_duplicates'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_consecutive_duplicates\n     13:     candidate = method(:consecutive_duplicates)\n  => 14:     assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n     15:     assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n     16:     assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n     17:     assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]> expected but was\n<[0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]>\n\ndiff:\n? [0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 4]\n===============================================================================\n\nFinished in 0.013466253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.26 tests/s, 74.26 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}