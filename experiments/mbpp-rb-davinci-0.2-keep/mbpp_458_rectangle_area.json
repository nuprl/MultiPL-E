{
  "name": "mbpp_458_rectangle_area",
  "language": "rb",
  "prompt": "# Write a function to find the area of a rectangle.\ndef rectangle_area(l, b)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rectangle_area\n    candidate = method(:rectangle_area)\n    assert_equal(200, candidate.call(10, 20))\n    assert_equal(50, candidate.call(10, 5))\n    assert_equal(8, candidate.call(4, 2))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  return l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  return l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  return l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend",
    "  l * b\nend"
  ]
}