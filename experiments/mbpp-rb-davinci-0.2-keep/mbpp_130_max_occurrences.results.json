{
  "name": "mbpp_130_max_occurrences",
  "language": "rb",
  "prompt": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckz9vnv1\nStarted\n.\nFinished in 0.000449039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.98 tests/s, 6680.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |num, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "Loaded suite /tmp/tmp75vd56i9\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp75vd56i9.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.006823866 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.54 tests/s, 146.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # create a hash to store the number of occurrences of each item\n  occurrences = Hash.new(0)\n  # iterate through the array and increment the value of the key\n  nums.each { |num| occurrences[num] += 1 }\n  # find the key with the highest value\n  occurrences.max_by { |key, value| value }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp24y4ukeg\nStarted\n.\nFinished in 0.00042296 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2364.29 tests/s, 7092.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # Write your code here\n  return -1 if nums.empty?\n  hash = {}\n  nums.each do |num|\n    hash[num] = hash[num].to_i + 1\n  end\n  hash.max_by {|k,v| v}[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps593y_l8\nStarted\n.\nFinished in 0.000439552 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2275.04 tests/s, 6825.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp43_96t8l\nStarted\n.\nFinished in 0.000736186 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1358.35 tests/s, 4075.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  max_count = 0\n  max_num = nil\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n    if counts[num] > max_count\n      max_count = counts[num]\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpahpz253r\nStarted\n.\nFinished in 0.000470652 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2124.71 tests/s, 6374.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |k, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpod0x34ep\nStarted\n.\nFinished in 0.000442333 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2260.74 tests/s, 6782.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzawf9jmw\nStarted\n.\nFinished in 0.000692016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1445.05 tests/s, 4335.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, e| h[e] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpccia3owo\nStarted\n.\nFinished in 0.000443803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2253.25 tests/s, 6759.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzawf9jmw\nStarted\n.\nFinished in 0.000692016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1445.05 tests/s, 4335.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2pxk2oxo\nStarted\n.\nFinished in 0.000440866 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2268.26 tests/s, 6804.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # TODO: implement me\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl9ap0rhg\nStarted\n.\nFinished in 0.00046477 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2151.60 tests/s, 6454.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |_, v| v == max_freq }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "Loaded suite /tmp/tmpv_4gouw7\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpv_4gouw7.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.006478784 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n154.35 tests/s, 154.35 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # create a hash to store the frequency of each item\n  freq_hash = {}\n  # iterate over each item in the list\n  nums.each do |num|\n    # if the item is not in the hash, add it\n    if !freq_hash[num]\n      freq_hash[num] = 1\n    # if the item is in the hash, increment its frequency\n    else\n      freq_hash[num] += 1\n    end\n  end\n  # create a variable to store the item with the highest frequency\n  max_item = nil\n  # create a variable to store the highest frequency\n  max_freq = 0\n  # iterate over each item in the hash\n  freq_hash.each do |num, freq|\n    # if the frequency of the current item is higher than the current highest frequency\n    if freq > max_freq\n      # set the current item as the item with the highest frequency\n      max_item = num\n      # set the current frequency as the highest frequency\n      max_freq = freq\n    end\n  end\n  # return the item with the highest frequency\n  max_item\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvvw2jjeo\nStarted\n.\nFinished in 0.000426942 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.24 tests/s, 7026.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  max_count = 0\n  max_item = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_item = num\n    end\n  end\n  max_item\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3dq3c5qb\nStarted\n.\nFinished in 0.000936439 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1067.88 tests/s, 3203.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  hash.max_by{|k,v| v}[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjdcl94d3\nStarted\n.\nFinished in 0.000440401 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2270.66 tests/s, 6811.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp33louk0b\nStarted\n.\nFinished in 0.000495857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2016.71 tests/s, 6050.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  count = Hash.new(0)\n  nums.each do |num|\n    count[num] += 1\n  end\n  count.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdvf9s1v9\nStarted\n.\nFinished in 0.000573867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1742.56 tests/s, 5227.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8lf9ec_\nStarted\n.\nFinished in 0.000449976 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2222.34 tests/s, 6667.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  max = 0\n  max_num = nil\n  nums.each do |num|\n    if nums.count(num) > max\n      max = nums.count(num)\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwyj_aqsx\nStarted\n.\nFinished in 0.000488202 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2048.33 tests/s, 6145.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, n| h[n] += 1; h }.max_by { |k, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj_ft5gfb\nStarted\n.\nFinished in 0.000440559 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2269.84 tests/s, 6809.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  count = Hash.new(0)\n  nums.each { |num| count[num] += 1 }\n  count.max_by { |_, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsp4yrwae\nStarted\n.\nFinished in 0.000499919 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2000.32 tests/s, 6000.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |k, v| v == max_freq }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmp855a58hg\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp855a58hg.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.007741536 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.17 tests/s, 129.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyz1njte9\nStarted\n.\nFinished in 0.000528264 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1892.99 tests/s, 5678.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by { |n| n }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp51zf6tup\nStarted\n.\nFinished in 0.000444647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2248.98 tests/s, 6746.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp33louk0b\nStarted\n.\nFinished in 0.000495857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2016.71 tests/s, 6050.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # create a hash to store the number of occurrences\n  occurrences = {}\n  # iterate through the array\n  nums.each do |num|\n    # if the number is not in the hash, add it with a value of 1\n    if occurrences[num].nil?\n      occurrences[num] = 1\n    # if the number is in the hash, increment its value by 1\n    else\n      occurrences[num] += 1\n    end\n  end\n  # find the max value in the hash\n  max_value = occurrences.values.max\n  # find the key associated with the max value\n  max_key = occurrences.key(max_value)\n  # return the key\n  max_key\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5xb7ven1\nStarted\n.\nFinished in 0.000859881 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1162.95 tests/s, 3488.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmp0000xabk\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp0000xabk.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.00778713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.42 tests/s, 128.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckz9vnv1\nStarted\n.\nFinished in 0.000449039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.98 tests/s, 6680.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # create a hash to store the number of occurrences of each item\n  occurrences = {}\n  # iterate through the list\n  nums.each do |num|\n    # if the item is not in the hash, add it with a value of 1\n    if occurrences[num] == nil\n      occurrences[num] = 1\n    # if the item is in the hash, increment the value by 1\n    else\n      occurrences[num] += 1\n    end\n  end\n  # create a variable to store the item with the maximum frequency\n  max_item = nil\n  # create a variable to store the maximum frequency\n  max_occurrence = 0\n  # iterate through the hash\n  occurrences.each do |item, occurrence|\n    # if the current item's frequency is greater than the current maximum frequency\n    if occurrence > max_occurrence\n      # set the maximum frequency to the current item's frequency\n      max_occurrence = occurrence\n      # set the maximum item to the current item\n      max_item = item\n    end\n  end\n  # return the maximum item\n  max_item\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc9kxzvt1\nStarted\n.\nFinished in 0.000449567 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2224.36 tests/s, 6673.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqs07ru3l\nStarted\n.\nFinished in 0.00049238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2030.95 tests/s, 6092.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by { |i| i }.max_by { |k, v| v.size }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmply1k868q\nStarted\n.\nFinished in 0.000501715 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1993.16 tests/s, 5979.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzawf9jmw\nStarted\n.\nFinished in 0.000692016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1445.05 tests/s, 4335.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # Write your code here\n  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4xarw_go\nStarted\n.\nFinished in 0.000510833 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1957.59 tests/s, 5872.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmpswjvqlon\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpswjvqlon.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.007518223 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.01 tests/s, 133.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |_, v| v == max_freq }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "Loaded suite /tmp/tmpv_4gouw7\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpv_4gouw7.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.006478784 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n154.35 tests/s, 154.35 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # Write your code here\n  hash = {}\n  nums.each do |num|\n    if hash.has_key?(num)\n      hash[num] += 1\n    else\n      hash[num] = 1\n    end\n  end\n  max = 0\n  max_key = nil\n  hash.each do |key, value|\n    if value > max\n      max = value\n      max_key = key\n    end\n  end\n  max_key\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5okgr7mi\nStarted\n.\nFinished in 0.000855067 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1169.50 tests/s, 3508.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp33louk0b\nStarted\n.\nFinished in 0.000495857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2016.71 tests/s, 6050.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzawf9jmw\nStarted\n.\nFinished in 0.000692016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1445.05 tests/s, 4335.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  freq.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo11al12d\nStarted\n.\nFinished in 0.000495625 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2017.65 tests/s, 6052.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  max_count = 0\n  max_num = nil\n  counts = Hash.new(0)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "/tmp/tmp_l5egmti.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_l5egmti.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  count = Hash.new(0)\n  nums.each do |num|\n    count[num] += 1\n  end\n  count.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdvf9s1v9\nStarted\n.\nFinished in 0.000573867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1742.56 tests/s, 5227.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8lf9ec_\nStarted\n.\nFinished in 0.000449976 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2222.34 tests/s, 6667.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |hash, num| hash[num] += 1; hash }.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpslcq9r5u\nStarted\n.\nFinished in 0.000481903 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2075.11 tests/s, 6225.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8lf9ec_\nStarted\n.\nFinished in 0.000449976 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2222.34 tests/s, 6667.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |num, count| count }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6cobcdh7\nStarted\n.\nFinished in 0.000500292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1998.83 tests/s, 5996.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmpswjvqlon\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpswjvqlon.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.007518223 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.01 tests/s, 133.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by{|i| i}.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9q43kn_7\nStarted\n.\nFinished in 0.000476132 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2100.26 tests/s, 6300.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqs07ru3l\nStarted\n.\nFinished in 0.00049238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2030.95 tests/s, 6092.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8lf9ec_\nStarted\n.\nFinished in 0.000449976 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2222.34 tests/s, 6667.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, e| h[e] += 1; h }.max_by { |k, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9ztm4jvl\nStarted\n.\nFinished in 0.00048999 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2040.86 tests/s, 6122.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqs07ru3l\nStarted\n.\nFinished in 0.00049238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2030.95 tests/s, 6092.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # Write your code here\n  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4xarw_go\nStarted\n.\nFinished in 0.000510833 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1957.59 tests/s, 5872.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # Write your code here\n  hash = {}\n  nums.each do |num|\n    if hash[num]\n      hash[num] += 1\n    else\n      hash[num] = 1\n    end\n  end\n  max = 0\n  max_key = nil\n  hash.each do |key, value|\n    if value > max\n      max = value\n      max_key = key\n    end\n  end\n  max_key\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpayark195\nStarted\n.\nFinished in 0.000490205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2039.96 tests/s, 6119.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzawf9jmw\nStarted\n.\nFinished in 0.000692016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1445.05 tests/s, 4335.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.uniq.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdyk9t6zm\nStarted\n.\nFinished in 0.000494798 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2021.03 tests/s, 6063.08 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckz9vnv1\nStarted\n.\nFinished in 0.000449039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.98 tests/s, 6680.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyz1njte9\nStarted\n.\nFinished in 0.000528264 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1892.99 tests/s, 5678.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  freq = {}\n  nums.each do |num|\n    if freq.has_key?(num)\n      freq[num] += 1\n    else\n      freq[num] = 1\n    end\n  end\n  max_freq = 0\n  max_freq_num = nil\n  freq.each do |num, freq|\n    if freq > max_freq\n      max_freq = freq\n      max_freq_num = num\n    end\n  end\n  max_freq_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz3hghd28\nStarted\n.\nFinished in 0.000485809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2058.42 tests/s, 6175.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, e| h[e] += 1; h }.max_by { |k, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9ztm4jvl\nStarted\n.\nFinished in 0.00048999 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2040.86 tests/s, 6122.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmpswjvqlon\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpswjvqlon.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.007518223 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.01 tests/s, 133.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # Write your code here\n  max = 0\n  nums.each do |num|\n    if nums.count(num) > max\n      max = nums.count(num)\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmppo4des3y\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmppo4des3y.rb:16:in `test_max_occurrences'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_occurrences\n     15:     candidate = method(:max_occurrences)\n  => 16:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     17:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     18:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     19:   end\n<2> expected but was\n<5>\n===============================================================================\n\nFinished in 0.006962157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.63 tests/s, 143.63 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |k, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpod0x34ep\nStarted\n.\nFinished in 0.000442333 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2260.74 tests/s, 6782.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqs07ru3l\nStarted\n.\nFinished in 0.00049238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2030.95 tests/s, 6092.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzawf9jmw\nStarted\n.\nFinished in 0.000692016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1445.05 tests/s, 4335.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzawf9jmw\nStarted\n.\nFinished in 0.000692016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1445.05 tests/s, 4335.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # Write your code here\n  count = Hash.new(0)\n  nums.each do |num|\n    count[num] += 1\n  end\n  max = count.values.max\n  count.select { |key, value| value == max }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmpcrjurj35\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpcrjurj35.rb:15:in `test_max_occurrences'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_max_occurrences\n     14:     candidate = method(:max_occurrences)\n  => 15:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     16:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     17:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     18:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008118742 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.17 tests/s, 123.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  max = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max\n      max = count\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfh58359c\nStarted\n.\nFinished in 0.000472268 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2117.44 tests/s, 6352.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.max_by { |k, v| v.length }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppw3ezenb\nStarted\n.\nFinished in 0.000450312 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2220.68 tests/s, 6662.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckz9vnv1\nStarted\n.\nFinished in 0.000449039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.98 tests/s, 6680.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by{|x| x}.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdxxxu6ml\nStarted\n.\nFinished in 0.000432798 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.55 tests/s, 6931.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  counts.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9brt5p83\nStarted\n.\nFinished in 0.00050917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.98 tests/s, 5891.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqs07ru3l\nStarted\n.\nFinished in 0.00049238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2030.95 tests/s, 6092.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8lf9ec_\nStarted\n.\nFinished in 0.000449976 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2222.34 tests/s, 6667.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmp0000xabk\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp0000xabk.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.00778713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.42 tests/s, 128.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  count = Hash.new(0)\n  nums.each { |num| count[num] += 1 }\n  count.max_by { |num, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2s2o6bh0\nStarted\n.\nFinished in 0.000864524 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1156.71 tests/s, 3470.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmpswjvqlon\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpswjvqlon.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.007518223 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.01 tests/s, 133.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp43_96t8l\nStarted\n.\nFinished in 0.000736186 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1358.35 tests/s, 4075.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzawf9jmw\nStarted\n.\nFinished in 0.000692016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1445.05 tests/s, 4335.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp43_96t8l\nStarted\n.\nFinished in 0.000736186 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1358.35 tests/s, 4075.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by { |n| n }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp51zf6tup\nStarted\n.\nFinished in 0.000444647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2248.98 tests/s, 6746.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphuwup8nw\nStarted\n.\nFinished in 0.000441319 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2265.93 tests/s, 6797.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmp0000xabk\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp0000xabk.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.00778713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.42 tests/s, 128.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp33louk0b\nStarted\n.\nFinished in 0.000495857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2016.71 tests/s, 6050.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  max = 0\n  max_num = nil\n  nums.each do |num|\n    if nums.count(num) > max\n      max = nums.count(num)\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwyj_aqsx\nStarted\n.\nFinished in 0.000488202 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2048.33 tests/s, 6145.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqs07ru3l\nStarted\n.\nFinished in 0.00049238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2030.95 tests/s, 6092.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # create a hash to store the frequency of each item\n  freq = {}\n  # iterate through the list\n  nums.each do |num|\n    # if the hash already has the item, increment its value by 1\n    if freq.has_key?(num)\n      freq[num] += 1\n    # otherwise, add the item to the hash and set its value to 1\n    else\n      freq[num] = 1\n    end\n  end\n  # find the item with the maximum frequency\n  max_freq = freq.values.max\n  # return the item with the maximum frequency\n  freq.key(max_freq)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp23c0m648\nStarted\n.\nFinished in 0.00085093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1175.18 tests/s, 3525.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckz9vnv1\nStarted\n.\nFinished in 0.000449039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.98 tests/s, 6680.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmpavfxoc8g\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpavfxoc8g.rb:14:in `test_max_occurrences'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_max_occurrences\n     13:     candidate = method(:max_occurrences)\n  => 14:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     15:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     16:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     17:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.007942204 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.91 tests/s, 125.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by{|x| x}.max_by{|k,v| v.length}.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5rtg91p8\nStarted\n.\nFinished in 0.000435633 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2295.51 tests/s, 6886.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_key = nums[0]\n  counts.each do |k, v|\n    max_key = k if v > counts[max_key]\n  end\n  max_key\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpeneyld3n\nStarted\n.\nFinished in 0.000483839 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2066.80 tests/s, 6200.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfqiz9qpv\nStarted\n.\nFinished in 0.000509897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1961.18 tests/s, 5883.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp43_96t8l\nStarted\n.\nFinished in 0.000736186 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1358.35 tests/s, 4075.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by { |n| n }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp51zf6tup\nStarted\n.\nFinished in 0.000444647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2248.98 tests/s, 6746.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp27j94odj\nStarted\n.\nFinished in 0.00048363 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2067.70 tests/s, 6203.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqs07ru3l\nStarted\n.\nFinished in 0.00049238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2030.95 tests/s, 6092.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzawf9jmw\nStarted\n.\nFinished in 0.000692016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1445.05 tests/s, 4335.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # create a hash to store the frequency of each item\n  freq = {}\n  # iterate through the list\n  nums.each do |num|\n    # if the item is not in the hash, add it and set its value to 1\n    if freq[num].nil?\n      freq[num] = 1\n    # if the item is in the hash, increment its value by 1\n    else\n      freq[num] += 1\n    end\n  end\n  # find the max value in the hash\n  max = freq.values.max\n  # return the key with the max value\n  freq.key(max)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpelrdxfne\nStarted\n.\nFinished in 0.000500611 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1997.56 tests/s, 5992.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckz9vnv1\nStarted\n.\nFinished in 0.000449039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.98 tests/s, 6680.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqs07ru3l\nStarted\n.\nFinished in 0.00049238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2030.95 tests/s, 6092.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |num, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "Loaded suite /tmp/tmp75vd56i9\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp75vd56i9.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.006823866 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.54 tests/s, 146.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # create a hash with the number of occurrences of each number\n  occurrences = {}\n  nums.each do |num|\n    occurrences[num] = nums.count(num)\n  end\n  # find the max number of occurrences\n  max_occurrences = occurrences.values.max\n  # find the number(s) that occur the max number of times\n  max_occurrences_nums = []\n  occurrences.each do |num, count|\n    if count == max_occurrences\n      max_occurrences_nums << num\n    end\n  end\n  # return the number(s) that occur the max number of times\n  max_occurrences_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmp31hyzyfj\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp31hyzyfj.rb:24:in `test_max_occurrences'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_max_occurrences\n     23:     candidate = method(:max_occurrences)\n  => 24:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     25:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     26:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     27:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.007531092 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.78 tests/s, 132.78 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmp0000xabk\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp0000xabk.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.00778713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.42 tests/s, 128.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  freq.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe39w1a13\nStarted\n.\nFinished in 0.000516652 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1935.54 tests/s, 5806.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, e| h[e] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpccia3owo\nStarted\n.\nFinished in 0.000443803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2253.25 tests/s, 6759.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmp0000xabk\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp0000xabk.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.00778713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.42 tests/s, 128.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  count = Hash.new(0)\n  nums.each { |num| count[num] += 1 }\n  max = count.values.max\n  count.select { |k, v| v == max }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmpjgssg6wm\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpjgssg6wm.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.007556119 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.34 tests/s, 132.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfqiz9qpv\nStarted\n.\nFinished in 0.000509897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1961.18 tests/s, 5883.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmpswjvqlon\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpswjvqlon.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.007518223 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.01 tests/s, 133.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, n| h[n] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptqkxdck9\nStarted\n.\nFinished in 0.000492329 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2031.16 tests/s, 6093.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzawf9jmw\nStarted\n.\nFinished in 0.000692016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1445.05 tests/s, 4335.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzawf9jmw\nStarted\n.\nFinished in 0.000692016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1445.05 tests/s, 4335.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  count = Hash.new(0)\n  nums.each do |num|\n    count[num] += 1\n  end\n  count.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdvf9s1v9\nStarted\n.\nFinished in 0.000573867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1742.56 tests/s, 5227.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # create a hash to store the number of occurrences of each number\n  occurrences = {}\n  nums.each do |num|\n    occurrences[num] = 0 unless occurrences[num]\n    occurrences[num] += 1\n  end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "/tmp/tmp50qwr1en.rb:10: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qwr1en.rb:17: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8lf9ec_\nStarted\n.\nFinished in 0.000449976 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2222.34 tests/s, 6667.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # find the max number of occurrences of any number in the list\n  max_count = 0\n  nums.each do |num|\n    count = nums.count(num)\n    max_count = count if count > max_count\n  end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "/tmp/tmpyhqp_63q.rb:10: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpyhqp_63q.rb:17: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfqiz9qpv\nStarted\n.\nFinished in 0.000509897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1961.18 tests/s, 5883.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqs07ru3l\nStarted\n.\nFinished in 0.00049238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2030.95 tests/s, 6092.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp43_96t8l\nStarted\n.\nFinished in 0.000736186 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1358.35 tests/s, 4075.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  counts.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9brt5p83\nStarted\n.\nFinished in 0.00050917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1963.98 tests/s, 5891.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # create a hash to store the number and its frequency\n  # iterate over the array and store the number and its frequency in the hash\n  # find the max value in the hash\n  # return the key of the max value\n  num_freq = {}\n  nums.each do |num|\n    num_freq[num] = nums.count(num)\n  end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "/tmp/tmpklxfws59.rb:12: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpklxfws59.rb:19: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # TODO: return the item with maximum frequency\n  hash = Hash.new(0)\n  nums.each { |num| hash[num] += 1 }\n  hash.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9c6cc5hj\nStarted\n.\nFinished in 0.000500147 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1999.41 tests/s, 5998.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by{|i| i}.max_by{|k,v| v.size}.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgjvb9lvv\nStarted\n.\nFinished in 0.000857043 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1166.80 tests/s, 3500.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by{|num| num}.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7vqs9zmg\nStarted\n.\nFinished in 0.000436622 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.31 tests/s, 6870.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpalgnzvwv\nStarted\n.\nFinished in 0.000454905 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2198.26 tests/s, 6594.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  count = Hash.new(0)\n  nums.each { |num| count[num] += 1 }\n  count.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdxg8jbev\nStarted\n.\nFinished in 0.000446957 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2237.35 tests/s, 6712.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmpswjvqlon\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpswjvqlon.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.007518223 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.01 tests/s, 133.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzawf9jmw\nStarted\n.\nFinished in 0.000692016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1445.05 tests/s, 4335.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by { |n| n }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp51zf6tup\nStarted\n.\nFinished in 0.000444647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2248.98 tests/s, 6746.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  freq.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo11al12d\nStarted\n.\nFinished in 0.000495625 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2017.65 tests/s, 6052.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |num, count| count }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6cobcdh7\nStarted\n.\nFinished in 0.000500292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1998.83 tests/s, 5996.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp33louk0b\nStarted\n.\nFinished in 0.000495857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2016.71 tests/s, 6050.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  count = Hash.new(0)\n  nums.each do |num|\n    count[num] += 1\n  end\n  count.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdvf9s1v9\nStarted\n.\nFinished in 0.000573867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1742.56 tests/s, 5227.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp27j94odj\nStarted\n.\nFinished in 0.00048363 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2067.70 tests/s, 6203.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  max_count = 0\n  max_item = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_item = num\n    end\n  end\n  max_item\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3dq3c5qb\nStarted\n.\nFinished in 0.000936439 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1067.88 tests/s, 3203.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8lf9ec_\nStarted\n.\nFinished in 0.000449976 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2222.34 tests/s, 6667.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8lf9ec_\nStarted\n.\nFinished in 0.000449976 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2222.34 tests/s, 6667.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by { |num| num }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqs07ru3l\nStarted\n.\nFinished in 0.00049238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2030.95 tests/s, 6092.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmp0000xabk\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp0000xabk.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.00778713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.42 tests/s, 128.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |_, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmpswjvqlon\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpswjvqlon.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.007518223 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.01 tests/s, 133.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  count = Hash.new(0)\n  nums.each { |num| count[num] += 1 }\n  max = count.values.max\n  count.select { |k, v| v == max }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmpjgssg6wm\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpjgssg6wm.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.007556119 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.34 tests/s, 132.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpalgnzvwv\nStarted\n.\nFinished in 0.000454905 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2198.26 tests/s, 6594.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # Write your code here\n  hash = {}\n  nums.each do |num|\n    if hash[num]\n      hash[num] += 1\n    else\n      hash[num] = 1\n    end\n  end\n  max = hash.values.max\n  hash.select { |k, v| v == max }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmp57ozl740\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp57ozl740.rb:19:in `test_max_occurrences'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_max_occurrences\n     18:     candidate = method(:max_occurrences)\n  => 19:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     20:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     21:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     22:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.008207457 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.84 tests/s, 121.84 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by{|x| x}.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdxxxu6ml\nStarted\n.\nFinished in 0.000432798 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.55 tests/s, 6931.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # Write your code here\n  max_count = 0\n  max_item = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_item = num\n    end\n  end\n  max_item\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc6od2sjm\nStarted\n.\nFinished in 0.000460057 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2173.64 tests/s, 6520.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp33louk0b\nStarted\n.\nFinished in 0.000495857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2016.71 tests/s, 6050.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckz9vnv1\nStarted\n.\nFinished in 0.000449039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.98 tests/s, 6680.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnukhjpd0\nStarted\n.\nFinished in 0.00042901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2330.95 tests/s, 6992.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by{|x| x}.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdxxxu6ml\nStarted\n.\nFinished in 0.000432798 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.55 tests/s, 6931.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp27j94odj\nStarted\n.\nFinished in 0.00048363 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2067.70 tests/s, 6203.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmp0000xabk\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp0000xabk.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.00778713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.42 tests/s, 128.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckz9vnv1\nStarted\n.\nFinished in 0.000449039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.98 tests/s, 6680.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, e| h[e] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpccia3owo\nStarted\n.\nFinished in 0.000443803 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2253.25 tests/s, 6759.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp33louk0b\nStarted\n.\nFinished in 0.000495857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2016.71 tests/s, 6050.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8lf9ec_\nStarted\n.\nFinished in 0.000449976 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2222.34 tests/s, 6667.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |num, count| count == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "Loaded suite /tmp/tmp75vd56i9\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp75vd56i9.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.006823866 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.54 tests/s, 146.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # create a hash to store the number of times each number occurs\n  num_occurrences = {}\n  # iterate through the list of numbers\n  nums.each do |num|\n    # if the number is not in the hash, add it to the hash and set its value to 1\n    if !num_occurrences.has_key?(num)\n      num_occurrences[num] = 1\n    # if the number is in the hash, increment its value by 1\n    else\n      num_occurrences[num] += 1\n    end\n  end\n  # create a variable to store the number with the maximum frequency\n  max_num = nil\n  # create a variable to store the maximum frequency\n  max_occurrence = 0\n  # iterate through the hash\n  num_occurrences.each do |num, occurrence|\n    # if the number of occurrences is greater than the current maximum, update the maximum number and maximum frequency\n    if occurrence > max_occurrence\n      max_num = num\n      max_occurrence = occurrence\n    end\n  end\n  # return the maximum number\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpiggkhu2f\nStarted\n.\nFinished in 0.000414596 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2411.99 tests/s, 7235.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfqiz9qpv\nStarted\n.\nFinished in 0.000509897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1961.18 tests/s, 5883.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # Write your code here\n  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4xarw_go\nStarted\n.\nFinished in 0.000510833 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1957.59 tests/s, 5872.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  max = hash.values.max\n  hash.select { |k, v| v == max }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmpen_n_tsr\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpen_n_tsr.rb:15:in `test_max_occurrences'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_max_occurrences\n     14:     candidate = method(:max_occurrences)\n  => 15:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     16:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     17:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     18:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.006476575 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n154.40 tests/s, 154.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # create a hash to store the number of occurrences of each number\n  occurrences = Hash.new(0)\n  # iterate through the list and count the number of occurrences of each number\n  nums.each do |num|\n    occurrences[num] += 1\n  end\n  # find the number with the maximum number of occurrences\n  max_occurrences = occurrences.values.max\n  # find the key corresponding to the maximum number of occurrences\n  max_occurrences_key = occurrences.key(max_occurrences)\n  # return the key\n  max_occurrences_key\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6jswo0d6\nStarted\n.\nFinished in 0.00041828 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2390.74 tests/s, 7172.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzawf9jmw\nStarted\n.\nFinished in 0.000692016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1445.05 tests/s, 4335.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  hash.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5fbuya_o\nStarted\n.\nFinished in 0.000409719 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2440.70 tests/s, 7322.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzawf9jmw\nStarted\n.\nFinished in 0.000692016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1445.05 tests/s, 4335.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |k, v| v == max_freq }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmp855a58hg\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp855a58hg.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.007741536 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.17 tests/s, 129.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.uniq.max_by { |n| nums.count(n) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb5w__hxh\nStarted\n.\nFinished in 0.000431726 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2316.28 tests/s, 6948.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by{|x| x}.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdxxxu6ml\nStarted\n.\nFinished in 0.000432798 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.55 tests/s, 6931.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by{|x| x}.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdxxxu6ml\nStarted\n.\nFinished in 0.000432798 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.55 tests/s, 6931.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckz9vnv1\nStarted\n.\nFinished in 0.000449039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.98 tests/s, 6680.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by { |n| n }.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp51zf6tup\nStarted\n.\nFinished in 0.000444647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2248.98 tests/s, 6746.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # write your code here\n  count = Hash.new(0)\n  nums.each do |num|\n    count[num] += 1\n  end\n  count.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0jhplflh\nStarted\n.\nFinished in 0.000916815 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1090.73 tests/s, 3272.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, v| v }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2pxk2oxo\nStarted\n.\nFinished in 0.000440866 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2268.26 tests/s, 6804.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckz9vnv1\nStarted\n.\nFinished in 0.000449039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.98 tests/s, 6680.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmp0000xabk\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp0000xabk.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.00778713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.42 tests/s, 128.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp43_96t8l\nStarted\n.\nFinished in 0.000736186 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1358.35 tests/s, 4075.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmpavfxoc8g\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpavfxoc8g.rb:14:in `test_max_occurrences'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_max_occurrences\n     13:     candidate = method(:max_occurrences)\n  => 14:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     15:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     16:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     17:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.007942204 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.91 tests/s, 125.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by{|x| x}.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdxxxu6ml\nStarted\n.\nFinished in 0.000432798 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.55 tests/s, 6931.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by {|x| x}.values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppklgqgrg\nStarted\n.\nFinished in 0.000413302 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2419.54 tests/s, 7258.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckz9vnv1\nStarted\n.\nFinished in 0.000449039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.98 tests/s, 6680.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz8lf9ec_\nStarted\n.\nFinished in 0.000449976 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2222.34 tests/s, 6667.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  freq = Hash.new(0)\n  nums.each { |num| freq[num] += 1 }\n  max_freq = freq.values.max\n  freq.select { |k, v| v == max_freq }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmp855a58hg\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmp855a58hg.rb:12:in `test_max_occurrences'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_max_occurrences\n     11:     candidate = method(:max_occurrences)\n  => 12:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     13:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     14:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     15:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.007741536 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.17 tests/s, 129.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # create a hash to store the number of occurrences of each number\n  occurrences = {}\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "/tmp/tmp2u2fpegh.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp2u2fpegh.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # Write your code here\n  hash = Hash.new(0)\n  nums.each do |num|\n    hash[num] += 1\n  end\n  max_value = hash.values.max\n  hash.select { |k, v| v == max_value }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmpoie4pyk1\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpoie4pyk1.rb:15:in `test_max_occurrences'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_max_occurrences\n     14:     candidate = method(:max_occurrences)\n  => 15:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     16:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     17:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     18:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.006446277 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.13 tests/s, 155.13 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.inject(Hash.new(0)) { |h,v| h[v] += 1; h }.max_by { |k,v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1lktkfe9\nStarted\n.\nFinished in 0.000412964 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2421.52 tests/s, 7264.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzawf9jmw\nStarted\n.\nFinished in 0.000692016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1445.05 tests/s, 4335.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzawf9jmw\nStarted\n.\nFinished in 0.000692016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1445.05 tests/s, 4335.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnukhjpd0\nStarted\n.\nFinished in 0.00042901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2330.95 tests/s, 6992.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp43_96t8l\nStarted\n.\nFinished in 0.000736186 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1358.35 tests/s, 4075.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each do |num|\n    counts[num] += 1\n  end\n  max_count = counts.values.max\n  counts.select { |k, v| v == max_count }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmpavfxoc8g\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpavfxoc8g.rb:14:in `test_max_occurrences'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_max_occurrences\n     13:     candidate = method(:max_occurrences)\n  => 14:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     15:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     16:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     17:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.007942204 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.91 tests/s, 125.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzawf9jmw\nStarted\n.\nFinished in 0.000692016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1445.05 tests/s, 4335.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # Write your code here\n  hash = Hash.new(0)\n  nums.each { |num| hash[num] += 1 }\n  max = hash.values.max\n  hash.select { |k, v| v == max }.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "Loaded suite /tmp/tmpgnpe84cm\nStarted\nF\n===============================================================================\nFailure: test_max_occurrences(TestHumanEval)\n/tmp/tmpgnpe84cm.rb:13:in `test_max_occurrences'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_max_occurrences\n     12:     candidate = method(:max_occurrences)\n  => 13:     assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n     14:     assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n     15:     assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n     16:   end\n<2> expected but was\n<[2]>\n\ndiff:\n? [2]\n===============================================================================\n\nFinished in 0.006434941 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.40 tests/s, 155.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  freq_hash = Hash.new(0)\n  nums.each { |num| freq_hash[num] += 1 }\n  freq_hash.max_by { |k, v| v }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjlhkq18o\nStarted\n.\nFinished in 0.000402391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2485.15 tests/s, 7455.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    count = nums.count(num)\n    if count > max_count\n      max_count = count\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyz1njte9\nStarted\n.\nFinished in 0.000528264 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1892.99 tests/s, 5678.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp33louk0b\nStarted\n.\nFinished in 0.000495857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2016.71 tests/s, 6050.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.group_by(&:itself).values.max_by(&:size).first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzawf9jmw\nStarted\n.\nFinished in 0.000692016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1445.05 tests/s, 4335.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  nums.max_by { |num| nums.count(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp33louk0b\nStarted\n.\nFinished in 0.000495857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2016.71 tests/s, 6050.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # Write your code here\n  max = 0\n  max_num = nil\n  nums.each do |num|\n    if nums.count(num) > max\n      max = nums.count(num)\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8p8v7itw\nStarted\n.\nFinished in 0.000440729 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2268.97 tests/s, 6806.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  # write your code here\n  max_count = 0\n  max_num = nil\n  nums.each do |num|\n    if nums.count(num) > max_count\n      max_count = nums.count(num)\n      max_num = num\n    end\n  end\n  max_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpump853ee\nStarted\n.\nFinished in 0.000445167 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2246.35 tests/s, 6739.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckz9vnv1\nStarted\n.\nFinished in 0.000449039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.98 tests/s, 6680.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums)\n  counts = Hash.new(0)\n  nums.each { |num| counts[num] += 1 }\n  counts.max_by { |_, count| count }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpckz9vnv1\nStarted\n.\nFinished in 0.000449039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.98 tests/s, 6680.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}