{
  "name": "mbpp_733_find_first_occurrence",
  "language": "rb",
  "prompt": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp3flol60\nStarted\n.\nFinished in 0.000373694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2675.99 tests/s, 8027.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmp1z21grc5.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1z21grc5.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9sd213i5\nStarted\n.\nFinished in 0.000397827 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2513.66 tests/s, 7540.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  return -1 if x.nil?\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmply6o7aj_.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmply6o7aj_.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return nil if a.nil? || a.empty?\n  return 0 if a.size == 1 && a[0] == x\n  return nil if a.size == 1 && a[0] != x\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmpi5sphcfp.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpi5sphcfp.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmp1z21grc5.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1z21grc5.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9sd213i5\nStarted\n.\nFinished in 0.000397827 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2513.66 tests/s, 7540.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp3flol60\nStarted\n.\nFinished in 0.000373694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2675.99 tests/s, 8027.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.length == 0\n  return 0 if a.length == 1 && a[0] == x\n  return -1 if a.length == 1 && a[0] != x\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmpafafvzwf.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpafafvzwf.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9sd213i5\nStarted\n.\nFinished in 0.000397827 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2513.66 tests/s, 7540.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptjjafr4c\nStarted\n.\nFinished in 0.000359683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2780.23 tests/s, 8340.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmozsaxux\nStarted\n.\nFinished in 0.000523121 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1911.60 tests/s, 5734.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmp61inavrg.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp61inavrg.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmpajd77h5q.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpajd77h5q.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbdm9j8kq\nStarted\n.\nFinished in 0.000336952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2967.78 tests/s, 8903.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmp1z21grc5.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1z21grc5.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1unp4pyz\nStarted\n.\nFinished in 0.000409672 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2440.98 tests/s, 7322.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3nd5hf6o\nStarted\n.\nFinished in 0.000399732 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.68 tests/s, 7505.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpq_x6bagx\nStarted\n.\nFinished in 0.000430489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2322.94 tests/s, 6968.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  return 0 if a.size == 1 && a[0] == x\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122551,
      "stdout": "",
      "stderr": "/tmp/tmp90i7ycrf.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp90i7ycrf.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpq_x6bagx\nStarted\n.\nFinished in 0.000430489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2322.94 tests/s, 6968.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      return mid if mid == 0 || a[mid - 1] != x\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpobv4dc1s\nStarted\n.\nFinished in 0.000435417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2296.65 tests/s, 6889.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = left + (right - left) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        right = mid - 1\n      end\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplywqu45x\nStarted\n.\nFinished in 0.000401812 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2488.73 tests/s, 7466.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpq_x6bagx\nStarted\n.\nFinished in 0.000430489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2322.94 tests/s, 6968.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsjtxbe96\nStarted\n.\nFinished in 0.000383083 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2610.40 tests/s, 7831.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3nd5hf6o\nStarted\n.\nFinished in 0.000399732 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.68 tests/s, 7505.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.empty?\n  return 0 if a.size == 1 && a[0] == x\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpwp164nex.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwp164nex.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmp61inavrg.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp61inavrg.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3nd5hf6o\nStarted\n.\nFinished in 0.000399732 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.68 tests/s, 7505.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuqpn5frw\nStarted\n.\nFinished in 0.000392225 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2549.56 tests/s, 7648.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return nil if a.nil?\n  return nil if x.nil?\n  return nil if a.empty?\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpy_djoewk.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpy_djoewk.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptcex9m35\nStarted\n.\nFinished in 0.000400354 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2497.79 tests/s, 7493.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3nd5hf6o\nStarted\n.\nFinished in 0.000399732 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.68 tests/s, 7505.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return nil if a.empty?\n  return 0 if a.first == x\n  return nil if a.first > x\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpuzpwdg2q.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpuzpwdg2q.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  return -1 if x.nil?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyqy280o6\nStarted\n.\nFinished in 0.000418209 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2391.15 tests/s, 7173.45 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsjtxbe96\nStarted\n.\nFinished in 0.000383083 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2610.40 tests/s, 7831.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_vijsb1\nStarted\n.\nFinished in 0.000417772 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2393.65 tests/s, 7180.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmp1z21grc5.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1z21grc5.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1unp4pyz\nStarted\n.\nFinished in 0.000409672 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2440.98 tests/s, 7322.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9sd213i5\nStarted\n.\nFinished in 0.000397827 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2513.66 tests/s, 7540.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmxharpor\nStarted\n.\nFinished in 0.000432962 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2309.67 tests/s, 6929.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return nil if a.nil? || a.empty?\n  return 0 if a.size == 1 && a[0] == x\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122551,
      "stdout": "",
      "stderr": "/tmp/tmp_9e9sww5.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9e9sww5.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if x == a[mid]\n      result = mid\n      high = mid - 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphxdotceb\nStarted\n.\nFinished in 0.000844715 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1183.83 tests/s, 3551.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsjtxbe96\nStarted\n.\nFinished in 0.000383083 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2610.40 tests/s, 7831.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmpajd77h5q.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpajd77h5q.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3nd5hf6o\nStarted\n.\nFinished in 0.000399732 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.68 tests/s, 7505.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] < x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptl9xgqjt\nStarted\n.\nFinished in 0.000395196 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2530.39 tests/s, 7591.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsjtxbe96\nStarted\n.\nFinished in 0.000383083 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2610.40 tests/s, 7831.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return nil if a.empty?\n  return 0 if a.size == 1 && a[0] == x\n  return nil if a.size == 1 && a[0] != x\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmp1px16vsb.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1px16vsb.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9sd213i5\nStarted\n.\nFinished in 0.000397827 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2513.66 tests/s, 7540.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmxharpor\nStarted\n.\nFinished in 0.000432962 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2309.67 tests/s, 6929.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxk_oasa2\nStarted\n.\nFinished in 0.000450483 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2219.84 tests/s, 6659.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  return -1 if x.nil?\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmply6o7aj_.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmply6o7aj_.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return nil if a.nil? || a.empty?\n  return 0 if a[0] == x\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpcnna4_0a.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpcnna4_0a.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9sd213i5\nStarted\n.\nFinished in 0.000397827 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2513.66 tests/s, 7540.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmozsaxux\nStarted\n.\nFinished in 0.000523121 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1911.60 tests/s, 5734.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmp1z21grc5.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1z21grc5.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuqpn5frw\nStarted\n.\nFinished in 0.000392225 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2549.56 tests/s, 7648.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpq_x6bagx\nStarted\n.\nFinished in 0.000430489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2322.94 tests/s, 6968.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_04ldwh6\nStarted\n.\nFinished in 0.000464135 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2154.55 tests/s, 6463.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  res = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      res = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  res\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgub0o8s9\nStarted\n.\nFinished in 0.000437733 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2284.50 tests/s, 6853.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsjtxbe96\nStarted\n.\nFinished in 0.000383083 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2610.40 tests/s, 7831.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  left = 0\n  right = a.size - 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmp107z32vn.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp107z32vn.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9sd213i5\nStarted\n.\nFinished in 0.000397827 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2513.66 tests/s, 7540.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_04ldwh6\nStarted\n.\nFinished in 0.000464135 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2154.55 tests/s, 6463.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbdm9j8kq\nStarted\n.\nFinished in 0.000336952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2967.78 tests/s, 8903.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsjtxbe96\nStarted\n.\nFinished in 0.000383083 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2610.40 tests/s, 7831.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9sd213i5\nStarted\n.\nFinished in 0.000397827 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2513.66 tests/s, 7540.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsjtxbe96\nStarted\n.\nFinished in 0.000383083 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2610.40 tests/s, 7831.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3nd5hf6o\nStarted\n.\nFinished in 0.000399732 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.68 tests/s, 7505.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.empty?\n  low = 0\n  high = a.size - 1\n  while low < high\n    mid = low + (high - low) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid\n    end\n  end\n  return a[low] == x ? low : -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0zxvcojm\nStarted\n.\nFinished in 0.000385036 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2597.16 tests/s, 7791.48 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1j8debkx\nStarted\n.\nFinished in 0.000366537 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2728.24 tests/s, 8184.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmp61inavrg.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp61inavrg.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsjtxbe96\nStarted\n.\nFinished in 0.000383083 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2610.40 tests/s, 7831.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      return mid if mid == 0 || a[mid - 1] != x\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpobv4dc1s\nStarted\n.\nFinished in 0.000435417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2296.65 tests/s, 6889.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if x == a[mid]\n      result = mid\n      high = mid - 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpujb_a4b6\nStarted\n.\nFinished in 0.000420908 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2375.82 tests/s, 7127.45 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmp61inavrg.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp61inavrg.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsjtxbe96\nStarted\n.\nFinished in 0.000383083 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2610.40 tests/s, 7831.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return nil if a.nil? || x.nil?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjl55ko42\nStarted\n.\nFinished in 0.000417949 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2392.64 tests/s, 7177.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if x == a[mid]\n      result = mid\n      high = mid - 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpujb_a4b6\nStarted\n.\nFinished in 0.000420908 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2375.82 tests/s, 7127.45 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  # TODO: Implement me!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "Loaded suite /tmp/tmpydkrfzjy\nStarted\nF\n===============================================================================\nFailure: test_find_first_occurrence(TestHumanEval)\n/tmp/tmpydkrfzjy.rb:9:in `test_find_first_occurrence'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_find_first_occurrence\n      8:     candidate = method(:find_first_occurrence)\n  =>  9:     assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n     10:     assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n     11:     assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n     12:   end\n<1> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.016008947 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n62.47 tests/s, 62.47 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptcex9m35\nStarted\n.\nFinished in 0.000400354 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2497.79 tests/s, 7493.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpm5z77dsb\nStarted\n.\nFinished in 0.000505742 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1977.29 tests/s, 5931.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3nd5hf6o\nStarted\n.\nFinished in 0.000399732 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.68 tests/s, 7505.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqrmr5rio\nStarted\n.\nFinished in 0.000401525 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2490.50 tests/s, 7471.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuqpn5frw\nStarted\n.\nFinished in 0.000392225 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2549.56 tests/s, 7648.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxk_oasa2\nStarted\n.\nFinished in 0.000450483 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2219.84 tests/s, 6659.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_04ldwh6\nStarted\n.\nFinished in 0.000464135 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2154.55 tests/s, 6463.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsjtxbe96\nStarted\n.\nFinished in 0.000383083 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2610.40 tests/s, 7831.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmxharpor\nStarted\n.\nFinished in 0.000432962 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2309.67 tests/s, 6929.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      return mid if mid == 0 || a[mid - 1] != x\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp35on7jua\nStarted\n.\nFinished in 0.000404762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2470.59 tests/s, 7411.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.empty?\n  return 0 if a.size == 1 && a[0] == x\n  return -1 if a.size == 1 && a[0] != x\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122551,
      "stdout": "",
      "stderr": "/tmp/tmp8wtez71k.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp8wtez71k.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmp1z21grc5.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1z21grc5.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsjtxbe96\nStarted\n.\nFinished in 0.000383083 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2610.40 tests/s, 7831.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return nil if a.nil? || a.empty?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi9smn2os\nStarted\n.\nFinished in 0.000419254 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2385.19 tests/s, 7155.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      return mid if mid == 0 || a[mid - 1] != x\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu6fp0h9z\nStarted\n.\nFinished in 0.000454967 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2197.96 tests/s, 6593.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if x == a[mid]\n      result = mid\n      high = mid - 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppech65yu\nStarted\n.\nFinished in 0.000515489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1939.91 tests/s, 5819.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9sd213i5\nStarted\n.\nFinished in 0.000397827 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2513.66 tests/s, 7540.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp3flol60\nStarted\n.\nFinished in 0.000373694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2675.99 tests/s, 8027.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  return -1 if x.nil?\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmply6o7aj_.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmply6o7aj_.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsjtxbe96\nStarted\n.\nFinished in 0.000383083 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2610.40 tests/s, 7831.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpq_x6bagx\nStarted\n.\nFinished in 0.000430489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2322.94 tests/s, 6968.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmpajd77h5q.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpajd77h5q.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  mid = 0\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmp4y9v6pm1.rb:8: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp4y9v6pm1.rb:15: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1unp4pyz\nStarted\n.\nFinished in 0.000409672 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2440.98 tests/s, 7322.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if x == a[mid]\n      result = mid\n      high = mid - 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphxdotceb\nStarted\n.\nFinished in 0.000844715 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1183.83 tests/s, 3551.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if x == a[mid]\n      result = mid\n      high = mid - 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphxdotceb\nStarted\n.\nFinished in 0.000844715 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1183.83 tests/s, 3551.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return 0 if a[0] == x\n  return -1 if a[0] > x\n  return -1 if a.size == 1\n  return -1 if a[-1] < x\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpyk4xufzy.rb:8: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpyk4xufzy.rb:15: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3nd5hf6o\nStarted\n.\nFinished in 0.000399732 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.68 tests/s, 7505.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9sd213i5\nStarted\n.\nFinished in 0.000397827 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2513.66 tests/s, 7540.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmp1z21grc5.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1z21grc5.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmp1z21grc5.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1z21grc5.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.empty?\n  return 0 if a.size == 1 && a[0] == x\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpwp164nex.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwp164nex.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsjtxbe96\nStarted\n.\nFinished in 0.000383083 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2610.40 tests/s, 7831.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return nil if a.nil? || a.empty?\n  return nil if x.nil?\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmputl_glp7.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmputl_glp7.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  # return nil if a.empty?\n  # return 0 if a[0] == x\n  # return nil if a[0] > x\n  # return nil if a[-1] < x\n  # return a.length - 1 if a[-1] == x\n  #\n  # i = 0\n  # j = a.length - 1\n  #\n  # while i <= j\n  #   mid = (i + j) / 2\n  #   if a[mid] == x\n  #     return mid\n  #   elsif a[mid] > x\n  #     j = mid - 1\n  #   else\n  #     i = mid + 1\n  #   end\n  # end\n  #\n  # nil\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmp5zl_cszu.rb:25: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5zl_cszu.rb:32: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if x == a[mid]\n      result = mid\n      high = mid - 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphxdotceb\nStarted\n.\nFinished in 0.000844715 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1183.83 tests/s, 3551.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmp1z21grc5.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1z21grc5.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmxharpor\nStarted\n.\nFinished in 0.000432962 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2309.67 tests/s, 6929.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3nd5hf6o\nStarted\n.\nFinished in 0.000399732 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.68 tests/s, 7505.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  low, high = 0, a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      return mid if mid == 0 || a[mid - 1] != x\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa9gdswqe\nStarted\n.\nFinished in 0.000456702 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2189.61 tests/s, 6568.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmp1z21grc5.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1z21grc5.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9sd213i5\nStarted\n.\nFinished in 0.000397827 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2513.66 tests/s, 7540.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmxharpor\nStarted\n.\nFinished in 0.000432962 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2309.67 tests/s, 6929.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu6y8ogf3\nStarted\n.\nFinished in 0.000418503 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2389.47 tests/s, 7168.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsjtxbe96\nStarted\n.\nFinished in 0.000383083 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2610.40 tests/s, 7831.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  return 0 if a.first == x\n  return -1 if a.first > x\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "/tmp/tmpf623p3lq.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpf623p3lq.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu6y8ogf3\nStarted\n.\nFinished in 0.000418503 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2389.47 tests/s, 7168.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprdenjuxj\nStarted\n.\nFinished in 0.000392237 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2549.48 tests/s, 7648.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3nd5hf6o\nStarted\n.\nFinished in 0.000399732 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.68 tests/s, 7505.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.nil? || a.empty?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_04ldwh6\nStarted\n.\nFinished in 0.000464135 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2154.55 tests/s, 6463.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9sd213i5\nStarted\n.\nFinished in 0.000397827 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2513.66 tests/s, 7540.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  return -1 if a.empty?\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpml0bs3y_\nStarted\n.\nFinished in 0.000388853 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.67 tests/s, 7715.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.size - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpq_x6bagx\nStarted\n.\nFinished in 0.000430489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2322.94 tests/s, 6968.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      result = mid\n      high = mid - 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3p9yoeyu\nStarted\n.\nFinished in 0.000398498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2509.42 tests/s, 7528.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  result = -1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "/tmp/tmppgnre0ms.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmppgnre0ms.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n",
      "timestamp": 1665517248,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuqpn5frw\nStarted\n.\nFinished in 0.000392225 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2549.56 tests/s, 7648.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}