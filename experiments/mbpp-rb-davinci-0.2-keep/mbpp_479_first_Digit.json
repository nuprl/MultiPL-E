{
  "name": "mbpp_479_first_Digit",
  "language": "rb",
  "prompt": "# Write a python function to find the first digit of a given number.\ndef first_Digit(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_first_Digit\n    candidate = method(:first_Digit)\n    assert_equal(1, candidate.call(123))\n    assert_equal(4, candidate.call(456))\n    assert_equal(1, candidate.call(12))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend\nputs first_Digit(1234)\nputs first_Digit(567)\nputs first_Digit(8)\nputs first_Digit(9)\nputs first_Digit(0)",
    "\tn = n.to_s\n\tn[0]\nend",
    "    while n > 9\n        n = n / 10\n    end\n    return n\nend",
    "    while n > 9\n        n = n / 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "  n.to_s.split('').first.to_i\nend",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(n)",
    "  while n > 9\n    n /= 10\n  end\n  n\nend\nputs first_Digit(1234)\nputs first_Digit(65)\nputs first_Digit(0)\nputs first_Digit(9876543210)\nputs first_Digit(9)",
    "    while n>=10\n        n=n/10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "  while n > 9\n    n /= 10\n  end\n  n\nend\nputs first_Digit(int)",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').each do |i|\n    if i.to_i.to_s == i\n      return i.to_i\n    end\n  end\nend",
    "    while n>=10\n        n=n/10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split(\"\").each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "  while n > 9\n    n /= 10\n  end\n  n\nend\nputs first_Digit(1234)\nputs first_Digit(65)\nputs first_Digit(0)\nputs first_Digit(987654321)",
    "  n.to_s.split('').first.to_i\nend",
    "    while n > 9\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "  n.to_s.split('').each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "    while n > 9\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(n)",
    "  n.to_s.split('').first.to_i\nend",
    "    n.to_s.split('').each do |i|\n        if i.to_i != 0\n            return i.to_i\n        end\n    end\nend",
    "  n.to_s.split('').each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "  n.to_s.split('').first.to_i\nend",
    "  while n > 9\n    n /= 10\n  end\n  return n\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first\nend",
    "  n.to_s.split('').first.to_i\nend",
    "    while n>=10\n        n=n/10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "    while n > 9\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "    while n > 9\n        n /= 10\n    end\n    return n\nend",
    "  n.to_s.chars.first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "  n.to_s.split('').each do |i|\n    if i.to_i.to_s == i\n      return i\n    end\n  end\nend",
    "  while n > 9\n    n /= 10\n  end\n  n\nend\nputs \"Enter a number\"\nn = gets.to_i\nputs first_Digit(n)",
    "    while n > 9\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first\nend",
    "  n.to_s.split('').first.to_i\nend",
    "    while n > 9\n        n = n / 10\n    end\n    return n\nend\nputs first_Digit(n)",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "  n.to_s.split('').first.to_i\nend",
    "    while n > 9\n        n = n / 10\n    end\n    return n\nend\nputs first_Digit(n)",
    "  n = n.to_s\n  n[0].to_i\nend",
    "  while n > 9\n    n /= 10\n  end\n  return n\nend",
    "  n.to_s.split('').each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend\nputs first_Digit(1234)\nputs first_Digit(0)\nputs first_Digit(2345)\nputs first_Digit(10)\nputs first_Digit(7654)\nputs first_Digit(987654)",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(n)",
    "    while n > 9\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(n)",
    "  n.to_s.split('').first.to_i\nend",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(n)",
    "    while n>=10\n        n=n/10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "  while n > 9\n    n = n / 10\n  end\n  return n\nend\nputs first_Digit(n)",
    "    while n>=10\n        n=n/10\n    end\n    return n\nend\nputs first_Digit(n)",
    "  n.to_s.split('').each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "    while n >= 10\n        n /= 10\n    end\n    n\nend\nputs first_Digit(int(gets))",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend",
    "  n.to_s.split('').first.to_i\nend",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(n)",
    "  n.to_s.chars.first.to_i\nend",
    "    while n>=10\n        n=n/10\n    end\n    return n\nend\nn=gets.to_i\nputs first_Digit(n)",
    "    n.to_s.split('').first.to_i\nend\nputs first_Digit(1234)\nputs first_Digit(0)\nputs first_Digit(65)\nputs first_Digit(9)",
    "  while n > 9\n    n = n / 10\n  end\n  return n\nend",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "    while n>=10\n        n=n/10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "    while n > 9\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "  while n > 9\n    n /= 10\n  end\n  n\nend\nputs first_Digit(int)",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(n)",
    "  n.to_s.split('').first\nend",
    "    while n > 9\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(1234)\nputs first_Digit(12345)\nputs first_Digit(123456)\nputs first_Digit(1234567)\nputs first_Digit(12345678)\nputs first_Digit(123456789)\nputs first_Digit(1234567890)\nputs first_Digit(12345678901)\nputs first_Digit(123456789012)\nputs first_Digit(1234567890123)\nputs first_Digit(12345678901234)\nputs first_Digit(123456789012345)\nputs first_Digit(1234567890123456)\nputs first_Digit(12345678901234567)\nputs first_Digit(123456789012345678)\nputs first_Digit(1234567890123456789)\nputs first_Digit(12345678901234567890)\nputs first_Digit(123456789012345678901)\nputs first_Digit(1234567890123456789012)\nputs first_Digit(12345678901234567890123)\nputs first_Digit(123456789012345678901234)\nputs first_Digit(1234567890123456789012345)\nputs first_Digit(12345678901234567890123456)\nputs first_Digit(123456789012345678901234567)\nputs first_Digit(1234567890123456789012345678)\nputs first_Digit(12345678901234567890123456789)\nputs first_Digit(123456789012345678901234567890)\nputs first_Digit(1234567890123456789012345678901)\nputs first_Digit(1234567890123",
    "  n.to_s.split('').each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(n)",
    "    while n > 9\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(1234)\nputs first_Digit(567)\nputs first_Digit(89)\nputs first_Digit(90)",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "  n.to_s.split(\"\").each do |i|\n    if i.to_i.to_s == i\n      return i.to_i\n    end\n  end\nend",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "    while n>=10\n        n=n/10\n    end\n    return n\nend\nputs first_Digit(n)",
    "  while n > 9\n    n /= 10\n  end\n  n\nend\nputs first_Digit(int)",
    "  while n > 9\n    n /= 10\n  end\n  return n\nend\nputs first_Digit(123)\nputs first_Digit(67)\nputs first_Digit(8)",
    "  while n > 9\n    n /= 10\n  end\n  n\nend\nputs first_Digit(int)",
    "  n.to_s.split('').first.to_i\nend\nputs first_Digit(1234)\nputs first_Digit(0)\nputs first_Digit(65)\nputs first_Digit(123)\nputs first_Digit(10)\nputs first_Digit(100)\nputs first_Digit(101)\nputs first_Digit(1000)\nputs first_Digit(1001)\nputs first_Digit(1010)\nputs first_Digit(1011)\nputs first_Digit(1012)\nputs first_Digit(1013)\nputs first_Digit(1014)\nputs first_Digit(1015)\nputs first_Digit(1016)\nputs first_Digit(1017)\nputs first_Digit(1018)\nputs first_Digit(1019)\nputs first_Digit(1020)\nputs first_Digit(1021)\nputs first_Digit(1022)\nputs first_Digit(1023)\nputs first_Digit(1024)\nputs first_Digit(1025)\nputs first_Digit(1026)\nputs first_Digit(1027)\nputs first_Digit(1028)\nputs first_Digit(1029)\nputs first_Digit(1030)\nputs first_Digit(1031)\nputs first_Digit(1032)\nputs first_Digit(1033)\nputs first_Digit(1034)\nputs first_Digit(1035)\nputs first_Digit(1036)\nputs first_Digit(1037)\nputs first_Digit(1038)\nputs first_Digit(1039)\nputs first_Digit(1040)\nputs first_Digit(1041)\nputs first_Digit(1042)\nputs first_Digit(1043)\nputs first_Digit(1044)\nputs first_Digit(1045)\nputs first_Digit(10",
    "  while n > 9\n    n /= 10\n  end\n  puts n\nend\nfirst_Digit(int(input()))",
    "  n.to_s.split(\"\").each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(n)",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(n)",
    "  while n > 9\n    n /= 10\n  end\n  n\nend\nputs first_Digit(1234)\nputs first_Digit(0)\nputs first_Digit(12345)",
    "  n.to_s.split('').first.to_i\nend",
    "    while n > 9\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "  n.to_s.split('').each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend\nputs first_Digit(1234)\nputs first_Digit(0)\nputs first_Digit(10)\nputs first_Digit(101)\nputs first_Digit(1010)\nputs first_Digit(10101)\nputs first_Digit(101010)\nputs first_Digit(1010101)\nputs first_Digit(10101010)\nputs first_Digit(101010101)\nputs first_Digit(1010101010)\nputs first_Digit(10101010101)\nputs first_Digit(101010101010)\nputs first_Digit(1010101010101)\nputs first_Digit(10101010101010)\nputs first_Digit(101010101010101)\nputs first_Digit(1010101010101010)\nputs first_Digit(10101010101010101)\nputs first_Digit(101010101010101010)\nputs first_Digit(1010101010101010101)\nputs first_Digit(10101010101010101010)\nputs first_Digit(101010101010101010101)\nputs first_Digit(1010101010101010101010)\nputs first_Digit(10101010101010101010101)\nputs first_Digit(101010101010101010101010)\nputs first_Digit(1010101010101010101010101)\nputs first_Digit(10101010101010101010101010)\nputs first_Digit(101010101010101010101010101)\nputs first_Digit(1010101010101010101010101010)\nputs first_Digit(101010101010101010101010101",
    "  while n > 9\n    n /= 10\n  end\n  n\nend\nputs first_Digit(int)",
    "  while n > 9\n    n = n / 10\n  end\n  return n\nend\nputs first_Digit(1234)\nputs first_Digit(567)\nputs first_Digit(8)",
    "    while n > 9\n        n = n / 10\n    end\n    return n\nend\nputs first_Digit(n)",
    "    while n > 9\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "    while n>=10\n        n=n/10\n    end\n    return n\nend\nputs first_Digit(1234)\nputs first_Digit(65)\nputs first_Digit(0)\nputs first_Digit(12345)",
    "  while n > 9\n    n /= 10\n  end\n  n\nend\nputs first_Digit(3572)\nputs first_Digit(7)\nputs first_Digit(70)\nputs first_Digit(23456)\nputs first_Digit(8)",
    "  n.to_s.split('').each do |i|\n    if i.to_i.to_s == i\n      return i.to_i\n    end\n  end\nend",
    "    while n>=10\n        n=n/10\n    end\n    return n\nend\nputs first_Digit(int)",
    "    while n > 9\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "    while n>=10\n        n=n/10\n    end\n    return n\nend\nputs first_Digit(n)",
    "  n.to_s.split('').first.to_i\nend",
    "    while n>=10\n        n=n/10\n    end\n    return n\nend\nputs first_Digit(n)",
    "    while n > 9\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(1234)\nputs first_Digit(0)\nputs first_Digit(123456789)\nputs first_Digit(1234567890123456789)",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "    n.to_s.split('').first\nend\nputs first_Digit(1234)\nputs first_Digit(0)\nputs first_Digit(123456789)",
    "    while n>=10\n        n=n/10\n    end\n    return n\nend\nputs first_Digit(n)",
    "  n.to_s.split('').first.to_i\nend",
    "    n.to_s.split('').first.to_i\nend\nputs first_Digit(1234)",
    "    while n>=10\n        n=n/10\n    end\n    return n\nend",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "  while n > 9\n    n /= 10\n  end\n  n\nend\nputs first_Digit(123)\nputs first_Digit(67)\nputs first_Digit(2345)\nputs first_Digit(8)",
    "    while n > 9\n        n = n / 10\n    end\n    return n\nend\nputs first_Digit(n)",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(n)",
    "    while n>=10\n        n=n/10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "  n.to_s.split('').each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "    while n>=10\n        n=n/10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend\nputs first_Digit(1234)\nputs first_Digit(12.34)\nputs first_Digit(0.1234)",
    "  n.to_s.split('').each do |i|\n    if i.to_i.to_s == i\n      return i.to_i\n    end\n  end\nend\nputs first_Digit(123)\nputs first_Digit(65.78)\nputs first_Digit(5)",
    "  n.to_s.split(\"\").each do |i|\n    if i.to_i.to_s == i\n      return i.to_i\n    end\n  end\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "  n.to_s.split('').first.to_i\nend\nputs first_Digit(1234)\nputs first_Digit(0)\nputs first_Digit(6543)\nputs first_Digit(12345)",
    "    n.to_s.split('').first.to_i\nend",
    "    n.to_s.split(\"\").each do |i|\n        if i.to_i.to_s == i\n            return i.to_i\n        end\n    end\nend",
    "    while n > 9\n        n = n / 10\n    end\n    return n\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "  n.to_s.split('').each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "\twhile n > 9\n\t\tn = n / 10\n\tend\n\treturn n\nend\nputs first_Digit(1234)",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "  n.to_s.split('').each do |i|\n    if i.to_i.to_s == i\n      return i.to_i\n    end\n  end\nend",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(n)",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "\tn.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "\tn.to_s.split(\"\")[0].to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "\tn.to_s.split('').first.to_i\nend",
    "    n.to_s.split(//).first.to_i\nend\nputs first_Digit(567)",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(n)",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first\nend",
    "\tn.to_s.split(\"\").each do |i|\n\t\tif i.to_i != 0\n\t\t\treturn i.to_i\n\t\tend\n\tend\nend",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "    while n > 9\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split(\"\").each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(123)\nputs first_Digit(67)\nputs first_Digit(23)",
    "  n.to_s.split('').each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "  while n > 9\n    n /= 10\n  end\n  n\nend",
    "  n.to_s.split('').first.to_i\nend",
    "\tn = n.to_s\n\tn[0].to_i\nend",
    "    while n >= 10\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "  n.to_s.split('').each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "    while n > 9\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(n)",
    "  n.to_s.split('').each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "    n.to_s.split(\"\").each do |i|\n        if i.to_i != 0\n            return i.to_i\n        end\n    end\nend\nputs first_Digit(int(input()))",
    "  n.to_s.split('').each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split(\"\").first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "    while n > 9\n        n /= 10\n    end\n    return n\nend\nputs first_Digit(int(gets))",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').each do |i|\n    if i.to_i.to_s == i\n      return i.to_i\n    end\n  end\nend",
    "    while n > 9\n        n = n / 10\n    end\n    return n\nend",
    "  n.to_s.split('').first.to_i\nend",
    "  n.to_s.split('').first\nend\nfirst_Digit(n)",
    "  n.to_s.split('').each do |i|\n    if i.to_i != 0\n      return i.to_i\n    end\n  end\nend\nputs first_Digit(1234)\nputs first_Digit(0)\nputs first_Digit(10)\nputs first_Digit(101)",
    "  n.to_s.split('').first.to_i\nend\nputs first_Digit(123)\nputs first_Digit(67)\nputs first_Digit(2345)"
  ]
}