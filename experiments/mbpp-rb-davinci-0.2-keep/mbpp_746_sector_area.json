{
  "name": "mbpp_746_sector_area",
  "language": "rb",
  "prompt": "# Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\ndef sector_area(r, a)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sector_area\n    candidate = method(:sector_area)\n    assert_equal(6.283185307179586, candidate.call(4, 45))\n    assert_equal(31.808625617596654, candidate.call(9, 45))\n    assert_equal(nil, candidate.call(9, 361))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*(Math::PI*r**2)\n  end\nend",
    "  return nil if a > 360\n  (a/360.0)*Math::PI*r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (a / 360.0) * Math::PI * r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*(Math::PI*r**2)\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  return nil if a > 360\n  (a/360.0)*Math::PI*r**2\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (0.5 * r * r * a).round(2)\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (r * r * a) / 360\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a / 360.0) * Math::PI * r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (r * r * a) / 360\n  end\nend",
    "  return nil if a > 360\n  (r**2 * a * Math::PI / 360).round(2)\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (a / 360.0) * 3.14 * r * r\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r*r\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*(Math::PI*r*r)\n  end\nend",
    "  a > 360 ? nil : (a * r**2)/360\nend",
    "  return nil if a > 360\n  (r**2 * a) / 2\nend",
    "  return nil if a > 360\n  (Math::PI * r**2 * a) / 360\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  return nil if a > 360\n  (Math::PI * r**2 * a) / 360\nend",
    "  return nil if a > 360\n  (Math::PI * r**2 * a) / 360\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (r * r * a) / 360\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*(Math::PI*r**2)\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  return nil if a > 360\n  (a/360.0) * Math::PI * r**2\nend",
    "  return nil if a > 360\n  (Math::PI * r**2 * a) / 360\nend",
    "  return nil if a > 360\n  (a/360.0)*Math::PI*r**2\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (0.5 * r * r * a).round(2)\n  end\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r ** 2\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  return nil if a > 360\n  (r**2 * a) / 2\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360)*Math::PI*r**2\n  end\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  return nil if a > 360\n  (r**2 * a) / 360\nend",
    "  return nil if a > 360\n  (r**2 * a * Math::PI / 360).round(2)\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (Math::PI * r**2 * a) / 360\n  end\nend",
    "  return nil if a > 360\n  (r**2 * a * Math::PI / 360).round(2)\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (a / 360.0) * Math::PI * r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*(Math::PI)*r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  return nil if a > 360\n  (a/360.0) * Math::PI * r**2\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a <= 360\n    return (a * r * r) / 360\n  else\n    return nil\n  end\nend",
    "  return nil if a > 360\n  (a/360.0) * Math::PI * r**2\nend",
    "  return nil if a > 360\n  (a/360.0)*Math::PI*r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (r * r * a) / 360\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (Math::PI * r**2 * a / 360).round(2)\n  end\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0) * Math::PI * r**2\n  end\nend",
    "  return nil if a > 360\n  (a/360.0)*Math::PI*r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (a / 360.0) * (Math::PI * r * r)\n  end\nend",
    "  return nil if a > 360\n  (a/360.0) * Math::PI * r**2\nend",
    "  return nil if a > 360\n  (r**2 * a * Math::PI / 360).round(2)\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a)/360\n  end\nend",
    "  return nil if a > 360\n  (r**2 * a) / 2\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a) / 2\n  end\nend",
    "  return nil if a > 360\n  (r**2 * a) / 2\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  a > 360 ? nil : (r**2 * a * Math::PI / 360).round(2)\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  return nil if a > 360\n  (Math::PI * r**2 * a) / 360\nend",
    "  return nil if a > 360\n  (r**2 * a) / 360\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  return nil if a > 360\n  (Math::PI * r**2 * a / 360).round(2)\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0) * Math::PI * r**2\n  end\nend",
    "  return nil if a > 360\n  (Math::PI * r**2 * a) / 360\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a)/360\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  a > 360 ? nil : (a * r**2) / 2\nend",
    "  return nil if a > 360\n  (Math::PI * r**2 * a) / 360\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r ** 2\nend",
    "  return nil if a > 360\n  (r**2 * a) / 360\nend",
    "  return nil if a > 360\n  (a/360.0)*Math::PI*r**2\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*(Math::PI*r**2)\n  end\nend",
    "  return nil if a > 360\n  (Math::PI * r**2 * a) / 360\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  return nil if a > 360\n  (a/360.0) * Math::PI * r**2\nend",
    "  a > 360 ? nil : (a * r * r * 0.5)\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*(Math::PI*r*r)\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  return nil if a > 360\n  (r**2 * a) / 360\nend",
    "  if a > 360\n    return nil\n  else\n    return (a / 360.0) * Math::PI * r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0) * Math::PI * r**2\n  end\nend",
    "  return nil if a > 360\n  (Math::PI * r**2 * a) / 360\nend",
    "  if a > 360\n    return nil\n  else\n    return (r * r * a) / 360\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI/360).round(2)\n  end\nend",
    "  return nil if a > 360\n  (r**2 * a * Math::PI / 360).round(2)\nend",
    "  return nil if a > 360\n  (Math::PI * r**2 * a) / 360\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a) / 2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  return nil if a > 360\n  (r**2 * a) / 2\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*(Math::PI*r**2)\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0) * Math::PI * r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI/360).round(2)\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0) * Math::PI * r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (0.5 * r * r * a).round(2)\n  end\nend",
    "  return nil if a > 360\n  (0.5 * r**2 * a) / 360\nend",
    "  return nil if a > 360\n  (Math::PI * r**2 * a) / 360\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a)/360\n  end\nend",
    "  a > 360 ? nil : (a/360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0) * Math::PI * r**2\n  end\nend",
    "  return nil if a > 360\n  (a/360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (r * r * a) / 360\n  end\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*(Math::PI*r**2)\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0) * Math::PI * r**2\n  end\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r*r\n  end\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r ** 2\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0) * Math::PI * r * r\n  end\nend",
    "  return nil if a > 360\n  (r**2 * a) / 2\nend",
    "  a > 360 ? nil : (a/360.0)*Math::PI*r**2\nend",
    "  a > 360 ? nil : (Math::PI * r * r * a) / 360\nend",
    "  return nil if a > 360\n  (a/360.0) * Math::PI * r**2\nend",
    "  a > 360 ? nil : (a / 360.0) * Math::PI * r * r\nend",
    "  return nil if a > 360\n  (Math::PI * r**2 * a) / 360\nend",
    "  return nil if a > 360\n  (r**2 * a) / 2\nend",
    "  return nil if a > 360\n  (Math::PI * r**2 * a) / 360\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (0.5 * r * r * a).round(2)\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r*r\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0) * Math::PI * r**2\n  end\nend",
    "  return nil if a > 360\n  (a/360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (r * r * a) / 360\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0) * Math::PI * r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*(Math::PI*r**2)\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0) * Math::PI * r**2\n  end\nend",
    "  return nil if a > 360\n  (a/360.0) * Math::PI * r**2\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a) / 2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  a > 360 ? nil : (Math::PI * r**2 * a / 360).round(2)\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0) * Math::PI * r**2\n  end\nend",
    "  return nil if a > 360\n  (r**2 * a) / 2\nend",
    "  if a > 360\n    return nil\n  else\n    return (r * r * a) / 360\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (r*r*a)/360\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0) * Math::PI * r**2\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (r**2 * a * Math::PI / 360).round(2)\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0) * (Math::PI * r**2)\n  end\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (Math::PI * r**2 * a)/360\n  end\nend",
    "  if a > 360\n    return nil\n  else\n    return (Math::PI * r**2 * a / 360).round(2)\n  end\nend",
    "  return nil if a > 360\n  (a / 360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (a/360.0)*Math::PI*r**2\n  end\nend",
    "  return nil if a > 360\n  (a/360.0) * Math::PI * r**2\nend",
    "  if a > 360\n    return nil\n  else\n    return (0.5 * r * r * a).round(2)\n  end\nend",
    "  return nil if a > 360\n  (Math::PI * r**2 * a) / 360\nend"
  ]
}