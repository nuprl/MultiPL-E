{
  "name": "mbpp_409_min_product_tuple",
  "language": "rb",
  "prompt": "# Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_product_tuple\n    candidate = method(:min_product_tuple)\n    assert_equal(8, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(30, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(100, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  list1.combination(2).to_a.map{|x| x.inject(:*)}.min\nend",
    "  list1.combination(2).map{|x,y| x*y}.min\nend",
    "  list1.combination(2).map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map {|x,y| x*y}.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).map { |x, y| x * y }.min\nend",
    "  list1.combination(2).map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map{|x| x.inject(:*)}.min\nend",
    "  list1.combination(2).to_a.map {|x,y| x*y}.min\nend",
    "  list1.sort_by{|x,y| x*y}.first\nend",
    "  list1.combination(2).map { |a, b| a * b }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map { |x, y| x * y }.min\nend",
    "  list1.combination(2).map { |x, y| x * y }.min\nend",
    "  list1.combination(2).to_a.map{|x| x.inject(:*)}.min\nend",
    "  min = list1[0][0] * list1[0][1]\n  list1.each do |tuple|\n    if tuple[0] * tuple[1] < min\n      min = tuple[0] * tuple[1]\n    end\n  end\n  min\nend",
    "  list1.combination(2).map { |x, y| x * y }.min\nend"
  ]
}