{
  "name": "mbpp_805_max_sum_list",
  "language": "rb",
  "prompt": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    if list.reduce(:+) > max_sum\n      max_sum = list.reduce(:+)\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3rdyphl0\nStarted\n.\nFinished in 0.000411647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2429.27 tests/s, 7287.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max = 0\n  max_list = []\n  lists.each do |list|\n    if list.reduce(:+) > max\n      max = list.reduce(:+)\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfsa4ogpt\nStarted\n.\nFinished in 0.000351514 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2844.84 tests/s, 8534.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    sum = list.reduce(:+)\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv5l5krwg\nStarted\n.\nFinished in 0.000409407 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2442.56 tests/s, 7327.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  return lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5h155f1z\nStarted\n.\nFinished in 0.000424579 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2355.27 tests/s, 7065.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  sums = lists.map { |list| list.reduce(:+) }\n  lists[sums.index(sums.max)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn85bayi6\nStarted\n.\nFinished in 0.00051267 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1950.57 tests/s, 5851.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    sum = 0\n    list.each do |element|\n      sum += element\n    end\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvz54rbkg\nStarted\n.\nFinished in 0.00039309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2543.95 tests/s, 7631.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    sum = 0\n    list.each do |num|\n      sum += num\n    end\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqkp1tlpc\nStarted\n.\nFinished in 0.000398133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2511.72 tests/s, 7535.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  sums = lists.map { |list| list.reduce(:+) }\n  max_sum = sums.max\n  lists[sums.index(max_sum)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwdwqev7q\nStarted\n.\nFinished in 0.000413326 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2419.40 tests/s, 7258.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max = 0\n  max_list = []\n  lists.each do |list|\n    if list.reduce(:+) > max\n      max = list.reduce(:+)\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfsa4ogpt\nStarted\n.\nFinished in 0.000351514 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2844.84 tests/s, 8534.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    sum = 0\n    list.each do |num|\n      sum += num\n    end\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqkp1tlpc\nStarted\n.\nFinished in 0.000398133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2511.72 tests/s, 7535.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = nil\n  lists.each do |list|\n    sum = list.reduce(:+)\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_yez70gi\nStarted\n.\nFinished in 0.000385431 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2594.50 tests/s, 7783.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    if list.sum > max_sum\n      max_sum = list.sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf8qeh8qw\nStarted\n.\nFinished in 0.000387865 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2578.22 tests/s, 7734.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.inject(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppuj834l_\nStarted\n.\nFinished in 0.000711454 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1405.57 tests/s, 4216.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    if list.reduce(:+) > max_sum\n      max_sum = list.reduce(:+)\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3rdyphl0\nStarted\n.\nFinished in 0.000411647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2429.27 tests/s, 7287.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    sum = 0\n    list.each do |element|\n      sum += element\n    end\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvz54rbkg\nStarted\n.\nFinished in 0.00039309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2543.95 tests/s, 7631.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.map { |list| list.reduce(:+) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "Loaded suite /tmp/tmpf_fq5jov\nStarted\nF\n===============================================================================\nFailure: test_max_sum_list(TestHumanEval)\n/tmp/tmpf_fq5jov.rb:9:in `test_max_sum_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_sum_list\n      8:     candidate = method(:max_sum_list)\n  =>  9:     assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n     10:     assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n     11:     assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n     12:   end\n<[10, 11, 12]> expected but was\n<33>\n===============================================================================\n\nFinished in 0.011171773 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n89.51 tests/s, 89.51 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max = 0\n  max_list = []\n  lists.each do |list|\n    if list.reduce(:+) > max\n      max = list.reduce(:+)\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfsa4ogpt\nStarted\n.\nFinished in 0.000351514 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2844.84 tests/s, 8534.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    sum = 0\n    list.each { |num| sum += num }\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5iaj1_om\nStarted\n.\nFinished in 0.000402116 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.84 tests/s, 7460.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max = 0\n  max_list = []\n  lists.each do |list|\n    sum = 0\n    list.each do |num|\n      sum += num\n    end\n    if sum > max\n      max = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpim6pqclc\nStarted\n.\nFinished in 0.000397286 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2517.08 tests/s, 7551.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_sum_list = []\n  lists.each do |list|\n    sum = 0\n    list.each do |element|\n      sum += element\n    end\n    if sum > max_sum\n      max_sum = sum\n      max_sum_list = list\n    end\n  end\n  max_sum_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpque6v1_q\nStarted\n.\nFinished in 0.000404632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2471.38 tests/s, 7414.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    if list.sum > max_sum\n      max_sum = list.sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf8qeh8qw\nStarted\n.\nFinished in 0.000387865 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2578.22 tests/s, 7734.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    sum = 0\n    list.each do |element|\n      sum += element\n    end\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvz54rbkg\nStarted\n.\nFinished in 0.00039309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2543.95 tests/s, 7631.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = nil\n  lists.each do |list|\n    sum = list.inject(0) { |sum, num| sum + num }\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu4dfhn_y\nStarted\n.\nFinished in 0.00039634 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2523.09 tests/s, 7569.26 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    if list.reduce(:+) > max_sum\n      max_sum = list.reduce(:+)\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3rdyphl0\nStarted\n.\nFinished in 0.000411647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2429.27 tests/s, 7287.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    sum = 0\n    list.each do |num|\n      sum += num\n    end\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqkp1tlpc\nStarted\n.\nFinished in 0.000398133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2511.72 tests/s, 7535.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    sum = 0\n    list.each do |num|\n      sum += num\n    end\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqkp1tlpc\nStarted\n.\nFinished in 0.000398133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2511.72 tests/s, 7535.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  # lists.max_by { |list| list.sum }\n  lists.max_by(&:sum)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph8f8dwjy\nStarted\n.\nFinished in 0.000448259 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2230.85 tests/s, 6692.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    sum = 0\n    list.each do |num|\n      sum += num\n    end\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqkp1tlpc\nStarted\n.\nFinished in 0.000398133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2511.72 tests/s, 7535.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max = 0\n  max_list = []\n  lists.each do |list|\n    sum = 0\n    list.each do |num|\n      sum += num\n    end\n    if sum > max\n      max = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpim6pqclc\nStarted\n.\nFinished in 0.000397286 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2517.08 tests/s, 7551.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    sum = 0\n    list.each do |num|\n      sum += num\n    end\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqkp1tlpc\nStarted\n.\nFinished in 0.000398133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2511.72 tests/s, 7535.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0_xez0es\nStarted\n.\nFinished in 0.000401435 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2491.06 tests/s, 7473.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  max_sum = 0\n  max_list = []\n  lists.each do |list|\n    sum = list.inject(:+)\n    if sum > max_sum\n      max_sum = sum\n      max_list = list\n    end\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp87furq3v\nStarted\n.\nFinished in 0.000393468 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2541.50 tests/s, 7624.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists)\n  lists.max_by { |list| list.reduce(:+) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpdct87\nStarted\n.\nFinished in 0.000372841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2682.11 tests/s, 8046.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}