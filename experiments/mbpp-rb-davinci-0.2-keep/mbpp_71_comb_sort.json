{
  "name": "mbpp_71_comb_sort",
  "language": "rb",
  "prompt": "# Write a function to sort a list of elements.\ndef comb_sort(nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_comb_sort\n    candidate = method(:comb_sort)\n    assert_equal([5, 15, 25, 37, 79], candidate.call([5, 15, 37, 25, 79]))\n    assert_equal([15, 19, 22, 32, 41], candidate.call([41, 32, 15, 19, 22]))\n    assert_equal([13, 15, 47, 99], candidate.call([99, 15, 13, 47]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  gap = nums.length\n  swapped = false\n  until gap == 1 && !swapped\n    gap = (gap / 1.3).floor\n    gap = 1 if gap < 1\n    i = 0\n    swapped = false\n    while i + gap < nums.length\n      if nums[i] > nums[i + gap]\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n      i += 1\n    end\n  end\n  nums\nend",
    "  gap = nums.length\n  swapped = false\n  until gap == 1 && !swapped\n    gap = (gap / 1.247330950103979).floor\n    gap = 1 if gap < 1\n    i = 0\n    swapped = false\n    while i + gap < nums.length\n      if nums[i] > nums[i + gap]\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n      i += 1\n    end\n  end\n  nums\nend",
    "  gap = nums.length\n  swapped = true\n  while gap > 1 || swapped\n    gap = (gap / 1.247330950103979).floor if gap > 1\n    swapped = false\n    0.upto(nums.length - gap - 1) do |i|\n      if nums[i] > nums[i + gap]\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\n  nums\nend",
    "  gap = nums.length\n  swapped = false\n  until gap == 1 && !swapped\n    gap = (gap / 1.3).floor\n    gap = 1 if gap < 1\n    swapped = false\n    0.upto(nums.length - gap - 1) do |i|\n      if nums[i] > nums[i + gap]\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\n  nums\nend",
    "  gap = nums.length\n  swapped = false",
    "  gap = nums.length\n  swapped = true\n  while gap > 1 || swapped\n    gap = (gap / 1.25).floor\n    gap = 1 if gap == 0\n    swapped = false\n    0.upto(nums.length - gap - 1) do |i|\n      if nums[i] > nums[i + gap]\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\n  nums\nend",
    "  gap = nums.length\n  swapped = false\n  while gap > 1 || swapped\n    gap = (gap / 1.247330950103979).floor if gap > 1\n    i = 0\n    swapped = false\n    while i + gap < nums.length\n      if nums[i] > nums[i + gap]\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n      i += 1\n    end\n  end\n  nums\nend",
    "  gap = nums.length\n  swapped = false",
    "  gap = nums.length\n  swapped = false\n  while gap > 1 || swapped\n    gap = (gap / 1.3).floor\n    gap = 1 if gap == 10 || gap == 9\n    i = 0\n    swapped = false\n    while i + gap < nums.length\n      if nums[i] > nums[i + gap]\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n      i += 1\n    end\n  end\n  nums\nend",
    "  gap = nums.length\n  swapped = false\n  while gap > 1 || swapped\n    gap = [1, (gap / 1.247330950103979)].max\n    swapped = false\n    0.upto(nums.length - gap) do |i|\n      if nums[i] > nums[i + gap]\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\n  nums\nend",
    "  gap = nums.length\n  swapped = false\n  until gap == 1 && !swapped\n    gap = (gap/1.3).floor\n    gap = 1 if gap < 1\n    i = 0\n    swapped = false\n    while i + gap < nums.length\n      if nums[i] > nums[i+gap]\n        nums[i], nums[i+gap] = nums[i+gap], nums[i]\n        swapped = true\n      end\n      i += 1\n    end\n  end\n  nums\nend",
    "  gap = nums.length\n  swapped = false\n  until gap == 1 && !swapped\n    gap = (gap / 1.247330950103979).floor\n    gap = 1 if gap < 1\n    i = 0\n    swapped = false\n    while i + gap < nums.length\n      if nums[i] > nums[i + gap]\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n      i += 1\n    end\n  end\n  nums\nend",
    "  gap = nums.length\n  swapped = false\n  until gap == 1 && !swapped\n    gap = (gap / 1.25).floor\n    gap = 1 if gap == 0\n    swapped = false\n    0.upto(nums.length - gap - 1) do |i|\n      if nums[i] > nums[i + gap]\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\n  nums\nend",
    "  gap = nums.length\n  swapped = false\n  while gap > 1 || swapped\n    gap = [1, (gap / 1.3).floor].max\n    swapped = false\n    0.upto(nums.length - gap - 1) do |i|\n      if nums[i] > nums[i + gap]\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\n  nums\nend",
    "  gap = nums.length\n  swapped = false\n  until gap == 1 && !swapped\n    gap = (gap / 1.247330950103979).floor\n    gap = 1 if gap < 1\n    i = 0\n    swapped = false\n    while i + gap < nums.length\n      if nums[i] > nums[i + gap]\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n      i += 1\n    end\n  end\n  nums\nend",
    "  gap = nums.length\n  swapped = false",
    "  gap = nums.length\n  swapped = false",
    "  gap = nums.length\n  swapped = false\n  until gap == 1 && !swapped\n    gap = (gap / 1.247330950103979).floor\n    gap = 1 if gap < 1\n    i = 0\n    swapped = false\n    while i + gap < nums.length\n      if nums[i] > nums[i + gap]\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n      i += 1\n    end\n  end\n  nums\nend",
    "  gap = nums.length\n  swapped = false\n  until gap == 1 && !swapped\n    gap = (gap / 1.247330950103979).floor\n    gap = 1 if gap < 1\n    i = 0\n    swapped = false\n    while i + gap < nums.length\n      if nums[i] > nums[i + gap]\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n      i += 1\n    end\n  end\n  nums\nend",
    "  gap = nums.length\n  swapped = true\n  while gap > 1 || swapped\n    gap = (gap / 1.25).floor\n    gap = 1 if gap == 0\n    i = 0\n    swapped = false\n    while i + gap < nums.length\n      if nums[i] > nums[i + gap]\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n      i += 1\n    end\n  end\n  nums\nend"
  ]
}