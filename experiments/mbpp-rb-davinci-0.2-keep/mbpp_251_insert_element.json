{
  "name": "mbpp_251_insert_element",
  "language": "rb",
  "prompt": "# Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\ndef insert_element(list, element)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_insert_element\n    candidate = method(:insert_element)\n    assert_equal([\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"], candidate.call([\"Red\", \"Green\", \"Black\"], \"c\"))\n    assert_equal([\"program\", \"python\", \"program\", \"java\"], candidate.call([\"python\", \"java\"], \"program\"))\n    assert_equal([\"laugh\", \"happy\", \"laugh\", \"sad\"], candidate.call([\"happy\", \"sad\"], \"laugh\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  new_list = []\n  list.each do |x|\n    new_list << element\n    new_list << x\n  end\n  new_list\nend",
    "  new_list = []\n  list.each do |x|\n    new_list << element\n    new_list << x\n  end\n  new_list\nend",
    "  list.map { |e| [element, e] }.flatten\nend",
    "  list.map { |e| [element, e] }.flatten\nend",
    "  list.map { |e| [element, e] }.flatten(1)\nend",
    "  list.map { |e| [element, e] }.flatten(1)\nend",
    "  new_list = []\n  list.each do |x|\n    new_list << element\n    new_list << x\n  end\n  new_list\nend",
    "  new_list = []\n  list.each do |x|\n    new_list << element\n    new_list << x\n  end\n  new_list\nend",
    "  new_list = []\n  list.each do |x|\n    new_list << element\n    new_list << x\n  end\n  new_list\nend",
    "  new_list = []\n  list.each do |item|\n    new_list << element\n    new_list << item\n  end\n  new_list\nend",
    "  new_list = []\n  list.each do |item|\n    new_list << element\n    new_list << item\n  end\n  new_list\nend",
    "  new_list = []\n  list.each do |x|\n    new_list << element\n    new_list << x\n  end\n  return new_list\nend",
    "  new_list = []\n  list.each do |x|\n    new_list << element\n    new_list << x\n  end\n  new_list\nend",
    "  new_list = []\n  list.each do |x|\n    new_list << element\n    new_list << x\n  end\n  return new_list\nend",
    "  new_list = []\n  list.each do |i|\n    new_list << element\n    new_list << i\n  end\n  new_list\nend",
    "  new_list = []\n  list.each do |x|\n    new_list << element\n    new_list << x\n  end\n  new_list\nend",
    "  list.map { |e| [element, e] }.flatten(1)\nend",
    "  new_list = []\n  list.each do |x|\n    new_list << element\n    new_list << x\n  end\n  new_list\nend",
    "  new_list = []\n  list.each do |x|\n    new_list << element\n    new_list << x\n  end\n  return new_list\nend",
    "  new_list = []\n  list.each do |x|\n    new_list << element\n    new_list << x\n  end\n  new_list\nend"
  ]
}