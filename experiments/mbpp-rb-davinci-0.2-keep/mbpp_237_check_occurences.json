{
  "name": "mbpp_237_check_occurences",
  "language": "rb",
  "prompt": "# Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\ndef check_occurences(test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_occurences\n    candidate = method(:check_occurences)\n    assert_equal({[1, 3] => 2, [2, 5] => 2, [3, 6] => 1}, candidate.call([[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]))\n    assert_equal({[2, 4] => 2, [3, 6] => 2, [4, 7] => 1}, candidate.call([[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]]))\n    assert_equal({[2, 13] => 1, [11, 23] => 1, [12, 25] => 2, [16, 23] => 1}, candidate.call([[13, 2], [11, 23], [12, 25], [25, 12], [16, 23]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # create a hash to store the unique tuples and their occurences\n  occurences = Hash.new(0)\n  # iterate over the list of tuples\n  test_list.each do |tuple|\n    # increment the occurences of the tuple by 1\n    occurences[tuple] += 1\n  end\n  # return the occurences hash\n  occurences\nend",
    "  # Write your code here!\n  test_list.inject(Hash.new(0)) { |h,v| h[v] += 1; h }\nend",
    "  test_list.each_with_object(Hash.new(0)) { |tuple, counts| counts[tuple] += 1 }\nend",
    "  dict = Hash.new(0)\n  test_list.each do |tuple|\n    dict[tuple] += 1\n  end\n  dict\nend",
    "  test_list.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\nend",
    "  test_list.uniq.map { |e| [e, test_list.count(e)] }.to_h\nend",
    "  test_list.each_with_object(Hash.new(0)) { |tuple, counts| counts[tuple] += 1 }\nend",
    "  # create a hash to store the key value pairs\n  occurences = Hash.new(0)\n  # iterate through the list\n  test_list.each do |tuple|\n    # add the tuple to the hash as a key and increment the value\n    occurences[tuple] += 1\n  end\n  # return the hash\n  return occurences\nend",
    "  test_list.each_with_object(Hash.new(0)) { |tuple, counts| counts[tuple] += 1 }\nend",
    "  test_list.each_with_object(Hash.new(0)) { |tuple, counts| counts[tuple] += 1 }\nend",
    "  # Create a hash to store the results\n  results = Hash.new(0)\n  # Iterate through the list\n  test_list.each do |tuple|\n    # Increment the value of the tuple in the hash\n    results[tuple] += 1\n  end\n  # Return the results\n  results\nend",
    "  # create a hash to store the results\n  result_hash = {}\n  # iterate through the list\n  test_list.each do |tuple|\n    # if the tuple is not in the hash, add it and set the value to 1\n    if !result_hash.has_key?(tuple)\n      result_hash[tuple] = 1\n    # if the tuple is in the hash, increment the value by 1\n    else\n      result_hash[tuple] += 1\n    end\n  end\n  # return the hash\n  return result_hash\nend",
    "  # create a hash to store the unique tuples\n  unique_tuples = Hash.new(0)\n  # iterate through the list of tuples\n  test_list.each do |tuple|\n    # add the tuple to the hash if it does not exist\n    if !unique_tuples.has_key?(tuple)\n      unique_tuples[tuple] = 0\n    end\n    # increment the value of the tuple\n    unique_tuples[tuple] += 1\n  end\n  # return the hash\n  return unique_tuples\nend",
    "  test_list.each_with_object(Hash.new(0)) { |tuple, hash| hash[tuple] += 1 }\nend",
    "  test_list.each_with_object(Hash.new(0)) { |word,counts| counts[word] += 1 }\nend",
    "  test_list.each_with_object(Hash.new(0)) { |tuple, hash| hash[tuple] += 1 }\nend",
    "  test_list.each_with_object(Hash.new(0)) { |item, hash| hash[item] += 1 }\nend",
    "  test_list.each_with_object(Hash.new(0)) { |tuple, counts| counts[tuple] += 1 }\nend",
    "  test_list.each_with_object(Hash.new(0)) { |tuple, counts| counts[tuple] += 1 }\nend",
    "  # create a hash to store the tuples and their occurences\n  occurences = Hash.new(0)\n  # iterate through the list\n  test_list.each do |tuple|\n    # add the tuple to the hash and increment the value by 1\n    occurences[tuple] += 1\n  end\n  # return the hash\n  occurences\nend"
  ]
}