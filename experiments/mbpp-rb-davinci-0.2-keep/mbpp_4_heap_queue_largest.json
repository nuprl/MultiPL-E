{
  "name": "mbpp_4_heap_queue_largest",
  "language": "rb",
  "prompt": "# Write a function to find the n largest integers from a given list of numbers, returned in descending order.\ndef heap_queue_largest(nums, n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_heap_queue_largest\n    candidate = method(:heap_queue_largest)\n    assert_equal([85, 75, 65], candidate.call([25, 35, 22, 85, 14, 65, 75, 22, 58], 3))\n    assert_equal([85, 75], candidate.call([25, 35, 22, 85, 14, 65, 75, 22, 58], 2))\n    assert_equal([85, 75, 65, 58, 35], candidate.call([25, 35, 22, 85, 14, 65, 75, 22, 58], 5))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  nums.sort.reverse[0...n]\nend",
    "  # heapify the array\n  heapify(nums)\n  # pop off the first n elements\n  n.times do\n    nums.pop\n  end\n  # return the array\n  nums\nend",
    "  return [] if nums.empty? || n <= 0\n  nums.sort.reverse[0...n]\nend",
    "  # TODO\nend",
    "  nums.sort.reverse[0...n]\nend",
    "  heap = BinaryMinHeap.new\n  nums.each do |num|\n    heap.push(num)\n    heap.extract if heap.store.length > n\n  end\n  heap.store.sort.reverse\nend",
    "  # TODO\nend",
    "  heap = Heap.new(nums)\n  heap.heap_sort\n  heap.heap_sort.reverse[0..n-1]\nend",
    "  heap = BinaryMinHeap.new\n  nums.each do |num|\n    heap.push(num)\n    heap.extract if heap.store.length > n\n  end\n  heap.store.sort.reverse\nend",
    "  heap = BinaryMinHeap.new\n  nums.each do |num|\n    heap.push(num)\n    heap.extract if heap.store.length > n\n  end\n  heap.store.sort.reverse\nend",
    "  heap = BinaryMinHeap.new\n  nums.each do |num|\n    heap.push(num)\n  end\n  result = []\n  n.times do\n    result << heap.extract\n  end\n  result\nend",
    "  heap = MinHeap.new\n  nums.each do |num|\n    heap.insert(num)\n    heap.extract if heap.size > n\n  end\n  heap.store.sort.reverse\nend",
    "  heap = BinaryMinHeap.new\n  nums.each do |num|\n    heap.push(num)\n    heap.extract if heap.store.length > n\n  end\n  heap.store.sort.reverse\nend",
    "  heap = BinaryMinHeap.new\n  nums.each do |num|\n    heap.push(num)\n    heap.extract if heap.store.length > n\n  end\n  heap.store.sort.reverse\nend",
    "  nums.sort.reverse.take(n)\nend",
    "  heap = BinaryMinHeap.new\n  nums.each do |num|\n    heap.push(num)\n    heap.extract if heap.store.length > n\n  end\n  heap.store.sort.reverse\nend",
    "  # TODO\nend",
    "  # create a new heap queue\n  heap_queue = HeapQueue.new\n  # add each number to the heap queue\n  nums.each do |num|\n    heap_queue.insert(num)\n  end\n  # create an empty array to hold the largest numbers\n  largest_nums = []\n  # remove the largest number from the heap queue n times\n  n.times do\n    largest_nums << heap_queue.remove\n  end\n  # return the largest numbers in descending order\n  largest_nums.reverse\nend",
    "  # create a new heap\n  heap = Heap.new",
    "  # create a new heap\n  heap = Heap.new\n  # add each number to the heap\n  nums.each do |num|\n    heap.insert(num)\n  end\n  # create an empty array\n  result = []\n  # remove the largest n numbers from the heap and add them to the array\n  n.times do\n    result << heap.remove\n  end\n  # return the array\n  result\nend"
  ]
}