{
  "name": "mbpp_290_max_length",
  "language": "rb",
  "prompt": "# Write a function to find the list of maximum length in a list of lists.\ndef max_length(list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_length\n    candidate = method(:max_length)\n    assert_equal([3, [13, 15, 17]], candidate.call([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))\n    assert_equal([4, [10, 12, 14, 15]], candidate.call([[1], [5, 7], [10, 12, 14, 15]]))\n    assert_equal([3, [15, 20, 25]], candidate.call([[5], [15, 20, 25]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by {|x| x.length}\nend",
    "  max_length = 0\n  list1.each do |list|\n    if list.length > max_length\n      max_length = list.length\n    end\n  end\n  return max_length\nend",
    "  max_length = 0\n  list1.each do |list|\n    if list.length > max_length\n      max_length = list.length\n    end\n  end\n  max_length\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by {|x| x.length}\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by {|x| x.length}\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend",
    "  max = list1[0].length\n  list1.each do |list|\n    if list.length > max\n      max = list.length\n    end\n  end\n  max\nend",
    "  list1.max_by { |x| x.length }\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by { |x| x.length }\nend",
    "  list1.max_by { |x| x.length }\nend",
    "  list1.max_by(&:length)\nend",
    "  list1.max_by(&:length)\nend"
  ]
}