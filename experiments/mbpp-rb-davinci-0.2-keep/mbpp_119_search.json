{
  "name": "mbpp_119_search",
  "language": "rb",
  "prompt": "# Write a python function to find the element that appears only once in a sorted array.\ndef search(arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_search\n    candidate = method(:search)\n    assert_equal(3, candidate.call([1, 1, 2, 2, 3]))\n    assert_equal(8, candidate.call([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]))\n    assert_equal(1, candidate.call([1, 2, 2, 3, 3, 4, 4]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  arr.each_with_index do |val, index|\n    return val if arr[index] != arr[index + 1] && arr[index] != arr[index - 1]\n  end\nend",
    "  arr.each_with_index do |num, index|\n    return num if arr[index] != arr[index + 1] && arr[index] != arr[index - 1]\n  end\nend",
    "  arr.each_with_index do |e, i|\n    return e if arr[i] != arr[i+1] && arr[i] != arr[i-1]\n  end\nend",
    "  arr.each_with_index do |e, i|\n    return e if arr[i] != arr[i+1] && arr[i] != arr[i-1]\n  end\nend",
    "  arr.each_with_index do |ele, i|\n    if arr[i] != arr[i+1] && arr[i] != arr[i-1]\n      return arr[i]\n    end\n  end\nend",
    "  arr.each_with_index do |n, i|\n    if arr[i] != arr[i+1] && arr[i] != arr[i-1]\n      return arr[i]\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if mid % 2 == 0\n      if arr[mid] == arr[mid + 1]\n        low = mid + 2\n      else\n        high = mid - 1\n      end\n    else\n      if arr[mid] == arr[mid - 1]\n        low = mid + 1\n      else\n        high = mid - 1\n      end\n    end\n  end\n  arr[low]\nend",
    "  arr.each_with_index do |ele, index|\n    if index == 0\n      return ele if ele != arr[index + 1]\n    elsif index == arr.length - 1\n      return ele if ele != arr[index - 1]\n    else\n      return ele if ele != arr[index - 1] && ele != arr[index + 1]\n    end\n  end\nend",
    "  i = 0\n  while i < arr.length\n    if arr[i] == arr[i+1]\n      i += 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "  arr.each_with_index do |element, index|\n    if arr[index] != arr[index-1] && arr[index] != arr[index+1]\n      return element\n    end\n  end\nend",
    "  l = 0\n  r = arr.length - 1\n  while l <= r\n    mid = (l + r) / 2\n    if mid == 0 || mid == arr.length - 1\n      return arr[mid]\n    end\n    if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]\n      return arr[mid]\n    elsif arr[mid] == arr[mid - 1]\n      if mid % 2 == 0\n        l = mid + 1\n      else\n        r = mid - 1\n      end\n    elsif arr[mid] == arr[mid + 1]\n      if mid % 2 == 0\n        r = mid - 1\n      else\n        l = mid + 1\n      end\n    end\n  end\nend",
    "  arr.each_with_index do |e, i|\n    return e if arr[i] != arr[i+1] && arr[i] != arr[i-1]\n  end\nend",
    "  arr.each do |i|\n    if arr.count(i) == 1\n      return i\n    end\n  end\nend",
    "  arr.each_with_index do |num, index|\n    if arr[index] != arr[index + 1]\n      return num\n    end\n  end\nend",
    "  arr.each_with_index do |num, index|\n    if arr[index] != arr[index + 1] && arr[index] != arr[index - 1]\n      return arr[index]\n    end\n  end\nend",
    "  arr.each_with_index do |e, i|\n    return e if arr[i] != arr[i+1] && arr[i] != arr[i-1]\n  end\nend",
    "  arr.each_with_index do |x, i|\n    if arr[i] != arr[i+1] && arr[i] != arr[i-1]\n      return arr[i]\n    end\n  end\nend",
    "  arr.each_with_index do |element, index|\n    if index == 0\n      return element if element != arr[index + 1]\n    elsif index == arr.length - 1\n      return element if element != arr[index - 1]\n    else\n      return element if element != arr[index - 1] && element != arr[index + 1]\n    end\n  end\nend",
    "  arr.each do |i|\n    if arr.count(i) == 1\n      return i\n    end\n  end\nend",
    "  arr.each_with_index do |num, index|\n    if arr[index] != arr[index + 1] && arr[index] != arr[index - 1]\n      return num\n    end\n  end\nend"
  ]
}