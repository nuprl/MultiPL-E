{
  "name": "mbpp_69_is_sublist",
  "language": "rb",
  "prompt": "# Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_sublist\n    candidate = method(:is_sublist)\n    assert_equal(false, candidate.call([2, 4, 3, 5, 7], [3, 7]))\n    assert_equal(true, candidate.call([2, 4, 3, 5, 7], [4, 3]))\n    assert_equal(false, candidate.call([2, 4, 3, 5, 7], [1, 6]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return true if s.empty?\n  return false if l.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.empty?\n  return true if l.include?(s)\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  l.each_cons(s.size).any? { |x| x == s }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  i = 0\n  while i < l.length\n    if l[i] == s[0]\n      j = 0\n      while j < s.length\n        if l[i + j] != s[j]\n          break\n        end\n        j += 1\n      end\n      if j == s.length\n        return true\n      end\n    end\n    i += 1\n  end\n  return false\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.empty?\n  return true if l.include?(s)\n  is_sublist(l[1..-1], s)\nend",
    "  return false if s.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  l.each_cons(s.length).any? { |x| x == s }\nend",
    "  l.each_cons(s.size).any? { |e| e == s }\nend",
    "  return false if s.empty?\n  return true if l.include?(s)\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.empty?\n  return true if l.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return true if l == s\n  return false if s.empty?\n  return false if l.size < s.size\n  l.each_cons(s.size).any? { |a| a == s }\nend",
    "  if l.include?(s)\n    return true\n  else\n    return false\n  end\nend",
    "  l.each_cons(s.length).to_a.include?(s)\nend",
    "  l.each_cons(s.length).any? { |x| x == s }\nend",
    "  return false if s.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return l.join.include?(s.join)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  l.each_cons(s.length).any? { |x| x == s }\nend",
    "  if l.include?(s[0])\n    l.each_with_index do |x, i|\n      if x == s[0]\n        return true if l[i, s.length] == s\n      end\n    end\n  end\n  false\nend",
    "  return false if s.empty?\n  return true if l == s\n  return false if l.size < s.size\n  l.each_cons(s.size).any? { |a| a == s }\nend",
    "  return false if s.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  l.each_cons(s.length).any? { |sub| sub == s }\nend",
    "  l.each_cons(s.size).any? { |sub| sub == s }\nend",
    "  return true if s.empty?\n  return false if l.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  if l.include?(s)\n    return true\n  else\n    return false\n  end\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.empty?\n  return true if l.include?(s[0]) && l.index(s[0]) == 0 && l[0..s.length-1] == s\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  if l.include?(s[0])\n    l.each_with_index do |e, i|\n      return true if l[i..i+s.length-1] == s\n    end\n  end\n  false\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return true if l == s\n  return false if l.length < s.length\n  return false if l.empty?",
    "  return false if s.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  l.each_cons(s.size).any? { |x| x == s }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  l.each_cons(s.size).any? { |a| a == s }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return true if s.empty?\n  return false if l.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  l.each_cons(s.length).to_a.include?(s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  l.each_cons(s.length).any? { |x| x == s }\nend",
    "  l.each_cons(s.length).any? { |x| x == s }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return true if s.empty?\n  return false if l.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  if s.empty?\n    true\n  elsif l.empty?\n    false\n  elsif l.first == s.first\n    is_sublist(l[1..-1], s[1..-1])\n  else\n    is_sublist(l[1..-1], s)\n  end\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  l.each_cons(s.size).any? { |x| x == s }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  l.each_cons(s.length).any? { |x| x == s }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  l.each_cons(s.size).any? { |x| x == s }\nend",
    "  return true if s.empty?\n  return false if l.empty?\n  return true if l[0..s.length-1] == s\n  is_sublist(l[1..-1], s)\nend",
    "  return false if s.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  l.each_cons(s.size).any? { |a| a == s }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return true if s == []\n  return false if l == []\n  return false if l.length < s.length\n  return true if l[0..s.length-1] == s\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  return false if s.empty?\n  return true if l.include?(s)\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? do |e, i|\n    e == l[i]\n  end\nend",
    "  return true if l == s\n  return false if l.empty?\n  return false if s.empty?\n  return false if l.length < s.length\n  return false if l.first != s.first\n  is_sublist(l[1..-1], s[1..-1])\nend",
    "  l.each_cons(s.length).to_a.include?(s)\nend",
    "  l.each_cons(s.length).any? { |sub| sub == s }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return true if s.empty?\n  return false if l.empty?\n  l.each_cons(s.size).any? { |a| a == s }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return true if s == []\n  return false if l == []\n  return true if l[0..s.length-1] == s\n  is_sublist(l[1..-1], s)\nend",
    "  return true if s.empty?\n  return false if l.empty?\n  l.each_cons(s.size) do |x|\n    return true if x == s\n  end\n  false\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return true if s.empty?\n  return false if l.empty?\n  return true if l.join.include? s.join\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return true if l == s\n  return false if s.empty?\n  return false if l.size < s.size\n  l.each_cons(s.size).any? { |a| a == s }\nend",
    "  return true if s.empty?\n  return false if l.empty?\n  return true if l[0..s.length-1] == s\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  l.each_cons(s.size).any? { |a| a == s }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  l.each_cons(s.size).any? { |a| a == s }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  if l.include?(s)\n    return true\n  else\n    return false\n  end\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return true if s.empty?\n  return false if l.empty?\n  return true if l[0..s.length-1] == s\n  is_sublist(l[1..-1], s)\nend",
    "  return false if s.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  return true if s.empty?\n  return false if l.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  l.each_cons(s.length).any? { |sub| sub == s }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.empty?\n  return true if l.empty?\n  return true if l == s\n  return true if l[0..s.length - 1] == s\n  is_sublist(l[1..-1], s)\nend",
    "  return true if l == s\n  return false if l.empty? || s.empty?\n  return true if l.first == s.first && is_sublist(l[1..-1], s[1..-1])\n  is_sublist(l[1..-1], s)\nend",
    "  return true if s.empty?\n  return false if l.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  l.each_index do |i|\n    return true if l[i] == s[0] && l[i, s.length] == s\n  end\n  false\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.empty?\n  return true if l.include?(s[0])\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  l.each_cons(s.length).to_a.include?(s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return l.join.include?(s.join)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if l.size < s.size\n  l.each_cons(s.size).any? {|a| a == s}\nend",
    "  l.each_cons(s.length).any? { |a| a == s }\nend",
    "  if l.include?(s)\n    return true\n  else\n    return false\n  end\nend",
    "  return false if s.empty?\n  return true if l.include?(s[0]) && l.include?(s[-1])\n  false\nend",
    "  l.each_cons(s.length).any? { |a| a == s }\nend",
    "  return true if l == s\n  return false if l.empty?\n  return false if s.empty?\n  return true if l.first == s.first && is_sublist(l[1..-1], s[1..-1])\n  is_sublist(l[1..-1], s)\nend",
    "  return false if s.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  if l.include?(s)\n    puts \"It's a match\"\n  else\n    puts \"It's gone\"\n  end\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  if l.include?(s[0])\n    index = l.index(s[0])\n    if l[index..index + s.length - 1] == s\n      return true\n    end\n  end\n  return false\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  l.each_cons(s.size) { |x| return true if x == s }\n  false\nend",
    "  l.each_cons(s.size).any? { |a| a == s }\nend",
    "  l.each_cons(s.size).any? { |x| x == s }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  l.each_cons(s.length).include?(s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return true if s.empty?\n  return false if l.empty?\n  l.each_cons(s.size).any? { |a| a == s }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return true if s == []\n  return false if l == []\n  return true if l[0..s.length-1] == s\n  is_sublist(l[1..-1], s)\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return false if s.empty?\n  return true if l == s\n  is_sublist(l[1..-1], s)\nend",
    "  return true if s.empty?\n  return false if l.empty?\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  l.each_cons(s.size).any? { |a| a == s }\nend",
    "  s.each_with_index.all? { |e, i| e == l[i] }\nend",
    "  return true if s == []\n  return false if l == []\n  return true if l.join.include?(s.join)\n  is_sublist(l[1..-1], s)\nend",
    "  l.each_cons(s.size).to_a.include?(s)\nend"
  ]
}