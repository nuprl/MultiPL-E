{
  "name": "mbpp_394_check_distinct",
  "language": "rb",
  "prompt": "# Write a function to check if given tuple contains no duplicates.\ndef check_distinct(test_tup)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_distinct\n    candidate = method(:check_distinct)\n    assert_equal(false, candidate.call([1, 4, 5, 6, 1, 4]))\n    assert_equal(true, candidate.call([1, 4, 5, 6]))\n    assert_equal(true, candidate.call([2, 3, 4, 5, 6]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_tup.uniq == test_tup\nend",
    "  test_tup.uniq.length == test_tup.length\nend",
    "  test_tup.uniq.length == test_tup.length\nend",
    "  test_tup.uniq.length == test_tup.length\nend",
    "  test_tup.uniq.length == test_tup.length\nend",
    "  test_tup.uniq.length == test_tup.length\nend",
    "  test_tup.uniq == test_tup\nend",
    "  test_tup.uniq.length == test_tup.length\nend",
    "  test_tup.uniq == test_tup\nend",
    "  return test_tup.uniq.length == test_tup.length\nend",
    "  test_tup.uniq.length == test_tup.length\nend",
    "  test_tup.uniq == test_tup\nend",
    "  test_tup.uniq.length == test_tup.length\nend",
    "  test_tup.uniq.length == test_tup.length\nend",
    "  test_tup.uniq.length == test_tup.length\nend",
    "  test_tup.uniq.length == test_tup.length\nend",
    "  test_tup.uniq.length == test_tup.length\nend",
    "  return test_tup.uniq == test_tup\nend",
    "  test_tup.uniq.length == test_tup.length\nend",
    "  test_tup.uniq.length == test_tup.length\nend"
  ]
}