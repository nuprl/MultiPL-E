{
  "name": "mbpp_64_subject_marks",
  "language": "rb",
  "prompt": "# Write a function to sort a list of tuples using the second value of each tuple.\ndef subject_marks(subjectmarks)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_subject_marks\n    candidate = method(:subject_marks)\n    assert_equal([[\"Social sciences\", 82], [\"English\", 88], [\"Science\", 90], [\"Maths\", 97]], candidate.call([[\"English\", 88], [\"Science\", 90], [\"Maths\", 97], [\"Social sciences\", 82]]))\n    assert_equal([[\"Social\", 33], [\"Telugu\", 49], [\"Hindhi\", 54]], candidate.call([[\"Telugu\", 49], [\"Hindhi\", 54], [\"Social\", 33]]))\n    assert_equal([[\"Biology\", 45], [\"Physics\", 96], [\"Chemistry\", 97]], candidate.call([[\"Physics\", 96], [\"Chemistry\", 97], [\"Biology\", 45]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  subjectmarks.sort_by {|subject, marks| marks}\nend",
    "  subjectmarks.sort_by {|subject, marks| marks}\nend",
    "  subjectmarks.sort_by { |name, marks| marks }\nend",
    "  subjectmarks.sort_by {|subject, marks| marks}\nend",
    "  subjectmarks.sort_by {|subject, marks| marks}\nend",
    "  subjectmarks.sort_by { |subject, marks| marks }\nend",
    "  subjectmarks.sort_by {|subject, marks| marks}\nend",
    "  subjectmarks.sort_by {|subject, marks| marks}\nend",
    "  subjectmarks.sort_by { |subject, marks| marks }\nend",
    "  subjectmarks.sort_by {|subject, marks| marks}\nend",
    "  subjectmarks.sort_by { |subject, marks| marks }\nend",
    "  subjectmarks.sort_by {|subject, marks| marks}\nend",
    "  subjectmarks.sort_by { |k, v| v }\nend",
    "  subjectmarks.sort_by {|subject, marks| marks}\nend",
    "  subjectmarks.sort_by {|subject, marks| marks}\nend",
    "  subjectmarks.sort_by { |subject, marks| marks }\nend",
    "  subjectmarks.sort_by {|subject, marks| marks}\nend",
    "  subjectmarks.sort_by {|subject, marks| marks}\nend",
    "  subjectmarks.sort_by {|subject, marks| marks}\nend",
    "  subjectmarks.sort_by {|subject, marks| marks}\nend"
  ]
}