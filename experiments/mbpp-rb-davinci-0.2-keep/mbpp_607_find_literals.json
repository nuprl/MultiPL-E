{
  "name": "mbpp_607_find_literals",
  "language": "rb",
  "prompt": "# Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\ndef find_literals(text, pattern)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_literals\n    candidate = method(:find_literals)\n    assert_equal([\"fox\", 16, 19], candidate.call(\"The quick brown fox jumps over the lazy dog.\", \"fox\"))\n    assert_equal([\"crazy\", 16, 21], candidate.call(\"Its been a very crazy procedure right\", \"crazy\"))\n    assert_equal([\"will\", 35, 39], candidate.call(\"Hardest choices required strongest will\", \"will\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  regex = Regexp.new(pattern)\n  match = regex.match(text)\n  if match\n    return match.to_s, match.begin(0), match.end(0)\n  end\n  return nil\nend",
    "  match = text.match(pattern)\n  if match\n    [match[0], match.begin(0), match.end(0)]\n  else\n    nil\n  end\nend",
    "  match = text.match(pattern)\n  if match\n    return match.to_s, match.begin(0), match.end(0)\n  else\n    return nil, nil, nil\n  end\nend",
    "  match = text.match(pattern)\n  if match\n    return match.to_s, match.begin(0), match.end(0)\n  else\n    return nil\n  end\nend",
    "  match = text.match(pattern)\n  if match\n    [match.to_s, match.begin(0), match.end(0)]\n  else\n    []\n  end\nend",
    "  match = text.match(pattern)\n  return match.to_s, match.begin(0), match.end(0)\nend",
    "  match = text.match(pattern)\n  if match\n    return match.to_s, match.begin(0), match.end(0)\n  else\n    return nil\n  end\nend",
    "  match = text.match(pattern)\n  if match\n    return match.to_s, match.begin(0), match.end(0)\n  else\n    return nil, nil, nil\n  end\nend",
    "  match = text.match(pattern)\n  return nil if match.nil?\n  [match[0], match.begin(0), match.end(0)]\nend",
    "  match = text.match(pattern)\n  return match.to_s, match.begin(0), match.end(0)\nend",
    "  match = text.match(pattern)\n  return match.to_s, match.begin(0), match.end(0)\nend",
    "  text.scan(/#{pattern}/)\nend",
    "  match = text.match(pattern)\n  if match\n    return match.to_s, match.begin(0), match.end(0)\n  end\n  return nil\nend",
    "  match = text.match(pattern)\n  if match\n    [match.to_s, match.begin(0), match.end(0)]\n  else\n    nil\n  end\nend",
    "  pattern_regex = Regexp.new(pattern)\n  match = pattern_regex.match(text)\n  if match\n    return match.to_s, match.begin(0), match.end(0)\n  else\n    return nil\n  end\nend",
    "  # TODO: implement\nend",
    "  match = text.match(pattern)\n  return match.to_s, match.begin(0), match.end(0)\nend",
    "  match = pattern.match(text)\n  if match\n    return match.to_s, match.begin(0), match.end(0)\n  else\n    return nil\n  end\nend",
    "  match = /#{pattern}/.match(text)\n  if match\n    [match[0], match.begin(0), match.end(0)]\n  else\n    nil\n  end\nend",
    "  match = text.match(pattern)\n  if match\n    return match.to_s, match.begin(0), match.end(0)\n  else\n    return nil, nil, nil\n  end\nend"
  ]
}