{
  "name": "mbpp_786_right_insertion",
  "language": "rb",
  "prompt": "# Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_insertion\n    candidate = method(:right_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return a.size if a.empty? || a.last < x\n  l, r = 0, a.size - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  # Write your code here.\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      left = mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  # Return the index of the first element in the array that is greater than x.\n  # If all elements are less than or equal to x, return the length of the array.\n  # If the array is empty, return 0.\n  return 0 if a.empty?\n  return a.length if a.all? { |e| e <= x }\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  return a.length if x > a[-1]\n  return 0 if x < a[0]\n  low = 0\n  high = a.length - 1\n  while low < high\n    mid = low + (high - low) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      l = m + 1\n    elsif a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low, high = 0, a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  i = 0\n  while i < a.size && a[i] <= x\n    i += 1\n  end\n  i\nend",
    "  a.bsearch_index { |e| e >= x } || a.size\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      low = mid + 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend"
  ]
}