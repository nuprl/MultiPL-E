{
  "name": "mbpp_786_right_insertion",
  "language": "rb",
  "prompt": "# Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_insertion\n    candidate = method(:right_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return a.size if a.empty? || a.last < x\n  l, r = 0, a.size - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  # Write your code here.\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      left = mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  # Return the index of the first element in the array that is greater than x.\n  # If all elements are less than or equal to x, return the length of the array.\n  # If the array is empty, return 0.\n  return 0 if a.empty?\n  return a.length if a.all? { |e| e <= x }\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  return a.length if x > a[-1]\n  return 0 if x < a[0]\n  low = 0\n  high = a.length - 1\n  while low < high\n    mid = low + (high - low) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      l = m + 1\n    elsif a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low, high = 0, a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  i = 0\n  while i < a.size && a[i] <= x\n    i += 1\n  end\n  i\nend",
    "  a.bsearch_index { |e| e >= x } || a.size\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      low = mid + 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length\n  while low < high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  return a.length if x > a[-1]\n  return 0 if x < a[0]\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      return mid\n    end\n  end\n  return low\nend",
    "  return 0 if a.empty? || x < a[0]\n  return a.length if x > a[-1]",
    "  # TODO\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  return 0 if a.empty?\n  return a.size if x > a.last\n  return 0 if x < a.first",
    "  return a.length if a.empty?\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = left + (right - left) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  # Write your code here\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      left = mid + 1\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      left = mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1",
    "  # Return the index of the first element in the array that is greater than x.\n  # If all elements are less than or equal to x, return the length of the array.\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  return 0 if a.empty?\n  return a.length if a.last < x\n  return 0 if a.first > x\n  return 1 if a.length == 1\n  return 2 if a.length == 2\n  mid = a.length / 2\n  if a[mid] == x\n    return mid\n  elsif a[mid] > x\n    return right_insertion(a[0...mid], x)\n  else\n    return mid + right_insertion(a[mid..-1], x)\n  end\nend",
    "  # return the index of the right insertion point\n  # e.g. [1,2,3,4,5,6,7,8,9,10]\n  # x = 0, return 0\n  # x = 1, return 1\n  # x = 2, return 2\n  # x = 3, return 3\n  # x = 4, return 4\n  # x = 5, return 5\n  # x = 6, return 6\n  # x = 7, return 7\n  # x = 8, return 8\n  # x = 9, return 9\n  # x = 10, return 10\n  # x = 11, return 10\n  # x = 12, return 10\n  # x = 13, return 10\n  # x = 14, return 10\n  # x = 15, return 10\n  # x = 16, return 10\n  # x = 17, return 10\n  # x = 18, return 10\n  # x = 19, return 10\n  # x = 20, return 10\n  # x = 21, return 10\n  # x = 22, return 10\n  # x = 23, return 10\n  # x = 24, return 10\n  # x = 25, return 10\n  # x = 26, return 10\n  # x = 27, return 10\n  # x = 28, return 10\n  # x = 29, return 10\n  # x = 30, return 10\n  # x = 31, return 10\n  # x = 32, return 10\n  # x = 33, return 10\n  # x = 34, return 10\n  # x = 35, return 10\n  # x = 36, return 10\n  # x = 37, return 10\n  # x = 38, return 10\n  # x = 39, return 10\n  # x = 40, return 10\n  # x = 41, return 10\n  # x = 42, return 10\n  # x = 43, return 10\n  # x = 44, return 10\n  # x = 45, return 10\n  # x = 46, return 10\n  # x = 47, return 10\n  # x = 48, return 10\n  # x = 49, return 10\n  # x = 50, return 10\n  # x = 51, return 10\n  # x =",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return a.length if a.empty?\n  return 0 if a[0] > x\n  return a.length if a[-1] < x\n  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  return 0 if a.empty?\n  return a.size if x > a.last\n  return 0 if x < a.first",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return a.length if x > a[-1]\n  return 0 if x < a[0]\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid + 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  lo = 0\n  hi = a.size\n  while lo < hi\n    mid = (lo + hi) / 2\n    if x < a[mid]\n      hi = mid\n    else\n      lo = mid + 1\n    end\n  end\n  lo\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  i = 0\n  while i < a.length && a[i] < x\n    i += 1\n  end\n  i\nend",
    "  return 0 if a.empty?\n  return a.size if x > a.last\n  return 0 if x < a.first",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  i = 0\n  while i < a.length\n    if a[i] > x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  # return the index of the first element in the array that is greater than x\n  # if all elements are less than x, return the length of the array\n  # if the array is empty, return 0\n  return 0 if a.empty?\n  return a.length if a.last < x\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid + 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  # Write your code here\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  # return the index of the first element in the array that is greater than x\n  # if all elements are less than or equal to x, return the length of the array\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    elsif x > a[mid]\n      low = mid + 1\n    else\n      return mid\n    end\n  end\n  return low\nend",
    "  return 0 if a.empty?\n  return a.size if a.last < x",
    "  i = 0\n  while i < a.length\n    if a[i] > x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  return a.size if a.size == 0 || a[-1] <= x\n  left = 0\n  right = a.size - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  right\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return a.length if a.last < x\n  return 0 if a.first > x\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  i = 0\n  while i < a.length && a[i] < x\n    i += 1\n  end\n  i\nend",
    "  a.bsearch_index { |e| e >= x }\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = left + (right - left) / 2\n    if a[mid] == x\n      return mid + 1\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    elsif x > a[mid]\n      low = mid + 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low, high = 0, a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  # return 0 if x <= a[0]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      l = m + 1\n    elsif a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = left + (right - left) / 2\n    if a[mid] == x\n      left = mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  return 0 if a.empty? || x < a[0]\n  return a.size if x > a[-1]",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  lo = 0\n  hi = a.size - 1\n  while lo <= hi\n    mid = lo + (hi - lo) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      lo = mid + 1\n    else\n      hi = mid - 1\n    end\n  end\n  lo\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      left = mid + 1\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.size\n  while l < r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  return a.length if a.empty? || x > a.last\n  return 0 if x < a.first\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid + 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  a.bsearch_index { |e| e >= x } || a.size\nend",
    "  # Write your code here.\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      left = mid + 1\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      l = m + 1\n    elsif a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  # Write your code here\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return a.length if a.last < x\n  return 0 if a.first > x",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      l = m + 1\n    elsif a[m] > x\n      r = m - 1\n    else\n      l = m + 1\n    end\n  end\n  l\nend",
    "  a.bsearch_index { |e| e >= x } || a.size\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  return 0 if a.empty?\n  return a.length if a[-1] < x\n  return a.length - 1 if a[-1] == x\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if a.empty?\n  return a.size if a[-1] < x\n  left = 0\n  right = a.size - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      left = mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  # return the index of the first element in the array that is greater than x\n  # if no such element exists, return the length of the array\n  # if x is greater than all elements in the array, return the length of the array\n  # if x is less than all elements in the array, return 0\n  # if x is equal to an element in the array, return the index of the first element that is equal to x\n  # if x is equal to all elements in the array, return the length of the array\n  # if the array is empty, return 0\n  # if the array is nil, return 0\n  return 0 if a.nil? || a.empty?\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  return a.length if x > a[-1]\n  return 0 if x < a[0]\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      return mid\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  return 0 if a.empty?\n  return a.length if x > a.last",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      return m + 1\n    elsif a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  # return the index of the first element that is greater than x\n  a.each_with_index do |e, i|\n    return i if e > x\n  end\n  return a.length\nend",
    "  # Write your code here.\n  left = 0\n  right = a.length - 1\n  \n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      left = mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  \n  left\nend",
    "  # Return the index of the first element that is greater than x\n  # If all elements are less than or equal to x, return the index of the last element\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      low = mid + 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  # TODO: implement\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  # return nil if a.empty?\n  # return a.length if a.last < x\n  # return 0 if a.first > x\n  # return a.length if a.last == x\n  # return 0 if a.first == x\n  # return a.length if a.last <= x\n  # return 0 if a.first >= x\n  # return a.length if a.last < x\n  # return 0 if a.first > x\n  # return a.length if a.last <= x\n  # return 0 if a.first >= x\n  # return a.length if a.last < x\n  # return 0 if a.first > x\n  # return a.length if a.last <= x\n  # return 0 if a.first >= x\n  # return a.length if a.last < x\n  # return 0 if a.first > x\n  # return a.length if a.last <= x\n  # return 0 if a.first >= x\n  # return a.length if a.last < x\n  # return 0 if a.first > x\n  # return a.length if a.last <= x\n  # return 0 if a.first >= x\n  # return a.length if a.last < x\n  # return 0 if a.first > x\n  # return a.length if a.last <= x\n  # return 0 if a.first >= x\n  # return a.length if a.last < x\n  # return 0 if a.first > x\n  # return a.length if a.last <= x\n  # return 0 if a.first >= x\n  # return a.length if a.last < x\n  # return 0 if a.first > x\n  # return a.length if a.last <= x\n  # return 0 if a.first >= x\n  # return a.length if a.last < x\n  # return 0 if a.first > x\n  # return a.length if a.last <= x\n  # return 0 if a.first >= x\n  # return a.length if a.last < x\n  # return 0 if a.first > x\n  # return a.length if a.last <= x\n  # return 0 if a.first",
    "  lo = 0\n  hi = a.size - 1\n  while lo <= hi\n    mid = lo + (hi - lo) / 2\n    if a[mid] <= x\n      lo = mid + 1\n    else\n      hi = mid - 1\n    end\n  end\n  lo\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    elsif x > a[mid]\n      low = mid + 1\n    else\n      return mid\n    end\n  end\n  return low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      l = m + 1\n    elsif a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return a.size if a.empty? || a.last < x\n  left, right = 0, a.size - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  lo = 0\n  hi = a.length\n  while lo < hi\n    mid = (lo + hi) / 2\n    if x < a[mid]\n      hi = mid\n    else\n      lo = mid + 1\n    end\n  end\n  lo\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  lo = 0\n  hi = a.length - 1\n  while lo <= hi\n    mid = lo + (hi - lo) / 2\n    if a[mid] <= x\n      lo = mid + 1\n    else\n      hi = mid - 1\n    end\n  end\n  lo\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  i = 0\n  j = a.length - 1\n  while i <= j\n    m = (i + j) / 2\n    if a[m] <= x\n      i = m + 1\n    else\n      j = m - 1\n    end\n  end\n  i\nend",
    "  # return 0 if x < a[0]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  return 0 if a.empty?\n  return a.size if a.last < x",
    "  return 0 if a.empty?\n  return a.size if a.last < x\n  left, right = 0, a.size - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  return 0 if a.empty?\n  return a.length if a[-1] < x\n  return a.length - 1 if a[-1] == x\n  return 0 if a[0] > x\n  return 1 if a[0] == x\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid + 1\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend",
    "  a.bsearch_index { |e| e >= x }\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  # Write your code here.\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  # return the index of the first element that is greater than x\n  # if x is greater than all elements, return the length of the array\n  # if x is less than all elements, return 0\n  # if x is equal to an element, return the index of the first element that is equal to x\n  # if x is equal to all elements, return the length of the array\n  # if the array is empty, return 0\n  return 0 if a.empty?\n  return 0 if x < a[0]\n  return a.length if x > a[-1]\n  return a.index(x) if a.include?(x)\n  return a.length if a.all? { |e| e == x }\n  return a.length if x > a[-1]\n  return a.index { |e| e > x }\nend",
    "  return a.length if x > a[-1]\n  return 0 if x < a[0]\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid + 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  # return 0 if a.empty?\n  # return a.length if x > a.last\n  # return 1 if x < a.first\n  #\n  # left = 0\n  # right = a.length - 1\n  #\n  # while left <= right\n  #   mid = (left + right) / 2\n  #   if a[mid] == x\n  #     return mid + 1\n  #   elsif a[mid] > x\n  #     right = mid - 1\n  #   else\n  #     left = mid + 1\n  #   end\n  # end\n  #\n  # return left",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if a.empty? || a[0] > x",
    "  # Write your code here\n  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      l = m + 1\n    elsif a[m] > x\n      r = m - 1\n    else\n      l = m + 1\n    end\n  end\n  l\nend",
    "  return 0 if a.empty?\n  return a.size if x > a.last",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = left + (right - left) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  i = 0\n  while i < a.length && a[i] < x\n    i += 1\n  end\n  i\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low, high = 0, a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low, high = 0, a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  # Write your code here\n  return 0 if a.empty?\n  return a.length if x > a.last\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      left = mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  return a.length if a.last < x\n  return 0 if a.first > x\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid + 1\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  return 0 if a.empty?\n  return a.size if x > a.last\n  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid + 1\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend"
  ]
}