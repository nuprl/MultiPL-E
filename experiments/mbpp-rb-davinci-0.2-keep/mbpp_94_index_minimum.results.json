{
  "name": "mbpp_94_index_minimum",
  "language": "rb",
  "prompt": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpsa_1dpop\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpsa_1dpop.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006030041 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n165.84 tests/s, 165.84 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpf2rx36dp\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpf2rx36dp.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006010394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n166.38 tests/s, 166.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index do |tuple, index|\n    if test_list[index][1] == test_list.min_by { |tuple| tuple[1] }[1]\n      return test_list[index][0]\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo4b5l3dp\nStarted\n.\nFinished in 0.000405072 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2468.70 tests/s, 7406.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpsa_1dpop\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpsa_1dpop.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006030041 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n165.84 tests/s, 165.84 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # your code here\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |tuple, i|\n    if tuple[1] < min\n      min = tuple[1]\n      index = i\n    end\n  end\n  test_list[index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzznw7zcz\nStarted\n.\nFinished in 0.000373176 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2679.70 tests/s, 8039.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.min_by { |tuple| tuple[1] }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd6oytle6\nStarted\n.\nFinished in 0.000434861 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2299.59 tests/s, 6898.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.index(test_list.min_by { |x| x[1] })\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmphtcvpkpm\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmphtcvpkpm.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.0068935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.06 tests/s, 145.06 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # your code here\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp89ckqiri\nStarted\n.\nFinished in 0.000434265 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2302.74 tests/s, 6908.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.min_by { |x| x[1] }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa_ribt4_\nStarted\n.\nFinished in 0.000424167 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2357.56 tests/s, 7072.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |tuple, i|\n    if tuple[1] < min\n      min = tuple[1]\n      index = i\n    end\n  end\n  test_list[index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppxq54epe\nStarted\n.\nFinished in 0.000416855 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2398.92 tests/s, 7196.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |tuple, i|\n    if tuple[1] < min\n      min = tuple[1]\n      index = i\n    end\n  end\n  test_list[index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppxq54epe\nStarted\n.\nFinished in 0.000416855 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2398.92 tests/s, 7196.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |tuple, i|\n    if tuple[1] < min\n      min = tuple[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmpktwvh2ou\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpktwvh2ou.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007031879 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.21 tests/s, 142.21 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # Write your code here\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < min_value\n      min_index = index\n      min_value = tuple[1]\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_4n8g6n0\nStarted\n.\nFinished in 0.000460629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2170.94 tests/s, 6512.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.index(test_list.min_by {|x| x[1]})\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmpshzxrx4v\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpshzxrx4v.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007197532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.94 tests/s, 138.94 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < min\n      min = tuple[1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprcjg94lx\nStarted\n.\nFinished in 0.000410423 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2436.51 tests/s, 7309.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < min_value\n      min_index = index\n      min_value = tuple[1]\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv8akvfa2\nStarted\n.\nFinished in 0.000455003 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2197.79 tests/s, 6593.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmpwecvifxx\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpwecvifxx.rb:15:in `test_index_minimum'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_index_minimum\n     14:     candidate = method(:index_minimum)\n  => 15:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     16:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     17:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     18:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.00674236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.32 tests/s, 148.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.sort_by { |x, y| y }.first[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppm87a3i6\nStarted\n.\nFinished in 0.000481706 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2075.96 tests/s, 6227.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpf2rx36dp\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpf2rx36dp.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006010394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n166.38 tests/s, 166.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < min\n      min = tuple[1]\n      min_index = index\n    end\n  end\n  return test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv5haa2o5\nStarted\n.\nFinished in 0.000425179 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.95 tests/s, 7055.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |tuple, i|\n    if tuple[1] < min\n      min = tuple[1]\n      index = i\n    end\n  end\n  test_list[index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppxq54epe\nStarted\n.\nFinished in 0.000416855 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2398.92 tests/s, 7196.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.min_by { |x| x[1] }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa_ribt4_\nStarted\n.\nFinished in 0.000424167 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2357.56 tests/s, 7072.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] == test_list.map{|tuple| tuple[1]}.min\n      return index\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmpf55khxl4\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpf55khxl4.rb:13:in `test_index_minimum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_index_minimum\n     12:     candidate = method(:index_minimum)\n  => 13:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     14:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     15:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     16:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007005978 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.74 tests/s, 142.74 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < min\n      min = tuple[1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmpw1czng7i\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpw1czng7i.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.00677039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.70 tests/s, 147.70 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index do |tuple, index|\n    if index == 0\n      min_index = index\n      min_value = tuple[1]\n    elsif tuple[1] < min_value\n      min_index = index\n      min_value = tuple[1]\n    end\n  end\n  return min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmpo6_c4056\nStarted\nE\n===============================================================================\nError: test_index_minimum(TestHumanEval): ArgumentError: comparison of Integer with nil failed\n/tmp/tmpo6_c4056.rb:7:in `<'\n/tmp/tmpo6_c4056.rb:7:in `block in index_minimum'\n/tmp/tmpo6_c4056.rb:3:in `each'\n/tmp/tmpo6_c4056.rb:3:in `each_with_index'\n/tmp/tmpo6_c4056.rb:3:in `index_minimum'\n/tmp/tmpo6_c4056.rb:18:in `call'\n/tmp/tmpo6_c4056.rb:18:in `test_index_minimum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_index_minimum\n     17:     candidate = method(:index_minimum)\n  => 18:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     19:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     20:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     21:   end\n===============================================================================\n\nFinished in 0.001324918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n754.76 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpsa_1dpop\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpsa_1dpop.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006030041 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n165.84 tests/s, 165.84 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_value = test_list[0][1]\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < min_value\n      min_value = tuple[1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmph7aewibg\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmph7aewibg.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006518566 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.41 tests/s, 153.41 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.min_by {|x,y| y}[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplirnc069\nStarted\n.\nFinished in 0.000865999 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1154.74 tests/s, 3464.21 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.min_by { |x| x[1] }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa_ribt4_\nStarted\n.\nFinished in 0.000424167 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2357.56 tests/s, 7072.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < min\n      min = tuple[1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmpw1czng7i\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpw1czng7i.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.00677039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.70 tests/s, 147.70 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # your code here\n  min_index = 0\n  test_list.each_with_index do |element, index|\n    if element[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  return test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpeceycebo\nStarted\n.\nFinished in 0.000486064 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2057.34 tests/s, 6172.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.min_by { |tuple| tuple[1] }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd6oytle6\nStarted\n.\nFinished in 0.000434861 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2299.59 tests/s, 6898.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpf2rx36dp\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpf2rx36dp.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006010394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n166.38 tests/s, 166.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index do |tuple, index|\n    return index if test_list.all? { |tuple2| tuple[1] <= tuple2[1] }\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmpjwvdx1nd\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpjwvdx1nd.rb:11:in `test_index_minimum'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_index_minimum\n     10:     candidate = method(:index_minimum)\n  => 11:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     12:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     13:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     14:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.00655324 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.60 tests/s, 152.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.index(test_list.min_by {|x| x[1]})\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmpshzxrx4v\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpshzxrx4v.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007197532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.94 tests/s, 138.94 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < min\n      min = tuple[1]\n      min_index = index\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmpw1czng7i\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpw1czng7i.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.00677039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.70 tests/s, 147.70 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # your code here\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  return test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdk95klrd\nStarted\n.\nFinished in 0.00070415 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1420.15 tests/s, 4260.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpsa_1dpop\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpsa_1dpop.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006030041 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n165.84 tests/s, 165.84 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.map.with_index { |x, i| [i, x[1]] }.min[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmp9yd1wc0m\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp9yd1wc0m.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<0>\n===============================================================================\n\nFinished in 0.007306032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.87 tests/s, 136.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |tuple, i|\n    if tuple[1] < min\n      min = tuple[1]\n      index = i\n    end\n  end\n  test_list[index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppxq54epe\nStarted\n.\nFinished in 0.000416855 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2398.92 tests/s, 7196.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpsa_1dpop\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpsa_1dpop.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006030041 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n165.84 tests/s, 165.84 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpsa_1dpop\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpsa_1dpop.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006030041 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n165.84 tests/s, 165.84 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.index(test_list.min_by { |x| x[1] })\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmphtcvpkpm\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmphtcvpkpm.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.0068935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.06 tests/s, 145.06 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.sort_by { |x| x[1] }[0][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplfp5q4j_\nStarted\n.\nFinished in 0.000449751 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2223.45 tests/s, 6670.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpf2rx36dp\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpf2rx36dp.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006010394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n166.38 tests/s, 166.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.min_by {|x| x[1]}[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcoca8npi\nStarted\n.\nFinished in 0.000546155 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1830.98 tests/s, 5492.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |tuple, i|\n    if tuple[1] < min\n      min = tuple[1]\n      index = i\n    end\n  end\n  test_list[index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppxq54epe\nStarted\n.\nFinished in 0.000416855 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2398.92 tests/s, 7196.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.index(test_list.min_by { |x| x[1] })\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmphtcvpkpm\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmphtcvpkpm.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.0068935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.06 tests/s, 145.06 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  return test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqmywmlrm\nStarted\n.\nFinished in 0.000402036 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.34 tests/s, 7462.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index do |tuple, index|\n    return index if test_list.all? { |tuple2| tuple[1] <= tuple2[1] }\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmpjwvdx1nd\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpjwvdx1nd.rb:11:in `test_index_minimum'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_index_minimum\n     10:     candidate = method(:index_minimum)\n  => 11:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     12:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     13:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     14:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.00655324 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.60 tests/s, 152.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.min_by { |x| x[1] }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa_ribt4_\nStarted\n.\nFinished in 0.000424167 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2357.56 tests/s, 7072.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpsa_1dpop\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpsa_1dpop.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006030041 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n165.84 tests/s, 165.84 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.sort_by { |x| x[1] }.first[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpavkrs1rg\nStarted\n.\nFinished in 0.000399399 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2503.76 tests/s, 7511.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] == test_list.min_by { |tuple| tuple[1] }[1]\n      return index\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123719,
      "stdout": "Loaded suite /tmp/tmpuznc0we0\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpuznc0we0.rb:13:in `test_index_minimum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_index_minimum\n     12:     candidate = method(:index_minimum)\n  => 13:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     14:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     15:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     16:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006051571 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n165.25 tests/s, 165.25 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |tuple, i|\n    if tuple[1] < min\n      min = tuple[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmpktwvh2ou\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpktwvh2ou.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007031879 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.21 tests/s, 142.21 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpf2rx36dp\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpf2rx36dp.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006010394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n166.38 tests/s, 166.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpf2rx36dp\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpf2rx36dp.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006010394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n166.38 tests/s, 166.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.index(test_list.min_by { |x| x[1] })\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmphtcvpkpm\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmphtcvpkpm.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.0068935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.06 tests/s, 145.06 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # test_list.index(test_list.min_by { |x| x[1] })\n  test_list.index(test_list.min_by(&:last))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123719,
      "stdout": "Loaded suite /tmp/tmpvjr_cz4l\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpvjr_cz4l.rb:10:in `test_index_minimum'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_index_minimum\n      9:     candidate = method(:index_minimum)\n  => 10:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     11:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     12:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     13:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.011891208 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n84.10 tests/s, 84.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list.first[1]\n  index = 0\n  test_list.each_with_index do |tuple, i|\n    if tuple[1] < min\n      min = tuple[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123719,
      "stdout": "Loaded suite /tmp/tmpu6hvetrf\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpu6hvetrf.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.00764558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.79 tests/s, 130.79 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, i|\n    if tuple[1] < test_list[min_index][1]\n      min_index = i\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3sec0yoc\nStarted\n.\nFinished in 0.000394626 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2534.04 tests/s, 7602.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpf2rx36dp\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpf2rx36dp.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006010394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n166.38 tests/s, 166.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpf2rx36dp\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpf2rx36dp.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006010394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n166.38 tests/s, 166.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.min_by { |x| x[1] }[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa_ribt4_\nStarted\n.\nFinished in 0.000424167 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2357.56 tests/s, 7072.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.index(test_list.min_by {|x| x[1]})\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmpshzxrx4v\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpshzxrx4v.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007197532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.94 tests/s, 138.94 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index do |tuple, index|\n    return index if test_list.all? { |tuple2| tuple[1] <= tuple2[1] }\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmpjwvdx1nd\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpjwvdx1nd.rb:11:in `test_index_minimum'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_index_minimum\n     10:     candidate = method(:index_minimum)\n  => 11:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     12:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     13:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     14:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.00655324 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.60 tests/s, 152.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.index(test_list.min_by {|x| x[1]})\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmpshzxrx4v\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpshzxrx4v.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007197532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.94 tests/s, 138.94 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpsa_1dpop\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpsa_1dpop.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006030041 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n165.84 tests/s, 165.84 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |tuple, i|\n    if tuple[1] < min\n      min = tuple[1]\n      index = i\n    end\n  end\n  index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmpktwvh2ou\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpktwvh2ou.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007031879 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.21 tests/s, 142.21 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # your code here\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |tuple, i|\n    if tuple[1] < min\n      min = tuple[1]\n      index = i\n    end\n  end\n  return test_list[index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkyvn65nv\nStarted\n.\nFinished in 0.000433654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.99 tests/s, 6917.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  min_value = test_list[0][1]\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < min_value\n      min_index = index\n      min_value = tuple[1]\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv8akvfa2\nStarted\n.\nFinished in 0.000455003 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2197.79 tests/s, 6593.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < min\n      min = tuple[1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprcjg94lx\nStarted\n.\nFinished in 0.000410423 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2436.51 tests/s, 7309.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpf2rx36dp\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpf2rx36dp.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006010394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n166.38 tests/s, 166.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "Loaded suite /tmp/tmpaqmq66_c\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpaqmq66_c.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.010082983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.18 tests/s, 99.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min = test_list[0][1]\n  min_index = 0\n  test_list.each_with_index do |tup, i|\n    if tup[1] < min\n      min = tup[1]\n      min_index = i\n    end\n  end\n  min_index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123719,
      "stdout": "Loaded suite /tmp/tmpfke52kiu\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpfke52kiu.rb:17:in `test_index_minimum'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_index_minimum\n     16:     candidate = method(:index_minimum)\n  => 17:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     18:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     19:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     20:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006460761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n154.78 tests/s, 154.78 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  minimum = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |tuple, i|\n    if tuple[1] < minimum\n      minimum = tuple[1]\n      index = i\n    end\n  end\n  test_list[index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp735zavde\nStarted\n.\nFinished in 0.000427969 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2336.62 tests/s, 7009.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp12_gqiiv\nStarted\n.\nFinished in 0.000379563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2634.61 tests/s, 7903.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index.min.last\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123719,
      "stdout": "Loaded suite /tmp/tmpb1lnxp3r\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmpb1lnxp3r.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<1>\n===============================================================================\n\nFinished in 0.006382785 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n156.67 tests/s, 156.67 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.index(test_list.min_by { |x| x[1] })\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123718,
      "stdout": "Loaded suite /tmp/tmphtcvpkpm\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmphtcvpkpm.rb:9:in `test_index_minimum'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_index_minimum\n      8:     candidate = method(:index_minimum)\n  =>  9:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     10:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     11:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     12:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.0068935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.06 tests/s, 145.06 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1665510293,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgr25pnwi\nStarted\n.\nFinished in 0.000397723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2514.31 tests/s, 7542.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] == test_list.min_by {|tuple| tuple[1]}[1]\n      return index\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123719,
      "stdout": "Loaded suite /tmp/tmp5bsbhhbp\nStarted\nF\n===============================================================================\nFailure: test_index_minimum(TestHumanEval)\n/tmp/tmp5bsbhhbp.rb:13:in `test_index_minimum'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_index_minimum\n     12:     candidate = method(:index_minimum)\n  => 13:     assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n     14:     assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n     15:     assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n     16:   end\n<\"Varsha\"> expected but was\n<2>\n===============================================================================\n\nFinished in 0.013066837 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n76.53 tests/s, 76.53 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n  index = 0\n  min = test_list[0][1]\n  test_list.each_with_index do |tuple, i|\n    if tuple[1] < min\n      min = tuple[1]\n      index = i\n    end\n  end\n  return test_list[index][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkap9qi3x\nStarted\n.\nFinished in 0.000463401 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2157.96 tests/s, 6473.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}