{
  "name": "mbpp_249_intersection_array",
  "language": "rb",
  "prompt": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpudvzul4h\nStarted\n.\nFinished in 0.000598647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1670.43 tests/s, 5011.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  # array_nums1 & array_nums2\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123259,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdg0e2uhk\nStarted\n.\nFinished in 0.000444741 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2248.50 tests/s, 6745.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  result = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      result << num\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123259,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8zfqcn65\nStarted\n.\nFinished in 0.000390464 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2561.06 tests/s, 7683.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  # Write your code here\n  intersection = []\n  array_nums1.each do |num1|\n    array_nums2.each do |num2|\n      if num1 == num2\n        intersection << num1\n      end\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpg_ta7zh5\nStarted\n.\nFinished in 0.000412519 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2424.13 tests/s, 7272.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpudvzul4h\nStarted\n.\nFinished in 0.000598647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1670.43 tests/s, 5011.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num1|\n    array_nums2.each do |num2|\n      if num1 == num2\n        intersection_array << num1\n      end\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123259,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp39s_jiia\nStarted\n.\nFinished in 0.000461637 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2166.20 tests/s, 6498.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpudvzul4h\nStarted\n.\nFinished in 0.000598647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1670.43 tests/s, 5011.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  # Write your code here\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjysxp487\nStarted\n.\nFinished in 0.00043848 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2280.61 tests/s, 6841.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpudvzul4h\nStarted\n.\nFinished in 0.000598647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1670.43 tests/s, 5011.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  # Write your code here.\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123259,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl28ot70e\nStarted\n.\nFinished in 0.000401478 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2490.80 tests/s, 7472.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpudvzul4h\nStarted\n.\nFinished in 0.000598647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1670.43 tests/s, 5011.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    intersection << num if array_nums2.include?(num)\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp641q6fzi\nStarted\n.\nFinished in 0.000400317 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2498.02 tests/s, 7494.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  hash_nums1 = {}\n  array_nums1.each do |num|\n    hash_nums1[num] = true\n  end\n  intersection = []\n  array_nums2.each do |num|\n    if hash_nums1[num]\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123259,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9qsm8v2d\nStarted\n.\nFinished in 0.000477633 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2093.66 tests/s, 6280.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpudvzul4h\nStarted\n.\nFinished in 0.000598647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1670.43 tests/s, 5011.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpudvzul4h\nStarted\n.\nFinished in 0.000598647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1670.43 tests/s, 5011.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  # Write your code here\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1666123258,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjysxp487\nStarted\n.\nFinished in 0.00043848 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2280.61 tests/s, 6841.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpudvzul4h\nStarted\n.\nFinished in 0.000598647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1670.43 tests/s, 5011.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1.select { |num| array_nums2.include?(num) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpudvzul4h\nStarted\n.\nFinished in 0.000598647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1670.43 tests/s, 5011.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection_array = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection_array << num\n    end\n  end\n  intersection_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09k7_kuf\nStarted\n.\nFinished in 0.000377093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2651.87 tests/s, 7955.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  intersection = []\n  array_nums1.each do |num|\n    if array_nums2.include?(num)\n      intersection << num\n    end\n  end\n  intersection\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj113rf10\nStarted\n.\nFinished in 0.000572527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.64 tests/s, 5239.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n  array_nums1 & array_nums2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwerq3uhj\nStarted\n.\nFinished in 0.000402139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2486.70 tests/s, 7460.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}