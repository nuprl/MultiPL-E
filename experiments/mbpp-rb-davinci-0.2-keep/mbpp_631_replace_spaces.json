{
  "name": "mbpp_631_replace_spaces",
  "language": "rb",
  "prompt": "# Write a function to replace whitespaces with an underscore and vice versa in a given string.\ndef replace_spaces(text)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_replace_spaces\n    candidate = method(:replace_spaces)\n    assert_equal(\"Jumanji_The_Jungle\", candidate.call(\"Jumanji The Jungle\"))\n    assert_equal(\"The Avengers\", candidate.call(\"The_Avengers\"))\n    assert_equal(\"Fast_and_Furious\", candidate.call(\"Fast and Furious\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.tr(' ', '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(\" \", \"_\").gsub(\"_\", \" \")\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub!(/\\s/, '_')\n  text.gsub!(/_/, ' ')\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, \"_\")\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, \"_\")\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(' ', '_').gsub('_', ' ')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.tr(' ', '_').tr('_', ' ')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.tr(\" \", \"_\")\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s+/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend",
    "  text.gsub(/\\s/, '_')\nend"
  ]
}