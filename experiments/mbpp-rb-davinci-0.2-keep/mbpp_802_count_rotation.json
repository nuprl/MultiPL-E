{
  "name": "mbpp_802_count_rotation",
  "language": "rb",
  "prompt": "# Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\ndef count_rotation(arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_rotation\n    candidate = method(:count_rotation)\n    assert_equal(1, candidate.call([3, 2, 1]))\n    assert_equal(2, candidate.call([4, 5, 1, 2, 3]))\n    assert_equal(3, candidate.call([7, 8, 9, 1, 2, 3]))\n    assert_equal(0, candidate.call([1, 2, 3]))\n    assert_equal(2, candidate.call([1, 3, 2]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  arr.each_with_index do |ele, index|\n    if arr[index] > arr[index + 1]\n      return index + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  min = arr[0]\n  min_index = 0\n  for i in 1..n-1\n    if arr[i] < min\n      min = arr[i]\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1",
    "  count = 0\n  for i in 0..arr.length-1\n    if arr[i] > arr[i+1]\n      count = i+1\n      break\n    end\n  end\n  return count\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  count = 0\n  for i in 0..n-1\n    if arr[i] > arr[(i+1)%n]\n      count = i+1\n      break\n    end\n  end\n  count\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  min = arr[0]\n  min_index = 0\n  arr.each_with_index do |ele, index|\n    if ele < min\n      min = ele\n      min_index = index\n    end\n  end\n  min_index\nend",
    "  count = 0\n  for i in 0..arr.length-1\n    if arr[i] > arr[i+1]\n      count = i+1\n      break\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0...arr.length\n    if arr[i] > arr[i+1]\n      count = i+1\n      break\n    end\n  end\n  return count\nend",
    "  n = arr.length\n  for i in 0..n-1\n    if arr[i] > arr[i+1]\n      return i+1\n    end\n  end\n  return 0\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  min = arr[0]\n  min_index = 0\n  for i in 0...n\n    if arr[i] < min\n      min = arr[i]\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "  low = 0\n  high = arr.length - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % arr.length\n    prev = (mid + arr.length - 1) % arr.length\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend",
    "  n = arr.length\n  low = 0\n  high = n - 1\n  while low <= high\n    if arr[low] <= arr[high]\n      return low\n    end\n    mid = (low + high) / 2\n    next_ = (mid + 1) % n\n    prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next_] && arr[mid] <= arr[prev]\n      return mid\n    elsif arr[mid] <= arr[high]\n      high = mid - 1\n    elsif arr[mid] >= arr[low]\n      low = mid + 1\n    end\n  end\nend"
  ]
}