{
  "name": "mbpp_120_max_product_tuple",
  "language": "rb",
  "prompt": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple.reduce(:*) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphozty73b\nStarted\n.\nFinished in 0.000467558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2138.77 tests/s, 6416.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk981s1e7\nStarted\n.\nFinished in 0.000513075 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1949.03 tests/s, 5847.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |x, y| x * y }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppq_9lzcf\nStarted\n.\nFinished in 0.000440543 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2269.93 tests/s, 6809.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |x| x[0] * x[1] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp95al2t43\nStarted\n.\nFinished in 0.000455649 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2194.67 tests/s, 6584.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map {|x| x[0] * x[1]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqhwj6h8q\nStarted\n.\nFinished in 0.000451585 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2214.42 tests/s, 6643.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map {|x,y| (x-y).abs}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmp7hw0r4ct\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp7hw0r4ct.rb:9:in `test_max_product_tuple'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_product_tuple\n      8:     candidate = method(:max_product_tuple)\n  =>  9:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     10:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     11:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     12:   end\n<36> expected but was\n<7>\n===============================================================================\n\nFinished in 0.009459798 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n105.71 tests/s, 105.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy3sn41_v\nStarted\n.\nFinished in 0.000697321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1434.06 tests/s, 4302.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple[0] * tuple[1] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4csk2cg2\nStarted\n.\nFinished in 0.000623877 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1602.88 tests/s, 4808.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      if product > max_product\n        max_product = product\n      end\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmp3_rvkfqe\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp3_rvkfqe.rb:18:in `test_max_product_tuple'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_max_product_tuple\n     17:     candidate = method(:max_product_tuple)\n  => 18:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     19:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     20:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     21:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.00607771 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.54 tests/s, 164.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |x| x.inject(:*) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp54dus_jt\nStarted\n.\nFinished in 0.000403076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2480.92 tests/s, 7442.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmpwcvmhdah\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpwcvmhdah.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.009291654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.62 tests/s, 107.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy3sn41_v\nStarted\n.\nFinished in 0.000697321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1434.06 tests/s, 4302.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    max_product = product if product > max_product\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv8or2p8d\nStarted\n.\nFinished in 0.000466582 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2143.25 tests/s, 6429.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map{|x| x[0] * x[1]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuej6b0ie\nStarted\n.\nFinished in 0.000453278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2206.15 tests/s, 6618.45 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmpwcvmhdah\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpwcvmhdah.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.009291654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.62 tests/s, 107.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy3sn41_v\nStarted\n.\nFinished in 0.000697321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1434.06 tests/s, 4302.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple.inject(:*) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdcpm8jte\nStarted\n.\nFinished in 0.000500609 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1997.57 tests/s, 5992.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple[0] * tuple[1] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4csk2cg2\nStarted\n.\nFinished in 0.000623877 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1602.88 tests/s, 4808.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |x, y| x * y }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppq_9lzcf\nStarted\n.\nFinished in 0.000440543 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2269.93 tests/s, 6809.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each_with_index do |tuple1, index1|\n    list1.each_with_index do |tuple2, index2|\n      if index2 > index1\n        product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n        max_product = product if product > max_product\n      end\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmp4d9a6ay_\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp4d9a6ay_.rb:18:in `test_max_product_tuple'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_max_product_tuple\n     17:     candidate = method(:max_product_tuple)\n  => 18:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     19:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     20:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     21:   end\n<36> expected but was\n<76>\n\ndiff:\n? 36\n? 7 \n? ? \n===============================================================================\n\nFinished in 0.007716014 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.60 tests/s, 129.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple.inject(:*) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdcpm8jte\nStarted\n.\nFinished in 0.000500609 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1997.57 tests/s, 5992.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk981s1e7\nStarted\n.\nFinished in 0.000513075 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1949.03 tests/s, 5847.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple[0] * tuple[1] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4csk2cg2\nStarted\n.\nFinished in 0.000623877 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1602.88 tests/s, 4808.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map {|x,y| x*y}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcyofnhg2\nStarted\n.\nFinished in 0.000500095 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1999.62 tests/s, 5998.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmpwcvmhdah\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpwcvmhdah.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.009291654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.62 tests/s, 107.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map{|x,y| x*y}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8kl_59ga\nStarted\n.\nFinished in 0.00048991 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2041.19 tests/s, 6123.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk981s1e7\nStarted\n.\nFinished in 0.000513075 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1949.03 tests/s, 5847.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = (tuple1[0] - tuple2[0]).abs * (tuple1[1] - tuple2[1]).abs\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmptew5ovmz\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmptew5ovmz.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<6>\n\ndiff:\n? 36\n===============================================================================\n\nFinished in 0.007520123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.98 tests/s, 132.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = (tuple1[0] - tuple2[0]).abs * (tuple1[1] - tuple2[1]).abs\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmptew5ovmz\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmptew5ovmz.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<6>\n\ndiff:\n? 36\n===============================================================================\n\nFinished in 0.007520123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.98 tests/s, 132.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map{|x| x[0]*x[1]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwpk7az3p\nStarted\n.\nFinished in 0.000554867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1802.23 tests/s, 5406.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |x| x[0] * x[1] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp95al2t43\nStarted\n.\nFinished in 0.000455649 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2194.67 tests/s, 6584.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each_with_index do |tuple1, index1|\n    list1.each_with_index do |tuple2, index2|\n      next if index1 == index2\n      product = tuple1[0] * tuple2[0]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmphoy6nqb9\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmphoy6nqb9.rb:17:in `test_max_product_tuple'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_max_product_tuple\n     16:     candidate = method(:max_product_tuple)\n  => 17:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     18:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     19:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     20:   end\n<36> expected but was\n<8>\n===============================================================================\n\nFinished in 0.012504719 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n79.97 tests/s, 79.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each_with_index do |tuple1, index1|\n    list1.each_with_index do |tuple2, index2|\n      if index2 > index1\n        product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n        max_product = product if product > max_product\n      end\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmp4d9a6ay_\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp4d9a6ay_.rb:18:in `test_max_product_tuple'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_max_product_tuple\n     17:     candidate = method(:max_product_tuple)\n  => 18:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     19:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     20:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     21:   end\n<36> expected but was\n<76>\n\ndiff:\n? 36\n? 7 \n? ? \n===============================================================================\n\nFinished in 0.007716014 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.60 tests/s, 129.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy3sn41_v\nStarted\n.\nFinished in 0.000697321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1434.06 tests/s, 4302.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmpwcvmhdah\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpwcvmhdah.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.009291654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.62 tests/s, 107.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map{|x| x.inject(:*)}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr9qjybe8\nStarted\n.\nFinished in 0.000490604 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2038.30 tests/s, 6114.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each_with_index do |tuple1, index1|\n    list1.each_with_index do |tuple2, index2|\n      next if index1 == index2\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmpnpallxvi\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpnpallxvi.rb:17:in `test_max_product_tuple'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_max_product_tuple\n     16:     candidate = method(:max_product_tuple)\n  => 17:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     18:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     19:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     20:   end\n<36> expected but was\n<76>\n\ndiff:\n? 36\n? 7 \n? ? \n===============================================================================\n\nFinished in 0.007155573 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.75 tests/s, 139.75 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmpwcvmhdah\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpwcvmhdah.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.009291654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.62 tests/s, 107.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxi48zsym\nStarted\n.\nFinished in 0.000492239 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2031.53 tests/s, 6094.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk981s1e7\nStarted\n.\nFinished in 0.000513075 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1949.03 tests/s, 5847.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy3sn41_v\nStarted\n.\nFinished in 0.000697321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1434.06 tests/s, 4302.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each_with_index do |tuple1, index1|\n    list1.each_with_index do |tuple2, index2|\n      if index2 > index1\n        product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n        max_product = product if product > max_product\n      end\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmp4d9a6ay_\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp4d9a6ay_.rb:18:in `test_max_product_tuple'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_max_product_tuple\n     17:     candidate = method(:max_product_tuple)\n  => 18:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     19:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     20:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     21:   end\n<36> expected but was\n<76>\n\ndiff:\n? 36\n? 7 \n? ? \n===============================================================================\n\nFinished in 0.007716014 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.60 tests/s, 129.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      if product > max_product\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmpgpp8x535\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpgpp8x535.rb:18:in `test_max_product_tuple'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_max_product_tuple\n     17:     candidate = method(:max_product_tuple)\n  => 18:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     19:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     20:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     21:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.007658058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.58 tests/s, 130.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map{|x,y| (x-y).abs}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmpwvpn4ndd\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpwvpn4ndd.rb:9:in `test_max_product_tuple'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_product_tuple\n      8:     candidate = method(:max_product_tuple)\n  =>  9:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     10:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     11:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     12:   end\n<36> expected but was\n<7>\n===============================================================================\n\nFinished in 0.007677705 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.25 tests/s, 130.25 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |x, y| x * y }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppq_9lzcf\nStarted\n.\nFinished in 0.000440543 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2269.93 tests/s, 6809.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each_with_index do |tuple1, index1|\n    list1.each_with_index do |tuple2, index2|\n      if index2 > index1\n        product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n        max_product = product if product > max_product\n      end\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmp4d9a6ay_\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp4d9a6ay_.rb:18:in `test_max_product_tuple'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_max_product_tuple\n     17:     candidate = method(:max_product_tuple)\n  => 18:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     19:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     20:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     21:   end\n<36> expected but was\n<76>\n\ndiff:\n? 36\n? 7 \n? ? \n===============================================================================\n\nFinished in 0.007716014 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.60 tests/s, 129.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmpwcvmhdah\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpwcvmhdah.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.009291654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.62 tests/s, 107.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    if tuple[0] * tuple[1] > max_product\n      max_product = tuple[0] * tuple[1]\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_g1kd4v6\nStarted\n.\nFinished in 0.000591185 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1691.52 tests/s, 5074.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = (tuple1[0] - tuple2[0]).abs * (tuple1[1] - tuple2[1]).abs\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmptew5ovmz\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmptew5ovmz.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<6>\n\ndiff:\n? 36\n===============================================================================\n\nFinished in 0.007520123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.98 tests/s, 132.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each_with_index do |tuple1, index1|\n    list1.each_with_index do |tuple2, index2|\n      if index2 > index1\n        product = tuple1[0] * tuple1[1] * tuple2[0] * tuple2[1]\n        max_product = product if product > max_product\n      end\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmp695a0ele\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp695a0ele.rb:18:in `test_max_product_tuple'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_max_product_tuple\n     17:     candidate = method(:max_product_tuple)\n  => 18:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     19:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     20:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     21:   end\n<36> expected but was\n<504>\n===============================================================================\n\nFinished in 0.012517449 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n79.89 tests/s, 79.89 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    max_product = product if product > max_product\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv8or2p8d\nStarted\n.\nFinished in 0.000466582 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2143.25 tests/s, 6429.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map{|x| x.inject(:*)}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr9qjybe8\nStarted\n.\nFinished in 0.000490604 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2038.30 tests/s, 6114.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk981s1e7\nStarted\n.\nFinished in 0.000513075 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1949.03 tests/s, 5847.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxi48zsym\nStarted\n.\nFinished in 0.000492239 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2031.53 tests/s, 6094.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = (tuple1[0] - tuple2[0]).abs * (tuple1[1] - tuple2[1]).abs\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmptew5ovmz\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmptew5ovmz.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<6>\n\ndiff:\n? 36\n===============================================================================\n\nFinished in 0.007520123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.98 tests/s, 132.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    max_product = product if product > max_product\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv8or2p8d\nStarted\n.\nFinished in 0.000466582 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2143.25 tests/s, 6429.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy3sn41_v\nStarted\n.\nFinished in 0.000697321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1434.06 tests/s, 4302.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple.reduce(:*) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphozty73b\nStarted\n.\nFinished in 0.000467558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2138.77 tests/s, 6416.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmpwcvmhdah\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpwcvmhdah.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.009291654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.62 tests/s, 107.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map{|x| x[0] * x[1]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuej6b0ie\nStarted\n.\nFinished in 0.000453278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2206.15 tests/s, 6618.45 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map{|x| x.inject(:*)}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr9qjybe8\nStarted\n.\nFinished in 0.000490604 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2038.30 tests/s, 6114.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      if product > max_product\n        max_product = product\n      end\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmp3_rvkfqe\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp3_rvkfqe.rb:18:in `test_max_product_tuple'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_max_product_tuple\n     17:     candidate = method(:max_product_tuple)\n  => 18:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     19:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     20:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     21:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.00607771 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.54 tests/s, 164.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = (tuple1[0] - tuple2[0]).abs * (tuple1[1] - tuple2[1]).abs\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmptew5ovmz\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmptew5ovmz.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<6>\n\ndiff:\n? 36\n===============================================================================\n\nFinished in 0.007520123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.98 tests/s, 132.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple.reduce(:*) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphozty73b\nStarted\n.\nFinished in 0.000467558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2138.77 tests/s, 6416.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk981s1e7\nStarted\n.\nFinished in 0.000513075 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1949.03 tests/s, 5847.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxi48zsym\nStarted\n.\nFinished in 0.000492239 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2031.53 tests/s, 6094.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.combination(2).map { |tuple1, tuple2| (tuple1[0] * tuple1[1]) * (tuple2[0] * tuple2[1]) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmpl953d182\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpl953d182.rb:9:in `test_max_product_tuple'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_product_tuple\n      8:     candidate = method(:max_product_tuple)\n  =>  9:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     10:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     11:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     12:   end\n<36> expected but was\n<504>\n===============================================================================\n\nFinished in 0.007320416 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.60 tests/s, 136.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmpwcvmhdah\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpwcvmhdah.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.009291654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.62 tests/s, 107.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy3sn41_v\nStarted\n.\nFinished in 0.000697321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1434.06 tests/s, 4302.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |x| x.inject(:*) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp54dus_jt\nStarted\n.\nFinished in 0.000403076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2480.92 tests/s, 7442.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy3sn41_v\nStarted\n.\nFinished in 0.000697321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1434.06 tests/s, 4302.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple.reduce(:*) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphozty73b\nStarted\n.\nFinished in 0.000467558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2138.77 tests/s, 6416.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |x, y| x * y }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppq_9lzcf\nStarted\n.\nFinished in 0.000440543 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2269.93 tests/s, 6809.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each_with_index do |tuple1, index1|\n    list1.each_with_index do |tuple2, index2|\n      next if index1 == index2\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmpnpallxvi\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpnpallxvi.rb:17:in `test_max_product_tuple'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_max_product_tuple\n     16:     candidate = method(:max_product_tuple)\n  => 17:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     18:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     19:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     20:   end\n<36> expected but was\n<76>\n\ndiff:\n? 36\n? 7 \n? ? \n===============================================================================\n\nFinished in 0.007155573 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.75 tests/s, 139.75 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk981s1e7\nStarted\n.\nFinished in 0.000513075 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1949.03 tests/s, 5847.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each_with_index do |tuple, index|\n    list1[index+1..-1].each do |tuple2|\n      product = tuple[0] * tuple2[0]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmpq3dzo0_c\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpq3dzo0_c.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<8>\n===============================================================================\n\nFinished in 0.007292172 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.13 tests/s, 137.13 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmpwcvmhdah\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpwcvmhdah.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.009291654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.62 tests/s, 107.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each_with_index do |tuple1, i|\n    list1.each_with_index do |tuple2, j|\n      next if i == j\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmp5g7_ntem\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp5g7_ntem.rb:17:in `test_max_product_tuple'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_max_product_tuple\n     16:     candidate = method(:max_product_tuple)\n  => 17:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     18:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     19:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     20:   end\n<36> expected but was\n<76>\n\ndiff:\n? 36\n? 7 \n? ? \n===============================================================================\n\nFinished in 0.010457255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.63 tests/s, 95.63 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmpwcvmhdah\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpwcvmhdah.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.009291654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.62 tests/s, 107.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    max_product = product if product > max_product\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv8or2p8d\nStarted\n.\nFinished in 0.000466582 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2143.25 tests/s, 6429.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = (tuple1[0] - tuple2[0]).abs * (tuple1[1] - tuple2[1]).abs\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmptew5ovmz\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmptew5ovmz.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<6>\n\ndiff:\n? 36\n===============================================================================\n\nFinished in 0.007520123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.98 tests/s, 132.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxi48zsym\nStarted\n.\nFinished in 0.000492239 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2031.53 tests/s, 6094.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map {|x| x[0] * x[1]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqhwj6h8q\nStarted\n.\nFinished in 0.000451585 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2214.42 tests/s, 6643.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple[0] * tuple[1] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4csk2cg2\nStarted\n.\nFinished in 0.000623877 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1602.88 tests/s, 4808.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple.reduce(:*) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphozty73b\nStarted\n.\nFinished in 0.000467558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2138.77 tests/s, 6416.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple[0] * tuple[1] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4csk2cg2\nStarted\n.\nFinished in 0.000623877 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1602.88 tests/s, 4808.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    max = product if product > max\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptw04knfb\nStarted\n.\nFinished in 0.000475018 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2105.18 tests/s, 6315.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = (tuple1[0] - tuple2[0]).abs * (tuple1[1] - tuple2[1]).abs\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmptew5ovmz\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmptew5ovmz.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<6>\n\ndiff:\n? 36\n===============================================================================\n\nFinished in 0.007520123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.98 tests/s, 132.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk981s1e7\nStarted\n.\nFinished in 0.000513075 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1949.03 tests/s, 5847.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each_with_index do |tuple1, index1|\n    list1[index1 + 1..-1].each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmp3uyqh5bc\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp3uyqh5bc.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<76>\n\ndiff:\n? 36\n? 7 \n? ? \n===============================================================================\n\nFinished in 0.007700084 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.87 tests/s, 129.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map{|x,y| x*y}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8kl_59ga\nStarted\n.\nFinished in 0.00048991 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2041.19 tests/s, 6123.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy3sn41_v\nStarted\n.\nFinished in 0.000697321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1434.06 tests/s, 4302.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      if product > max_product\n        max_product = product\n      end\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmp3_rvkfqe\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp3_rvkfqe.rb:18:in `test_max_product_tuple'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_max_product_tuple\n     17:     candidate = method(:max_product_tuple)\n  => 18:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     19:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     20:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     21:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.00607771 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.54 tests/s, 164.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = (tuple1[0] - tuple2[0]).abs * (tuple1[1] - tuple2[1]).abs\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmptew5ovmz\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmptew5ovmz.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<6>\n\ndiff:\n? 36\n===============================================================================\n\nFinished in 0.007520123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.98 tests/s, 132.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple1[1] * tuple2[0] * tuple2[1]\n      if product > max_product\n        max_product = product\n      end\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmp4y8xza50\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp4y8xza50.rb:18:in `test_max_product_tuple'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_max_product_tuple\n     17:     candidate = method(:max_product_tuple)\n  => 18:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     19:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     20:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     21:   end\n<36> expected but was\n<1296>\n\ndiff:\n? 3  6\n? 129 \n? ? \n===============================================================================\n\nFinished in 0.007300284 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.98 tests/s, 136.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk981s1e7\nStarted\n.\nFinished in 0.000513075 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1949.03 tests/s, 5847.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple.reduce(:*) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphozty73b\nStarted\n.\nFinished in 0.000467558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2138.77 tests/s, 6416.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      if tuple1 != tuple2\n        product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n        if product > max_product\n          max_product = product\n        end\n      end\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmp5ab206lp\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp5ab206lp.rb:20:in `test_max_product_tuple'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_max_product_tuple\n     19:     candidate = method(:max_product_tuple)\n  => 20:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     21:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     22:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     23:   end\n<36> expected but was\n<76>\n\ndiff:\n? 36\n? 7 \n? ? \n===============================================================================\n\nFinished in 0.007505918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.23 tests/s, 133.23 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each_with_index do |tuple1, index1|\n    list1.each_with_index do |tuple2, index2|\n      next if index1 == index2\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmpnpallxvi\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpnpallxvi.rb:17:in `test_max_product_tuple'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_max_product_tuple\n     16:     candidate = method(:max_product_tuple)\n  => 17:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     18:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     19:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     20:   end\n<36> expected but was\n<76>\n\ndiff:\n? 36\n? 7 \n? ? \n===============================================================================\n\nFinished in 0.007155573 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.75 tests/s, 139.75 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each_with_index do |tuple1, index1|\n    list1.each_with_index do |tuple2, index2|\n      next if index1 == index2\n      product = tuple1[0] * tuple1[1] * tuple2[0] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmphwp13qbo\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmphwp13qbo.rb:17:in `test_max_product_tuple'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_max_product_tuple\n     16:     candidate = method(:max_product_tuple)\n  => 17:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     18:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     19:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     20:   end\n<36> expected but was\n<504>\n===============================================================================\n\nFinished in 0.007596493 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.64 tests/s, 131.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = (tuple1[0] - tuple2[0]).abs * (tuple1[1] - tuple2[1]).abs\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmptew5ovmz\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmptew5ovmz.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<6>\n\ndiff:\n? 36\n===============================================================================\n\nFinished in 0.007520123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.98 tests/s, 132.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = (tuple1[0] - tuple2[0]).abs * (tuple1[1] - tuple2[1]).abs\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmptew5ovmz\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmptew5ovmz.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<6>\n\ndiff:\n? 36\n===============================================================================\n\nFinished in 0.007520123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.98 tests/s, 132.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy3sn41_v\nStarted\n.\nFinished in 0.000697321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1434.06 tests/s, 4302.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each_with_index do |tuple1, index1|\n    list1.each_with_index do |tuple2, index2|\n      next if index1 == index2\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmpnpallxvi\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpnpallxvi.rb:17:in `test_max_product_tuple'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_max_product_tuple\n     16:     candidate = method(:max_product_tuple)\n  => 17:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     18:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     19:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     20:   end\n<36> expected but was\n<76>\n\ndiff:\n? 36\n? 7 \n? ? \n===============================================================================\n\nFinished in 0.007155573 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.75 tests/s, 139.75 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk981s1e7\nStarted\n.\nFinished in 0.000513075 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1949.03 tests/s, 5847.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      if product > max_product\n        max_product = product\n      end\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmp3_rvkfqe\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp3_rvkfqe.rb:18:in `test_max_product_tuple'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_max_product_tuple\n     17:     candidate = method(:max_product_tuple)\n  => 18:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     19:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     20:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     21:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.00607771 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.54 tests/s, 164.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map {|x| x.inject(:*)}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsy_2k46y\nStarted\n.\nFinished in 0.000472015 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2118.58 tests/s, 6355.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmpwcvmhdah\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpwcvmhdah.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.009291654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.62 tests/s, 107.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |x, y| (x - y).abs }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124156,
      "stdout": "Loaded suite /tmp/tmpgo4ih2_4\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpgo4ih2_4.rb:9:in `test_max_product_tuple'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_product_tuple\n      8:     candidate = method(:max_product_tuple)\n  =>  9:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     10:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     11:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     12:   end\n<36> expected but was\n<7>\n===============================================================================\n\nFinished in 0.007135144 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.15 tests/s, 140.15 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    max_product = product if product > max_product\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv8or2p8d\nStarted\n.\nFinished in 0.000466582 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2143.25 tests/s, 6429.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each_with_index do |tuple, index|\n    list1.each_with_index do |tuple2, index2|\n      if index2 > index\n        product = tuple[0] * tuple2[0]\n        if product > max\n          max = product\n        end\n      end\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124156,
      "stdout": "Loaded suite /tmp/tmp6f7zdo5e\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp6f7zdo5e.rb:20:in `test_max_product_tuple'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_max_product_tuple\n     19:     candidate = method(:max_product_tuple)\n  => 20:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     21:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     22:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     23:   end\n<36> expected but was\n<8>\n===============================================================================\n\nFinished in 0.007055457 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.73 tests/s, 141.73 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple.inject(:*) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdcpm8jte\nStarted\n.\nFinished in 0.000500609 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1997.57 tests/s, 5992.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk981s1e7\nStarted\n.\nFinished in 0.000513075 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1949.03 tests/s, 5847.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = (tuple1[0] - tuple2[0]).abs * (tuple1[1] - tuple2[1]).abs\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmptew5ovmz\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmptew5ovmz.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<6>\n\ndiff:\n? 36\n===============================================================================\n\nFinished in 0.007520123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.98 tests/s, 132.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy3sn41_v\nStarted\n.\nFinished in 0.000697321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1434.06 tests/s, 4302.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map {|x| x[0] * x[1]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqhwj6h8q\nStarted\n.\nFinished in 0.000451585 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2214.42 tests/s, 6643.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxi48zsym\nStarted\n.\nFinished in 0.000492239 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2031.53 tests/s, 6094.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmpwcvmhdah\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpwcvmhdah.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.009291654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.62 tests/s, 107.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    max_product = product if product > max_product\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv8or2p8d\nStarted\n.\nFinished in 0.000466582 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2143.25 tests/s, 6429.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple[0] * tuple[1] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4csk2cg2\nStarted\n.\nFinished in 0.000623877 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1602.88 tests/s, 4808.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmpwcvmhdah\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpwcvmhdah.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.009291654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.62 tests/s, 107.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmpwcvmhdah\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpwcvmhdah.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.009291654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.62 tests/s, 107.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_prod = 0\n  list1.each do |tuple|\n    prod = tuple[0] * tuple[1]\n    if prod > max_prod\n      max_prod = prod\n    end\n  end\n  return max_prod\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcexiht63\nStarted\n.\nFinished in 0.000473738 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2110.87 tests/s, 6332.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = (tuple1[0] - tuple2[0]).abs * (tuple1[1] - tuple2[1]).abs\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmptew5ovmz\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmptew5ovmz.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<6>\n\ndiff:\n? 36\n===============================================================================\n\nFinished in 0.007520123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.98 tests/s, 132.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each_with_index do |tuple1, index1|\n    list1.each_with_index do |tuple2, index2|\n      next if index1 == index2\n      product = tuple1[0] * tuple2[0]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmphoy6nqb9\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmphoy6nqb9.rb:17:in `test_max_product_tuple'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_max_product_tuple\n     16:     candidate = method(:max_product_tuple)\n  => 17:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     18:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     19:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     20:   end\n<36> expected but was\n<8>\n===============================================================================\n\nFinished in 0.012504719 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n79.97 tests/s, 79.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy3sn41_v\nStarted\n.\nFinished in 0.000697321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1434.06 tests/s, 4302.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |x| x[0] * x[1] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp95al2t43\nStarted\n.\nFinished in 0.000455649 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2194.67 tests/s, 6584.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  # Write your code here\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpolaotado\nStarted\n.\nFinished in 0.000389173 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2569.55 tests/s, 7708.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple.inject(:*) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdcpm8jte\nStarted\n.\nFinished in 0.000500609 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1997.57 tests/s, 5992.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = (tuple1[0] - tuple2[0]).abs * (tuple1[1] - tuple2[1]).abs\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmptew5ovmz\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmptew5ovmz.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<6>\n\ndiff:\n? 36\n===============================================================================\n\nFinished in 0.007520123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.98 tests/s, 132.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each_with_index do |tuple, index|\n    list1[index+1..-1].each do |tuple2|\n      product = tuple[0] * tuple2[0] + tuple[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124156,
      "stdout": "Loaded suite /tmp/tmpyoe27f_u\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpyoe27f_u.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<76>\n\ndiff:\n? 36\n? 7 \n? ? \n===============================================================================\n\nFinished in 0.007124984 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.35 tests/s, 140.35 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy3sn41_v\nStarted\n.\nFinished in 0.000697321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1434.06 tests/s, 4302.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxi48zsym\nStarted\n.\nFinished in 0.000492239 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2031.53 tests/s, 6094.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy3sn41_v\nStarted\n.\nFinished in 0.000697321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1434.06 tests/s, 4302.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = (tuple1[0] - tuple2[0]).abs * (tuple1[1] - tuple2[1]).abs\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmptew5ovmz\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmptew5ovmz.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<6>\n\ndiff:\n? 36\n===============================================================================\n\nFinished in 0.007520123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.98 tests/s, 132.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy3sn41_v\nStarted\n.\nFinished in 0.000697321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1434.06 tests/s, 4302.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    max_product = product if product > max_product\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv8or2p8d\nStarted\n.\nFinished in 0.000466582 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2143.25 tests/s, 6429.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = (tuple1[0] - tuple2[0]).abs * (tuple1[1] - tuple2[1]).abs\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmptew5ovmz\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmptew5ovmz.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<6>\n\ndiff:\n? 36\n===============================================================================\n\nFinished in 0.007520123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.98 tests/s, 132.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  product_list = []\n  list1.each do |tuple|\n    product_list << tuple[0] * tuple[1]\n  end\n  product_list.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpncquklre\nStarted\n.\nFinished in 0.000450013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2222.16 tests/s, 6666.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      if product > max_product\n        max_product = product\n      end\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmp3_rvkfqe\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp3_rvkfqe.rb:18:in `test_max_product_tuple'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_max_product_tuple\n     17:     candidate = method(:max_product_tuple)\n  => 18:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     19:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     20:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     21:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.00607771 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.54 tests/s, 164.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvwfb4l6e\nStarted\n.\nFinished in 0.000498213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.17 tests/s, 6021.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy3sn41_v\nStarted\n.\nFinished in 0.000697321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1434.06 tests/s, 4302.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      if product > max_product\n        max_product = product\n      end\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmp3_rvkfqe\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp3_rvkfqe.rb:18:in `test_max_product_tuple'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_max_product_tuple\n     17:     candidate = method(:max_product_tuple)\n  => 18:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     19:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     20:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     21:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.00607771 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.54 tests/s, 164.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map{|x| x[0] * x[1]}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuej6b0ie\nStarted\n.\nFinished in 0.000453278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2206.15 tests/s, 6618.45 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy3sn41_v\nStarted\n.\nFinished in 0.000697321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1434.06 tests/s, 4302.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      if product > max_product\n        max_product = product\n      end\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmp3_rvkfqe\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp3_rvkfqe.rb:18:in `test_max_product_tuple'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_max_product_tuple\n     17:     candidate = method(:max_product_tuple)\n  => 18:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     19:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     20:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     21:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.00607771 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.54 tests/s, 164.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple.inject(:*) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdcpm8jte\nStarted\n.\nFinished in 0.000500609 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1997.57 tests/s, 5992.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxi48zsym\nStarted\n.\nFinished in 0.000492239 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2031.53 tests/s, 6094.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |x| x[0] * x[1] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp95al2t43\nStarted\n.\nFinished in 0.000455649 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2194.67 tests/s, 6584.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple.reduce(:*) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphozty73b\nStarted\n.\nFinished in 0.000467558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2138.77 tests/s, 6416.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      if product > max_product\n        max_product = product\n      end\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmp3_rvkfqe\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp3_rvkfqe.rb:18:in `test_max_product_tuple'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_max_product_tuple\n     17:     candidate = method(:max_product_tuple)\n  => 18:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     19:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     20:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     21:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.00607771 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.54 tests/s, 164.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = (tuple1[0] - tuple2[0]).abs * (tuple1[1] - tuple2[1]).abs\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmptew5ovmz\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmptew5ovmz.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<6>\n\ndiff:\n? 36\n===============================================================================\n\nFinished in 0.007520123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.98 tests/s, 132.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      if product > max_product\n        max_product = product\n      end\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmp3_rvkfqe\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmp3_rvkfqe.rb:18:in `test_max_product_tuple'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_max_product_tuple\n     17:     candidate = method(:max_product_tuple)\n  => 18:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     19:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     20:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     21:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.00607771 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.54 tests/s, 164.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |x| x[0] * x[1] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp95al2t43\nStarted\n.\nFinished in 0.000455649 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2194.67 tests/s, 6584.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = (tuple1[0] - tuple2[0]).abs * (tuple1[1] - tuple2[1]).abs\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmptew5ovmz\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmptew5ovmz.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<6>\n\ndiff:\n? 36\n===============================================================================\n\nFinished in 0.007520123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.98 tests/s, 132.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  return max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk981s1e7\nStarted\n.\nFinished in 0.000513075 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1949.03 tests/s, 5847.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map{|x| x.inject(:*)}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr9qjybe8\nStarted\n.\nFinished in 0.000490604 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2038.30 tests/s, 6114.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = (tuple1[0] - tuple2[0]).abs * (tuple1[1] - tuple2[1]).abs\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmptew5ovmz\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmptew5ovmz.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<6>\n\ndiff:\n? 36\n===============================================================================\n\nFinished in 0.007520123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.98 tests/s, 132.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = (tuple1[0] - tuple2[0]).abs * (tuple1[1] - tuple2[1]).abs\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1666124155,
      "stdout": "Loaded suite /tmp/tmptew5ovmz\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmptew5ovmz.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<6>\n\ndiff:\n? 36\n===============================================================================\n\nFinished in 0.007520123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.98 tests/s, 132.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    max_product = product if product > max_product\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv8or2p8d\nStarted\n.\nFinished in 0.000466582 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2143.25 tests/s, 6429.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple.reduce(:*) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphozty73b\nStarted\n.\nFinished in 0.000467558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2138.77 tests/s, 6416.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |tuple| tuple[0] * tuple[1] }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4csk2cg2\nStarted\n.\nFinished in 0.000623877 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1602.88 tests/s, 4808.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "Loaded suite /tmp/tmpwcvmhdah\nStarted\nF\n===============================================================================\nFailure: test_max_product_tuple(TestHumanEval)\n/tmp/tmpwcvmhdah.rb:16:in `test_max_product_tuple'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_product_tuple\n     15:     candidate = method(:max_product_tuple)\n  => 16:     assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n     17:     assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n     18:     assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n     19:   end\n<36> expected but was\n<97>\n===============================================================================\n\nFinished in 0.009291654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.62 tests/s, 107.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n  list1.map { |x| x.inject(:*) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
      "timestamp": 1665519683,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp54dus_jt\nStarted\n.\nFinished in 0.000403076 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2480.92 tests/s, 7442.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}