{
  "name": "mbpp_639_sample_nam",
  "language": "rb",
  "prompt": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpev4vczr8\nStarted\n.\nFinished in 0.000432511 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2312.08 tests/s, 6936.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0].upcase == name[0]}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9lt964nu\nStarted\n.\nFinished in 0.00040665 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2459.12 tests/s, 7377.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx92dok0k\nStarted\n.\nFinished in 0.000425302 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.27 tests/s, 7053.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpct_f0v6z\nStarted\n.\nFinished in 0.00044362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2254.18 tests/s, 6762.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppdzwn1w8\nStarted\n.\nFinished in 0.000444348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2250.49 tests/s, 6751.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name =~ /^[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpljo_ymsx\nStarted\n.\nFinished in 0.000424289 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2356.88 tests/s, 7070.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpesjue14h\nStarted\n.\nFinished in 0.000742294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1347.18 tests/s, 4041.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0].downcase == name[0]}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp20y870tm\nStarted\n.\nFinished in 0.00041438 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2413.24 tests/s, 7239.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpesjue14h\nStarted\n.\nFinished in 0.000742294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1347.18 tests/s, 4041.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdjz03tkm\nStarted\n.\nFinished in 0.000697725 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1433.23 tests/s, 4299.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject{|name| name[0].downcase == name[0]}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpct_q1dns\nStarted\n.\nFinished in 0.000421711 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2371.29 tests/s, 7113.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbhj8kxph\nStarted\n.\nFinished in 0.000419648 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2382.95 tests/s, 7148.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if { |name| name[0].downcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzhnixck2\nStarted\n.\nFinished in 0.000413929 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2415.87 tests/s, 7247.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw02385_b\nStarted\n.\nFinished in 0.000404677 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2471.11 tests/s, 7413.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name.capitalize == name}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprknt4w7h\nStarted\n.\nFinished in 0.000376 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2659.57 tests/s, 7978.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0].upcase == name[0]}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9lt964nu\nStarted\n.\nFinished in 0.00040665 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2459.12 tests/s, 7377.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0] =~ /[a-z]/}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3bwoentn\nStarted\n.\nFinished in 0.000449229 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.04 tests/s, 6678.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0].upcase == name[0]}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9lt964nu\nStarted\n.\nFinished in 0.00040665 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2459.12 tests/s, 7377.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject { |name| name[0] =~ /[a-z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnqe3lnsn\nStarted\n.\nFinished in 0.000956341 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1045.65 tests/s, 3136.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0] =~ /[a-z]/}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3bwoentn\nStarted\n.\nFinished in 0.000449229 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.04 tests/s, 6678.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name =~ /^[A-Z]/ }.map { |name| name.length }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcdulyuw1\nStarted\n.\nFinished in 0.000798882 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1251.75 tests/s, 3755.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0] =~ /[a-z]/}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3bwoentn\nStarted\n.\nFinished in 0.000449229 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.04 tests/s, 6678.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz6px5q4x\nStarted\n.\nFinished in 0.000419106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2386.03 tests/s, 7158.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx92dok0k\nStarted\n.\nFinished in 0.000425302 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.27 tests/s, 7053.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0].upcase == name[0]}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9lt964nu\nStarted\n.\nFinished in 0.00040665 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2459.12 tests/s, 7377.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdjz03tkm\nStarted\n.\nFinished in 0.000697725 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1433.23 tests/s, 4299.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0].upcase == name[0]}.map{|name| name.length}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwqr8t_az\nStarted\n.\nFinished in 0.0004504 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2220.25 tests/s, 6660.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].match(/[A-Z]/) }.map(&:length).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmek2npkw\nStarted\n.\nFinished in 0.00052326 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1911.10 tests/s, 5733.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpct_f0v6z\nStarted\n.\nFinished in 0.00044362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2254.18 tests/s, 6762.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sum = 0\n  sample_names.each do |name|\n    if name[0] == name[0].upcase\n      sum += name.length\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplzxn7etu\nStarted\n.\nFinished in 0.000439139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2277.18 tests/s, 6831.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx92dok0k\nStarted\n.\nFinished in 0.000425302 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.27 tests/s, 7053.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name =~ /^[a-z]/}\n  sample_names.map {|name| name.length}.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqw4gg_xe\nStarted\n.\nFinished in 0.000519414 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1925.25 tests/s, 5775.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0] =~ /[a-z]/}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3bwoentn\nStarted\n.\nFinished in 0.000449229 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.04 tests/s, 6678.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name =~ /^[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6l4frk4e\nStarted\n.\nFinished in 0.000480406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2081.57 tests/s, 6244.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpt8edw1oc\nStarted\n.\nFinished in 0.000431025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2320.05 tests/s, 6960.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpct_f0v6z\nStarted\n.\nFinished in 0.00044362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2254.18 tests/s, 6762.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpct_f0v6z\nStarted\n.\nFinished in 0.00044362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2254.18 tests/s, 6762.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpct_f0v6z\nStarted\n.\nFinished in 0.00044362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2254.18 tests/s, 6762.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sum = 0\n  sample_names.each do |name|\n    sum += name.length if name[0] =~ /[A-Z]/\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmwz13520\nStarted\n.\nFinished in 0.000498159 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.39 tests/s, 6022.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppdzwn1w8\nStarted\n.\nFinished in 0.000444348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2250.49 tests/s, 6751.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcstmjuh_\nStarted\n.\nFinished in 0.000484565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2063.71 tests/s, 6191.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].match(/[A-Z]/)}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpri5oodut\nStarted\n.\nFinished in 0.000485089 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2061.48 tests/s, 6184.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0].upcase == name[0]}.map{|name| name.length}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwqr8t_az\nStarted\n.\nFinished in 0.0004504 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2220.25 tests/s, 6660.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name =~ /^[a-z]/}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd4a7x82a\nStarted\n.\nFinished in 0.000562712 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1777.11 tests/s, 5331.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpct_f0v6z\nStarted\n.\nFinished in 0.00044362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2254.18 tests/s, 6762.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpev4vczr8\nStarted\n.\nFinished in 0.000432511 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2312.08 tests/s, 6936.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcstmjuh_\nStarted\n.\nFinished in 0.000484565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2063.71 tests/s, 6191.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.map{|x| x.length}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "Loaded suite /tmp/tmpvnonkgdj\nStarted\nF\n===============================================================================\nFailure: test_sample_nam(TestHumanEval)\n/tmp/tmpvnonkgdj.rb:9:in `test_sample_nam'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sample_nam\n      8:     candidate = method(:sample_nam)\n  =>  9:     assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n     10:     assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n     11:     assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n     12:   end\n<16> expected but was\n<33>\n===============================================================================\n\nFinished in 0.007452553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.18 tests/s, 134.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0].downcase == name[0]}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp20y870tm\nStarted\n.\nFinished in 0.00041438 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2413.24 tests/s, 7239.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx92dok0k\nStarted\n.\nFinished in 0.000425302 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.27 tests/s, 7053.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name =~ /^[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsudxpzh0\nStarted\n.\nFinished in 0.00047511 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2104.78 tests/s, 6314.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx92dok0k\nStarted\n.\nFinished in 0.000425302 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.27 tests/s, 7053.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] == name[0].upcase }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd6yn12gk\nStarted\n.\nFinished in 0.000773337 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1293.10 tests/s, 3879.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx92dok0k\nStarted\n.\nFinished in 0.000425302 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.27 tests/s, 7053.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz6px5q4x\nStarted\n.\nFinished in 0.000419106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2386.03 tests/s, 7158.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0] == name[0].downcase }.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpabs25dup\nStarted\n.\nFinished in 0.000499854 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2000.58 tests/s, 6001.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz6px5q4x\nStarted\n.\nFinished in 0.000419106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2386.03 tests/s, 7158.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx92dok0k\nStarted\n.\nFinished in 0.000425302 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.27 tests/s, 7053.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0] =~ /[a-z]/}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3bwoentn\nStarted\n.\nFinished in 0.000449229 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.04 tests/s, 6678.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sum = 0\n  sample_names.each do |name|\n    if name[0] =~ /[A-Z]/\n      sum += name.length\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprug_zck5\nStarted\n.\nFinished in 0.000717273 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1394.17 tests/s, 4182.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0].upcase == name[0]}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9lt964nu\nStarted\n.\nFinished in 0.00040665 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2459.12 tests/s, 7377.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpesjue14h\nStarted\n.\nFinished in 0.000742294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1347.18 tests/s, 4041.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject{|name| name =~ /^[a-z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp44wwub0d\nStarted\n.\nFinished in 0.000503652 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1985.50 tests/s, 5956.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map(&:length).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp52wbiek5\nStarted\n.\nFinished in 0.000497926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2008.33 tests/s, 6024.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject { |name| name[0].downcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_10wfg5l\nStarted\n.\nFinished in 0.000492402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2030.86 tests/s, 6092.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0] =~ /[a-z]/}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3bwoentn\nStarted\n.\nFinished in 0.000449229 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.04 tests/s, 6678.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject { |name| name =~ /^[a-z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mfamr7l\nStarted\n.\nFinished in 0.00049942 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2002.32 tests/s, 6006.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0].downcase == name[0]}\n  sample_names.map! {|name| name.length}\n  sample_names.inject(0) {|sum, name| sum + name}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpm6cd1_41\nStarted\n.\nFinished in 0.000411915 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2427.69 tests/s, 7283.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz6px5q4x\nStarted\n.\nFinished in 0.000419106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2386.03 tests/s, 7158.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6uy1fzug\nStarted\n.\nFinished in 0.000562114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1779.00 tests/s, 5337.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpct_f0v6z\nStarted\n.\nFinished in 0.00044362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2254.18 tests/s, 6762.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz6px5q4x\nStarted\n.\nFinished in 0.000419106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2386.03 tests/s, 7158.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx92dok0k\nStarted\n.\nFinished in 0.000425302 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.27 tests/s, 7053.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map(&:length).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp52wbiek5\nStarted\n.\nFinished in 0.000497926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2008.33 tests/s, 6024.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0].upcase == name[0]}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9lt964nu\nStarted\n.\nFinished in 0.00040665 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2459.12 tests/s, 7377.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpct_f0v6z\nStarted\n.\nFinished in 0.00044362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2254.18 tests/s, 6762.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name =~ /[A-Z]/}.map{|name| name.length}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpere4_cz9\nStarted\n.\nFinished in 0.000426983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.01 tests/s, 7026.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0].upcase == name[0]}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9lt964nu\nStarted\n.\nFinished in 0.00040665 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2459.12 tests/s, 7377.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6uy1fzug\nStarted\n.\nFinished in 0.000562114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1779.00 tests/s, 5337.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpct_f0v6z\nStarted\n.\nFinished in 0.00044362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2254.18 tests/s, 6762.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpct_f0v6z\nStarted\n.\nFinished in 0.00044362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2254.18 tests/s, 6762.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if { |name| name[0].downcase == name[0] }\n  sample_names.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptt8cjjhh\nStarted\n.\nFinished in 0.00041627 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2402.29 tests/s, 7206.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbhj8kxph\nStarted\n.\nFinished in 0.000419648 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2382.95 tests/s, 7148.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject {|name| name =~ /^[a-z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppnzn3bn5\nStarted\n.\nFinished in 0.000446452 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2239.88 tests/s, 6719.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbhj8kxph\nStarted\n.\nFinished in 0.000419648 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2382.95 tests/s, 7148.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0].upcase == name[0]}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9lt964nu\nStarted\n.\nFinished in 0.00040665 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2459.12 tests/s, 7377.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject { |name| name =~ /^[a-z]/ }.map(&:length).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3n4ly1qj\nStarted\n.\nFinished in 0.000399266 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2504.60 tests/s, 7513.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject{|name| name =~ /^[a-z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp44wwub0d\nStarted\n.\nFinished in 0.000503652 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1985.50 tests/s, 5956.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpesjue14h\nStarted\n.\nFinished in 0.000742294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1347.18 tests/s, 4041.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbhj8kxph\nStarted\n.\nFinished in 0.000419648 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2382.95 tests/s, 7148.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpt8edw1oc\nStarted\n.\nFinished in 0.000431025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2320.05 tests/s, 6960.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject {|name| name[0].downcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpaoqtm7_c\nStarted\n.\nFinished in 0.000419424 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2384.22 tests/s, 7152.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject {|name| name =~ /^[a-z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppnzn3bn5\nStarted\n.\nFinished in 0.000446452 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2239.88 tests/s, 6719.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0] =~ /[a-z]/}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3bwoentn\nStarted\n.\nFinished in 0.000449229 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.04 tests/s, 6678.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject{|name| name =~ /^[a-z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp44wwub0d\nStarted\n.\nFinished in 0.000503652 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1985.50 tests/s, 5956.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name =~ /[A-Z]/ }.map(&:size).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8jc7272p\nStarted\n.\nFinished in 0.000404165 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2474.24 tests/s, 7422.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcstmjuh_\nStarted\n.\nFinished in 0.000484565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2063.71 tests/s, 6191.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpct_f0v6z\nStarted\n.\nFinished in 0.00044362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2254.18 tests/s, 6762.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpct_f0v6z\nStarted\n.\nFinished in 0.00044362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2254.18 tests/s, 6762.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject { |name| name[0] =~ /[a-z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnqe3lnsn\nStarted\n.\nFinished in 0.000956341 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1045.65 tests/s, 3136.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz6px5q4x\nStarted\n.\nFinished in 0.000419106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2386.03 tests/s, 7158.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpesjue14h\nStarted\n.\nFinished in 0.000742294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1347.18 tests/s, 4041.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name =~ /^[a-z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp57y9ir7p\nStarted\n.\nFinished in 0.00040414 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2474.39 tests/s, 7423.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcstmjuh_\nStarted\n.\nFinished in 0.000484565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2063.71 tests/s, 6191.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject { |name| name[0].downcase == name[0] }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfyp8woo7\nStarted\n.\nFinished in 0.000420681 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2377.10 tests/s, 7131.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name =~ /^[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsudxpzh0\nStarted\n.\nFinished in 0.00047511 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2104.78 tests/s, 6314.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbw9m4jxt\nStarted\n.\nFinished in 0.000789536 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1266.57 tests/s, 3799.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkfpevfea\nStarted\n.\nFinished in 0.00058181 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1718.77 tests/s, 5156.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx92dok0k\nStarted\n.\nFinished in 0.000425302 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.27 tests/s, 7053.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6uy1fzug\nStarted\n.\nFinished in 0.000562114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1779.00 tests/s, 5337.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx92dok0k\nStarted\n.\nFinished in 0.000425302 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.27 tests/s, 7053.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map(&:length).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp52wbiek5\nStarted\n.\nFinished in 0.000497926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2008.33 tests/s, 6024.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpct_f0v6z\nStarted\n.\nFinished in 0.00044362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2254.18 tests/s, 6762.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject { |name| name =~ /^[a-z]/ }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp64p5uc_i\nStarted\n.\nFinished in 0.000417099 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2397.51 tests/s, 7192.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name =~ /^[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpljo_ymsx\nStarted\n.\nFinished in 0.000424289 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2356.88 tests/s, 7070.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sum = 0\n  sample_names.each do |name|\n    if name[0] =~ /[A-Z]/\n      sum += name.length\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprug_zck5\nStarted\n.\nFinished in 0.000717273 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1394.17 tests/s, 4182.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject {|name| name[0].downcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpaoqtm7_c\nStarted\n.\nFinished in 0.000419424 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2384.22 tests/s, 7152.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx92dok0k\nStarted\n.\nFinished in 0.000425302 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.27 tests/s, 7053.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sum = 0\n  sample_names.each do |name|\n    if name[0] =~ /[A-Z]/\n      sum += name.length\n    end\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph9ta_jtm\nStarted\n.\nFinished in 0.000396333 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2523.13 tests/s, 7569.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx92dok0k\nStarted\n.\nFinished in 0.000425302 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.27 tests/s, 7053.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name =~ /^[A-Z]/ }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0djk2yeg\nStarted\n.\nFinished in 0.000410114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2438.35 tests/s, 7315.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject {|name| name[0].downcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpaoqtm7_c\nStarted\n.\nFinished in 0.000419424 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2384.22 tests/s, 7152.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0] =~ /[A-Z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx92dok0k\nStarted\n.\nFinished in 0.000425302 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.27 tests/s, 7053.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.delete_if {|name| name[0] =~ /[a-z]/}\n  sample_names.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3bwoentn\nStarted\n.\nFinished in 0.000449229 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.04 tests/s, 6678.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppdzwn1w8\nStarted\n.\nFinished in 0.000444348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2250.49 tests/s, 6751.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name =~ /[A-Z]/ }.map(&:length).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx2gccldf\nStarted\n.\nFinished in 0.000402448 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2484.79 tests/s, 7454.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.each do |x|\n    if x[0] == x[0].downcase\n      sample_names.delete(x)\n    end\n  end\n  sample_names.join.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "Loaded suite /tmp/tmp9gfbr3z0\nStarted\nF\n===============================================================================\nFailure: test_sample_nam(TestHumanEval)\n/tmp/tmp9gfbr3z0.rb:15:in `test_sample_nam'\n     12:   def test_sample_nam\n     13:     candidate = method(:sample_nam)\n     14:     assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n  => 15:     assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n     16:     assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n     17:   end\n     18: end\n<10> expected but was\n<13>\n\ndiff:\n? 10\n?  3\n?  ?\n===============================================================================\n\nFinished in 0.006603538 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.43 tests/s, 302.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select { |name| name[0].upcase == name[0] }.map { |name| name.length }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppdzwn1w8\nStarted\n.\nFinished in 0.000444348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2250.49 tests/s, 6751.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select{|name| name[0] =~ /[A-Z]/}.map{|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpct_f0v6z\nStarted\n.\nFinished in 0.00044362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2254.18 tests/s, 6762.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject { |name| name =~ /^[a-z]/ }.map(&:length).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9mfamr7l\nStarted\n.\nFinished in 0.00049942 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2002.32 tests/s, 6006.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0].upcase == name[0]}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1y8t2d33\nStarted\n.\nFinished in 0.000422105 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2369.08 tests/s, 7107.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.reject { |name| name[0].downcase == name[0] }.map { |name| name.length }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_10wfg5l\nStarted\n.\nFinished in 0.000492402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2030.86 tests/s, 6092.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name[0] =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdq4bqlor\nStarted\n.\nFinished in 0.000412234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2425.81 tests/s, 7277.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n  sample_names.select {|name| name =~ /[A-Z]/}.map {|name| name.length}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6uy1fzug\nStarted\n.\nFinished in 0.000562114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1779.00 tests/s, 5337.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}