{
  "name": "mbpp_450_extract_string",
  "language": "rb",
  "prompt": "# Write a function to extract specified size of strings from a given list of string values.\ndef extract_string(str, l)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_string\n    candidate = method(:extract_string)\n    assert_equal([\"practice\", \"solution\"], candidate.call([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8))\n    assert_equal([\"Python\"], candidate.call([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6))\n    assert_equal([\"exercises\"], candidate.call([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  str.select { |s| s.length == l }\nend",
    "  str.select {|x| x.length == l}\nend",
    "  str.select { |x| x.length == l }\nend",
    "  str.select { |x| x.length == l }\nend",
    "  str.select { |x| x.length == l }\nend",
    "  str.select { |x| x.length == l }\nend",
    "  str.select { |e| e.length == l }\nend",
    "  str.select { |x| x.length == l }\nend",
    "  str.select { |x| x.length == l }\nend",
    "  str.select { |x| x.length == l }\nend\np extract_string(['abc', 'def', 'ghi', 'jkl'], 3)",
    "  str.select { |s| s.length == l }\nend",
    "  str.select { |x| x.length == l }\nend",
    "  str.select { |s| s.length == l }\nend",
    "  str.select { |x| x.length == l }\nend",
    "  str.select {|x| x.length == l}\nend",
    "  str.select { |s| s.length == l }\nend",
    "  str.select { |x| x.length == l }\nend",
    "  str.select { |x| x.length == l }\nend",
    "  str.select { |s| s.length == l }\nend",
    "  str.select { |x| x.length == l }\nend"
  ]
}