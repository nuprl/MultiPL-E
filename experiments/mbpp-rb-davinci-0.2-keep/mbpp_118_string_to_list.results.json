{
  "name": "mbpp_118_string_to_list",
  "language": "rb",
  "prompt": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn4cucy_4\nStarted\n.\nFinished in 0.000353133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2831.79 tests/s, 8495.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn4cucy_4\nStarted\n.\nFinished in 0.000353133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2831.79 tests/s, 8495.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn4cucy_4\nStarted\n.\nFinished in 0.000353133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2831.79 tests/s, 8495.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn4cucy_4\nStarted\n.\nFinished in 0.000353133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2831.79 tests/s, 8495.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string)\n  string.split(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n",
      "timestamp": 1665509927,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx3my2aq2\nStarted\n.\nFinished in 0.000353952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2825.24 tests/s, 8475.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}