{
  "name": "mbpp_99_decimal_to_binary",
  "language": "rb",
  "prompt": "# Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\ndef decimal_to_binary(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n    assert_equal(\"1000\", candidate.call(8))\n    assert_equal(\"10010\", candidate.call(18))\n    assert_equal(\"111\", candidate.call(7))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return \"0\" if n == 0\n  result = \"\"\n  while n > 0\n    result = (n % 2).to_s + result\n    n /= 2\n  end\n  result\nend",
    "  return \"0\" if n == 0\n  binary = \"\"\n  while n > 0\n    binary << (n % 2).to_s\n    n /= 2\n  end\n  binary.reverse\nend",
    "  return '0' if n == 0\n  binary = ''\n  while n > 0\n    binary.prepend(n % 2 == 0 ? '0' : '1')\n    n /= 2\n  end\n  binary\nend",
    "  binary = ''\n  while n > 0\n    binary << (n % 2).to_s\n    n /= 2\n  end\n  binary.reverse\nend",
    "  return \"0\" if n == 0\n  result = \"\"\n  while n > 0\n    result.prepend(n % 2).to_s\n    n /= 2\n  end\n  result\nend",
    "  return '0' if n == 0\n  binary = ''\n  while n > 0\n    binary << (n % 2).to_s\n    n /= 2\n  end\n  binary.reverse\nend",
    "  return '0' if n == 0\n  binary = ''\n  while n > 0\n    binary.prepend(n % 2)\n    n /= 2\n  end\n  binary\nend",
    "  return '0' if n == 0\n  binary = ''\n  while n > 0\n    binary.prepend(n % 2).to_s\n    n /= 2\n  end\n  binary\nend",
    "  return \"0\" if n == 0\n  binary = \"\"\n  while n > 0\n    binary.prepend(n % 2)\n    n /= 2\n  end\n  binary\nend",
    "  return '0' if n == 0\n  binary = ''\n  while n > 0\n    binary << (n % 2).to_s\n    n /= 2\n  end\n  binary.reverse\nend",
    "  return \"0\" if n == 0\n  binary = \"\"\n  while n > 0\n    binary.prepend(n % 2)\n    n /= 2\n  end\n  binary\nend",
    "  return \"0\" if n == 0\n  binary = \"\"\n  while n > 0\n    binary = (n % 2).to_s + binary\n    n /= 2\n  end\n  binary\nend",
    "  return '0' if n == 0\n  binary = ''\n  while n > 0\n    binary = (n % 2).to_s + binary\n    n /= 2\n  end\n  binary\nend",
    "  return \"0\" if n == 0\n  binary = \"\"\n  while n > 0\n    binary << (n % 2).to_s\n    n /= 2\n  end\n  binary.reverse\nend",
    "  return \"0\" if n == 0\n  binary = []\n  while n > 0\n    binary.unshift(n % 2)\n    n /= 2\n  end\n  binary.join\nend",
    "  return \"0\" if n == 0\n  binary = \"\"\n  while n > 0\n    binary << (n % 2).to_s\n    n /= 2\n  end\n  binary.reverse\nend",
    "  return \"0\" if n == 0\n  binary = \"\"\n  while n > 0\n    binary.prepend(n % 2)\n    n /= 2\n  end\n  binary\nend",
    "  n.to_s(2)\nend",
    "  binary = \"\"\n  while n > 0\n    binary = (n % 2).to_s + binary\n    n /= 2\n  end\n  binary\nend",
    "  return \"0\" if n == 0\n  binary = \"\"\n  while n > 0\n    binary.prepend((n % 2).to_s)\n    n /= 2\n  end\n  binary\nend"
  ]
}