{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "rb",
  "prompt": "# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\ndef maxAverageOfPath(cost)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maxAverageOfPath\n    candidate = method(:maxAverageOfPath)\n    assert_equal(5.2, candidate.call([[1, 2, 3], [6, 5, 4], [7, 3, 9]]))\n    assert_equal(6.2, candidate.call([[2, 3, 4], [7, 6, 5], [8, 4, 10]]))\n    assert_equal(7.2, candidate.call([[3, 4, 5], [8, 7, 6], [9, 5, 11]]))\n    assert_equal(5.8, candidate.call([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2 * n - 1)\nend",
    "  n = cost.size\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1..n-1\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  for i in 1..n-1\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  for i in 1..n-1\n    for j in 1..n-1\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n-1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2.0 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n  end\n  (1...n).each do |i|\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2.0 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i-1] + cost[0][i]\n    dp[i][0] = dp[i-1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i-1][j], dp[i][j-1]].max + cost[i][j]\n    end\n  end\n  dp[n-1][n-1] / (2*n-1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  # Write your code here\n  # To print results to the standard output you can use puts\n  # Example: puts \"Hello world!\"\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2.0 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend",
    "  # Write your code here\n  # To print results to the standard output you can use puts\n  # Example: puts \"Hello world!\"\n  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  for i in 1...n\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  for i in 1...n\n    for j in 1...n\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1).to_f\nend",
    "  n = cost.length\n  dp = Array.new(n) { Array.new(n, 0) }\n  dp[0][0] = cost[0][0]\n  (1...n).each do |i|\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    dp[0][i] = dp[0][i - 1] + cost[0][i]\n  end\n  (1...n).each do |i|\n    (1...n).each do |j|\n      dp[i][j] = [dp[i - 1][j], dp[i][j - 1]].max + cost[i][j]\n    end\n  end\n  dp[n - 1][n - 1] / (2 * n - 1)\nend"
  ]
}